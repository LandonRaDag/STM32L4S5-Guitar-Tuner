
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007054  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007214  08007214  00008214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c8  080072c8  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d0  080072d0  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072d4  080072d4  000082d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080072d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000005c  08007334  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08007334  0000943c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b814  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003036  00000000  00000000  000248a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  000278d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001228  00000000  00000000  00029028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df83  00000000  00000000  0002a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1d9  00000000  00000000  000581d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001210ec  00000000  00000000  000733ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00194498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b0  00000000  00000000  001944dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0019ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080071fc 	.word	0x080071fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	080071fc 	.word	0x080071fc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <inputJack_Init>:
 *
 */

#include "input_jack.h"

void inputJack_Init(ADC_HandleTypeDef *hadc) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f001 fa1d 	bl	80019e8 <HAL_ADC_Start>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <inputJack_getValue>:

uint32_t inputJack_getValue(ADC_HandleTypeDef *hadc) {
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
    return HAL_ADC_GetValue(hadc);
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f001 fa75 	bl	8001aae <HAL_ADC_GetValue>
 80005c4:	4603      	mov	r3, r0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <inputJack_UARTValue>:

void inputJack_UARTValue(ADC_HandleTypeDef *hadc, UART_HandleTypeDef *huart) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09c      	sub	sp, #112	@ 0x70
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    int adcValue = inputJack_getValue(hadc);
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff ffeb 	bl	80005b6 <inputJack_getValue>
 80005e0:	4603      	mov	r3, r0
 80005e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    char jackMsg[100];
    sprintf(jackMsg, "ADC Value: %d\r\n", adcValue);
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <inputJack_UARTValue+0x4c>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f006 f965 	bl	80068bc <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)jackMsg, strlen(jackMsg), 1000);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe02 	bl	8000200 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f107 0108 	add.w	r1, r7, #8
 8000604:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000608:	6838      	ldr	r0, [r7, #0]
 800060a:	f005 faab 	bl	8005b64 <HAL_UART_Transmit>
    HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	@ 0x64
 8000610:	f000 fe92 	bl	8001338 <HAL_Delay>
}
 8000614:	bf00      	nop
 8000616:	3770      	adds	r7, #112	@ 0x70
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	08007214 	.word	0x08007214

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fe13 	bl	800124e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f822 	bl	8000670 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800062c:	f000 f872 	bl	8000714 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fa62 	bl	8000af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000634:	f000 fa36 	bl	8000aa4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000638:	f000 f89c 	bl	8000774 <MX_ADC1_Init>
  MX_DAC1_Init();
 800063c:	f000 f8fe 	bl	800083c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000640:	f000 f996 	bl	8000970 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f9e2 	bl	8000a0c <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8000648:	f000 f92c 	bl	80008a4 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <main+0x44>)
 800064e:	f004 fde9 	bl	8005224 <HAL_TIM_Base_Start>
  inputJack_Init(&hadc1);
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <main+0x48>)
 8000654:	f7ff ffa4 	bl	80005a0 <inputJack_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		inputJack_UARTValue(&hadc1, &huart1);
 8000658:	4904      	ldr	r1, [pc, #16]	@ (800066c <main+0x4c>)
 800065a:	4803      	ldr	r0, [pc, #12]	@ (8000668 <main+0x48>)
 800065c:	f7ff ffb8 	bl	80005d0 <inputJack_UARTValue>
 8000660:	e7fa      	b.n	8000658 <main+0x38>
 8000662:	bf00      	nop
 8000664:	200001e0 	.word	0x200001e0
 8000668:	20000078 	.word	0x20000078
 800066c:	2000022c 	.word	0x2000022c

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	@ 0x58
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	@ 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f006 f93c 	bl	80068fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000692:	2000      	movs	r0, #0
 8000694:	f003 f8da 	bl	800384c <HAL_PWREx_ControlVoltageScaling>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800069e:	f000 fa85 	bl	8000bac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006a2:	2310      	movs	r3, #16
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ae:	2360      	movs	r3, #96	@ 0x60
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b6:	2301      	movs	r3, #1
 80006b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006be:	233c      	movs	r3, #60	@ 0x3c
 80006c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f95e 	bl	8003994 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006de:	f000 fa65 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fd64 	bl	80041c8 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000706:	f000 fa51 	bl	8000bac <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3758      	adds	r7, #88	@ 0x58
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0a6      	sub	sp, #152	@ 0x98
 8000718:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2294      	movs	r2, #148	@ 0x94
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f006 f8eb 	bl	80068fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8000726:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800072a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800072c:	2300      	movs	r3, #0
 800072e:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000730:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000738:	2301      	movs	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000740:	2318      	movs	r3, #24
 8000742:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <PeriphCommonClock_Config+0x5c>)
 8000752:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fff4 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000762:	f000 fa23 	bl	8000bac <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3798      	adds	r7, #152	@ 0x98
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	01010000 	.word	0x01010000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800078a:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <MX_ADC1_Init+0xbc>)
 800078c:	4a29      	ldr	r2, [pc, #164]	@ (8000834 <MX_ADC1_Init+0xc0>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <MX_ADC1_Init+0xbc>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <MX_ADC1_Init+0xbc>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a2:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ae:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007bc:	2201      	movs	r2, #1
 80007be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ea:	4811      	ldr	r0, [pc, #68]	@ (8000830 <MX_ADC1_Init+0xbc>)
 80007ec:	f000 ffb6 	bl	800175c <HAL_ADC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007f6:	f000 f9d9 	bl	8000bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_ADC1_Init+0xc4>)
 80007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fe:	2306      	movs	r3, #6
 8000800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000806:	237f      	movs	r3, #127	@ 0x7f
 8000808:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800080a:	2304      	movs	r3, #4
 800080c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	@ (8000830 <MX_ADC1_Init+0xbc>)
 8000818:	f001 fb28 	bl	8001e6c <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000822:	f000 f9c3 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000078 	.word	0x20000078
 8000834:	50040000 	.word	0x50040000
 8000838:	80000001 	.word	0x80000001

0800083c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2228      	movs	r2, #40	@ 0x28
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f006 f857 	bl	80068fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_DAC1_Init+0x60>)
 8000850:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <MX_DAC1_Init+0x64>)
 8000852:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000854:	4811      	ldr	r0, [pc, #68]	@ (800089c <MX_DAC1_Init+0x60>)
 8000856:	f002 f8ce 	bl	80029f6 <HAL_DAC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000860:	f000 f9a4 	bl	8000bac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000868:	230a      	movs	r3, #10
 800086a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800086c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_DAC1_Init+0x60>)
 8000886:	f002 f8d9 	bl	8002a3c <HAL_DAC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f98c 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000e0 	.word	0x200000e0
 80008a0:	40007400 	.word	0x40007400

080008a4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000960 <MX_DFSDM1_Init+0xbc>)
 80008ac:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = DISABLE;
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = DISABLE;
 80008ba:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 1;
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 80008d2:	4822      	ldr	r0, [pc, #136]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008d4:	f002 fabe 	bl	8002e54 <HAL_DFSDM_FilterInit>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 80008de:	f000 f965 	bl	8000bac <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80008e2:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008e4:	4a20      	ldr	r2, [pc, #128]	@ (8000968 <MX_DFSDM1_Init+0xc4>)
 80008e6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 100;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008f8:	2264      	movs	r2, #100	@ 0x64
 80008fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000916:	2204      	movs	r2, #4
 8000918:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000922:	2201      	movs	r2, #1
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000934:	f002 f9ce 	bl	8002cd4 <HAL_DFSDM_ChannelInit>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800093e:	f000 f935 	bl	8000bac <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000942:	2201      	movs	r2, #1
 8000944:	4909      	ldr	r1, [pc, #36]	@ (800096c <MX_DFSDM1_Init+0xc8>)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 8000948:	f002 fb5e 	bl	8003008 <HAL_DFSDM_FilterConfigRegChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000952:	f000 f92b 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000154 	.word	0x20000154
 8000960:	40016200 	.word	0x40016200
 8000964:	200001a8 	.word	0x200001a8
 8000968:	40016040 	.word	0x40016040
 800096c:	00020004 	.word	0x00020004

08000970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_TIM2_Init+0x98>)
 8000990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_TIM2_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_TIM2_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_TIM2_Init+0x98>)
 80009a4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_TIM2_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_TIM2_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b6:	4814      	ldr	r0, [pc, #80]	@ (8000a08 <MX_TIM2_Init+0x98>)
 80009b8:	f004 fbdc 	bl	8005174 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009c2:	f000 f8f3 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_TIM2_Init+0x98>)
 80009d4:	f004 fd95 	bl	8005502 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009de:	f000 f8e5 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009e2:	2320      	movs	r3, #32
 80009e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_TIM2_Init+0x98>)
 80009f0:	f004 ffc2 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009fa:	f000 f8d7 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001e0 	.word	0x200001e0

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a56:	f005 f835 	bl	8005ac4 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f8a4 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a68:	f005 fe5e 	bl	8006728 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f89b 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f005 fe93 	bl	80067a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f892 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a8a:	f005 fe14 	bl	80066b6 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f88a 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000022c 	.word	0x2000022c
 8000aa0:	40013800 	.word	0x40013800

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_DMA_Init+0x50>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aae:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <MX_DMA_Init+0x50>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_DMA_Init+0x50>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_DMA_Init+0x50>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <MX_DMA_Init+0x50>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_DMA_Init+0x50>)
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	200b      	movs	r0, #11
 8000ae0:	f001 ff53 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae4:	200b      	movs	r0, #11
 8000ae6:	f001 ff6c 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_GPIO_Init+0xac>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <MX_GPIO_Init+0xb0>)
 8000b86:	f002 fc8b 	bl	80034a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2028      	movs	r0, #40	@ 0x28
 8000b90:	f001 fefb 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b94:	2028      	movs	r0, #40	@ 0x28
 8000b96:	f001 ff14 	bl	80029c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000800 	.word	0x48000800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <HAL_ADC_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_ADC_MspInit+0x88>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <HAL_ADC_MspInit+0x88>)
 8000c28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_ADC_MspInit+0x88>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <HAL_ADC_MspInit+0x88>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <HAL_ADC_MspInit+0x88>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_ADC_MspInit+0x88>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c56:	230b      	movs	r3, #11
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <HAL_ADC_MspInit+0x8c>)
 8000c66:	f002 fc1b 	bl	80034a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2012      	movs	r0, #18
 8000c70:	f001 fe8b 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c74:	2012      	movs	r0, #18
 8000c76:	f001 fea4 	bl	80029c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	50040000 	.word	0x50040000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000800 	.word	0x48000800

08000c90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a2b      	ldr	r2, [pc, #172]	@ (8000d5c <HAL_DAC_MspInit+0xcc>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d14f      	bne.n	8000d52 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d60 <HAL_DAC_MspInit+0xd0>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d60 <HAL_DAC_MspInit+0xd0>)
 8000cb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b28      	ldr	r3, [pc, #160]	@ (8000d60 <HAL_DAC_MspInit+0xd0>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <HAL_DAC_MspInit+0xd0>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a24      	ldr	r2, [pc, #144]	@ (8000d60 <HAL_DAC_MspInit+0xd0>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <HAL_DAC_MspInit+0xd0>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f002 fbd2 	bl	80034a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8000d68 <HAL_DAC_MspInit+0xd8>)
 8000d00:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d04:	2206      	movs	r2, #6
 8000d06:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d16:	2280      	movs	r2, #128	@ 0x80
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000d36:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d38:	f002 f9f8 	bl	800312c <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000d42:	f7ff ff33 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <HAL_DAC_MspInit+0xd4>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	@ 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40007400 	.word	0x40007400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	200000f4 	.word	0x200000f4
 8000d68:	40020008 	.word	0x40020008

08000d6c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2294      	movs	r2, #148	@ 0x94
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 fdb5 	bl	80068fc <memset>
  if(DFSDM1_Init == 0)
 8000d92:	4b3b      	ldr	r3, [pc, #236]	@ (8000e80 <HAL_DFSDM_FilterMspInit+0x114>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d16e      	bne.n	8000e78 <HAL_DFSDM_FilterMspInit+0x10c>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fcc7 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_DFSDM_FilterMspInit+0x54>
    {
      Error_Handler();
 8000dbc:	f7ff fef6 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <HAL_DFSDM_FilterMspInit+0x118>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <HAL_DFSDM_FilterMspInit+0x118>)
 8000dc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <HAL_DFSDM_FilterMspInit+0x118>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10b      	bne.n	8000dea <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000dd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dde:	4b2a      	ldr	r3, [pc, #168]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a26      	ldr	r2, [pc, #152]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e32:	2306      	movs	r3, #6
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <HAL_DFSDM_FilterMspInit+0x120>)
 8000e40:	f002 fb2e 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e66:	4619      	mov	r1, r3
 8000e68:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <HAL_DFSDM_FilterMspInit+0x124>)
 8000e6a:	f002 fb19 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <HAL_DFSDM_FilterMspInit+0x114>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a02      	ldr	r2, [pc, #8]	@ (8000e80 <HAL_DFSDM_FilterMspInit+0x114>)
 8000e76:	6013      	str	r3, [r2, #0]
  }

}
 8000e78:	bf00      	nop
 8000e7a:	37c0      	adds	r7, #192	@ 0xc0
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200002c4 	.word	0x200002c4
 8000e84:	200002c0 	.word	0x200002c0
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48001000 	.word	0x48001000

08000e94 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b0      	sub	sp, #192	@ 0xc0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	2294      	movs	r2, #148	@ 0x94
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f005 fd21 	bl	80068fc <memset>
  if(DFSDM1_Init == 0)
 8000eba:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d16e      	bne.n	8000fa0 <HAL_DFSDM_ChannelMspInit+0x10c>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fc33 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_DFSDM_ChannelMspInit+0x54>
    {
      Error_Handler();
 8000ee4:	f7ff fe62 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <HAL_DFSDM_ChannelMspInit+0x118>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a2f      	ldr	r2, [pc, #188]	@ (8000fac <HAL_DFSDM_ChannelMspInit+0x118>)
 8000ef0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <HAL_DFSDM_ChannelMspInit+0x118>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10b      	bne.n	8000f12 <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000efa:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efe:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a26      	ldr	r2, [pc, #152]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f42:	2304      	movs	r3, #4
 8000f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f64:	4619      	mov	r1, r3
 8000f66:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <HAL_DFSDM_ChannelMspInit+0x120>)
 8000f68:	f002 fa9a 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f84:	2306      	movs	r3, #6
 8000f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <HAL_DFSDM_ChannelMspInit+0x124>)
 8000f92:	f002 fa85 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a02      	ldr	r2, [pc, #8]	@ (8000fa8 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000f9e:	6013      	str	r3, [r2, #0]
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	37c0      	adds	r7, #192	@ 0xc0
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200002c4 	.word	0x200002c4
 8000fac:	200002c0 	.word	0x200002c0
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	48001000 	.word	0x48001000

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fcc:	d113      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_TIM_Base_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_TIM_Base_MspInit+0x44>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_TIM_Base_MspInit+0x44>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	201c      	movs	r0, #28
 8000fec:	f001 fccd 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff0:	201c      	movs	r0, #28
 8000ff2:	f001 fce6 	bl	80029c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0ae      	sub	sp, #184	@ 0xb8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2294      	movs	r2, #148	@ 0x94
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fc69 	bl	80068fc <memset>
  if(huart->Instance==USART1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a21      	ldr	r2, [pc, #132]	@ (80010b4 <HAL_UART_MspInit+0xb0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d13a      	bne.n	80010aa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001034:	2301      	movs	r3, #1
 8001036:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001038:	2300      	movs	r3, #0
 800103a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fb7f 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800104c:	f7ff fdae 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_UART_MspInit+0xb4>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001054:	4a18      	ldr	r2, [pc, #96]	@ (80010b8 <HAL_UART_MspInit+0xb4>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105a:	6613      	str	r3, [r2, #96]	@ 0x60
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_UART_MspInit+0xb4>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_UART_MspInit+0xb4>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <HAL_UART_MspInit+0xb4>)
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_UART_MspInit+0xb4>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001080:	23c0      	movs	r3, #192	@ 0xc0
 8001082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001098:	2307      	movs	r3, #7
 800109a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_UART_MspInit+0xb8>)
 80010a6:	f002 f9fb 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010aa:	bf00      	nop
 80010ac:	37b8      	adds	r7, #184	@ 0xb8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <NMI_Handler+0x4>

080010c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <MemManage_Handler+0x4>

080010d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001116:	f000 f8ef 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <DMA1_Channel1_IRQHandler+0x10>)
 8001126:	f002 f8a9 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000f4 	.word	0x200000f4

08001134 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <ADC1_IRQHandler+0x10>)
 800113a:	f000 fcc5 	bl	8001ac8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000078 	.word	0x20000078

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f004 f8d1 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001e0 	.word	0x200001e0

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001160:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001164:	f002 fb2e 	bl	80037c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f005 fbb6 	bl	800690c <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200a0000 	.word	0x200a0000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	200002c8 	.word	0x200002c8
 80011d4:	20000440 	.word	0x20000440

080011d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001200:	f7ff ffea 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f005 fb75 	bl	8006918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff f9f7 	bl	8000620 <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001234:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001240:	080072d8 	.word	0x080072d8
  ldr r2, =_sbss
 8001244:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001248:	2000043c 	.word	0x2000043c

0800124c <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <AES_IRQHandler>

0800124e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f001 fb8b 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f80e 	bl	8001280 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	e001      	b.n	8001274 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001270:	f7ff fca2 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001274:	79fb      	ldrb	r3, [r7, #7]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_InitTick+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fb97 	bl	80029de <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d809      	bhi.n	80012d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f001 fb61 	bl	800298a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_InitTick+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e004      	b.n	80012e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e001      	b.n	80012e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	200002cc 	.word	0x200002cc

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200002cc 	.word	0x200002cc

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008

08001380 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3360      	adds	r3, #96	@ 0x60
 80013fa:	461a      	mov	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <LL_ADC_SetOffset+0x44>)
 800140a:	4013      	ands	r3, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	4313      	orrs	r3, r2
 8001418:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	03fff000 	.word	0x03fff000

08001430 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3360      	adds	r3, #96	@ 0x60
 800143e:	461a      	mov	r2, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3360      	adds	r3, #96	@ 0x60
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	431a      	orrs	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001486:	bf00      	nop
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	615a      	str	r2, [r3, #20]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014de:	b480      	push	{r7}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3330      	adds	r3, #48	@ 0x30
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	4413      	add	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	211f      	movs	r1, #31
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	0e9b      	lsrs	r3, r3, #26
 8001516:	f003 011f 	and.w	r1, r3, #31
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3314      	adds	r3, #20
 800156c:	461a      	mov	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	0e5b      	lsrs	r3, r3, #25
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	0d1b      	lsrs	r3, r3, #20
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2107      	movs	r1, #7
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	401a      	ands	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	0d1b      	lsrs	r3, r3, #20
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0318 	and.w	r3, r3, #24
 80015d6:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015d8:	40d9      	lsrs	r1, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	400b      	ands	r3, r1
 80015de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e2:	431a      	orrs	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	0007ffff 	.word	0x0007ffff

080015fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800160c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6093      	str	r3, [r2, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001634:	d101      	bne.n	800163a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800165c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001684:	d101      	bne.n	800168a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <LL_ADC_IsEnabled+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_ADC_IsEnabled+0x1a>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016fa:	f043 0204 	orr.w	r2, r3, #4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b04      	cmp	r3, #4
 8001720:	d101      	bne.n	8001726 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b08      	cmp	r3, #8
 8001746:	d101      	bne.n	800174c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e129      	b.n	80019ca <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fa3b 	bl	8000c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff3f 	bl	8001620 <LL_ADC_IsDeepPowerDownEnabled>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff25 	bl	80015fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff5a 	bl	8001670 <LL_ADC_IsInternalRegulatorEnabled>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff3e 	bl	8001648 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017cc:	4b81      	ldr	r3, [pc, #516]	@ (80019d4 <HAL_ADC_Init+0x278>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	4a81      	ldr	r2, [pc, #516]	@ (80019d8 <HAL_ADC_Init+0x27c>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	3301      	adds	r3, #1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017e0:	e002      	b.n	80017e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f9      	bne.n	80017e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff3c 	bl	8001670 <LL_ADC_IsInternalRegulatorEnabled>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	f043 0210 	orr.w	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180e:	f043 0201 	orr.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff75 	bl	800170e <LL_ADC_REG_IsConversionOngoing>
 8001824:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80c2 	bne.w	80019b8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80be 	bne.w	80019b8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001844:	f043 0202 	orr.w	r2, r3, #2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff35 	bl	80016c0 <LL_ADC_IsEnabled>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800185c:	485f      	ldr	r0, [pc, #380]	@ (80019dc <HAL_ADC_Init+0x280>)
 800185e:	f7ff ff2f 	bl	80016c0 <LL_ADC_IsEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4619      	mov	r1, r3
 800186e:	485c      	ldr	r0, [pc, #368]	@ (80019e0 <HAL_ADC_Init+0x284>)
 8001870:	f7ff fd86 	bl	8001380 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e5b      	ldrb	r3, [r3, #25]
 8001878:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800187e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001884:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800188a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d106      	bne.n	80018b0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	3b01      	subs	r3, #1
 80018a8:	045b      	lsls	r3, r3, #17
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <HAL_ADC_Init+0x288>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	69b9      	ldr	r1, [r7, #24]
 80018dc:	430b      	orrs	r3, r1
 80018de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff25 	bl	8001734 <LL_ADC_INJ_IsConversionOngoing>
 80018ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d140      	bne.n	8001974 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d13d      	bne.n	8001974 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001902:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800190a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800191a:	f023 0306 	bic.w	r3, r3, #6
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	430b      	orrs	r3, r1
 8001926:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800192e:	2b01      	cmp	r3, #1
 8001930:	d118      	bne.n	8001964 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001954:	430a      	orrs	r2, r1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	e007      	b.n	8001974 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10c      	bne.n	8001996 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f023 010f 	bic.w	r1, r3, #15
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
 8001994:	e007      	b.n	80019a6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 020f 	bic.w	r2, r2, #15
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80019b6:	e007      	b.n	80019c8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	f043 0210 	orr.w	r2, r3, #16
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000
 80019d8:	053e2d63 	.word	0x053e2d63
 80019dc:	50040000 	.word	0x50040000
 80019e0:	50040300 	.word	0x50040300
 80019e4:	fff0c007 	.word	0xfff0c007

080019e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe8a 	bl	800170e <LL_ADC_REG_IsConversionOngoing>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d14f      	bne.n	8001aa0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Start+0x26>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e04b      	b.n	8001aa6 <HAL_ADC_Start+0xbe>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fe24 	bl	8002664 <ADC_Enable>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d137      	bne.n	8001a96 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a46:	d106      	bne.n	8001a56 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	f023 0206 	bic.w	r2, r3, #6
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	221c      	movs	r2, #28
 8001a62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe29 	bl	80016e6 <LL_ADC_REG_StartConversion>
 8001a94:	e006      	b.n	8001aa4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001a9e:	e001      	b.n	8001aa4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d017      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x56>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d012      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b08:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fe55 	bl	80027c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x6a>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05e      	beq.n	8001bfa <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d059      	beq.n	8001bfa <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fca8 	bl	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03e      	beq.n	8001bec <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d135      	bne.n	8001bec <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d12e      	bne.n	8001bec <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fdbb 	bl	800170e <LL_ADC_REG_IsConversionOngoing>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d11a      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020c 	bic.w	r2, r2, #12
 8001bac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d112      	bne.n	8001bec <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bd2:	e00b      	b.n	8001bec <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f043 0210 	orr.w	r2, r3, #16
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f91f 	bl	8001e30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x146>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d072      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06d      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fc79 	bl	8001536 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fc34 	bl	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c50:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d047      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x1b2>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d03f      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d13a      	bne.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c84:	2b40      	cmp	r3, #64	@ 0x40
 8001c86:	d133      	bne.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12e      	bne.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fd4c 	bl	8001734 <LL_ADC_INJ_IsConversionOngoing>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11a      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001cb0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d112      	bne.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cd6:	e00b      	b.n	8001cf0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	f043 0210 	orr.w	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fd3d 	bl	8002770 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2260      	movs	r2, #96	@ 0x60
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d011      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x264>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f890 	bl	8001e44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d012      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x294>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fd23 	bl	8002798 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x2c4>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fd15 	bl	80027ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d02a      	beq.n	8001dec <HAL_ADC_IRQHandler+0x324>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d025      	beq.n	8001dec <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e008      	b.n	8001dc0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10e      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f83a 	bl	8001e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2210      	movs	r2, #16
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d018      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x360>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	f043 0208 	orr.w	r2, r3, #8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e20:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fcae 	bl	8002784 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x22>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e3d5      	b.n	800263a <HAL_ADC_ConfigChannel+0x7ce>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fc37 	bl	800170e <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 83ba 	bne.w	800261c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d824      	bhi.n	8001f02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	3b02      	subs	r3, #2
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d81b      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x8e>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08001ee1 	.word	0x08001ee1
 8001ed0:	08001ee9 	.word	0x08001ee9
 8001ed4:	08001ef1 	.word	0x08001ef1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ed8:	230c      	movs	r3, #12
 8001eda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ede:	e010      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ee6:	e00c      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ee8:	2318      	movs	r3, #24
 8001eea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eee:	e008      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ef8:	e003      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001efa:	2306      	movs	r3, #6
 8001efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f10:	f7ff fae5 	bl	80014de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fbf8 	bl	800170e <LL_ADC_REG_IsConversionOngoing>
 8001f1e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc04 	bl	8001734 <LL_ADC_INJ_IsConversionOngoing>
 8001f2c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 81bf 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 81ba 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f4c:	d10f      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7ff faff 	bl	800155c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa93 	bl	8001492 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f6c:	e00e      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f7ff faee 	bl	800155c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa83 	bl	8001492 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	08db      	lsrs	r3, r3, #3
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d00a      	beq.n	8001fc4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6919      	ldr	r1, [r3, #16]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fbe:	f7ff fa13 	bl	80013e8 <LL_ADC_SetOffset>
 8001fc2:	e179      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fa30 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x184>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fa25 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	e01e      	b.n	800202e <HAL_ADC_ConfigChannel+0x1c2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fa1a 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800200e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002012:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e004      	b.n	800202c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x1da>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	e018      	b.n	8002078 <HAL_ADC_ConfigChannel+0x20c>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800205a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800205e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e004      	b.n	8002078 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800206e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002078:	429a      	cmp	r2, r3
 800207a:	d106      	bne.n	800208a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f9e9 	bl	800145c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f9cd 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x24a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f9c2 	bl	8001430 <LL_ADC_GetOffsetChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	e01e      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x288>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2101      	movs	r1, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f9b7 	bl	8001430 <LL_ADC_GetOffsetChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80020d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80020dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e004      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80020e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_ConfigChannel+0x2a0>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	e018      	b.n	800213e <HAL_ADC_ConfigChannel+0x2d2>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002120:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e004      	b.n	800213e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800213e:	429a      	cmp	r2, r3
 8002140:	d106      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f986 	bl	800145c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2102      	movs	r1, #2
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f96a 	bl	8001430 <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <HAL_ADC_ConfigChannel+0x310>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2102      	movs	r1, #2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f95f 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	f003 021f 	and.w	r2, r3, #31
 800217a:	e01e      	b.n	80021ba <HAL_ADC_ConfigChannel+0x34e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2102      	movs	r1, #2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f954 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800219a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800219e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80021a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e004      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80021ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x366>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	e014      	b.n	80021fc <HAL_ADC_ConfigChannel+0x390>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80021f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	2102      	movs	r1, #2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f927 	bl	800145c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2103      	movs	r1, #3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f90b 	bl	8001430 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_ADC_ConfigChannel+0x3ce>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2103      	movs	r1, #3
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f900 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	e017      	b.n	800226a <HAL_ADC_ConfigChannel+0x3fe>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2103      	movs	r1, #3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f8f5 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002254:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002260:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x416>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	e011      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x43a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002292:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800229e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d106      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	2103      	movs	r1, #3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f8d2 	bl	800145c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f9ff 	bl	80016c0 <LL_ADC_IsEnabled>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 813f 	bne.w	8002548 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff f96c 	bl	80015b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a8e      	ldr	r2, [pc, #568]	@ (800251c <HAL_ADC_ConfigChannel+0x6b0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 8130 	bne.w	8002548 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x4a4>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2b09      	cmp	r3, #9
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e019      	b.n	8002344 <HAL_ADC_ConfigChannel+0x4d8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800231e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002320:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e003      	b.n	8002334 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800232c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2b09      	cmp	r3, #9
 800233c:	bf94      	ite	ls
 800233e:	2301      	movls	r3, #1
 8002340:	2300      	movhi	r3, #0
 8002342:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002344:	2b00      	cmp	r3, #0
 8002346:	d079      	beq.n	800243c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002350:	2b00      	cmp	r3, #0
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x4f8>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	3301      	adds	r3, #1
 800235c:	069b      	lsls	r3, r3, #26
 800235e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002362:	e015      	b.n	8002390 <HAL_ADC_ConfigChannel+0x524>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002374:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800237c:	2320      	movs	r3, #32
 800237e:	e003      	b.n	8002388 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	069b      	lsls	r3, r3, #26
 800238c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x544>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	3301      	adds	r3, #1
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	e017      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x574>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80023be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80023c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e003      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80023cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	ea42 0103 	orr.w	r1, r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x59a>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	051b      	lsls	r3, r3, #20
 8002404:	e018      	b.n	8002438 <HAL_ADC_ConfigChannel+0x5cc>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002416:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e003      	b.n	800242a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3301      	adds	r3, #1
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002438:	430b      	orrs	r3, r1
 800243a:	e080      	b.n	800253e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x5ec>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	3301      	adds	r3, #1
 8002450:	069b      	lsls	r3, r3, #26
 8002452:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002456:	e015      	b.n	8002484 <HAL_ADC_ConfigChannel+0x618>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800246a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	069b      	lsls	r3, r3, #26
 8002480:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x638>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	e017      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x668>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	61bb      	str	r3, [r7, #24]
  return result;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e003      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	ea42 0103 	orr.w	r1, r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x694>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	3b1e      	subs	r3, #30
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	e01d      	b.n	800253c <HAL_ADC_ConfigChannel+0x6d0>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	60fb      	str	r3, [r7, #12]
  return result;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d103      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e005      	b.n	8002528 <HAL_ADC_ConfigChannel+0x6bc>
 800251c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f003 021f 	and.w	r2, r3, #31
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	3b1e      	subs	r3, #30
 8002536:	051b      	lsls	r3, r3, #20
 8002538:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002542:	4619      	mov	r1, r3
 8002544:	f7ff f80a 	bl	800155c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_ADC_ConfigChannel+0x7d8>)
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d06c      	beq.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002554:	483c      	ldr	r0, [pc, #240]	@ (8002648 <HAL_ADC_ConfigChannel+0x7dc>)
 8002556:	f7fe ff39 	bl	80013cc <LL_ADC_GetCommonPathInternalCh>
 800255a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3a      	ldr	r2, [pc, #232]	@ (800264c <HAL_ADC_ConfigChannel+0x7e0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d127      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800256c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d121      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a35      	ldr	r2, [pc, #212]	@ (8002650 <HAL_ADC_ConfigChannel+0x7e4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d157      	bne.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002582:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002586:	4619      	mov	r1, r3
 8002588:	482f      	ldr	r0, [pc, #188]	@ (8002648 <HAL_ADC_ConfigChannel+0x7dc>)
 800258a:	f7fe ff0c 	bl	80013a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_ADC_ConfigChannel+0x7e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	4a30      	ldr	r2, [pc, #192]	@ (8002658 <HAL_ADC_ConfigChannel+0x7ec>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b6:	e03a      	b.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a27      	ldr	r2, [pc, #156]	@ (800265c <HAL_ADC_ConfigChannel+0x7f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d113      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002650 <HAL_ADC_ConfigChannel+0x7e4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d12a      	bne.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e0:	4619      	mov	r1, r3
 80025e2:	4819      	ldr	r0, [pc, #100]	@ (8002648 <HAL_ADC_ConfigChannel+0x7dc>)
 80025e4:	f7fe fedf 	bl	80013a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e8:	e021      	b.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002660 <HAL_ADC_ConfigChannel+0x7f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d11c      	bne.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <HAL_ADC_ConfigChannel+0x7e4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800260a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800260e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	@ (8002648 <HAL_ADC_ConfigChannel+0x7dc>)
 8002616:	f7fe fec6 	bl	80013a6 <LL_ADC_SetCommonPathInternalCh>
 800261a:	e008      	b.n	800262e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002636:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800263a:	4618      	mov	r0, r3
 800263c:	37d8      	adds	r7, #216	@ 0xd8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	80080000 	.word	0x80080000
 8002648:	50040300 	.word	0x50040300
 800264c:	c7520000 	.word	0xc7520000
 8002650:	50040000 	.word	0x50040000
 8002654:	20000000 	.word	0x20000000
 8002658:	053e2d63 	.word	0x053e2d63
 800265c:	cb840000 	.word	0xcb840000
 8002660:	80000001 	.word	0x80000001

08002664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f823 	bl	80016c0 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d169      	bne.n	8002754 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <ADC_Enable+0xfc>)
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e055      	b.n	8002756 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fff2 	bl	8001698 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026b4:	482b      	ldr	r0, [pc, #172]	@ (8002764 <ADC_Enable+0x100>)
 80026b6:	f7fe fe89 	bl	80013cc <LL_ADC_GetCommonPathInternalCh>
 80026ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <ADC_Enable+0x104>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	4a28      	ldr	r2, [pc, #160]	@ (800276c <ADC_Enable+0x108>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026de:	e002      	b.n	80026e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fe18 	bl	8001320 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f2:	e028      	b.n	8002746 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe ffe1 	bl	80016c0 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe ffc5 	bl	8001698 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800270e:	f7fe fe07 	bl	8001320 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d914      	bls.n	8002746 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d00d      	beq.n	8002746 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e007      	b.n	8002756 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1cf      	bne.n	80026f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	8000003f 	.word	0x8000003f
 8002764:	50040300 	.word	0x50040300
 8002768:	20000000 	.word	0x20000000
 800276c:	053e2d63 	.word	0x053e2d63

08002770 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	@ (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	@ (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff3e 	bl	800281c <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff8e 	bl	80028c8 <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5d 	bl	8002874 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff31 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e014      	b.n	8002a32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	791b      	ldrb	r3, [r3, #4]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe f939 	bl	8000c90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_DAC_ConfigChannel+0x1c>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e137      	b.n	8002cc8 <HAL_DAC_ConfigChannel+0x28c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	f040 8081 	bne.w	8002b70 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fc57 	bl	8001320 <HAL_GetTick>
 8002a72:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d140      	bne.n	8002afc <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a7a:	e018      	b.n	8002aae <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a7c:	f7fe fc50 	bl	8001320 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d911      	bls.n	8002aae <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f043 0208 	orr.w	r2, r3, #8
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e10c      	b.n	8002cc8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1df      	bne.n	8002a7c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7fe fc3b 	bl	8001338 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	69d2      	ldr	r2, [r2, #28]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40
 8002acc:	e023      	b.n	8002b16 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ace:	f7fe fc27 	bl	8001320 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d90f      	bls.n	8002afc <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da0a      	bge.n	8002afc <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f043 0208 	orr.w	r2, r3, #8
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2203      	movs	r2, #3
 8002af6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0e5      	b.n	8002cc8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	dbe3      	blt.n	8002ace <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7fe fc16 	bl	8001338 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	69d2      	ldr	r2, [r2, #28]
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	ea02 0103 	and.w	r1, r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	21ff      	movs	r1, #255	@ 0xff
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	ea02 0103 	and.w	r1, r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d11d      	bne.n	8002bb4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	221f      	movs	r2, #31
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bba:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	400a      	ands	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c58:	d104      	bne.n	8002c64 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e018      	b.n	8002c96 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e00f      	b.n	8002c96 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002c76:	f001 fc6d 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 8002c7a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4a14      	ldr	r2, [pc, #80]	@ (8002cd0 <HAL_DAC_ConfigChannel+0x294>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d904      	bls.n	8002c8e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e003      	b.n	8002c96 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c94:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	22c0      	movs	r2, #192	@ 0xc0
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	04c4b400 	.word	0x04c4b400

08002cd4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0ac      	b.n	8002e40 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f9d2 	bl	8003094 <DFSDM_GetChannelFromInstance>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a55      	ldr	r2, [pc, #340]	@ (8002e48 <HAL_DFSDM_ChannelInit+0x174>)
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e09f      	b.n	8002e40 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe f8c7 	bl	8000e94 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002d06:	4b51      	ldr	r3, [pc, #324]	@ (8002e4c <HAL_DFSDM_ChannelInit+0x178>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_DFSDM_ChannelInit+0x178>)
 8002d0e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002d10:	4b4e      	ldr	r3, [pc, #312]	@ (8002e4c <HAL_DFSDM_ChannelInit+0x178>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d125      	bne.n	8002d64 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002d18:	4b4d      	ldr	r3, [pc, #308]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d22:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002d24:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4948      	ldr	r1, [pc, #288]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002d32:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a46      	ldr	r2, [pc, #280]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d38:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002d3c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d108      	bne.n	8002d58 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002d46:	4b42      	ldr	r3, [pc, #264]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	493f      	ldr	r1, [pc, #252]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002d58:	4b3d      	ldr	r3, [pc, #244]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e50 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d62:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002d72:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d82:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d88:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 020f 	bic.w	r2, r2, #15
 8002da0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002dc8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6899      	ldr	r1, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 0207 	and.w	r2, r2, #7
 8002df4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e20:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f930 	bl	8003094 <DFSDM_GetChannelFromInstance>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4904      	ldr	r1, [pc, #16]	@ (8002e48 <HAL_DFSDM_ChannelInit+0x174>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200002d4 	.word	0x200002d4
 8002e4c:	200002d0 	.word	0x200002d0
 8002e50:	40016000 	.word	0x40016000

08002e54 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ca      	b.n	8002ffc <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a66      	ldr	r2, [pc, #408]	@ (8003004 <HAL_DFSDM_FilterInit+0x1b0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d109      	bne.n	8002e84 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d003      	beq.n	8002e80 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0bb      	b.n	8002ffc <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fd ff65 	bl	8000d6c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8002eb0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7a1b      	ldrb	r3, [r3, #8]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d108      	bne.n	8002ecc <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e007      	b.n	8002edc <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002eda:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7a5b      	ldrb	r3, [r3, #9]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f14:	f023 0308 	bic.w	r3, r3, #8
 8002f18:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d108      	bne.n	8002f34 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7c1b      	ldrb	r3, [r3, #16]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0210 	orr.w	r2, r2, #16
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e007      	b.n	8002f5e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7c5b      	ldrb	r3, [r3, #17]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d108      	bne.n	8002f78 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0220 	orr.w	r2, r2, #32
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e007      	b.n	8002f88 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0220 	bic.w	r2, r2, #32
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8002f96:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8002f9a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6959      	ldr	r1, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002fae:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002fb6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7c1a      	ldrb	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40016100 	.word	0x40016100

08003008 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02e      	beq.n	8003080 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003028:	2bff      	cmp	r3, #255	@ 0xff
 800302a:	d029      	beq.n	8003080 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800303a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10d      	bne.n	8003062 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e00a      	b.n	8003078 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
 800307e:	e001      	b.n	8003084 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <DFSDM_GetChannelFromInstance+0x7c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d102      	bne.n	80030aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e02b      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <DFSDM_GetChannelFromInstance+0x80>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e024      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a17      	ldr	r2, [pc, #92]	@ (8003118 <DFSDM_GetChannelFromInstance+0x84>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d102      	bne.n	80030c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80030c0:	2302      	movs	r3, #2
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e01d      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <DFSDM_GetChannelFromInstance+0x88>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d102      	bne.n	80030d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80030ce:	2304      	movs	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e016      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <DFSDM_GetChannelFromInstance+0x8c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80030dc:	2305      	movs	r3, #5
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e00f      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003124 <DFSDM_GetChannelFromInstance+0x90>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d102      	bne.n	80030f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80030ea:	2306      	movs	r3, #6
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e008      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <DFSDM_GetChannelFromInstance+0x94>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d102      	bne.n	80030fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80030f8:	2307      	movs	r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e001      	b.n	8003102 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80030fe:	2303      	movs	r3, #3
 8003100:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40016000 	.word	0x40016000
 8003114:	40016020 	.word	0x40016020
 8003118:	40016040 	.word	0x40016040
 800311c:	40016080 	.word	0x40016080
 8003120:	400160a0 	.word	0x400160a0
 8003124:	400160c0 	.word	0x400160c0
 8003128:	400160e0 	.word	0x400160e0

0800312c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e08d      	b.n	800325a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <HAL_DMA_Init+0x138>)
 8003146:	429a      	cmp	r2, r3
 8003148:	d80f      	bhi.n	800316a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	4b45      	ldr	r3, [pc, #276]	@ (8003268 <HAL_DMA_Init+0x13c>)
 8003152:	4413      	add	r3, r2
 8003154:	4a45      	ldr	r2, [pc, #276]	@ (800326c <HAL_DMA_Init+0x140>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a42      	ldr	r2, [pc, #264]	@ (8003270 <HAL_DMA_Init+0x144>)
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
 8003168:	e00e      	b.n	8003188 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	4b40      	ldr	r3, [pc, #256]	@ (8003274 <HAL_DMA_Init+0x148>)
 8003172:	4413      	add	r3, r2
 8003174:	4a3d      	ldr	r2, [pc, #244]	@ (800326c <HAL_DMA_Init+0x140>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	009a      	lsls	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a3c      	ldr	r2, [pc, #240]	@ (8003278 <HAL_DMA_Init+0x14c>)
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8fe 	bl	80033dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031e8:	d102      	bne.n	80031f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003204:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d010      	beq.n	8003230 <HAL_DMA_Init+0x104>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b04      	cmp	r3, #4
 8003214:	d80c      	bhi.n	8003230 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f91e 	bl	8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	e008      	b.n	8003242 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40020407 	.word	0x40020407
 8003268:	bffdfff8 	.word	0xbffdfff8
 800326c:	cccccccd 	.word	0xcccccccd
 8003270:	40020000 	.word	0x40020000
 8003274:	bffdfbf8 	.word	0xbffdfbf8
 8003278:	40020400 	.word	0x40020400

0800327c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	f003 031c 	and.w	r3, r3, #28
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d026      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x7a>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d021      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	f003 021c 	and.w	r2, r3, #28
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	2104      	movs	r1, #4
 80032de:	fa01 f202 	lsl.w	r2, r1, r2
 80032e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d071      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032f4:	e06c      	b.n	80033d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f003 031c 	and.w	r3, r3, #28
 80032fe:	2202      	movs	r2, #2
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02e      	beq.n	8003368 <HAL_DMA_IRQHandler+0xec>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d029      	beq.n	8003368 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 020a 	bic.w	r2, r2, #10
 8003330:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f003 021c 	and.w	r2, r3, #28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2102      	movs	r1, #2
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d038      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003366:	e033      	b.n	80033d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	f003 031c 	and.w	r3, r3, #28
 8003370:	2208      	movs	r2, #8
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02a      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x156>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d025      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 020e 	bic.w	r2, r2, #14
 8003394:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f003 021c 	and.w	r2, r3, #28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
}
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d80a      	bhi.n	8003406 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033fc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6493      	str	r3, [r2, #72]	@ 0x48
 8003404:	e007      	b.n	8003416 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	009a      	lsls	r2, r3, #2
 800340e:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003410:	4413      	add	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3b08      	subs	r3, #8
 800341e:	4a0c      	ldr	r2, [pc, #48]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800342c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40020407 	.word	0x40020407
 800344c:	4002081c 	.word	0x4002081c
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	40020880 	.word	0x40020880

08003458 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a08      	ldr	r2, [pc, #32]	@ (800349c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800347a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3b01      	subs	r3, #1
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	1000823f 	.word	0x1000823f
 800349c:	40020940 	.word	0x40020940

080034a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ae:	e166      	b.n	800377e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8158 	beq.w	8003778 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d005      	beq.n	80034e0 <HAL_GPIO_Init+0x40>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d130      	bne.n	8003542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003516:	2201      	movs	r2, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0201 	and.w	r2, r3, #1
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b03      	cmp	r3, #3
 800354c:	d017      	beq.n	800357e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d123      	bne.n	80035d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	08da      	lsrs	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3208      	adds	r2, #8
 8003592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	08da      	lsrs	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3208      	adds	r2, #8
 80035cc:	6939      	ldr	r1, [r7, #16]
 80035ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80b2 	beq.w	8003778 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003614:	4b61      	ldr	r3, [pc, #388]	@ (800379c <HAL_GPIO_Init+0x2fc>)
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	4a60      	ldr	r2, [pc, #384]	@ (800379c <HAL_GPIO_Init+0x2fc>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003620:	4b5e      	ldr	r3, [pc, #376]	@ (800379c <HAL_GPIO_Init+0x2fc>)
 8003622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800362c:	4a5c      	ldr	r2, [pc, #368]	@ (80037a0 <HAL_GPIO_Init+0x300>)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	220f      	movs	r2, #15
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003656:	d02b      	beq.n	80036b0 <HAL_GPIO_Init+0x210>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a52      	ldr	r2, [pc, #328]	@ (80037a4 <HAL_GPIO_Init+0x304>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d025      	beq.n	80036ac <HAL_GPIO_Init+0x20c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a51      	ldr	r2, [pc, #324]	@ (80037a8 <HAL_GPIO_Init+0x308>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d01f      	beq.n	80036a8 <HAL_GPIO_Init+0x208>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a50      	ldr	r2, [pc, #320]	@ (80037ac <HAL_GPIO_Init+0x30c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d019      	beq.n	80036a4 <HAL_GPIO_Init+0x204>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a4f      	ldr	r2, [pc, #316]	@ (80037b0 <HAL_GPIO_Init+0x310>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_GPIO_Init+0x200>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a4e      	ldr	r2, [pc, #312]	@ (80037b4 <HAL_GPIO_Init+0x314>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00d      	beq.n	800369c <HAL_GPIO_Init+0x1fc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a4d      	ldr	r2, [pc, #308]	@ (80037b8 <HAL_GPIO_Init+0x318>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <HAL_GPIO_Init+0x1f8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a4c      	ldr	r2, [pc, #304]	@ (80037bc <HAL_GPIO_Init+0x31c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_GPIO_Init+0x1f4>
 8003690:	2307      	movs	r3, #7
 8003692:	e00e      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 8003694:	2308      	movs	r3, #8
 8003696:	e00c      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 8003698:	2306      	movs	r3, #6
 800369a:	e00a      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 800369c:	2305      	movs	r3, #5
 800369e:	e008      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e006      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 80036a4:	2303      	movs	r3, #3
 80036a6:	e004      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e002      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_GPIO_Init+0x212>
 80036b0:	2300      	movs	r3, #0
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	f002 0203 	and.w	r2, r2, #3
 80036b8:	0092      	lsls	r2, r2, #2
 80036ba:	4093      	lsls	r3, r2
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036c2:	4937      	ldr	r1, [pc, #220]	@ (80037a0 <HAL_GPIO_Init+0x300>)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036d0:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036f4:	4a32      	ldr	r2, [pc, #200]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800371e:	4a28      	ldr	r2, [pc, #160]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003724:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003748:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800374e:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003772:	4a13      	ldr	r2, [pc, #76]	@ (80037c0 <HAL_GPIO_Init+0x320>)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3301      	adds	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	f47f ae91 	bne.w	80034b0 <HAL_GPIO_Init+0x10>
  }
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010000 	.word	0x40010000
 80037a4:	48000400 	.word	0x48000400
 80037a8:	48000800 	.word	0x48000800
 80037ac:	48000c00 	.word	0x48000c00
 80037b0:	48001000 	.word	0x48001000
 80037b4:	48001400 	.word	0x48001400
 80037b8:	48001800 	.word	0x48001800
 80037bc:	48001c00 	.word	0x48001c00
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037ce:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037da:	4a05      	ldr	r2, [pc, #20]	@ (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f806 	bl	80037f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010400 	.word	0x40010400

080037f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381c:	d102      	bne.n	8003824 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800381e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003822:	e00b      	b.n	800383c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003832:	d102      	bne.n	800383a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003838:	e000      	b.n	800383c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800383a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40007000 	.word	0x40007000

0800384c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d141      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800385a:	4b4b      	ldr	r3, [pc, #300]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003866:	d131      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003868:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386e:	4a46      	ldr	r2, [pc, #280]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003878:	4b43      	ldr	r3, [pc, #268]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003880:	4a41      	ldr	r2, [pc, #260]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003888:	4b40      	ldr	r3, [pc, #256]	@ (800398c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2232      	movs	r2, #50	@ 0x32
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a3f      	ldr	r2, [pc, #252]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389e:	e002      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d102      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f2      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ba:	4b33      	ldr	r3, [pc, #204]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d158      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e057      	b.n	800397c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038dc:	e04d      	b.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e4:	d141      	bne.n	800396a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f2:	d131      	bne.n	8003958 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003904:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800390c:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003914:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2232      	movs	r2, #50	@ 0x32
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	0c9b      	lsrs	r3, r3, #18
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392a:	e002      	b.n	8003932 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393e:	d102      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f2      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003946:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003952:	d112      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e011      	b.n	800397c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003968:	e007      	b.n	800397a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800396a:	4b07      	ldr	r3, [pc, #28]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003972:	4a05      	ldr	r2, [pc, #20]	@ (8003988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003978:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40007000 	.word	0x40007000
 800398c:	20000000 	.word	0x20000000
 8003990:	431bde83 	.word	0x431bde83

08003994 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f000 bc08 	b.w	80041b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a8:	4b96      	ldr	r3, [pc, #600]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b2:	4b94      	ldr	r3, [pc, #592]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80e4 	beq.w	8003b92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4c>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	f040 808b 	bne.w	8003aee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 8087 	bne.w	8003aee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e0:	4b88      	ldr	r3, [pc, #544]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x64>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e3df      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	4b81      	ldr	r3, [pc, #516]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <HAL_RCC_OscConfig+0x7e>
 8003a08:	4b7e      	ldr	r3, [pc, #504]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a10:	e005      	b.n	8003a1e <HAL_RCC_OscConfig+0x8a>
 8003a12:	4b7c      	ldr	r3, [pc, #496]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d223      	bcs.n	8003a6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fdcc 	bl	80045c4 <RCC_SetFlashLatencyFromMSIRange>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e3c0      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a36:	4b73      	ldr	r3, [pc, #460]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a72      	ldr	r2, [pc, #456]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f043 0308 	orr.w	r3, r3, #8
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b70      	ldr	r3, [pc, #448]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	496d      	ldr	r1, [pc, #436]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a54:	4b6b      	ldr	r3, [pc, #428]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	4968      	ldr	r1, [pc, #416]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
 8003a68:	e025      	b.n	8003ab6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6a:	4b66      	ldr	r3, [pc, #408]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a65      	ldr	r2, [pc, #404]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b63      	ldr	r3, [pc, #396]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4960      	ldr	r1, [pc, #384]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a88:	4b5e      	ldr	r3, [pc, #376]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	495b      	ldr	r1, [pc, #364]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd8c 	bl	80045c4 <RCC_SetFlashLatencyFromMSIRange>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e380      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab6:	f000 fcc1 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b51      	ldr	r3, [pc, #324]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4950      	ldr	r1, [pc, #320]	@ (8003c08 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8003c0c <HAL_RCC_OscConfig+0x278>)
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c10 <HAL_RCC_OscConfig+0x27c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fbd0 	bl	8001280 <HAL_InitTick>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d052      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	e364      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d032      	beq.n	8003b5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003af6:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b02:	f7fd fc0d 	bl	8001320 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0a:	f7fd fc09 	bl	8001320 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e34d      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b1c:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b28:	4b36      	ldr	r3, [pc, #216]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a35      	ldr	r2, [pc, #212]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4930      	ldr	r1, [pc, #192]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b46:	4b2f      	ldr	r3, [pc, #188]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	492b      	ldr	r1, [pc, #172]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	e01a      	b.n	8003b92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b5c:	4b29      	ldr	r3, [pc, #164]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a28      	ldr	r2, [pc, #160]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fbda 	bl	8001320 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b70:	f7fd fbd6 	bl	8001320 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e31a      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b82:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1dc>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d073      	beq.n	8003c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x21c>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d063      	beq.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d15f      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e2f7      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_OscConfig+0x24c>
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e025      	b.n	8003c2c <HAL_RCC_OscConfig+0x298>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003be8:	d114      	bne.n	8003c14 <HAL_RCC_OscConfig+0x280>
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a05      	ldr	r2, [pc, #20]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a02      	ldr	r2, [pc, #8]	@ (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e013      	b.n	8003c2c <HAL_RCC_OscConfig+0x298>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08007224 	.word	0x08007224
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000004 	.word	0x20000004
 8003c14:	4ba0      	ldr	r3, [pc, #640]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a9f      	ldr	r2, [pc, #636]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b9d      	ldr	r3, [pc, #628]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a9c      	ldr	r2, [pc, #624]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fb74 	bl	8001320 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fb70 	bl	8001320 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	@ 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e2b4      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	4b92      	ldr	r3, [pc, #584]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x2a8>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fb60 	bl	8001320 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fb5c 	bl	8001320 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	@ 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e2a0      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	4b88      	ldr	r3, [pc, #544]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x2d0>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d060      	beq.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x310>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d116      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca4:	4b7c      	ldr	r3, [pc, #496]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_OscConfig+0x328>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e27d      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	4973      	ldr	r1, [pc, #460]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	e040      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d023      	beq.n	8003d22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cda:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6e      	ldr	r2, [pc, #440]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fb1b 	bl	8001320 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fd fb17 	bl	8001320 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e25b      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d00:	4b65      	ldr	r3, [pc, #404]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b62      	ldr	r3, [pc, #392]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	495f      	ldr	r1, [pc, #380]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	e018      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b5d      	ldr	r3, [pc, #372]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a5c      	ldr	r2, [pc, #368]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd faf7 	bl	8001320 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fd faf3 	bl	8001320 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e237      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d48:	4b53      	ldr	r3, [pc, #332]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03c      	beq.n	8003dda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d68:	4b4b      	ldr	r3, [pc, #300]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fd fad2 	bl	8001320 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d80:	f7fd face 	bl	8001320 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e212      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d92:	4b41      	ldr	r3, [pc, #260]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ef      	beq.n	8003d80 <HAL_RCC_OscConfig+0x3ec>
 8003da0:	e01b      	b.n	8003dda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da2:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da8:	4a3b      	ldr	r2, [pc, #236]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fd fab5 	bl	8001320 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fd fab1 	bl	8001320 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1f5      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dcc:	4b32      	ldr	r3, [pc, #200]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ef      	bne.n	8003dba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a6 	beq.w	8003f34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dec:	4b2a      	ldr	r3, [pc, #168]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e04:	4b24      	ldr	r3, [pc, #144]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e14:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d118      	bne.n	8003e52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e20:	4b1e      	ldr	r3, [pc, #120]	@ (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2c:	f7fd fa78 	bl	8001320 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e34:	f7fd fa74 	bl	8001320 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1b8      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d108      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4d8>
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e60:	4a0d      	ldr	r2, [pc, #52]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e6a:	e029      	b.n	8003ec0 <HAL_RCC_OscConfig+0x52c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d115      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x50c>
 8003e74:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e84:	4b04      	ldr	r3, [pc, #16]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a03      	ldr	r2, [pc, #12]	@ (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x52c>
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	4b9d      	ldr	r3, [pc, #628]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	4a9c      	ldr	r2, [pc, #624]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eb0:	4b99      	ldr	r3, [pc, #612]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb6:	4a98      	ldr	r2, [pc, #608]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d016      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fa2a 	bl	8001320 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fa26 	bl	8001320 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e168      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	4b8c      	ldr	r3, [pc, #560]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ed      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x53c>
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fa13 	bl	8001320 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd fa0f 	bl	8001320 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e151      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f14:	4b80      	ldr	r3, [pc, #512]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ed      	bne.n	8003efe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b7b      	ldr	r3, [pc, #492]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d03c      	beq.n	8003fba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f48:	4b73      	ldr	r3, [pc, #460]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f4e:	4a72      	ldr	r2, [pc, #456]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd f9e2 	bl	8001320 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f60:	f7fd f9de 	bl	8001320 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e122      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f72:	4b69      	ldr	r3, [pc, #420]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCC_OscConfig+0x5cc>
 8003f80:	e01b      	b.n	8003fba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f82:	4b65      	ldr	r3, [pc, #404]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f88:	4a63      	ldr	r2, [pc, #396]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fd f9c5 	bl	8001320 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f9a:	f7fd f9c1 	bl	8001320 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e105      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fac:	4b5a      	ldr	r3, [pc, #360]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ef      	bne.n	8003f9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80f9 	beq.w	80041b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f040 80cf 	bne.w	800416c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fce:	4b52      	ldr	r3, [pc, #328]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0203 	and.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d12c      	bne.n	800403c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	3b01      	subs	r3, #1
 8003fee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d123      	bne.n	800403c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d11b      	bne.n	800403c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d113      	bne.n	800403c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d109      	bne.n	800403c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d071      	beq.n	8004120 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d068      	beq.n	8004114 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004042:	4b35      	ldr	r3, [pc, #212]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800404e:	4b32      	ldr	r3, [pc, #200]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0ac      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800405e:	4b2e      	ldr	r3, [pc, #184]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2d      	ldr	r2, [pc, #180]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004064:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004068:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800406a:	f7fd f959 	bl	8001320 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004072:	f7fd f955 	bl	8001320 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e099      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004084:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004090:	4b21      	ldr	r3, [pc, #132]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	4b21      	ldr	r3, [pc, #132]	@ (800411c <HAL_RCC_OscConfig+0x788>)
 8004096:	4013      	ands	r3, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040a0:	3a01      	subs	r2, #1
 80040a2:	0112      	lsls	r2, r2, #4
 80040a4:	4311      	orrs	r1, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040aa:	0212      	lsls	r2, r2, #8
 80040ac:	4311      	orrs	r1, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0552      	lsls	r2, r2, #21
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	0652      	lsls	r2, r2, #25
 80040c4:	4311      	orrs	r1, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040ca:	06d2      	lsls	r2, r2, #27
 80040cc:	430a      	orrs	r2, r1
 80040ce:	4912      	ldr	r1, [pc, #72]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d4:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0f      	ldr	r2, [pc, #60]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ec:	f7fd f918 	bl	8001320 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd f914 	bl	8001320 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e058      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	4b04      	ldr	r3, [pc, #16]	@ (8004118 <HAL_RCC_OscConfig+0x784>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004112:	e050      	b.n	80041b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e04f      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
 8004118:	40021000 	.word	0x40021000
 800411c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004120:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d144      	bne.n	80041b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800412c:	4b24      	ldr	r3, [pc, #144]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004138:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a20      	ldr	r2, [pc, #128]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004144:	f7fd f8ec 	bl	8001320 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd f8e8 	bl	8001320 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e02c      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	4b18      	ldr	r3, [pc, #96]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x7b8>
 800416a:	e024      	b.n	80041b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d01f      	beq.n	80041b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 8004178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800417c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fd f8cf 	bl	8001320 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004186:	f7fd f8cb 	bl	8001320 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e00f      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	4905      	ldr	r1, [pc, #20]	@ (80041c0 <HAL_RCC_OscConfig+0x82c>)
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_RCC_OscConfig+0x830>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	60cb      	str	r3, [r1, #12]
 80041b0:	e001      	b.n	80041b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	feeefffc 	.word	0xfeeefffc

080041c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e11d      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b90      	ldr	r3, [pc, #576]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d910      	bls.n	8004210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 020f 	bic.w	r2, r3, #15
 80041f6:	498b      	ldr	r1, [pc, #556]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b89      	ldr	r3, [pc, #548]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e105      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b81      	ldr	r3, [pc, #516]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004228:	429a      	cmp	r2, r3
 800422a:	d908      	bls.n	800423e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b7e      	ldr	r3, [pc, #504]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	497b      	ldr	r1, [pc, #492]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d079      	beq.n	800433e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d11e      	bne.n	8004290 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	4b75      	ldr	r3, [pc, #468]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0dc      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004262:	f000 fa09 	bl	8004678 <RCC_GetSysClockFreqFromPLLSource>
 8004266:	4603      	mov	r3, r0
 8004268:	4a70      	ldr	r2, [pc, #448]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d946      	bls.n	80042fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800426e:	4b6e      	ldr	r3, [pc, #440]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d140      	bne.n	80042fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800427a:	4b6b      	ldr	r3, [pc, #428]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004282:	4a69      	ldr	r2, [pc, #420]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e035      	b.n	80042fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004298:	4b63      	ldr	r3, [pc, #396]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d115      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b9      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0ad      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c0:	4b59      	ldr	r3, [pc, #356]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0a5      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80042d0:	f000 f8b4 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4a55      	ldr	r2, [pc, #340]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d90f      	bls.n	80042fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042dc:	4b52      	ldr	r3, [pc, #328]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f0:	4a4d      	ldr	r2, [pc, #308]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042f8:	2380      	movs	r3, #128	@ 0x80
 80042fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 0203 	bic.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4947      	ldr	r1, [pc, #284]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fd f807 	bl	8001320 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004314:	e00a      	b.n	800432c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004316:	f7fd f803 	bl	8001320 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e077      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432c:	4b3e      	ldr	r3, [pc, #248]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 020c 	and.w	r2, r3, #12
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	429a      	cmp	r2, r3
 800433c:	d1eb      	bne.n	8004316 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b80      	cmp	r3, #128	@ 0x80
 8004342:	d105      	bne.n	8004350 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004344:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a37      	ldr	r2, [pc, #220]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800434a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800434e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004368:	429a      	cmp	r2, r3
 800436a:	d208      	bcs.n	800437e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	492b      	ldr	r1, [pc, #172]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437e:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d210      	bcs.n	80043ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438c:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 020f 	bic.w	r2, r3, #15
 8004394:	4923      	ldr	r1, [pc, #140]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439c:	4b21      	ldr	r3, [pc, #132]	@ (8004424 <HAL_RCC_ClockConfig+0x25c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e036      	b.n	800441c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	4918      	ldr	r1, [pc, #96]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d8:	4b13      	ldr	r3, [pc, #76]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4910      	ldr	r1, [pc, #64]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ec:	f000 f826 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	490c      	ldr	r1, [pc, #48]	@ (8004430 <HAL_RCC_ClockConfig+0x268>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <HAL_RCC_ClockConfig+0x26c>)
 800440a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800440c:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <HAL_RCC_ClockConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc ff35 	bl	8001280 <HAL_InitTick>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]

  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40022000 	.word	0x40022000
 8004428:	40021000 	.word	0x40021000
 800442c:	04c4b400 	.word	0x04c4b400
 8004430:	08007224 	.word	0x08007224
 8004434:	20000000 	.word	0x20000000
 8004438:	20000004 	.word	0x20000004

0800443c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	@ 0x24
 8004440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004454:	4b3b      	ldr	r3, [pc, #236]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x34>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d121      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d11e      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004470:	4b34      	ldr	r3, [pc, #208]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800447c:	4b31      	ldr	r3, [pc, #196]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e005      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800448c:	4b2d      	ldr	r3, [pc, #180]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004498:	4a2b      	ldr	r2, [pc, #172]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10d      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d102      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044b4:	4b25      	ldr	r3, [pc, #148]	@ (800454c <HAL_RCC_GetSysClockFreq+0x110>)
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e004      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044c0:	4b23      	ldr	r3, [pc, #140]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x114>)
 80044c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d134      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d003      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0xac>
 80044e0:	e005      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044e2:	4b1a      	ldr	r3, [pc, #104]	@ (800454c <HAL_RCC_GetSysClockFreq+0x110>)
 80044e4:	617b      	str	r3, [r7, #20]
      break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ea:	617b      	str	r3, [r7, #20]
      break;
 80044ec:	e002      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	617b      	str	r3, [r7, #20]
      break;
 80044f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f4:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	3301      	adds	r3, #1
 8004500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	fb03 f202 	mul.w	r2, r3, r2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	0e5b      	lsrs	r3, r3, #25
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	3301      	adds	r3, #1
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004534:	69bb      	ldr	r3, [r7, #24]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3724      	adds	r7, #36	@ 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	0800723c 	.word	0x0800723c
 800454c:	00f42400 	.word	0x00f42400
 8004550:	007a1200 	.word	0x007a1200

08004554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004558:	4b03      	ldr	r3, [pc, #12]	@ (8004568 <HAL_RCC_GetHCLKFreq+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000000 	.word	0x20000000

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004570:	f7ff fff0 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4904      	ldr	r1, [pc, #16]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	08007234 	.word	0x08007234

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800459c:	f7ff ffda 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0adb      	lsrs	r3, r3, #11
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4904      	ldr	r1, [pc, #16]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	08007234 	.word	0x08007234

080045c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045d0:	4b27      	ldr	r3, [pc, #156]	@ (8004670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045dc:	f7ff f916 	bl	800380c <HAL_PWREx_GetVoltageRange>
 80045e0:	6178      	str	r0, [r7, #20]
 80045e2:	e014      	b.n	800460e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e4:	4b22      	ldr	r3, [pc, #136]	@ (8004670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80045f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045fc:	f7ff f906 	bl	800380c <HAL_PWREx_GetVoltageRange>
 8004600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	4a1a      	ldr	r2, [pc, #104]	@ (8004670 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004614:	d10b      	bne.n	800462e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	d913      	bls.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004620:	d902      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004622:	2302      	movs	r3, #2
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e00d      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e00a      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b7f      	cmp	r3, #127	@ 0x7f
 8004632:	d902      	bls.n	800463a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004634:	2302      	movs	r3, #2
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	e004      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b70      	cmp	r3, #112	@ 0x70
 800463e:	d101      	bne.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004640:	2301      	movs	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 020f 	bic.w	r2, r3, #15
 800464c:	4909      	ldr	r1, [pc, #36]	@ (8004674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004654:	4b07      	ldr	r3, [pc, #28]	@ (8004674 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	429a      	cmp	r2, r3
 8004660:	d001      	beq.n	8004666 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	40022000 	.word	0x40022000

08004678 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800467e:	4b2d      	ldr	r3, [pc, #180]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d00b      	beq.n	80046a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d825      	bhi.n	80046e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d008      	beq.n	80046ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11f      	bne.n	80046e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80046a0:	4b25      	ldr	r3, [pc, #148]	@ (8004738 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046a2:	613b      	str	r3, [r7, #16]
    break;
 80046a4:	e01f      	b.n	80046e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80046a6:	4b25      	ldr	r3, [pc, #148]	@ (800473c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80046a8:	613b      	str	r3, [r7, #16]
    break;
 80046aa:	e01c      	b.n	80046e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046ac:	4b21      	ldr	r3, [pc, #132]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e005      	b.n	80046d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80046d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004740 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	613b      	str	r3, [r7, #16]
    break;
 80046de:	e002      	b.n	80046e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
    break;
 80046e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e6:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	3301      	adds	r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0a1b      	lsrs	r3, r3, #8
 80046fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	fb03 f202 	mul.w	r2, r3, r2
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800470c:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	0e5b      	lsrs	r3, r3, #25
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	3301      	adds	r3, #1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004726:	683b      	ldr	r3, [r7, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40021000 	.word	0x40021000
 8004738:	00f42400 	.word	0x00f42400
 800473c:	007a1200 	.word	0x007a1200
 8004740:	0800723c 	.word	0x0800723c

08004744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800474c:	2300      	movs	r3, #0
 800474e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004750:	2300      	movs	r3, #0
 8004752:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475c:	2b00      	cmp	r3, #0
 800475e:	d040      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004764:	2b80      	cmp	r3, #128	@ 0x80
 8004766:	d02a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004768:	2b80      	cmp	r3, #128	@ 0x80
 800476a:	d825      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800476c:	2b60      	cmp	r3, #96	@ 0x60
 800476e:	d026      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004770:	2b60      	cmp	r3, #96	@ 0x60
 8004772:	d821      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004774:	2b40      	cmp	r3, #64	@ 0x40
 8004776:	d006      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004778:	2b40      	cmp	r3, #64	@ 0x40
 800477a:	d81d      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d010      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004784:	e018      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004786:	4b89      	ldr	r3, [pc, #548]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a88      	ldr	r2, [pc, #544]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004790:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004792:	e015      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb02 	bl	8004da4 <RCCEx_PLLSAI1_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a4:	e00c      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3320      	adds	r3, #32
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fbed 	bl	8004f8c <RCCEx_PLLSAI2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047b6:	e003      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	74fb      	strb	r3, [r7, #19]
      break;
 80047bc:	e000      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80047be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c6:	4b79      	ldr	r3, [pc, #484]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047cc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047d4:	4975      	ldr	r1, [pc, #468]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80047dc:	e001      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d047      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d030      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fc:	d82a      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004802:	d02a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004808:	d824      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800480a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800480e:	d008      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004814:	d81e      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800481a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481e:	d010      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004820:	e018      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004822:	4b62      	ldr	r3, [pc, #392]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a61      	ldr	r2, [pc, #388]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800482e:	e015      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fab4 	bl	8004da4 <RCCEx_PLLSAI1_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004840:	e00c      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3320      	adds	r3, #32
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fb9f 	bl	8004f8c <RCCEx_PLLSAI2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	74fb      	strb	r3, [r7, #19]
      break;
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800485a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004862:	4b52      	ldr	r3, [pc, #328]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004864:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	494e      	ldr	r1, [pc, #312]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004878:	e001      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 809f 	beq.w	80049ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488c:	2300      	movs	r3, #0
 800488e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004890:	4b46      	ldr	r3, [pc, #280]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b41      	ldr	r3, [pc, #260]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	4a40      	ldr	r2, [pc, #256]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b2:	4b3e      	ldr	r3, [pc, #248]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c2:	4b3b      	ldr	r3, [pc, #236]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3a      	ldr	r2, [pc, #232]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ce:	f7fc fd27 	bl	8001320 <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d4:	e009      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d6:	f7fc fd23 	bl	8001320 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d902      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	74fb      	strb	r3, [r7, #19]
        break;
 80048e8:	e005      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048ea:	4b31      	ldr	r3, [pc, #196]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ef      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d15b      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048fc:	4b2b      	ldr	r3, [pc, #172]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004906:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01f      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	429a      	cmp	r2, r3
 8004918:	d019      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800491a:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004924:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004926:	4b21      	ldr	r3, [pc, #132]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800492e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004936:	4b1d      	ldr	r3, [pc, #116]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004946:	4a19      	ldr	r2, [pc, #100]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d016      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fc fce2 	bl	8001320 <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fc fcde 	bl	8001320 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d902      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	74fb      	strb	r3, [r7, #19]
            break;
 8004976:	e006      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ec      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10c      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498c:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499c:	4903      	ldr	r1, [pc, #12]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049a4:	e008      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	74bb      	strb	r3, [r7, #18]
 80049aa:	e005      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b8:	7c7b      	ldrb	r3, [r7, #17]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049be:	4ba0      	ldr	r3, [pc, #640]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	4a9f      	ldr	r2, [pc, #636]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d6:	4b9a      	ldr	r3, [pc, #616]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049dc:	f023 0203 	bic.w	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	4996      	ldr	r1, [pc, #600]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f8:	4b91      	ldr	r3, [pc, #580]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	f023 020c 	bic.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	498e      	ldr	r1, [pc, #568]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a1a:	4b89      	ldr	r3, [pc, #548]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a28:	4985      	ldr	r1, [pc, #532]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a3c:	4b80      	ldr	r3, [pc, #512]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a4a:	497d      	ldr	r1, [pc, #500]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a5e:	4b78      	ldr	r3, [pc, #480]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6c:	4974      	ldr	r1, [pc, #464]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a80:	4b6f      	ldr	r3, [pc, #444]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8e:	496c      	ldr	r1, [pc, #432]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa2:	4b67      	ldr	r3, [pc, #412]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab0:	4963      	ldr	r1, [pc, #396]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ad2:	495b      	ldr	r1, [pc, #364]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae6:	4b56      	ldr	r3, [pc, #344]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af4:	4952      	ldr	r1, [pc, #328]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b08:	4b4d      	ldr	r3, [pc, #308]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	494a      	ldr	r1, [pc, #296]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b2a:	4b45      	ldr	r3, [pc, #276]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b38:	4941      	ldr	r1, [pc, #260]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5a:	4939      	ldr	r1, [pc, #228]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d028      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6e:	4b34      	ldr	r3, [pc, #208]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7c:	4930      	ldr	r1, [pc, #192]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b8c:	d106      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b98:	60d3      	str	r3, [r2, #12]
 8004b9a:	e011      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2101      	movs	r1, #1
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f8f9 	bl	8004da4 <RCCEx_PLLSAI1_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d04d      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd4:	d108      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bdc:	4a18      	ldr	r2, [pc, #96]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004be2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004be6:	e012      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bee:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bf4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004bf8:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c06:	490e      	ldr	r1, [pc, #56]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c16:	d106      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e020      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c2e:	d109      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c30:	4b03      	ldr	r3, [pc, #12]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a02      	ldr	r2, [pc, #8]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3a:	60d3      	str	r3, [r2, #12]
 8004c3c:	e014      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	2101      	movs	r1, #1
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f8a5 	bl	8004da4 <RCCEx_PLLSAI1_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d028      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c74:	4b4a      	ldr	r3, [pc, #296]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c82:	4947      	ldr	r1, [pc, #284]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c94:	4b42      	ldr	r3, [pc, #264]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a41      	ldr	r2, [pc, #260]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c9e:	60d3      	str	r3, [r2, #12]
 8004ca0:	e011      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f876 	bl	8004da4 <RCCEx_PLLSAI1_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01e      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cd2:	4b33      	ldr	r3, [pc, #204]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce2:	492f      	ldr	r1, [pc, #188]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 f851 	bl	8004da4 <RCCEx_PLLSAI1_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d06:	7cfb      	ldrb	r3, [r7, #19]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d1c:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d22:	f023 0204 	bic.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d2c:	491c      	ldr	r1, [pc, #112]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d40:	4b17      	ldr	r3, [pc, #92]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d46:	f023 0218 	bic.w	r2, r3, #24
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d50:	4913      	ldr	r1, [pc, #76]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d017      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d64:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d74:	490a      	ldr	r1, [pc, #40]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a04      	ldr	r2, [pc, #16]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000

08004da4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004db2:	4b72      	ldr	r3, [pc, #456]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0203 	and.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d103      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d142      	bne.n	8004e5c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
 8004dda:	e03f      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d018      	beq.n	8004e16 <RCCEx_PLLSAI1_Config+0x72>
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d825      	bhi.n	8004e34 <RCCEx_PLLSAI1_Config+0x90>
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d002      	beq.n	8004df2 <RCCEx_PLLSAI1_Config+0x4e>
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d009      	beq.n	8004e04 <RCCEx_PLLSAI1_Config+0x60>
 8004df0:	e020      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004df2:	4b62      	ldr	r3, [pc, #392]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11d      	bne.n	8004e3a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e02:	e01a      	b.n	8004e3a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e04:	4b5d      	ldr	r3, [pc, #372]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d116      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e14:	e013      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e16:	4b59      	ldr	r3, [pc, #356]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e22:	4b56      	ldr	r3, [pc, #344]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e32:	e006      	b.n	8004e42 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      break;
 8004e38:	e004      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e002      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e42:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d108      	bne.n	8004e5c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4949      	ldr	r1, [pc, #292]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 8086 	bne.w	8004f70 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e64:	4b45      	ldr	r3, [pc, #276]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a44      	ldr	r2, [pc, #272]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e70:	f7fc fa56 	bl	8001320 <HAL_GetTick>
 8004e74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e76:	e009      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e78:	f7fc fa52 	bl	8001320 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d902      	bls.n	8004e8c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	73fb      	strb	r3, [r7, #15]
        break;
 8004e8a:	e005      	b.n	8004e98 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1ef      	bne.n	8004e78 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d168      	bne.n	8004f70 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d113      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ea4:	4b35      	ldr	r3, [pc, #212]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	4b35      	ldr	r3, [pc, #212]	@ (8004f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6892      	ldr	r2, [r2, #8]
 8004eb0:	0211      	lsls	r1, r2, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68d2      	ldr	r2, [r2, #12]
 8004eb6:	06d2      	lsls	r2, r2, #27
 8004eb8:	4311      	orrs	r1, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6852      	ldr	r2, [r2, #4]
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0112      	lsls	r2, r2, #4
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	492d      	ldr	r1, [pc, #180]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	610b      	str	r3, [r1, #16]
 8004eca:	e02d      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d115      	bne.n	8004efe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	0211      	lsls	r1, r2, #8
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6912      	ldr	r2, [r2, #16]
 8004ee4:	0852      	lsrs	r2, r2, #1
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	0552      	lsls	r2, r2, #21
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6852      	ldr	r2, [r2, #4]
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	4921      	ldr	r1, [pc, #132]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	610b      	str	r3, [r1, #16]
 8004efc:	e014      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	4b21      	ldr	r3, [pc, #132]	@ (8004f88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	0211      	lsls	r1, r2, #8
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6952      	ldr	r2, [r2, #20]
 8004f10:	0852      	lsrs	r2, r2, #1
 8004f12:	3a01      	subs	r2, #1
 8004f14:	0652      	lsls	r2, r2, #25
 8004f16:	4311      	orrs	r1, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6852      	ldr	r2, [r2, #4]
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	0112      	lsls	r2, r2, #4
 8004f20:	430a      	orrs	r2, r1
 8004f22:	4916      	ldr	r1, [pc, #88]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fc f9f4 	bl	8001320 <HAL_GetTick>
 8004f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f3a:	e009      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f3c:	f7fc f9f0 	bl	8001320 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d902      	bls.n	8004f50 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f4e:	e005      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f50:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ef      	beq.n	8004f3c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f62:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	4904      	ldr	r1, [pc, #16]	@ (8004f7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	07ff800f 	.word	0x07ff800f
 8004f84:	ff9f800f 	.word	0xff9f800f
 8004f88:	f9ff800f 	.word	0xf9ff800f

08004f8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f9a:	4b72      	ldr	r3, [pc, #456]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00e      	beq.n	8004fc4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0203 	and.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d103      	bne.n	8004fbe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d142      	bne.n	8005044 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
 8004fc2:	e03f      	b.n	8005044 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d018      	beq.n	8004ffe <RCCEx_PLLSAI2_Config+0x72>
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d825      	bhi.n	800501c <RCCEx_PLLSAI2_Config+0x90>
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d002      	beq.n	8004fda <RCCEx_PLLSAI2_Config+0x4e>
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d009      	beq.n	8004fec <RCCEx_PLLSAI2_Config+0x60>
 8004fd8:	e020      	b.n	800501c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fda:	4b62      	ldr	r3, [pc, #392]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11d      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fea:	e01a      	b.n	8005022 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fec:	4b5d      	ldr	r3, [pc, #372]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d116      	bne.n	8005026 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e013      	b.n	8005026 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ffe:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800500a:	4b56      	ldr	r3, [pc, #344]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800501a:	e006      	b.n	800502a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      break;
 8005020:	e004      	b.n	800502c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800502a:	bf00      	nop
    }

    if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005032:	4b4c      	ldr	r3, [pc, #304]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4949      	ldr	r1, [pc, #292]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005040:	4313      	orrs	r3, r2
 8005042:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 8086 	bne.w	8005158 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800504c:	4b45      	ldr	r3, [pc, #276]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a44      	ldr	r2, [pc, #272]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fc f962 	bl	8001320 <HAL_GetTick>
 800505c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800505e:	e009      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005060:	f7fc f95e 	bl	8001320 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d902      	bls.n	8005074 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	73fb      	strb	r3, [r7, #15]
        break;
 8005072:	e005      	b.n	8005080 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005074:	4b3b      	ldr	r3, [pc, #236]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ef      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d168      	bne.n	8005158 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d113      	bne.n	80050b4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800508c:	4b35      	ldr	r3, [pc, #212]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	4b35      	ldr	r3, [pc, #212]	@ (8005168 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005092:	4013      	ands	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6892      	ldr	r2, [r2, #8]
 8005098:	0211      	lsls	r1, r2, #8
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68d2      	ldr	r2, [r2, #12]
 800509e:	06d2      	lsls	r2, r2, #27
 80050a0:	4311      	orrs	r1, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6852      	ldr	r2, [r2, #4]
 80050a6:	3a01      	subs	r2, #1
 80050a8:	0112      	lsls	r2, r2, #4
 80050aa:	430a      	orrs	r2, r1
 80050ac:	492d      	ldr	r1, [pc, #180]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	614b      	str	r3, [r1, #20]
 80050b2:	e02d      	b.n	8005110 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d115      	bne.n	80050e6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <RCCEx_PLLSAI2_Config+0x1e0>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	0211      	lsls	r1, r2, #8
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6912      	ldr	r2, [r2, #16]
 80050cc:	0852      	lsrs	r2, r2, #1
 80050ce:	3a01      	subs	r2, #1
 80050d0:	0552      	lsls	r2, r2, #21
 80050d2:	4311      	orrs	r1, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6852      	ldr	r2, [r2, #4]
 80050d8:	3a01      	subs	r2, #1
 80050da:	0112      	lsls	r2, r2, #4
 80050dc:	430a      	orrs	r2, r1
 80050de:	4921      	ldr	r1, [pc, #132]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	614b      	str	r3, [r1, #20]
 80050e4:	e014      	b.n	8005110 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <RCCEx_PLLSAI2_Config+0x1e4>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6892      	ldr	r2, [r2, #8]
 80050f2:	0211      	lsls	r1, r2, #8
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6952      	ldr	r2, [r2, #20]
 80050f8:	0852      	lsrs	r2, r2, #1
 80050fa:	3a01      	subs	r2, #1
 80050fc:	0652      	lsls	r2, r2, #25
 80050fe:	4311      	orrs	r1, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6852      	ldr	r2, [r2, #4]
 8005104:	3a01      	subs	r2, #1
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	430a      	orrs	r2, r1
 800510a:	4916      	ldr	r1, [pc, #88]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005110:	4b14      	ldr	r3, [pc, #80]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a13      	ldr	r2, [pc, #76]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800511a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fc f900 	bl	8001320 <HAL_GetTick>
 8005120:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005122:	e009      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005124:	f7fc f8fc 	bl	8001320 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d902      	bls.n	8005138 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	73fb      	strb	r3, [r7, #15]
          break;
 8005136:	e005      	b.n	8005144 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005138:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ef      	beq.n	8005124 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	4904      	ldr	r1, [pc, #16]	@ (8005164 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005154:	4313      	orrs	r3, r2
 8005156:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	07ff800f 	.word	0x07ff800f
 800516c:	ff9f800f 	.word	0xff9f800f
 8005170:	f9ff800f 	.word	0xf9ff800f

08005174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb ff0e 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 faa0 	bl	80056f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e047      	b.n	80052cc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a23      	ldr	r2, [pc, #140]	@ (80052d8 <HAL_TIM_Base_Start+0xb4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01d      	beq.n	800528a <HAL_TIM_Base_Start+0x66>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005256:	d018      	beq.n	800528a <HAL_TIM_Base_Start+0x66>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <HAL_TIM_Base_Start+0xb8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_TIM_Base_Start+0x66>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1e      	ldr	r2, [pc, #120]	@ (80052e0 <HAL_TIM_Base_Start+0xbc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_TIM_Base_Start+0x66>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <HAL_TIM_Base_Start+0xc0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIM_Base_Start+0x66>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_TIM_Base_Start+0xc4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_Base_Start+0x66>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <HAL_TIM_Base_Start+0xc8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d115      	bne.n	80052b6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <HAL_TIM_Base_Start+0xcc>)
 8005292:	4013      	ands	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d015      	beq.n	80052c8 <HAL_TIM_Base_Start+0xa4>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a2:	d011      	beq.n	80052c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	e008      	b.n	80052c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e000      	b.n	80052ca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	00010007 	.word	0x00010007

080052f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0202 	mvn.w	r2, #2
 8005328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9bc 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9ae 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f9bf 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0204 	mvn.w	r2, #4
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f996 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f988 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f999 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0208 	mvn.w	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f970 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f962 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f973 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d020      	beq.n	800543c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01b      	beq.n	800543c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2208      	movs	r2, #8
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f94a 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f93c 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f94d 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0201 	mvn.w	r2, #1
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f91a 	bl	8005694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fb07 	bl	8005a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 faff 	bl	8005ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f907 	bl	80056e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f06f 0220 	mvn.w	r2, #32
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fac7 	bl	8005a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_TIM_ConfigClockSource+0x1c>
 800551a:	2302      	movs	r3, #2
 800551c:	e0b6      	b.n	800568c <HAL_TIM_ConfigClockSource+0x18a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005540:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005548:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800555a:	d03e      	beq.n	80055da <HAL_TIM_ConfigClockSource+0xd8>
 800555c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005560:	f200 8087 	bhi.w	8005672 <HAL_TIM_ConfigClockSource+0x170>
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005568:	f000 8086 	beq.w	8005678 <HAL_TIM_ConfigClockSource+0x176>
 800556c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005570:	d87f      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 8005572:	2b70      	cmp	r3, #112	@ 0x70
 8005574:	d01a      	beq.n	80055ac <HAL_TIM_ConfigClockSource+0xaa>
 8005576:	2b70      	cmp	r3, #112	@ 0x70
 8005578:	d87b      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 800557a:	2b60      	cmp	r3, #96	@ 0x60
 800557c:	d050      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0x11e>
 800557e:	2b60      	cmp	r3, #96	@ 0x60
 8005580:	d877      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 8005582:	2b50      	cmp	r3, #80	@ 0x50
 8005584:	d03c      	beq.n	8005600 <HAL_TIM_ConfigClockSource+0xfe>
 8005586:	2b50      	cmp	r3, #80	@ 0x50
 8005588:	d873      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d058      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x13e>
 800558e:	2b40      	cmp	r3, #64	@ 0x40
 8005590:	d86f      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 8005592:	2b30      	cmp	r3, #48	@ 0x30
 8005594:	d064      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x15e>
 8005596:	2b30      	cmp	r3, #48	@ 0x30
 8005598:	d86b      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d060      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x15e>
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d867      	bhi.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d05c      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x15e>
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d05a      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0x15e>
 80055aa:	e062      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055bc:	f000 f9bc 	bl	8005938 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
      break;
 80055d8:	e04f      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ea:	f000 f9a5 	bl	8005938 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055fc:	609a      	str	r2, [r3, #8]
      break;
 80055fe:	e03c      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800560c:	461a      	mov	r2, r3
 800560e:	f000 f919 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2150      	movs	r1, #80	@ 0x50
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f972 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 800561e:	e02c      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800562c:	461a      	mov	r2, r3
 800562e:	f000 f938 	bl	80058a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2160      	movs	r1, #96	@ 0x60
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f962 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 800563e:	e01c      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800564c:	461a      	mov	r2, r3
 800564e:	f000 f8f9 	bl	8005844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2140      	movs	r1, #64	@ 0x40
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f952 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 800565e:	e00c      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f000 f949 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 8005670:	e003      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
      break;
 8005676:	e000      	b.n	800567a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a46      	ldr	r2, [pc, #280]	@ (8005824 <TIM_Base_SetConfig+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d013      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005716:	d00f      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a43      	ldr	r2, [pc, #268]	@ (8005828 <TIM_Base_SetConfig+0x130>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a42      	ldr	r2, [pc, #264]	@ (800582c <TIM_Base_SetConfig+0x134>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a41      	ldr	r2, [pc, #260]	@ (8005830 <TIM_Base_SetConfig+0x138>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a40      	ldr	r2, [pc, #256]	@ (8005834 <TIM_Base_SetConfig+0x13c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a35      	ldr	r2, [pc, #212]	@ (8005824 <TIM_Base_SetConfig+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01f      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005758:	d01b      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a32      	ldr	r2, [pc, #200]	@ (8005828 <TIM_Base_SetConfig+0x130>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d017      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a31      	ldr	r2, [pc, #196]	@ (800582c <TIM_Base_SetConfig+0x134>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <TIM_Base_SetConfig+0x138>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <TIM_Base_SetConfig+0x13c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a2e      	ldr	r2, [pc, #184]	@ (8005838 <TIM_Base_SetConfig+0x140>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a2d      	ldr	r2, [pc, #180]	@ (800583c <TIM_Base_SetConfig+0x144>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_Base_SetConfig+0x9a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2c      	ldr	r2, [pc, #176]	@ (8005840 <TIM_Base_SetConfig+0x148>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a16      	ldr	r2, [pc, #88]	@ (8005824 <TIM_Base_SetConfig+0x12c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00f      	beq.n	80057f0 <TIM_Base_SetConfig+0xf8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <TIM_Base_SetConfig+0x13c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_Base_SetConfig+0xf8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <TIM_Base_SetConfig+0x140>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_Base_SetConfig+0xf8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	@ (800583c <TIM_Base_SetConfig+0x144>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0xf8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <TIM_Base_SetConfig+0x148>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d103      	bne.n	80057f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b01      	cmp	r3, #1
 8005808:	d105      	bne.n	8005816 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]
  }
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40013400 	.word	0x40013400
 8005838:	40014000 	.word	0x40014000
 800583c:	40014400 	.word	0x40014400
 8005840:	40014800 	.word	0x40014800

08005844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0201 	bic.w	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 030a 	bic.w	r3, r3, #10
 8005880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 0210 	bic.w	r2, r3, #16
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	f043 0307 	orr.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	431a      	orrs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e068      	b.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a2d      	ldr	r2, [pc, #180]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d108      	bne.n	80059d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01d      	beq.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a02:	d018      	beq.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	@ (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1a      	ldr	r2, [pc, #104]	@ (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00e      	beq.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a13      	ldr	r2, [pc, #76]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d004      	beq.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a14      	ldr	r2, [pc, #80]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d10c      	bne.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40014000 	.word	0x40014000

08005a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e042      	b.n	8005b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fb fa8b 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2224      	movs	r2, #36	@ 0x24
 8005af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fbb2 	bl	8006278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8b3 	bl	8005c80 <UART_SetConfig>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e01b      	b.n	8005b5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fc31 	bl	80063bc <UART_CheckIdleState>
 8005b5a:	4603      	mov	r3, r0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d17b      	bne.n	8005c76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_UART_Transmit+0x26>
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e074      	b.n	8005c78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2221      	movs	r2, #33	@ 0x21
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9e:	f7fb fbbf 	bl	8001320 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd8:	e030      	b.n	8005c3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fc93 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e03d      	b.n	8005c78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	881a      	ldrh	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e007      	b.n	8005c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1c8      	bne.n	8005bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2140      	movs	r1, #64	@ 0x40
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fc5c 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e006      	b.n	8005c78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b08c      	sub	sp, #48	@ 0x30
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4baa      	ldr	r3, [pc, #680]	@ (8005f58 <UART_SetConfig+0x2d8>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a9f      	ldr	r2, [pc, #636]	@ (8005f5c <UART_SetConfig+0x2dc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005cf6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0a:	f023 010f 	bic.w	r1, r3, #15
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a90      	ldr	r2, [pc, #576]	@ (8005f60 <UART_SetConfig+0x2e0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d125      	bne.n	8005d70 <UART_SetConfig+0xf0>
 8005d24:	4b8f      	ldr	r3, [pc, #572]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d81a      	bhi.n	8005d68 <UART_SetConfig+0xe8>
 8005d32:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <UART_SetConfig+0xb8>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d59 	.word	0x08005d59
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e116      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e112      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5e:	e10e      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d66:	e10a      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6e:	e106      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a7c      	ldr	r2, [pc, #496]	@ (8005f68 <UART_SetConfig+0x2e8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d138      	bne.n	8005dec <UART_SetConfig+0x16c>
 8005d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d82d      	bhi.n	8005de4 <UART_SetConfig+0x164>
 8005d88:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <UART_SetConfig+0x110>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005de5 	.word	0x08005de5
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005de5 	.word	0x08005de5
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005de5 	.word	0x08005de5
 8005da8:	08005de5 	.word	0x08005de5
 8005dac:	08005de5 	.word	0x08005de5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005de5 	.word	0x08005de5
 8005db8:	08005de5 	.word	0x08005de5
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dca:	e0d8      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd2:	e0d4      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dda:	e0d0      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de2:	e0cc      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dea:	e0c8      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f6c <UART_SetConfig+0x2ec>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d125      	bne.n	8005e42 <UART_SetConfig+0x1c2>
 8005df6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e00:	2b30      	cmp	r3, #48	@ 0x30
 8005e02:	d016      	beq.n	8005e32 <UART_SetConfig+0x1b2>
 8005e04:	2b30      	cmp	r3, #48	@ 0x30
 8005e06:	d818      	bhi.n	8005e3a <UART_SetConfig+0x1ba>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d00a      	beq.n	8005e22 <UART_SetConfig+0x1a2>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d814      	bhi.n	8005e3a <UART_SetConfig+0x1ba>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <UART_SetConfig+0x19a>
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d008      	beq.n	8005e2a <UART_SetConfig+0x1aa>
 8005e18:	e00f      	b.n	8005e3a <UART_SetConfig+0x1ba>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e20:	e0ad      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e22:	2302      	movs	r3, #2
 8005e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e28:	e0a9      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e30:	e0a5      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e32:	2308      	movs	r3, #8
 8005e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e38:	e0a1      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e40:	e09d      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a4a      	ldr	r2, [pc, #296]	@ (8005f70 <UART_SetConfig+0x2f0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d125      	bne.n	8005e98 <UART_SetConfig+0x218>
 8005e4c:	4b45      	ldr	r3, [pc, #276]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e58:	d016      	beq.n	8005e88 <UART_SetConfig+0x208>
 8005e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e5c:	d818      	bhi.n	8005e90 <UART_SetConfig+0x210>
 8005e5e:	2b80      	cmp	r3, #128	@ 0x80
 8005e60:	d00a      	beq.n	8005e78 <UART_SetConfig+0x1f8>
 8005e62:	2b80      	cmp	r3, #128	@ 0x80
 8005e64:	d814      	bhi.n	8005e90 <UART_SetConfig+0x210>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <UART_SetConfig+0x1f0>
 8005e6a:	2b40      	cmp	r3, #64	@ 0x40
 8005e6c:	d008      	beq.n	8005e80 <UART_SetConfig+0x200>
 8005e6e:	e00f      	b.n	8005e90 <UART_SetConfig+0x210>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e082      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e07e      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e07a      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e076      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e96:	e072      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a35      	ldr	r2, [pc, #212]	@ (8005f74 <UART_SetConfig+0x2f4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d12a      	bne.n	8005ef8 <UART_SetConfig+0x278>
 8005ea2:	4b30      	ldr	r3, [pc, #192]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb0:	d01a      	beq.n	8005ee8 <UART_SetConfig+0x268>
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d81b      	bhi.n	8005ef0 <UART_SetConfig+0x270>
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebc:	d00c      	beq.n	8005ed8 <UART_SetConfig+0x258>
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec2:	d815      	bhi.n	8005ef0 <UART_SetConfig+0x270>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <UART_SetConfig+0x250>
 8005ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ecc:	d008      	beq.n	8005ee0 <UART_SetConfig+0x260>
 8005ece:	e00f      	b.n	8005ef0 <UART_SetConfig+0x270>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed6:	e052      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ede:	e04e      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee6:	e04a      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eee:	e046      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef6:	e042      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <UART_SetConfig+0x2dc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d13a      	bne.n	8005f78 <UART_SetConfig+0x2f8>
 8005f02:	4b18      	ldr	r3, [pc, #96]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f10:	d01a      	beq.n	8005f48 <UART_SetConfig+0x2c8>
 8005f12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f16:	d81b      	bhi.n	8005f50 <UART_SetConfig+0x2d0>
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1c:	d00c      	beq.n	8005f38 <UART_SetConfig+0x2b8>
 8005f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f22:	d815      	bhi.n	8005f50 <UART_SetConfig+0x2d0>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <UART_SetConfig+0x2b0>
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2c:	d008      	beq.n	8005f40 <UART_SetConfig+0x2c0>
 8005f2e:	e00f      	b.n	8005f50 <UART_SetConfig+0x2d0>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f36:	e022      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3e:	e01e      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005f40:	2304      	movs	r3, #4
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f46:	e01a      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4e:	e016      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005f50:	2310      	movs	r3, #16
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f56:	e012      	b.n	8005f7e <UART_SetConfig+0x2fe>
 8005f58:	cfff69f3 	.word	0xcfff69f3
 8005f5c:	40008000 	.word	0x40008000
 8005f60:	40013800 	.word	0x40013800
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40004400 	.word	0x40004400
 8005f6c:	40004800 	.word	0x40004800
 8005f70:	40004c00 	.word	0x40004c00
 8005f74:	40005000 	.word	0x40005000
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4aae      	ldr	r2, [pc, #696]	@ (800623c <UART_SetConfig+0x5bc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	f040 8097 	bne.w	80060b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d823      	bhi.n	8005fda <UART_SetConfig+0x35a>
 8005f92:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x318>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fdb 	.word	0x08005fdb
 8005fa8:	08005fcb 	.word	0x08005fcb
 8005fac:	08005fdb 	.word	0x08005fdb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005fdb 	.word	0x08005fdb
 8005fb8:	08005fd3 	.word	0x08005fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe fad6 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fc2:	e010      	b.n	8005fe6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b9e      	ldr	r3, [pc, #632]	@ (8006240 <UART_SetConfig+0x5c0>)
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fc8:	e00d      	b.n	8005fe6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7fe fa37 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8005fce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd0:	e009      	b.n	8005fe6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd8:	e005      	b.n	8005fe6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8130 	beq.w	800624e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	4a94      	ldr	r2, [pc, #592]	@ (8006244 <UART_SetConfig+0x5c4>)
 8005ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006000:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	4413      	add	r3, r2
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	429a      	cmp	r2, r3
 8006010:	d305      	bcc.n	800601e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	429a      	cmp	r2, r3
 800601c:	d903      	bls.n	8006026 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006024:	e113      	b.n	800624e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	2200      	movs	r2, #0
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	60fa      	str	r2, [r7, #12]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	4a84      	ldr	r2, [pc, #528]	@ (8006244 <UART_SetConfig+0x5c4>)
 8006034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006038:	b29b      	uxth	r3, r3
 800603a:	2200      	movs	r2, #0
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006048:	f7fa f932 	bl	80002b0 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	020b      	lsls	r3, r1, #8
 800605e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006062:	0202      	lsls	r2, r0, #8
 8006064:	6979      	ldr	r1, [r7, #20]
 8006066:	6849      	ldr	r1, [r1, #4]
 8006068:	0849      	lsrs	r1, r1, #1
 800606a:	2000      	movs	r0, #0
 800606c:	460c      	mov	r4, r1
 800606e:	4605      	mov	r5, r0
 8006070:	eb12 0804 	adds.w	r8, r2, r4
 8006074:	eb43 0905 	adc.w	r9, r3, r5
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	469a      	mov	sl, r3
 8006080:	4693      	mov	fp, r2
 8006082:	4652      	mov	r2, sl
 8006084:	465b      	mov	r3, fp
 8006086:	4640      	mov	r0, r8
 8006088:	4649      	mov	r1, r9
 800608a:	f7fa f911 	bl	80002b0 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4613      	mov	r3, r2
 8006094:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800609c:	d308      	bcc.n	80060b0 <UART_SetConfig+0x430>
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060a4:	d204      	bcs.n	80060b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6a3a      	ldr	r2, [r7, #32]
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	e0ce      	b.n	800624e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060b6:	e0ca      	b.n	800624e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c0:	d166      	bne.n	8006190 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d827      	bhi.n	800611a <UART_SetConfig+0x49a>
 80060ca:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <UART_SetConfig+0x450>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fe fa3a 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 80060f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060fa:	e014      	b.n	8006126 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fe fa4c 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8006100:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006102:	e010      	b.n	8006126 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b4e      	ldr	r3, [pc, #312]	@ (8006240 <UART_SetConfig+0x5c0>)
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006108:	e00d      	b.n	8006126 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fe f997 	bl	800443c <HAL_RCC_GetSysClockFreq>
 800610e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006110:	e009      	b.n	8006126 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006118:	e005      	b.n	8006126 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8090 	beq.w	800624e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	4a44      	ldr	r2, [pc, #272]	@ (8006244 <UART_SetConfig+0x5c4>)
 8006134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006138:	461a      	mov	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006140:	005a      	lsls	r2, r3, #1
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	441a      	add	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006152:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	2b0f      	cmp	r3, #15
 8006158:	d916      	bls.n	8006188 <UART_SetConfig+0x508>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006160:	d212      	bcs.n	8006188 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f023 030f 	bic.w	r3, r3, #15
 800616a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	b29a      	uxth	r2, r3
 8006178:	8bfb      	ldrh	r3, [r7, #30]
 800617a:	4313      	orrs	r3, r2
 800617c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	8bfa      	ldrh	r2, [r7, #30]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	e062      	b.n	800624e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800618e:	e05e      	b.n	800624e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006190:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006194:	2b08      	cmp	r3, #8
 8006196:	d828      	bhi.n	80061ea <UART_SetConfig+0x56a>
 8006198:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <UART_SetConfig+0x520>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	080061eb 	.word	0x080061eb
 80061b0:	080061db 	.word	0x080061db
 80061b4:	080061eb 	.word	0x080061eb
 80061b8:	080061eb 	.word	0x080061eb
 80061bc:	080061eb 	.word	0x080061eb
 80061c0:	080061e3 	.word	0x080061e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe f9d2 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 80061c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ca:	e014      	b.n	80061f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061cc:	f7fe f9e4 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061d2:	e010      	b.n	80061f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006240 <UART_SetConfig+0x5c0>)
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061d8:	e00d      	b.n	80061f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061da:	f7fe f92f 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80061de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061e0:	e009      	b.n	80061f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061e8:	e005      	b.n	80061f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061f4:	bf00      	nop
    }

    if (pclk != 0U)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d028      	beq.n	800624e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	4a10      	ldr	r2, [pc, #64]	@ (8006244 <UART_SetConfig+0x5c4>)
 8006202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006206:	461a      	mov	r2, r3
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	fbb3 f2f2 	udiv	r2, r3, r2
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	441a      	add	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d910      	bls.n	8006248 <UART_SetConfig+0x5c8>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622c:	d20c      	bcs.n	8006248 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	b29a      	uxth	r2, r3
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60da      	str	r2, [r3, #12]
 8006238:	e009      	b.n	800624e <UART_SetConfig+0x5ce>
 800623a:	bf00      	nop
 800623c:	40008000 	.word	0x40008000
 8006240:	00f42400 	.word	0x00f42400
 8006244:	0800726c 	.word	0x0800726c
      }
      else
      {
        ret = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2201      	movs	r2, #1
 8006252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2201      	movs	r2, #1
 800625a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800626a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800626e:	4618      	mov	r0, r3
 8006270:	3730      	adds	r7, #48	@ 0x30
 8006272:	46bd      	mov	sp, r7
 8006274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01a      	beq.n	800638e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006376:	d10a      	bne.n	800638e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	605a      	str	r2, [r3, #4]
  }
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b098      	sub	sp, #96	@ 0x60
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063cc:	f7fa ffa8 	bl	8001320 <HAL_GetTick>
 80063d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d12f      	bne.n	8006440 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e8:	2200      	movs	r2, #0
 80063ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f88e 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d022      	beq.n	8006440 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006418:	647b      	str	r3, [r7, #68]	@ 0x44
 800641a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800641e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e063      	b.n	8006508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d149      	bne.n	80064e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006456:	2200      	movs	r2, #0
 8006458:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f857 	bl	8006510 <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d03c      	beq.n	80064e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	623b      	str	r3, [r7, #32]
   return(result);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800647c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006486:	633b      	str	r3, [r7, #48]	@ 0x30
 8006488:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800648c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e6      	bne.n	8006468 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ba:	61fa      	str	r2, [r7, #28]
 80064bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	617b      	str	r3, [r7, #20]
   return(result);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e5      	bne.n	800649a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e012      	b.n	8006508 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3758      	adds	r7, #88	@ 0x58
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	e04f      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d04b      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fa fef9 	bl	8001320 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x30>
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e04e      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d037      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b80      	cmp	r3, #128	@ 0x80
 8006556:	d034      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b40      	cmp	r3, #64	@ 0x40
 800655c:	d031      	beq.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d110      	bne.n	800658e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f838 	bl	80065ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2208      	movs	r2, #8
 800657e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e029      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800659c:	d111      	bne.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f81e 	bl	80065ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e00f      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d0a0      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b095      	sub	sp, #84	@ 0x54
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006610:	643b      	str	r3, [r7, #64]	@ 0x40
 8006612:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800661e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e6      	bne.n	80065f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	61fb      	str	r3, [r7, #28]
   return(result);
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800664a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800664e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e3      	bne.n	8006624 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d118      	bne.n	8006696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	60bb      	str	r3, [r7, #8]
   return(result);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 0310 	bic.w	r3, r3, #16
 8006678:	647b      	str	r3, [r7, #68]	@ 0x44
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6979      	ldr	r1, [r7, #20]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	613b      	str	r3, [r7, #16]
   return(result);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066aa:	bf00      	nop
 80066ac:	3754      	adds	r7, #84	@ 0x54
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_UARTEx_DisableFifoMode+0x16>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e027      	b.n	800671c <HAL_UARTEx_DisableFifoMode+0x66>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2224      	movs	r2, #36	@ 0x24
 80066d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800673c:	2302      	movs	r3, #2
 800673e:	e02d      	b.n	800679c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	@ 0x24
 800674c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f84f 	bl	8006820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e02d      	b.n	8006818 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2224      	movs	r2, #36	@ 0x24
 80067c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f811 	bl	8006820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682c:	2b00      	cmp	r3, #0
 800682e:	d108      	bne.n	8006842 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006840:	e031      	b.n	80068a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006842:	2308      	movs	r3, #8
 8006844:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006846:	2308      	movs	r3, #8
 8006848:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	0e5b      	lsrs	r3, r3, #25
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	0f5b      	lsrs	r3, r3, #29
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	7b3a      	ldrb	r2, [r7, #12]
 800686e:	4911      	ldr	r1, [pc, #68]	@ (80068b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006870:	5c8a      	ldrb	r2, [r1, r2]
 8006872:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006876:	7b3a      	ldrb	r2, [r7, #12]
 8006878:	490f      	ldr	r1, [pc, #60]	@ (80068b8 <UARTEx_SetNbDataToProcess+0x98>)
 800687a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800687c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	7b7a      	ldrb	r2, [r7, #13]
 800688c:	4909      	ldr	r1, [pc, #36]	@ (80068b4 <UARTEx_SetNbDataToProcess+0x94>)
 800688e:	5c8a      	ldrb	r2, [r1, r2]
 8006890:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006894:	7b7a      	ldrb	r2, [r7, #13]
 8006896:	4908      	ldr	r1, [pc, #32]	@ (80068b8 <UARTEx_SetNbDataToProcess+0x98>)
 8006898:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800689a:	fb93 f3f2 	sdiv	r3, r3, r2
 800689e:	b29a      	uxth	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	08007284 	.word	0x08007284
 80068b8:	0800728c 	.word	0x0800728c

080068bc <siprintf>:
 80068bc:	b40e      	push	{r1, r2, r3}
 80068be:	b500      	push	{lr}
 80068c0:	b09c      	sub	sp, #112	@ 0x70
 80068c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80068c4:	9002      	str	r0, [sp, #8]
 80068c6:	9006      	str	r0, [sp, #24]
 80068c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068cc:	4809      	ldr	r0, [pc, #36]	@ (80068f4 <siprintf+0x38>)
 80068ce:	9107      	str	r1, [sp, #28]
 80068d0:	9104      	str	r1, [sp, #16]
 80068d2:	4909      	ldr	r1, [pc, #36]	@ (80068f8 <siprintf+0x3c>)
 80068d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d8:	9105      	str	r1, [sp, #20]
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	a902      	add	r1, sp, #8
 80068e0:	f000 f994 	bl	8006c0c <_svfiprintf_r>
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	b01c      	add	sp, #112	@ 0x70
 80068ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f0:	b003      	add	sp, #12
 80068f2:	4770      	bx	lr
 80068f4:	2000000c 	.word	0x2000000c
 80068f8:	ffff0208 	.word	0xffff0208

080068fc <memset>:
 80068fc:	4402      	add	r2, r0
 80068fe:	4603      	mov	r3, r0
 8006900:	4293      	cmp	r3, r2
 8006902:	d100      	bne.n	8006906 <memset+0xa>
 8006904:	4770      	bx	lr
 8006906:	f803 1b01 	strb.w	r1, [r3], #1
 800690a:	e7f9      	b.n	8006900 <memset+0x4>

0800690c <__errno>:
 800690c:	4b01      	ldr	r3, [pc, #4]	@ (8006914 <__errno+0x8>)
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	2000000c 	.word	0x2000000c

08006918 <__libc_init_array>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4d0d      	ldr	r5, [pc, #52]	@ (8006950 <__libc_init_array+0x38>)
 800691c:	4c0d      	ldr	r4, [pc, #52]	@ (8006954 <__libc_init_array+0x3c>)
 800691e:	1b64      	subs	r4, r4, r5
 8006920:	10a4      	asrs	r4, r4, #2
 8006922:	2600      	movs	r6, #0
 8006924:	42a6      	cmp	r6, r4
 8006926:	d109      	bne.n	800693c <__libc_init_array+0x24>
 8006928:	4d0b      	ldr	r5, [pc, #44]	@ (8006958 <__libc_init_array+0x40>)
 800692a:	4c0c      	ldr	r4, [pc, #48]	@ (800695c <__libc_init_array+0x44>)
 800692c:	f000 fc66 	bl	80071fc <_init>
 8006930:	1b64      	subs	r4, r4, r5
 8006932:	10a4      	asrs	r4, r4, #2
 8006934:	2600      	movs	r6, #0
 8006936:	42a6      	cmp	r6, r4
 8006938:	d105      	bne.n	8006946 <__libc_init_array+0x2e>
 800693a:	bd70      	pop	{r4, r5, r6, pc}
 800693c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006940:	4798      	blx	r3
 8006942:	3601      	adds	r6, #1
 8006944:	e7ee      	b.n	8006924 <__libc_init_array+0xc>
 8006946:	f855 3b04 	ldr.w	r3, [r5], #4
 800694a:	4798      	blx	r3
 800694c:	3601      	adds	r6, #1
 800694e:	e7f2      	b.n	8006936 <__libc_init_array+0x1e>
 8006950:	080072d0 	.word	0x080072d0
 8006954:	080072d0 	.word	0x080072d0
 8006958:	080072d0 	.word	0x080072d0
 800695c:	080072d4 	.word	0x080072d4

08006960 <__retarget_lock_acquire_recursive>:
 8006960:	4770      	bx	lr

08006962 <__retarget_lock_release_recursive>:
 8006962:	4770      	bx	lr

08006964 <_free_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4605      	mov	r5, r0
 8006968:	2900      	cmp	r1, #0
 800696a:	d041      	beq.n	80069f0 <_free_r+0x8c>
 800696c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006970:	1f0c      	subs	r4, r1, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	bfb8      	it	lt
 8006976:	18e4      	addlt	r4, r4, r3
 8006978:	f000 f8e0 	bl	8006b3c <__malloc_lock>
 800697c:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <_free_r+0x90>)
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	b933      	cbnz	r3, 8006990 <_free_r+0x2c>
 8006982:	6063      	str	r3, [r4, #4]
 8006984:	6014      	str	r4, [r2, #0]
 8006986:	4628      	mov	r0, r5
 8006988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800698c:	f000 b8dc 	b.w	8006b48 <__malloc_unlock>
 8006990:	42a3      	cmp	r3, r4
 8006992:	d908      	bls.n	80069a6 <_free_r+0x42>
 8006994:	6820      	ldr	r0, [r4, #0]
 8006996:	1821      	adds	r1, r4, r0
 8006998:	428b      	cmp	r3, r1
 800699a:	bf01      	itttt	eq
 800699c:	6819      	ldreq	r1, [r3, #0]
 800699e:	685b      	ldreq	r3, [r3, #4]
 80069a0:	1809      	addeq	r1, r1, r0
 80069a2:	6021      	streq	r1, [r4, #0]
 80069a4:	e7ed      	b.n	8006982 <_free_r+0x1e>
 80069a6:	461a      	mov	r2, r3
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	b10b      	cbz	r3, 80069b0 <_free_r+0x4c>
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	d9fa      	bls.n	80069a6 <_free_r+0x42>
 80069b0:	6811      	ldr	r1, [r2, #0]
 80069b2:	1850      	adds	r0, r2, r1
 80069b4:	42a0      	cmp	r0, r4
 80069b6:	d10b      	bne.n	80069d0 <_free_r+0x6c>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	4401      	add	r1, r0
 80069bc:	1850      	adds	r0, r2, r1
 80069be:	4283      	cmp	r3, r0
 80069c0:	6011      	str	r1, [r2, #0]
 80069c2:	d1e0      	bne.n	8006986 <_free_r+0x22>
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	6053      	str	r3, [r2, #4]
 80069ca:	4408      	add	r0, r1
 80069cc:	6010      	str	r0, [r2, #0]
 80069ce:	e7da      	b.n	8006986 <_free_r+0x22>
 80069d0:	d902      	bls.n	80069d8 <_free_r+0x74>
 80069d2:	230c      	movs	r3, #12
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	e7d6      	b.n	8006986 <_free_r+0x22>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	1821      	adds	r1, r4, r0
 80069dc:	428b      	cmp	r3, r1
 80069de:	bf04      	itt	eq
 80069e0:	6819      	ldreq	r1, [r3, #0]
 80069e2:	685b      	ldreq	r3, [r3, #4]
 80069e4:	6063      	str	r3, [r4, #4]
 80069e6:	bf04      	itt	eq
 80069e8:	1809      	addeq	r1, r1, r0
 80069ea:	6021      	streq	r1, [r4, #0]
 80069ec:	6054      	str	r4, [r2, #4]
 80069ee:	e7ca      	b.n	8006986 <_free_r+0x22>
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
 80069f2:	bf00      	nop
 80069f4:	20000438 	.word	0x20000438

080069f8 <sbrk_aligned>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006a38 <sbrk_aligned+0x40>)
 80069fc:	460c      	mov	r4, r1
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	4605      	mov	r5, r0
 8006a02:	b911      	cbnz	r1, 8006a0a <sbrk_aligned+0x12>
 8006a04:	f000 fba6 	bl	8007154 <_sbrk_r>
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 fba1 	bl	8007154 <_sbrk_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d103      	bne.n	8006a1e <sbrk_aligned+0x26>
 8006a16:	f04f 34ff 	mov.w	r4, #4294967295
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	1cc4      	adds	r4, r0, #3
 8006a20:	f024 0403 	bic.w	r4, r4, #3
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d0f8      	beq.n	8006a1a <sbrk_aligned+0x22>
 8006a28:	1a21      	subs	r1, r4, r0
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 fb92 	bl	8007154 <_sbrk_r>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1f2      	bne.n	8006a1a <sbrk_aligned+0x22>
 8006a34:	e7ef      	b.n	8006a16 <sbrk_aligned+0x1e>
 8006a36:	bf00      	nop
 8006a38:	20000434 	.word	0x20000434

08006a3c <_malloc_r>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4606      	mov	r6, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d904      	bls.n	8006a62 <_malloc_r+0x26>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b38 <_malloc_r+0xfc>
 8006a66:	f000 f869 	bl	8006b3c <__malloc_lock>
 8006a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a6e:	461c      	mov	r4, r3
 8006a70:	bb44      	cbnz	r4, 8006ac4 <_malloc_r+0x88>
 8006a72:	4629      	mov	r1, r5
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff ffbf 	bl	80069f8 <sbrk_aligned>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	d158      	bne.n	8006b32 <_malloc_r+0xf6>
 8006a80:	f8d8 4000 	ldr.w	r4, [r8]
 8006a84:	4627      	mov	r7, r4
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	d143      	bne.n	8006b12 <_malloc_r+0xd6>
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d04b      	beq.n	8006b26 <_malloc_r+0xea>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	4639      	mov	r1, r7
 8006a92:	4630      	mov	r0, r6
 8006a94:	eb04 0903 	add.w	r9, r4, r3
 8006a98:	f000 fb5c 	bl	8007154 <_sbrk_r>
 8006a9c:	4581      	cmp	r9, r0
 8006a9e:	d142      	bne.n	8006b26 <_malloc_r+0xea>
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	1a6d      	subs	r5, r5, r1
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff ffa6 	bl	80069f8 <sbrk_aligned>
 8006aac:	3001      	adds	r0, #1
 8006aae:	d03a      	beq.n	8006b26 <_malloc_r+0xea>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	442b      	add	r3, r5
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	bb62      	cbnz	r2, 8006b18 <_malloc_r+0xdc>
 8006abe:	f8c8 7000 	str.w	r7, [r8]
 8006ac2:	e00f      	b.n	8006ae4 <_malloc_r+0xa8>
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	1b52      	subs	r2, r2, r5
 8006ac8:	d420      	bmi.n	8006b0c <_malloc_r+0xd0>
 8006aca:	2a0b      	cmp	r2, #11
 8006acc:	d917      	bls.n	8006afe <_malloc_r+0xc2>
 8006ace:	1961      	adds	r1, r4, r5
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	6025      	str	r5, [r4, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	6059      	strne	r1, [r3, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	bf08      	it	eq
 8006adc:	f8c8 1000 	streq.w	r1, [r8]
 8006ae0:	5162      	str	r2, [r4, r5]
 8006ae2:	604b      	str	r3, [r1, #4]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 f82f 	bl	8006b48 <__malloc_unlock>
 8006aea:	f104 000b 	add.w	r0, r4, #11
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	f020 0007 	bic.w	r0, r0, #7
 8006af4:	1ac2      	subs	r2, r0, r3
 8006af6:	bf1c      	itt	ne
 8006af8:	1a1b      	subne	r3, r3, r0
 8006afa:	50a3      	strne	r3, [r4, r2]
 8006afc:	e7af      	b.n	8006a5e <_malloc_r+0x22>
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	bf0c      	ite	eq
 8006b04:	f8c8 2000 	streq.w	r2, [r8]
 8006b08:	605a      	strne	r2, [r3, #4]
 8006b0a:	e7eb      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	6864      	ldr	r4, [r4, #4]
 8006b10:	e7ae      	b.n	8006a70 <_malloc_r+0x34>
 8006b12:	463c      	mov	r4, r7
 8006b14:	687f      	ldr	r7, [r7, #4]
 8006b16:	e7b6      	b.n	8006a86 <_malloc_r+0x4a>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d1fb      	bne.n	8006b18 <_malloc_r+0xdc>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6053      	str	r3, [r2, #4]
 8006b24:	e7de      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b26:	230c      	movs	r3, #12
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f80c 	bl	8006b48 <__malloc_unlock>
 8006b30:	e794      	b.n	8006a5c <_malloc_r+0x20>
 8006b32:	6005      	str	r5, [r0, #0]
 8006b34:	e7d6      	b.n	8006ae4 <_malloc_r+0xa8>
 8006b36:	bf00      	nop
 8006b38:	20000438 	.word	0x20000438

08006b3c <__malloc_lock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_lock+0x8>)
 8006b3e:	f7ff bf0f 	b.w	8006960 <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	20000430 	.word	0x20000430

08006b48 <__malloc_unlock>:
 8006b48:	4801      	ldr	r0, [pc, #4]	@ (8006b50 <__malloc_unlock+0x8>)
 8006b4a:	f7ff bf0a 	b.w	8006962 <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	20000430 	.word	0x20000430

08006b54 <__ssputs_r>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	688e      	ldr	r6, [r1, #8]
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	42be      	cmp	r6, r7
 8006b5e:	680b      	ldr	r3, [r1, #0]
 8006b60:	4682      	mov	sl, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	4690      	mov	r8, r2
 8006b66:	d82d      	bhi.n	8006bc4 <__ssputs_r+0x70>
 8006b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b70:	d026      	beq.n	8006bc0 <__ssputs_r+0x6c>
 8006b72:	6965      	ldr	r5, [r4, #20]
 8006b74:	6909      	ldr	r1, [r1, #16]
 8006b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b7a:	eba3 0901 	sub.w	r9, r3, r1
 8006b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b82:	1c7b      	adds	r3, r7, #1
 8006b84:	444b      	add	r3, r9
 8006b86:	106d      	asrs	r5, r5, #1
 8006b88:	429d      	cmp	r5, r3
 8006b8a:	bf38      	it	cc
 8006b8c:	461d      	movcc	r5, r3
 8006b8e:	0553      	lsls	r3, r2, #21
 8006b90:	d527      	bpl.n	8006be2 <__ssputs_r+0x8e>
 8006b92:	4629      	mov	r1, r5
 8006b94:	f7ff ff52 	bl	8006a3c <_malloc_r>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b360      	cbz	r0, 8006bf6 <__ssputs_r+0xa2>
 8006b9c:	6921      	ldr	r1, [r4, #16]
 8006b9e:	464a      	mov	r2, r9
 8006ba0:	f000 fae8 	bl	8007174 <memcpy>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	6126      	str	r6, [r4, #16]
 8006bb2:	6165      	str	r5, [r4, #20]
 8006bb4:	444e      	add	r6, r9
 8006bb6:	eba5 0509 	sub.w	r5, r5, r9
 8006bba:	6026      	str	r6, [r4, #0]
 8006bbc:	60a5      	str	r5, [r4, #8]
 8006bbe:	463e      	mov	r6, r7
 8006bc0:	42be      	cmp	r6, r7
 8006bc2:	d900      	bls.n	8006bc6 <__ssputs_r+0x72>
 8006bc4:	463e      	mov	r6, r7
 8006bc6:	6820      	ldr	r0, [r4, #0]
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4641      	mov	r1, r8
 8006bcc:	f000 faa8 	bl	8007120 <memmove>
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	1b9b      	subs	r3, r3, r6
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	4433      	add	r3, r6
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be2:	462a      	mov	r2, r5
 8006be4:	f000 fad4 	bl	8007190 <_realloc_r>
 8006be8:	4606      	mov	r6, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d1e0      	bne.n	8006bb0 <__ssputs_r+0x5c>
 8006bee:	6921      	ldr	r1, [r4, #16]
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	f7ff feb7 	bl	8006964 <_free_r>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	f8ca 3000 	str.w	r3, [sl]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e7e9      	b.n	8006bde <__ssputs_r+0x8a>
	...

08006c0c <_svfiprintf_r>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	4698      	mov	r8, r3
 8006c12:	898b      	ldrh	r3, [r1, #12]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	b09d      	sub	sp, #116	@ 0x74
 8006c18:	4607      	mov	r7, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	d510      	bpl.n	8006c42 <_svfiprintf_r+0x36>
 8006c20:	690b      	ldr	r3, [r1, #16]
 8006c22:	b973      	cbnz	r3, 8006c42 <_svfiprintf_r+0x36>
 8006c24:	2140      	movs	r1, #64	@ 0x40
 8006c26:	f7ff ff09 	bl	8006a3c <_malloc_r>
 8006c2a:	6028      	str	r0, [r5, #0]
 8006c2c:	6128      	str	r0, [r5, #16]
 8006c2e:	b930      	cbnz	r0, 8006c3e <_svfiprintf_r+0x32>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	b01d      	add	sp, #116	@ 0x74
 8006c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3e:	2340      	movs	r3, #64	@ 0x40
 8006c40:	616b      	str	r3, [r5, #20]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	2320      	movs	r3, #32
 8006c48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c50:	2330      	movs	r3, #48	@ 0x30
 8006c52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006df0 <_svfiprintf_r+0x1e4>
 8006c56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c5a:	f04f 0901 	mov.w	r9, #1
 8006c5e:	4623      	mov	r3, r4
 8006c60:	469a      	mov	sl, r3
 8006c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c66:	b10a      	cbz	r2, 8006c6c <_svfiprintf_r+0x60>
 8006c68:	2a25      	cmp	r2, #37	@ 0x25
 8006c6a:	d1f9      	bne.n	8006c60 <_svfiprintf_r+0x54>
 8006c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c70:	d00b      	beq.n	8006c8a <_svfiprintf_r+0x7e>
 8006c72:	465b      	mov	r3, fp
 8006c74:	4622      	mov	r2, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ff6b 	bl	8006b54 <__ssputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f000 80a7 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c86:	445a      	add	r2, fp
 8006c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 809f 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cac:	4654      	mov	r4, sl
 8006cae:	2205      	movs	r2, #5
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	484e      	ldr	r0, [pc, #312]	@ (8006df0 <_svfiprintf_r+0x1e4>)
 8006cb6:	f7f9 faab 	bl	8000210 <memchr>
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_svfiprintf_r+0xea>
 8006cbe:	06d0      	lsls	r0, r2, #27
 8006cc0:	bf44      	itt	mi
 8006cc2:	2320      	movmi	r3, #32
 8006cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc8:	0711      	lsls	r1, r2, #28
 8006cca:	bf44      	itt	mi
 8006ccc:	232b      	movmi	r3, #43	@ 0x2b
 8006cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd8:	d015      	beq.n	8006d06 <_svfiprintf_r+0xfa>
 8006cda:	9a07      	ldr	r2, [sp, #28]
 8006cdc:	4654      	mov	r4, sl
 8006cde:	2000      	movs	r0, #0
 8006ce0:	f04f 0c0a 	mov.w	ip, #10
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cea:	3b30      	subs	r3, #48	@ 0x30
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d94b      	bls.n	8006d88 <_svfiprintf_r+0x17c>
 8006cf0:	b1b0      	cbz	r0, 8006d20 <_svfiprintf_r+0x114>
 8006cf2:	9207      	str	r2, [sp, #28]
 8006cf4:	e014      	b.n	8006d20 <_svfiprintf_r+0x114>
 8006cf6:	eba0 0308 	sub.w	r3, r0, r8
 8006cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	46a2      	mov	sl, r4
 8006d04:	e7d2      	b.n	8006cac <_svfiprintf_r+0xa0>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d19      	adds	r1, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9103      	str	r1, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbb      	ittet	lt
 8006d12:	425b      	neglt	r3, r3
 8006d14:	f042 0202 	orrlt.w	r2, r2, #2
 8006d18:	9307      	strge	r3, [sp, #28]
 8006d1a:	9307      	strlt	r3, [sp, #28]
 8006d1c:	bfb8      	it	lt
 8006d1e:	9204      	strlt	r2, [sp, #16]
 8006d20:	7823      	ldrb	r3, [r4, #0]
 8006d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d24:	d10a      	bne.n	8006d3c <_svfiprintf_r+0x130>
 8006d26:	7863      	ldrb	r3, [r4, #1]
 8006d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d2a:	d132      	bne.n	8006d92 <_svfiprintf_r+0x186>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	9203      	str	r2, [sp, #12]
 8006d34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d38:	3402      	adds	r4, #2
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e00 <_svfiprintf_r+0x1f4>
 8006d40:	7821      	ldrb	r1, [r4, #0]
 8006d42:	2203      	movs	r2, #3
 8006d44:	4650      	mov	r0, sl
 8006d46:	f7f9 fa63 	bl	8000210 <memchr>
 8006d4a:	b138      	cbz	r0, 8006d5c <_svfiprintf_r+0x150>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	eba0 000a 	sub.w	r0, r0, sl
 8006d52:	2240      	movs	r2, #64	@ 0x40
 8006d54:	4082      	lsls	r2, r0
 8006d56:	4313      	orrs	r3, r2
 8006d58:	3401      	adds	r4, #1
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	4824      	ldr	r0, [pc, #144]	@ (8006df4 <_svfiprintf_r+0x1e8>)
 8006d62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d66:	2206      	movs	r2, #6
 8006d68:	f7f9 fa52 	bl	8000210 <memchr>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d036      	beq.n	8006dde <_svfiprintf_r+0x1d2>
 8006d70:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <_svfiprintf_r+0x1ec>)
 8006d72:	bb1b      	cbnz	r3, 8006dbc <_svfiprintf_r+0x1b0>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	3307      	adds	r3, #7
 8006d78:	f023 0307 	bic.w	r3, r3, #7
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d82:	4433      	add	r3, r6
 8006d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d86:	e76a      	b.n	8006c5e <_svfiprintf_r+0x52>
 8006d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	2001      	movs	r0, #1
 8006d90:	e7a8      	b.n	8006ce4 <_svfiprintf_r+0xd8>
 8006d92:	2300      	movs	r3, #0
 8006d94:	3401      	adds	r4, #1
 8006d96:	9305      	str	r3, [sp, #20]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f04f 0c0a 	mov.w	ip, #10
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da4:	3a30      	subs	r2, #48	@ 0x30
 8006da6:	2a09      	cmp	r2, #9
 8006da8:	d903      	bls.n	8006db2 <_svfiprintf_r+0x1a6>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c6      	beq.n	8006d3c <_svfiprintf_r+0x130>
 8006dae:	9105      	str	r1, [sp, #20]
 8006db0:	e7c4      	b.n	8006d3c <_svfiprintf_r+0x130>
 8006db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db6:	4604      	mov	r4, r0
 8006db8:	2301      	movs	r3, #1
 8006dba:	e7f0      	b.n	8006d9e <_svfiprintf_r+0x192>
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dfc <_svfiprintf_r+0x1f0>)
 8006dc4:	a904      	add	r1, sp, #16
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f3af 8000 	nop.w
 8006dcc:	1c42      	adds	r2, r0, #1
 8006dce:	4606      	mov	r6, r0
 8006dd0:	d1d6      	bne.n	8006d80 <_svfiprintf_r+0x174>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	065b      	lsls	r3, r3, #25
 8006dd6:	f53f af2d 	bmi.w	8006c34 <_svfiprintf_r+0x28>
 8006dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ddc:	e72c      	b.n	8006c38 <_svfiprintf_r+0x2c>
 8006dde:	ab03      	add	r3, sp, #12
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	462a      	mov	r2, r5
 8006de4:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <_svfiprintf_r+0x1f0>)
 8006de6:	a904      	add	r1, sp, #16
 8006de8:	4638      	mov	r0, r7
 8006dea:	f000 f879 	bl	8006ee0 <_printf_i>
 8006dee:	e7ed      	b.n	8006dcc <_svfiprintf_r+0x1c0>
 8006df0:	08007294 	.word	0x08007294
 8006df4:	0800729e 	.word	0x0800729e
 8006df8:	00000000 	.word	0x00000000
 8006dfc:	08006b55 	.word	0x08006b55
 8006e00:	0800729a 	.word	0x0800729a

08006e04 <_printf_common>:
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e08:	4616      	mov	r6, r2
 8006e0a:	4698      	mov	r8, r3
 8006e0c:	688a      	ldr	r2, [r1, #8]
 8006e0e:	690b      	ldr	r3, [r1, #16]
 8006e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bfb8      	it	lt
 8006e18:	4613      	movlt	r3, r2
 8006e1a:	6033      	str	r3, [r6, #0]
 8006e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e20:	4607      	mov	r7, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	b10a      	cbz	r2, 8006e2a <_printf_common+0x26>
 8006e26:	3301      	adds	r3, #1
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	0699      	lsls	r1, r3, #26
 8006e2e:	bf42      	ittt	mi
 8006e30:	6833      	ldrmi	r3, [r6, #0]
 8006e32:	3302      	addmi	r3, #2
 8006e34:	6033      	strmi	r3, [r6, #0]
 8006e36:	6825      	ldr	r5, [r4, #0]
 8006e38:	f015 0506 	ands.w	r5, r5, #6
 8006e3c:	d106      	bne.n	8006e4c <_printf_common+0x48>
 8006e3e:	f104 0a19 	add.w	sl, r4, #25
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	6832      	ldr	r2, [r6, #0]
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	42ab      	cmp	r3, r5
 8006e4a:	dc26      	bgt.n	8006e9a <_printf_common+0x96>
 8006e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e50:	6822      	ldr	r2, [r4, #0]
 8006e52:	3b00      	subs	r3, #0
 8006e54:	bf18      	it	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	0692      	lsls	r2, r2, #26
 8006e5a:	d42b      	bmi.n	8006eb4 <_printf_common+0xb0>
 8006e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e60:	4641      	mov	r1, r8
 8006e62:	4638      	mov	r0, r7
 8006e64:	47c8      	blx	r9
 8006e66:	3001      	adds	r0, #1
 8006e68:	d01e      	beq.n	8006ea8 <_printf_common+0xa4>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	f003 0306 	and.w	r3, r3, #6
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	bf02      	ittt	eq
 8006e76:	68e5      	ldreq	r5, [r4, #12]
 8006e78:	6833      	ldreq	r3, [r6, #0]
 8006e7a:	1aed      	subeq	r5, r5, r3
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	bf0c      	ite	eq
 8006e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e84:	2500      	movne	r5, #0
 8006e86:	4293      	cmp	r3, r2
 8006e88:	bfc4      	itt	gt
 8006e8a:	1a9b      	subgt	r3, r3, r2
 8006e8c:	18ed      	addgt	r5, r5, r3
 8006e8e:	2600      	movs	r6, #0
 8006e90:	341a      	adds	r4, #26
 8006e92:	42b5      	cmp	r5, r6
 8006e94:	d11a      	bne.n	8006ecc <_printf_common+0xc8>
 8006e96:	2000      	movs	r0, #0
 8006e98:	e008      	b.n	8006eac <_printf_common+0xa8>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4652      	mov	r2, sl
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	47c8      	blx	r9
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d103      	bne.n	8006eb0 <_printf_common+0xac>
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	e7c6      	b.n	8006e42 <_printf_common+0x3e>
 8006eb4:	18e1      	adds	r1, r4, r3
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	2030      	movs	r0, #48	@ 0x30
 8006eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ebe:	4422      	add	r2, r4
 8006ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ec8:	3302      	adds	r3, #2
 8006eca:	e7c7      	b.n	8006e5c <_printf_common+0x58>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4622      	mov	r2, r4
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	47c8      	blx	r9
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d0e6      	beq.n	8006ea8 <_printf_common+0xa4>
 8006eda:	3601      	adds	r6, #1
 8006edc:	e7d9      	b.n	8006e92 <_printf_common+0x8e>
	...

08006ee0 <_printf_i>:
 8006ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee4:	7e0f      	ldrb	r7, [r1, #24]
 8006ee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ee8:	2f78      	cmp	r7, #120	@ 0x78
 8006eea:	4691      	mov	r9, r2
 8006eec:	4680      	mov	r8, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	469a      	mov	sl, r3
 8006ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ef6:	d807      	bhi.n	8006f08 <_printf_i+0x28>
 8006ef8:	2f62      	cmp	r7, #98	@ 0x62
 8006efa:	d80a      	bhi.n	8006f12 <_printf_i+0x32>
 8006efc:	2f00      	cmp	r7, #0
 8006efe:	f000 80d2 	beq.w	80070a6 <_printf_i+0x1c6>
 8006f02:	2f58      	cmp	r7, #88	@ 0x58
 8006f04:	f000 80b9 	beq.w	800707a <_printf_i+0x19a>
 8006f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f10:	e03a      	b.n	8006f88 <_printf_i+0xa8>
 8006f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f16:	2b15      	cmp	r3, #21
 8006f18:	d8f6      	bhi.n	8006f08 <_printf_i+0x28>
 8006f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f20 <_printf_i+0x40>)
 8006f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f20:	08006f79 	.word	0x08006f79
 8006f24:	08006f8d 	.word	0x08006f8d
 8006f28:	08006f09 	.word	0x08006f09
 8006f2c:	08006f09 	.word	0x08006f09
 8006f30:	08006f09 	.word	0x08006f09
 8006f34:	08006f09 	.word	0x08006f09
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08006f09 	.word	0x08006f09
 8006f40:	08006f09 	.word	0x08006f09
 8006f44:	08006f09 	.word	0x08006f09
 8006f48:	08006f09 	.word	0x08006f09
 8006f4c:	0800708d 	.word	0x0800708d
 8006f50:	08006fb7 	.word	0x08006fb7
 8006f54:	08007047 	.word	0x08007047
 8006f58:	08006f09 	.word	0x08006f09
 8006f5c:	08006f09 	.word	0x08006f09
 8006f60:	080070af 	.word	0x080070af
 8006f64:	08006f09 	.word	0x08006f09
 8006f68:	08006fb7 	.word	0x08006fb7
 8006f6c:	08006f09 	.word	0x08006f09
 8006f70:	08006f09 	.word	0x08006f09
 8006f74:	0800704f 	.word	0x0800704f
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	1d1a      	adds	r2, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6032      	str	r2, [r6, #0]
 8006f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e09d      	b.n	80070c8 <_printf_i+0x1e8>
 8006f8c:	6833      	ldr	r3, [r6, #0]
 8006f8e:	6820      	ldr	r0, [r4, #0]
 8006f90:	1d19      	adds	r1, r3, #4
 8006f92:	6031      	str	r1, [r6, #0]
 8006f94:	0606      	lsls	r6, r0, #24
 8006f96:	d501      	bpl.n	8006f9c <_printf_i+0xbc>
 8006f98:	681d      	ldr	r5, [r3, #0]
 8006f9a:	e003      	b.n	8006fa4 <_printf_i+0xc4>
 8006f9c:	0645      	lsls	r5, r0, #25
 8006f9e:	d5fb      	bpl.n	8006f98 <_printf_i+0xb8>
 8006fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	da03      	bge.n	8006fb0 <_printf_i+0xd0>
 8006fa8:	232d      	movs	r3, #45	@ 0x2d
 8006faa:	426d      	negs	r5, r5
 8006fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fb0:	4859      	ldr	r0, [pc, #356]	@ (8007118 <_printf_i+0x238>)
 8006fb2:	230a      	movs	r3, #10
 8006fb4:	e011      	b.n	8006fda <_printf_i+0xfa>
 8006fb6:	6821      	ldr	r1, [r4, #0]
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	0608      	lsls	r0, r1, #24
 8006fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fc0:	d402      	bmi.n	8006fc8 <_printf_i+0xe8>
 8006fc2:	0649      	lsls	r1, r1, #25
 8006fc4:	bf48      	it	mi
 8006fc6:	b2ad      	uxthmi	r5, r5
 8006fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fca:	4853      	ldr	r0, [pc, #332]	@ (8007118 <_printf_i+0x238>)
 8006fcc:	6033      	str	r3, [r6, #0]
 8006fce:	bf14      	ite	ne
 8006fd0:	230a      	movne	r3, #10
 8006fd2:	2308      	moveq	r3, #8
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fda:	6866      	ldr	r6, [r4, #4]
 8006fdc:	60a6      	str	r6, [r4, #8]
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	bfa2      	ittt	ge
 8006fe2:	6821      	ldrge	r1, [r4, #0]
 8006fe4:	f021 0104 	bicge.w	r1, r1, #4
 8006fe8:	6021      	strge	r1, [r4, #0]
 8006fea:	b90d      	cbnz	r5, 8006ff0 <_printf_i+0x110>
 8006fec:	2e00      	cmp	r6, #0
 8006fee:	d04b      	beq.n	8007088 <_printf_i+0x1a8>
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ff6:	fb03 5711 	mls	r7, r3, r1, r5
 8006ffa:	5dc7      	ldrb	r7, [r0, r7]
 8006ffc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007000:	462f      	mov	r7, r5
 8007002:	42bb      	cmp	r3, r7
 8007004:	460d      	mov	r5, r1
 8007006:	d9f4      	bls.n	8006ff2 <_printf_i+0x112>
 8007008:	2b08      	cmp	r3, #8
 800700a:	d10b      	bne.n	8007024 <_printf_i+0x144>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07df      	lsls	r7, r3, #31
 8007010:	d508      	bpl.n	8007024 <_printf_i+0x144>
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	6861      	ldr	r1, [r4, #4]
 8007016:	4299      	cmp	r1, r3
 8007018:	bfde      	ittt	le
 800701a:	2330      	movle	r3, #48	@ 0x30
 800701c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007020:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007024:	1b92      	subs	r2, r2, r6
 8007026:	6122      	str	r2, [r4, #16]
 8007028:	f8cd a000 	str.w	sl, [sp]
 800702c:	464b      	mov	r3, r9
 800702e:	aa03      	add	r2, sp, #12
 8007030:	4621      	mov	r1, r4
 8007032:	4640      	mov	r0, r8
 8007034:	f7ff fee6 	bl	8006e04 <_printf_common>
 8007038:	3001      	adds	r0, #1
 800703a:	d14a      	bne.n	80070d2 <_printf_i+0x1f2>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	b004      	add	sp, #16
 8007042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f043 0320 	orr.w	r3, r3, #32
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	4833      	ldr	r0, [pc, #204]	@ (800711c <_printf_i+0x23c>)
 8007050:	2778      	movs	r7, #120	@ 0x78
 8007052:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	6831      	ldr	r1, [r6, #0]
 800705a:	061f      	lsls	r7, r3, #24
 800705c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007060:	d402      	bmi.n	8007068 <_printf_i+0x188>
 8007062:	065f      	lsls	r7, r3, #25
 8007064:	bf48      	it	mi
 8007066:	b2ad      	uxthmi	r5, r5
 8007068:	6031      	str	r1, [r6, #0]
 800706a:	07d9      	lsls	r1, r3, #31
 800706c:	bf44      	itt	mi
 800706e:	f043 0320 	orrmi.w	r3, r3, #32
 8007072:	6023      	strmi	r3, [r4, #0]
 8007074:	b11d      	cbz	r5, 800707e <_printf_i+0x19e>
 8007076:	2310      	movs	r3, #16
 8007078:	e7ac      	b.n	8006fd4 <_printf_i+0xf4>
 800707a:	4827      	ldr	r0, [pc, #156]	@ (8007118 <_printf_i+0x238>)
 800707c:	e7e9      	b.n	8007052 <_printf_i+0x172>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	f023 0320 	bic.w	r3, r3, #32
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	e7f6      	b.n	8007076 <_printf_i+0x196>
 8007088:	4616      	mov	r6, r2
 800708a:	e7bd      	b.n	8007008 <_printf_i+0x128>
 800708c:	6833      	ldr	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	6961      	ldr	r1, [r4, #20]
 8007092:	1d18      	adds	r0, r3, #4
 8007094:	6030      	str	r0, [r6, #0]
 8007096:	062e      	lsls	r6, r5, #24
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	d501      	bpl.n	80070a0 <_printf_i+0x1c0>
 800709c:	6019      	str	r1, [r3, #0]
 800709e:	e002      	b.n	80070a6 <_printf_i+0x1c6>
 80070a0:	0668      	lsls	r0, r5, #25
 80070a2:	d5fb      	bpl.n	800709c <_printf_i+0x1bc>
 80070a4:	8019      	strh	r1, [r3, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	4616      	mov	r6, r2
 80070ac:	e7bc      	b.n	8007028 <_printf_i+0x148>
 80070ae:	6833      	ldr	r3, [r6, #0]
 80070b0:	1d1a      	adds	r2, r3, #4
 80070b2:	6032      	str	r2, [r6, #0]
 80070b4:	681e      	ldr	r6, [r3, #0]
 80070b6:	6862      	ldr	r2, [r4, #4]
 80070b8:	2100      	movs	r1, #0
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7f9 f8a8 	bl	8000210 <memchr>
 80070c0:	b108      	cbz	r0, 80070c6 <_printf_i+0x1e6>
 80070c2:	1b80      	subs	r0, r0, r6
 80070c4:	6060      	str	r0, [r4, #4]
 80070c6:	6863      	ldr	r3, [r4, #4]
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	2300      	movs	r3, #0
 80070cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d0:	e7aa      	b.n	8007028 <_printf_i+0x148>
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	4632      	mov	r2, r6
 80070d6:	4649      	mov	r1, r9
 80070d8:	4640      	mov	r0, r8
 80070da:	47d0      	blx	sl
 80070dc:	3001      	adds	r0, #1
 80070de:	d0ad      	beq.n	800703c <_printf_i+0x15c>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	079b      	lsls	r3, r3, #30
 80070e4:	d413      	bmi.n	800710e <_printf_i+0x22e>
 80070e6:	68e0      	ldr	r0, [r4, #12]
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	4298      	cmp	r0, r3
 80070ec:	bfb8      	it	lt
 80070ee:	4618      	movlt	r0, r3
 80070f0:	e7a6      	b.n	8007040 <_printf_i+0x160>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4632      	mov	r2, r6
 80070f6:	4649      	mov	r1, r9
 80070f8:	4640      	mov	r0, r8
 80070fa:	47d0      	blx	sl
 80070fc:	3001      	adds	r0, #1
 80070fe:	d09d      	beq.n	800703c <_printf_i+0x15c>
 8007100:	3501      	adds	r5, #1
 8007102:	68e3      	ldr	r3, [r4, #12]
 8007104:	9903      	ldr	r1, [sp, #12]
 8007106:	1a5b      	subs	r3, r3, r1
 8007108:	42ab      	cmp	r3, r5
 800710a:	dcf2      	bgt.n	80070f2 <_printf_i+0x212>
 800710c:	e7eb      	b.n	80070e6 <_printf_i+0x206>
 800710e:	2500      	movs	r5, #0
 8007110:	f104 0619 	add.w	r6, r4, #25
 8007114:	e7f5      	b.n	8007102 <_printf_i+0x222>
 8007116:	bf00      	nop
 8007118:	080072a5 	.word	0x080072a5
 800711c:	080072b6 	.word	0x080072b6

08007120 <memmove>:
 8007120:	4288      	cmp	r0, r1
 8007122:	b510      	push	{r4, lr}
 8007124:	eb01 0402 	add.w	r4, r1, r2
 8007128:	d902      	bls.n	8007130 <memmove+0x10>
 800712a:	4284      	cmp	r4, r0
 800712c:	4623      	mov	r3, r4
 800712e:	d807      	bhi.n	8007140 <memmove+0x20>
 8007130:	1e43      	subs	r3, r0, #1
 8007132:	42a1      	cmp	r1, r4
 8007134:	d008      	beq.n	8007148 <memmove+0x28>
 8007136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800713a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800713e:	e7f8      	b.n	8007132 <memmove+0x12>
 8007140:	4402      	add	r2, r0
 8007142:	4601      	mov	r1, r0
 8007144:	428a      	cmp	r2, r1
 8007146:	d100      	bne.n	800714a <memmove+0x2a>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800714e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007152:	e7f7      	b.n	8007144 <memmove+0x24>

08007154 <_sbrk_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d06      	ldr	r5, [pc, #24]	@ (8007170 <_sbrk_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7fa f804 	bl	800116c <_sbrk>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_sbrk_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_sbrk_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	2000042c 	.word	0x2000042c

08007174 <memcpy>:
 8007174:	440a      	add	r2, r1
 8007176:	4291      	cmp	r1, r2
 8007178:	f100 33ff 	add.w	r3, r0, #4294967295
 800717c:	d100      	bne.n	8007180 <memcpy+0xc>
 800717e:	4770      	bx	lr
 8007180:	b510      	push	{r4, lr}
 8007182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718a:	4291      	cmp	r1, r2
 800718c:	d1f9      	bne.n	8007182 <memcpy+0xe>
 800718e:	bd10      	pop	{r4, pc}

08007190 <_realloc_r>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	4680      	mov	r8, r0
 8007196:	4615      	mov	r5, r2
 8007198:	460c      	mov	r4, r1
 800719a:	b921      	cbnz	r1, 80071a6 <_realloc_r+0x16>
 800719c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a0:	4611      	mov	r1, r2
 80071a2:	f7ff bc4b 	b.w	8006a3c <_malloc_r>
 80071a6:	b92a      	cbnz	r2, 80071b4 <_realloc_r+0x24>
 80071a8:	f7ff fbdc 	bl	8006964 <_free_r>
 80071ac:	2400      	movs	r4, #0
 80071ae:	4620      	mov	r0, r4
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	f000 f81a 	bl	80071ec <_malloc_usable_size_r>
 80071b8:	4285      	cmp	r5, r0
 80071ba:	4606      	mov	r6, r0
 80071bc:	d802      	bhi.n	80071c4 <_realloc_r+0x34>
 80071be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071c2:	d8f4      	bhi.n	80071ae <_realloc_r+0x1e>
 80071c4:	4629      	mov	r1, r5
 80071c6:	4640      	mov	r0, r8
 80071c8:	f7ff fc38 	bl	8006a3c <_malloc_r>
 80071cc:	4607      	mov	r7, r0
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d0ec      	beq.n	80071ac <_realloc_r+0x1c>
 80071d2:	42b5      	cmp	r5, r6
 80071d4:	462a      	mov	r2, r5
 80071d6:	4621      	mov	r1, r4
 80071d8:	bf28      	it	cs
 80071da:	4632      	movcs	r2, r6
 80071dc:	f7ff ffca 	bl	8007174 <memcpy>
 80071e0:	4621      	mov	r1, r4
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7ff fbbe 	bl	8006964 <_free_r>
 80071e8:	463c      	mov	r4, r7
 80071ea:	e7e0      	b.n	80071ae <_realloc_r+0x1e>

080071ec <_malloc_usable_size_r>:
 80071ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f0:	1f18      	subs	r0, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfbc      	itt	lt
 80071f6:	580b      	ldrlt	r3, [r1, r0]
 80071f8:	18c0      	addlt	r0, r0, r3
 80071fa:	4770      	bx	lr

080071fc <_init>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr

08007208 <_fini>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr
