
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800a188  0800a188  0000b188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a640  0800a640  000121dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a640  0800a640  0000b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a648  0800a648  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a64c  0800a64c  0000b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000061dc  20000000  0800a650  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047ec  200061dc  0801082c  000121dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a9c8  0801082c  000129c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b55  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e2  00000000  00000000  0002ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002db7c  00000000  00000000  0002f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ae40  00000000  00000000  0005d02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001122c3  00000000  00000000  00077e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0018a12f  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000108c  00000000  00000000  0018a172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c20  00000000  00000000  0018b200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00191e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200061dc 	.word	0x200061dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a16c 	.word	0x0800a16c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200061e0 	.word	0x200061e0
 80001fc:	0800a16c 	.word	0x0800a16c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <createGuitarString>:
 *  Created on: Dec 2, 2024
 *      Author: Landon Ra Dagenais
 */
#include <guitar_string.h>

GuitarString createGuitarString(int number, float frequency, float targetFrequency, const char* note, TuningOffset tuning_offset) {
 8000ec8:	b4b0      	push	{r4, r5, r7}
 8000eca:	b08d      	sub	sp, #52	@ 0x34
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6178      	str	r0, [r7, #20]
 8000ed0:	6139      	str	r1, [r7, #16]
 8000ed2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ed6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	70fb      	strb	r3, [r7, #3]
    GuitarString string = {number, frequency, targetFrequency, note, tuning_offset};
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    return string;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	f107 041c 	add.w	r4, r7, #28
 8000efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	602b      	str	r3, [r5, #0]
}
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	3734      	adds	r7, #52	@ 0x34
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bcb0      	pop	{r4, r5, r7}
 8000f0c:	4770      	bx	lr
	...

08000f10 <initializeGuitarStrings>:

void initializeGuitarStrings(GuitarString strings[], GuitarString** currentString) {
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	61f8      	str	r0, [r7, #28]
 8000f18:	61b9      	str	r1, [r7, #24]

    strings[0] = createGuitarString(0, 82.41, 82.41, "E2", ON_PITCH);  // Low E
 8000f1a:	69fc      	ldr	r4, [r7, #28]
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	2303      	movs	r3, #3
 8000f20:	4a39      	ldr	r2, [pc, #228]	@ (8001008 <initializeGuitarStrings+0xf8>)
 8000f22:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800100c <initializeGuitarStrings+0xfc>
 8000f26:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 800100c <initializeGuitarStrings+0xfc>
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f7ff ffcc 	bl	8000ec8 <createGuitarString>
 8000f30:	4625      	mov	r5, r4
 8000f32:	463c      	mov	r4, r7
 8000f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	602b      	str	r3, [r5, #0]
    strings[1] = createGuitarString(1, 110.00, 110.00, "A2", ON_PITCH);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f103 0414 	add.w	r4, r3, #20
 8000f42:	4638      	mov	r0, r7
 8000f44:	2303      	movs	r3, #3
 8000f46:	4a32      	ldr	r2, [pc, #200]	@ (8001010 <initializeGuitarStrings+0x100>)
 8000f48:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8001014 <initializeGuitarStrings+0x104>
 8000f4c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001014 <initializeGuitarStrings+0x104>
 8000f50:	2101      	movs	r1, #1
 8000f52:	f7ff ffb9 	bl	8000ec8 <createGuitarString>
 8000f56:	4625      	mov	r5, r4
 8000f58:	463c      	mov	r4, r7
 8000f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	602b      	str	r3, [r5, #0]
    strings[2] = createGuitarString(2, 146.83, 146.83, "D3", ON_PITCH);
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8000f68:	4638      	mov	r0, r7
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001018 <initializeGuitarStrings+0x108>)
 8000f6e:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 800101c <initializeGuitarStrings+0x10c>
 8000f72:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800101c <initializeGuitarStrings+0x10c>
 8000f76:	2102      	movs	r1, #2
 8000f78:	f7ff ffa6 	bl	8000ec8 <createGuitarString>
 8000f7c:	4625      	mov	r5, r4
 8000f7e:	463c      	mov	r4, r7
 8000f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	602b      	str	r3, [r5, #0]
    strings[3] = createGuitarString(3, 196.00, 196.00, "G3", ON_PITCH);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8000f8e:	4638      	mov	r0, r7
 8000f90:	2303      	movs	r3, #3
 8000f92:	4a23      	ldr	r2, [pc, #140]	@ (8001020 <initializeGuitarStrings+0x110>)
 8000f94:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001024 <initializeGuitarStrings+0x114>
 8000f98:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001024 <initializeGuitarStrings+0x114>
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	f7ff ff93 	bl	8000ec8 <createGuitarString>
 8000fa2:	4625      	mov	r5, r4
 8000fa4:	463c      	mov	r4, r7
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	602b      	str	r3, [r5, #0]
    strings[4] = createGuitarString(4, 246.94, 246.94, "B3", ON_PITCH);
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <initializeGuitarStrings+0x118>)
 8000fba:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800102c <initializeGuitarStrings+0x11c>
 8000fbe:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800102c <initializeGuitarStrings+0x11c>
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	f7ff ff80 	bl	8000ec8 <createGuitarString>
 8000fc8:	4625      	mov	r5, r4
 8000fca:	463c      	mov	r4, r7
 8000fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	602b      	str	r3, [r5, #0]
    strings[5] = createGuitarString(5, 329.63, 329.63, "E4", ON_PITCH);  // High E
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000fda:	4638      	mov	r0, r7
 8000fdc:	2303      	movs	r3, #3
 8000fde:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <initializeGuitarStrings+0x120>)
 8000fe0:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001034 <initializeGuitarStrings+0x124>
 8000fe4:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001034 <initializeGuitarStrings+0x124>
 8000fe8:	2105      	movs	r1, #5
 8000fea:	f7ff ff6d 	bl	8000ec8 <createGuitarString>
 8000fee:	4625      	mov	r5, r4
 8000ff0:	463c      	mov	r4, r7
 8000ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	602b      	str	r3, [r5, #0]

    // Default to the first string (low E in this case)
    *currentString = &strings[0];
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bdb0      	pop	{r4, r5, r7, pc}
 8001008:	0800a188 	.word	0x0800a188
 800100c:	42a4d1ec 	.word	0x42a4d1ec
 8001010:	0800a18c 	.word	0x0800a18c
 8001014:	42dc0000 	.word	0x42dc0000
 8001018:	0800a190 	.word	0x0800a190
 800101c:	4312d47b 	.word	0x4312d47b
 8001020:	0800a194 	.word	0x0800a194
 8001024:	43440000 	.word	0x43440000
 8001028:	0800a198 	.word	0x0800a198
 800102c:	4376f0a4 	.word	0x4376f0a4
 8001030:	0800a19c 	.word	0x0800a19c
 8001034:	43a4d0a4 	.word	0x43a4d0a4

08001038 <calculateTuningOffset>:

void calculateTuningOffset(GuitarString* string, char* msg, size_t msg_size) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af04      	add	r7, sp, #16
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
    float diff = string->frequency - string->targetFrequency;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	ed93 7a01 	vldr	s14, [r3, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001054:	edc7 7a05 	vstr	s15, [r7, #20]

    const char* tuning_msg = "Tuning: ";
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <calculateTuningOffset+0x110>)
 800105a:	613b      	str	r3, [r7, #16]
    const char* arrow_prefix = "";
 800105c:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <calculateTuningOffset+0x114>)
 800105e:	61fb      	str	r3, [r7, #28]
    const char* arrow_suffix = "";
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <calculateTuningOffset+0x114>)
 8001062:	61bb      	str	r3, [r7, #24]

    // Determine tuning offset and corresponding arrows
    if (diff < -5.0) {
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800106c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d505      	bpl.n	8001082 <calculateTuningOffset+0x4a>
        string->tuning_offset = VERY_FLAT;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	741a      	strb	r2, [r3, #16]
        arrow_prefix = ">>>";  // Very flat
 800107c:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <calculateTuningOffset+0x118>)
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	e051      	b.n	8001126 <calculateTuningOffset+0xee>
    } else if (diff < -2.0) {
 8001082:	edd7 7a05 	vldr	s15, [r7, #20]
 8001086:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	d505      	bpl.n	80010a0 <calculateTuningOffset+0x68>
        string->tuning_offset = FLAT;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	741a      	strb	r2, [r3, #16]
        arrow_prefix = ">>";   // Flat
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <calculateTuningOffset+0x11c>)
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e042      	b.n	8001126 <calculateTuningOffset+0xee>
    } else if (diff < -0.5) {
 80010a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	d505      	bpl.n	80010be <calculateTuningOffset+0x86>
        string->tuning_offset = SLIGHTLY_FLAT;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2202      	movs	r2, #2
 80010b6:	741a      	strb	r2, [r3, #16]
        arrow_prefix = ">";    // Slightly flat
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <calculateTuningOffset+0x120>)
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	e033      	b.n	8001126 <calculateTuningOffset+0xee>
    } else if (diff <= 0.5) {
 80010be:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	d807      	bhi.n	80010e0 <calculateTuningOffset+0xa8>
        string->tuning_offset = ON_PITCH;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2203      	movs	r2, #3
 80010d4:	741a      	strb	r2, [r3, #16]
        arrow_prefix = ">";
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <calculateTuningOffset+0x120>)
 80010d8:	61fb      	str	r3, [r7, #28]
        arrow_suffix = "< In tune!";
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <calculateTuningOffset+0x124>)
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	e022      	b.n	8001126 <calculateTuningOffset+0xee>
    } else if (diff <= 2.0) {
 80010e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010e4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d805      	bhi.n	80010fe <calculateTuningOffset+0xc6>
        string->tuning_offset = SLIGHTLY_SHARP;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2204      	movs	r2, #4
 80010f6:	741a      	strb	r2, [r3, #16]
        arrow_suffix = "<";    // Slightly sharp
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <calculateTuningOffset+0x128>)
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	e013      	b.n	8001126 <calculateTuningOffset+0xee>
    } else if (diff <= 5.0) {
 80010fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001102:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110e:	d805      	bhi.n	800111c <calculateTuningOffset+0xe4>
        string->tuning_offset = SHARP;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2205      	movs	r2, #5
 8001114:	741a      	strb	r2, [r3, #16]
        arrow_suffix = "<<";   // Sharp
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <calculateTuningOffset+0x12c>)
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	e004      	b.n	8001126 <calculateTuningOffset+0xee>
    } else {
        string->tuning_offset = VERY_SHARP;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2206      	movs	r2, #6
 8001120:	741a      	strb	r2, [r3, #16]
        arrow_suffix = "<<<";  // Very sharp
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <calculateTuningOffset+0x130>)
 8001124:	61bb      	str	r3, [r7, #24]
    }

    // Format the message with arrows
    snprintf(msg, msg_size, "%s%s%s%s\r\n", tuning_msg, arrow_prefix, string->note, arrow_suffix);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	9202      	str	r2, [sp, #8]
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <calculateTuningOffset+0x134>)
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f006 fe94 	bl	8007e68 <sniprintf>
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0800a1a0 	.word	0x0800a1a0
 800114c:	0800a1ac 	.word	0x0800a1ac
 8001150:	0800a1b0 	.word	0x0800a1b0
 8001154:	0800a1b4 	.word	0x0800a1b4
 8001158:	0800a1b8 	.word	0x0800a1b8
 800115c:	0800a1bc 	.word	0x0800a1bc
 8001160:	0800a1c8 	.word	0x0800a1c8
 8001164:	0800a1cc 	.word	0x0800a1cc
 8001168:	0800a1d0 	.word	0x0800a1d0
 800116c:	0800a1d4 	.word	0x0800a1d4

08001170 <switchString>:



void switchString(GuitarString strings[], GuitarString** currentString) {
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]

    int currentIndex = -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	e011      	b.n	80011aa <switchString+0x3a>
        if (&strings[i] == *currentString) {
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d102      	bne.n	80011a4 <switchString+0x34>
            currentIndex = i;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	617b      	str	r3, [r7, #20]
            break;
 80011a2:	e005      	b.n	80011b0 <switchString+0x40>
    for (int i = 0; i < 6; i++) {
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	3301      	adds	r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	ddea      	ble.n	8001186 <switchString+0x16>
        }
    }

    int nextIndex = (currentIndex + 1) % 6;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <switchString+0x7c>)
 80011b6:	fb83 3102 	smull	r3, r1, r3, r2
 80011ba:	17d3      	asrs	r3, r2, #31
 80011bc:	1ac9      	subs	r1, r1, r3
 80011be:	460b      	mov	r3, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	440b      	add	r3, r1
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	60fb      	str	r3, [r7, #12]
    *currentString = &strings[nextIndex];
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	441a      	add	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	601a      	str	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2aaaaaab 	.word	0x2aaaaaab

080011f0 <yin_detect_frequency>:

#define THRESHOLD 0.025f          // Threshold for the YIN algorithm

void yin_detect_frequency(float32_t *buffer, uint32_t length, uint32_t sample_rate, GuitarString* string) {
 80011f0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80011f4:	b097      	sub	sp, #92	@ 0x5c
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	466b      	mov	r3, sp
 8001202:	4618      	mov	r0, r3
	float32_t min_value = 1.0f;
 8001204:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001208:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t min_index = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	653b      	str	r3, [r7, #80]	@ 0x50
	float32_t cumulative_diff[length];
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	460b      	mov	r3, r1
 8001212:	3b01      	subs	r3, #1
 8001214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001216:	2300      	movs	r3, #0
 8001218:	4688      	mov	r8, r1
 800121a:	4699      	mov	r9, r3
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001228:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800122c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001230:	2300      	movs	r3, #0
 8001232:	460c      	mov	r4, r1
 8001234:	461d      	mov	r5, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	016b      	lsls	r3, r5, #5
 8001240:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001244:	0162      	lsls	r2, r4, #5
 8001246:	008b      	lsls	r3, r1, #2
 8001248:	3307      	adds	r3, #7
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	ebad 0d03 	sub.w	sp, sp, r3
 8001252:	466b      	mov	r3, sp
 8001254:	3303      	adds	r3, #3
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	63bb      	str	r3, [r7, #56]	@ 0x38
	float32_t threshold = THRESHOLD;
 800125c:	4b6f      	ldr	r3, [pc, #444]	@ (800141c <yin_detect_frequency+0x22c>)
 800125e:	637b      	str	r3, [r7, #52]	@ 0x34

	float32_t target_frequency = string->targetFrequency;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t target_lag = (uint32_t)(sample_rate / target_frequency);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001270:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127c:	ee17 3a90 	vmov	r3, s15
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint32_t start_lag = target_lag - 50;
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	3b32      	subs	r3, #50	@ 0x32
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t end_lag = target_lag + 50;
 8001288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128a:	3332      	adds	r3, #50	@ 0x32
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24

	// Step 1: Calculate difference function
	for (uint32_t lag = start_lag ; lag < end_lag; lag++) {
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001292:	e063      	b.n	800135c <yin_detect_frequency+0x16c>
		float32_t sum = 0.0f;
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	64bb      	str	r3, [r7, #72]	@ 0x48
		for (uint32_t i = 0; i < length - lag; i++) {
 800129a:	2300      	movs	r3, #0
 800129c:	647b      	str	r3, [r7, #68]	@ 0x44
 800129e:	e01e      	b.n	80012de <yin_detect_frequency+0xee>
			float32_t diff = buffer[i] - buffer[i + lag];
 80012a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	ed93 7a00 	vldr	s14, [r3]
 80012ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c0:	edc7 7a05 	vstr	s15, [r7, #20]
			sum += diff * diff;
 80012c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012cc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80012d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		for (uint32_t i = 0; i < length - lag; i++) {
 80012d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012da:	3301      	adds	r3, #1
 80012dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3da      	bcc.n	80012a0 <yin_detect_frequency+0xb0>
		}
		cumulative_diff[lag] = sum / (float32_t)(length - lag);
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	edc3 7a00 	vstr	s15, [r3]

		// Step 2: Check if cumulative difference crosses the threshold
		if (cumulative_diff[lag] < threshold && lag > 1) {
 800130c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800130e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800131c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	dd17      	ble.n	8001356 <yin_detect_frequency+0x166>
 8001326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001328:	2b01      	cmp	r3, #1
 800132a:	d914      	bls.n	8001356 <yin_detect_frequency+0x166>
			if (cumulative_diff[lag] < min_value) {
 800132c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800132e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800133c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd07      	ble.n	8001356 <yin_detect_frequency+0x166>
				min_value = cumulative_diff[lag];
 8001346:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	657b      	str	r3, [r7, #84]	@ 0x54
				min_index = lag;
 8001352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001354:	653b      	str	r3, [r7, #80]	@ 0x50
	for (uint32_t lag = start_lag ; lag < end_lag; lag++) {
 8001356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001358:	3301      	adds	r3, #1
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800135c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	429a      	cmp	r2, r3
 8001362:	d397      	bcc.n	8001294 <yin_detect_frequency+0xa4>
			}
		}
	}

	if (min_index > 0) {
 8001364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	d051      	beq.n	800140e <yin_detect_frequency+0x21e>

		float32_t lag_refined = min_index;
 800136a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	    if (min_index > start_lag && min_index < end_lag) {
 8001378:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800137a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137c:	429a      	cmp	r2, r3
 800137e:	d934      	bls.n	80013ea <yin_detect_frequency+0x1fa>
 8001380:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	429a      	cmp	r2, r3
 8001386:	d230      	bcs.n	80013ea <yin_detect_frequency+0x1fa>
	        float32_t prev = cumulative_diff[min_index - 1];
 8001388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800138a:	3b01      	subs	r3, #1
 800138c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	623b      	str	r3, [r7, #32]
	        float32_t next = cumulative_diff[min_index + 1];
 8001396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001398:	3301      	adds	r3, #1
 800139a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	61fb      	str	r3, [r7, #28]
	        lag_refined = min_index + (prev - next) / (2.0f * (prev - 2.0f * cumulative_diff[min_index] + next));
 80013a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ae:	edd7 6a08 	vldr	s13, [r7, #32]
 80013b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b6:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80013ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ca:	edd7 6a08 	vldr	s13, [r7, #32]
 80013ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80013da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013de:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	    }
		float32_t detected_freq = ((float32_t)sample_rate / lag_refined) + 1.0f;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013f4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001404:	edc7 7a06 	vstr	s15, [r7, #24]
		string->frequency = detected_freq;  // Update the string's frequency
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	4685      	mov	sp, r0
	}

}
 8001410:	bf00      	nop
 8001412:	375c      	adds	r7, #92	@ 0x5c
 8001414:	46bd      	mov	sp, r7
 8001416:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800141a:	4770      	bx	lr
 800141c:	3ccccccd 	.word	0x3ccccccd

08001420 <kalmanFilter>:
#include "KalmanFilter_CMSIS.h"
#include "arm_math.h" // CMSIS-DSP library

// Function to update Kalman filter using CMSIS DSP functions
void kalmanFilter(float32_t* inputArray, float32_t* outputArray, int length) {
 8001420:	b480      	push	{r7}
 8001422:	b08d      	sub	sp, #52	@ 0x34
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	kalman_state_t kstate_cmsis;

	// Initialize the internal Kalman state
    kstate_cmsis.q = 0.01f;  // Small process noise covariance
 800142c:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <kalmanFilter+0xc4>)
 800142e:	617b      	str	r3, [r7, #20]
    kstate_cmsis.r = 0.1f;   // Small measurement noise covariance
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <kalmanFilter+0xc8>)
 8001432:	61bb      	str	r3, [r7, #24]
    kstate_cmsis.x = 0.0f;   // Initial estimate
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    kstate_cmsis.p = 1.0f;   // Initial estimation error covariance (large uncertainty)
 800143a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800143e:	623b      	str	r3, [r7, #32]
    kstate_cmsis.k = 0.0f;   // Kalman gain initialized to 0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < length; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800144a:	e040      	b.n	80014ce <kalmanFilter+0xae>
		kstate_cmsis.p += kstate_cmsis.q;
 800144c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001450:	edd7 7a05 	vldr	s15, [r7, #20]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	edc7 7a08 	vstr	s15, [r7, #32]

		float32_t div = kstate_cmsis.p + kstate_cmsis.r;
 800145c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001460:	edd7 7a06 	vldr	s15, [r7, #24]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Calculate the Kalman gain
		kstate_cmsis.k = kstate_cmsis.p / div;
 800146c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001470:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		// Update the estimated value
		kstate_cmsis.x += kstate_cmsis.k * (inputArray[i] - kstate_cmsis.x);
 800147c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001480:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	ed93 6a00 	vldr	s12, [r3]
 8001490:	edd7 7a07 	vldr	s15, [r7, #28]
 8001494:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	edc7 7a07 	vstr	s15, [r7, #28]

		// Update the estimation error covariance
		kstate_cmsis.p *= (1 - kstate_cmsis.k);
 80014a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014a8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80014ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a08 	vstr	s15, [r7, #32]

		// Store the result in the output array
		outputArray[i] = kstate_cmsis.x;
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	4413      	add	r3, r2
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80014c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ca:	3301      	adds	r3, #1
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbba      	blt.n	800144c <kalmanFilter+0x2c>
	}


}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3734      	adds	r7, #52	@ 0x34
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	3c23d70a 	.word	0x3c23d70a
 80014e8:	3dcccccd 	.word	0x3dcccccd

080014ec <toggleMode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void toggleMode() {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if (current_mode == MODE_MICROPHONE) {
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <toggleMode+0x98>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d12d      	bne.n	8001556 <toggleMode+0x6a>
		// Switch to ear tuning mode

		current_mode = MODE_EAR_TUNING;
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <toggleMode+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
		HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter2);
 8001500:	4821      	ldr	r0, [pc, #132]	@ (8001588 <toggleMode+0x9c>)
 8001502:	f001 ffd1 	bl	80034a8 <HAL_DFSDM_FilterRegularStop_DMA>
		playSound = 1;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <toggleMode+0xa0>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
		sprintf(msg, "Current mode: Ear Tuning\r\n");
 800150c:	4920      	ldr	r1, [pc, #128]	@ (8001590 <toggleMode+0xa4>)
 800150e:	4821      	ldr	r0, [pc, #132]	@ (8001594 <toggleMode+0xa8>)
 8001510:	f006 fcde 	bl	8007ed0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001514:	481f      	ldr	r0, [pc, #124]	@ (8001594 <toggleMode+0xa8>)
 8001516:	f7fe fec3 	bl	80002a0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	491c      	ldr	r1, [pc, #112]	@ (8001594 <toggleMode+0xa8>)
 8001524:	481c      	ldr	r0, [pc, #112]	@ (8001598 <toggleMode+0xac>)
 8001526:	f005 f8d9 	bl	80066dc <HAL_UART_Transmit>
		sprintf(msg, "Playing string %d (%s).\r\n", currString->number, currString->note);
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <toggleMode+0xb0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <toggleMode+0xb0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	491a      	ldr	r1, [pc, #104]	@ (80015a0 <toggleMode+0xb4>)
 8001538:	4816      	ldr	r0, [pc, #88]	@ (8001594 <toggleMode+0xa8>)
 800153a:	f006 fcc9 	bl	8007ed0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800153e:	4815      	ldr	r0, [pc, #84]	@ (8001594 <toggleMode+0xa8>)
 8001540:	f7fe feae 	bl	80002a0 <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4911      	ldr	r1, [pc, #68]	@ (8001594 <toggleMode+0xa8>)
 800154e:	4812      	ldr	r0, [pc, #72]	@ (8001598 <toggleMode+0xac>)
 8001550:	f005 f8c4 	bl	80066dc <HAL_UART_Transmit>
		//HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, mic_rec, MIC_REC_SIZE);
		sprintf(msg, "Current mode: Microphone Tuning\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		bufferFull = 1;
	}
}
 8001554:	e014      	b.n	8001580 <toggleMode+0x94>
		current_mode = MODE_MICROPHONE;  // Switch to microphone mode
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <toggleMode+0x98>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
		sprintf(msg, "Current mode: Microphone Tuning\r\n");
 800155c:	4911      	ldr	r1, [pc, #68]	@ (80015a4 <toggleMode+0xb8>)
 800155e:	480d      	ldr	r0, [pc, #52]	@ (8001594 <toggleMode+0xa8>)
 8001560:	f006 fcb6 	bl	8007ed0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <toggleMode+0xa8>)
 8001566:	f7fe fe9b 	bl	80002a0 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <toggleMode+0xa8>)
 8001574:	4808      	ldr	r0, [pc, #32]	@ (8001598 <toggleMode+0xac>)
 8001576:	f005 f8b1 	bl	80066dc <HAL_UART_Transmit>
		bufferFull = 1;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <toggleMode+0xbc>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20006000 	.word	0x20006000
 8001588:	2000626c 	.word	0x2000626c
 800158c:	2000a7e0 	.word	0x2000a7e0
 8001590:	0800a1e0 	.word	0x0800a1e0
 8001594:	2000a7e4 	.word	0x2000a7e4
 8001598:	200063a4 	.word	0x200063a4
 800159c:	2000a7d8 	.word	0x2000a7d8
 80015a0:	0800a1fc 	.word	0x0800a1fc
 80015a4:	0800a218 	.word	0x0800a218
 80015a8:	2000a7dc 	.word	0x2000a7dc

080015ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {  // Blue button on PC13
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015bc:	d13e      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x90>

		//CHECK BUTTON RELEASE
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {  // Button is released
 80015be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c2:	4820      	ldr	r0, [pc, #128]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x98>)
 80015c4:	f002 fea6 	bl	8004314 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d131      	bne.n	8001632 <HAL_GPIO_EXTI_Callback+0x86>
			button_release_time = HAL_GetTick();
 80015ce:	f001 f839 	bl	8002644 <HAL_GetTick>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001648 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015d6:	6013      	str	r3, [r2, #0]
			if (button_release_time - button_press_time >= 1000) {
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_GPIO_EXTI_Callback+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e6:	d302      	bcc.n	80015ee <HAL_GPIO_EXTI_Callback+0x42>
				toggleMode();  // Button was held long enough
 80015e8:	f7ff ff80 	bl	80014ec <toggleMode>
			}
		} else {  // Button is pressed
			button_press_time = HAL_GetTick();
		}
	}
}
 80015ec:	e026      	b.n	800163c <HAL_GPIO_EXTI_Callback+0x90>
				switchString(strings, &currString);
 80015ee:	4918      	ldr	r1, [pc, #96]	@ (8001650 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015f0:	4818      	ldr	r0, [pc, #96]	@ (8001654 <HAL_GPIO_EXTI_Callback+0xa8>)
 80015f2:	f7ff fdbd 	bl	8001170 <switchString>
				sprintf(msg, "Switched to String %d (%s).\r\n", currString->number, currString->note);
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4915      	ldr	r1, [pc, #84]	@ (8001658 <HAL_GPIO_EXTI_Callback+0xac>)
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001606:	f006 fc63 	bl	8007ed0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800160a:	4814      	ldr	r0, [pc, #80]	@ (800165c <HAL_GPIO_EXTI_Callback+0xb0>)
 800160c:	f7fe fe48 	bl	80002a0 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	4910      	ldr	r1, [pc, #64]	@ (800165c <HAL_GPIO_EXTI_Callback+0xb0>)
 800161a:	4811      	ldr	r0, [pc, #68]	@ (8001660 <HAL_GPIO_EXTI_Callback+0xb4>)
 800161c:	f005 f85e 	bl	80066dc <HAL_UART_Transmit>
				if (current_mode == MODE_EAR_TUNING){
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x90>
					playSound = 1;
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_GPIO_EXTI_Callback+0xbc>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	e004      	b.n	800163c <HAL_GPIO_EXTI_Callback+0x90>
			button_press_time = HAL_GetTick();
 8001632:	f001 f807 	bl	8002644 <HAL_GetTick>
 8001636:	4603      	mov	r3, r0
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_GPIO_EXTI_Callback+0xa0>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	48000800 	.word	0x48000800
 8001648:	2000643c 	.word	0x2000643c
 800164c:	20006438 	.word	0x20006438
 8001650:	2000a7d8 	.word	0x2000a7d8
 8001654:	2000a760 	.word	0x2000a760
 8001658:	0800a23c 	.word	0x0800a23c
 800165c:	2000a7e4 	.word	0x2000a7e4
 8001660:	200063a4 	.word	0x200063a4
 8001664:	20006000 	.word	0x20006000
 8001668:	2000a7e0 	.word	0x2000a7e0

0800166c <myDMA_XferCpltCallback>:

//this is called when the mic recording buffer is filled
void myDMA_XferCpltCallback(DMA_HandleTypeDef *hdma){
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if (hdma == &hdma_dfsdm1_flt2) {  // Check if the DMA is for DFSDM
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <myDMA_XferCpltCallback+0x24>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d102      	bne.n	8001682 <myDMA_XferCpltCallback+0x16>
		bufferFull = 1;
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <myDMA_XferCpltCallback+0x28>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
	}
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200062f8 	.word	0x200062f8
 8001694:	2000a7dc 	.word	0x2000a7dc

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169e:	f000 ff68 	bl	8002572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a2:	f000 f897 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a6:	f000 fa4d 	bl	8001b44 <MX_GPIO_Init>
  MX_DMA_Init();
 80016aa:	f000 fa19 	bl	8001ae0 <MX_DMA_Init>
  MX_DAC1_Init();
 80016ae:	f000 f8e3 	bl	8001878 <MX_DAC1_Init>
  MX_TIM2_Init();
 80016b2:	f000 f97b 	bl	80019ac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80016b6:	f000 f9c7 	bl	8001a48 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 80016ba:	f000 f911 	bl	80018e0 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
	initializeGuitarStrings(strings, &currString);
 80016be:	4938      	ldr	r1, [pc, #224]	@ (80017a0 <main+0x108>)
 80016c0:	4838      	ldr	r0, [pc, #224]	@ (80017a4 <main+0x10c>)
 80016c2:	f7ff fc25 	bl	8000f10 <initializeGuitarStrings>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80016c6:	2100      	movs	r1, #0
 80016c8:	4837      	ldr	r0, [pc, #220]	@ (80017a8 <main+0x110>)
 80016ca:	f001 f91e 	bl	800290a <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80016ce:	4837      	ldr	r0, [pc, #220]	@ (80017ac <main+0x114>)
 80016d0:	f004 fb5c 	bl	8005d8c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1){
		switch (current_mode) {
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <main+0x118>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <main+0x4c>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d01a      	beq.n	8001718 <main+0x80>
 80016e2:	e7f7      	b.n	80016d4 <main+0x3c>
		case MODE_EAR_TUNING:


		if (playSound == 1){
 80016e4:	4b33      	ldr	r3, [pc, #204]	@ (80017b4 <main+0x11c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d155      	bne.n	8001798 <main+0x100>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80016ec:	2100      	movs	r1, #0
 80016ee:	482e      	ldr	r0, [pc, #184]	@ (80017a8 <main+0x110>)
 80016f0:	f001 fa2a 	bl	8002b48 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sine_samples[currString->number], 1024, DAC_ALIGN_12B_R);
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <main+0x108>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	031b      	lsls	r3, r3, #12
 80016fc:	4a2e      	ldr	r2, [pc, #184]	@ (80017b8 <main+0x120>)
 80016fe:	441a      	add	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001708:	2100      	movs	r1, #0
 800170a:	4827      	ldr	r0, [pc, #156]	@ (80017a8 <main+0x110>)
 800170c:	f001 f950 	bl	80029b0 <HAL_DAC_Start_DMA>
			playSound = 0;
 8001710:	4b28      	ldr	r3, [pc, #160]	@ (80017b4 <main+0x11c>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
		}

			break;
 8001716:	e03f      	b.n	8001798 <main+0x100>

		case MODE_MICROPHONE:
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);;
 8001718:	2100      	movs	r1, #0
 800171a:	4823      	ldr	r0, [pc, #140]	@ (80017a8 <main+0x110>)
 800171c:	f001 fa14 	bl	8002b48 <HAL_DAC_Stop_DMA>

			if (bufferFull == 1){
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <main+0x124>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d139      	bne.n	800179c <main+0x104>

				//mic process returns -25 in first buffer out index
				// when rms amplitude below threshold (too quiet)
				mic_process(mic_rec, mic_out, BUFFER_SIZE);
 8001728:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800172c:	4924      	ldr	r1, [pc, #144]	@ (80017c0 <main+0x128>)
 800172e:	4825      	ldr	r0, [pc, #148]	@ (80017c4 <main+0x12c>)
 8001730:	f000 faa2 	bl	8001c78 <mic_process>

				//threshold detection,
				if (mic_out[0] != -25){
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <main+0x128>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 800173e:	eef4 7a47 	vcmp.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d01a      	beq.n	800177e <main+0xe6>
					yin_detect_frequency(mic_out, BUFFER_SIZE, SAMPLE_RATE, currString);
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <main+0x108>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001754:	481a      	ldr	r0, [pc, #104]	@ (80017c0 <main+0x128>)
 8001756:	f7ff fd4b 	bl	80011f0 <yin_detect_frequency>
					calculateTuningOffset(currString, msg, MSG_SIZE);
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <main+0x108>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2264      	movs	r2, #100	@ 0x64
 8001760:	4919      	ldr	r1, [pc, #100]	@ (80017c8 <main+0x130>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc68 	bl	8001038 <calculateTuningOffset>
					//sprintf(msg, "Predicted frequency: %f Hz \r\n", currString->frequency);

					HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <main+0x130>)
 800176a:	f7fe fd99 	bl	80002a0 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	4914      	ldr	r1, [pc, #80]	@ (80017c8 <main+0x130>)
 8001778:	4814      	ldr	r0, [pc, #80]	@ (80017cc <main+0x134>)
 800177a:	f004 ffaf 	bl	80066dc <HAL_UART_Transmit>
				}
				HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter2);
 800177e:	4814      	ldr	r0, [pc, #80]	@ (80017d0 <main+0x138>)
 8001780:	f001 fe92 	bl	80034a8 <HAL_DFSDM_FilterRegularStop_DMA>
				HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, mic_rec, MIC_REC_SIZE);
 8001784:	f640 02c8 	movw	r2, #2248	@ 0x8c8
 8001788:	490e      	ldr	r1, [pc, #56]	@ (80017c4 <main+0x12c>)
 800178a:	4811      	ldr	r0, [pc, #68]	@ (80017d0 <main+0x138>)
 800178c:	f001 fe0a 	bl	80033a4 <HAL_DFSDM_FilterRegularStart_DMA>
				bufferFull = 0;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <main+0x124>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
			}

			break;
 8001796:	e001      	b.n	800179c <main+0x104>
			break;
 8001798:	bf00      	nop
 800179a:	e79b      	b.n	80016d4 <main+0x3c>
			break;
 800179c:	bf00      	nop
		switch (current_mode) {
 800179e:	e799      	b.n	80016d4 <main+0x3c>
 80017a0:	2000a7d8 	.word	0x2000a7d8
 80017a4:	2000a760 	.word	0x2000a760
 80017a8:	200061f8 	.word	0x200061f8
 80017ac:	20006358 	.word	0x20006358
 80017b0:	20006000 	.word	0x20006000
 80017b4:	2000a7e0 	.word	0x2000a7e0
 80017b8:	20000000 	.word	0x20000000
 80017bc:	2000a7dc 	.word	0x2000a7dc
 80017c0:	20008760 	.word	0x20008760
 80017c4:	20006440 	.word	0x20006440
 80017c8:	2000a7e4 	.word	0x2000a7e4
 80017cc:	200063a4 	.word	0x200063a4
 80017d0:	2000626c 	.word	0x2000626c

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	@ 0x58
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2244      	movs	r2, #68	@ 0x44
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 fbd7 	bl	8007f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017f6:	2000      	movs	r0, #0
 80017f8:	f002 fddc 	bl	80043b4 <HAL_PWREx_ControlVoltageScaling>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001802:	f000 f9f9 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001806:	2310      	movs	r3, #16
 8001808:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800180a:	2301      	movs	r3, #1
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001812:	23a0      	movs	r3, #160	@ 0xa0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001816:	2302      	movs	r3, #2
 8001818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800181a:	2301      	movs	r3, #1
 800181c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800181e:	2302      	movs	r3, #2
 8001820:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001822:	230f      	movs	r3, #15
 8001824:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182e:	2302      	movs	r3, #2
 8001830:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fe60 	bl	80044fc <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001842:	f000 f9d9 	bl	8001bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	230f      	movs	r3, #15
 8001848:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2303      	movs	r3, #3
 800184c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800185a:	463b      	mov	r3, r7
 800185c:	2105      	movs	r1, #5
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fa66 	bl	8004d30 <HAL_RCC_ClockConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800186a:	f000 f9c5 	bl	8001bf8 <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	3758      	adds	r7, #88	@ 0x58
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800187e:	463b      	mov	r3, r7
 8001880:	2228      	movs	r2, #40	@ 0x28
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fb86 	bl	8007f96 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_DAC1_Init+0x60>)
 800188c:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <MX_DAC1_Init+0x64>)
 800188e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001890:	4811      	ldr	r0, [pc, #68]	@ (80018d8 <MX_DAC1_Init+0x60>)
 8001892:	f001 f818 	bl	80028c6 <HAL_DAC_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800189c:	f000 f9ac 	bl	8001bf8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80018a4:	230a      	movs	r3, #10
 80018a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80018a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018ac:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_DAC1_Init+0x60>)
 80018c2:	f001 f9a5 	bl	8002c10 <HAL_DAC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80018cc:	f000 f994 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	@ 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200061f8 	.word	0x200061f8
 80018dc:	40007400 	.word	0x40007400

080018e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 80018e6:	4a2d      	ldr	r2, [pc, #180]	@ (800199c <MX_DFSDM1_Init+0xbc>)
 80018e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 80018fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001902:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 64;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 8001906:	2240      	movs	r2, #64	@ 0x40
 8001908:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 800190a:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 800190c:	2201      	movs	r2, #1
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 8001910:	4821      	ldr	r0, [pc, #132]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 8001912:	f001 fc27 	bl	8003164 <HAL_DFSDM_FilterInit>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800191c:	f000 f96c 	bl	8001bf8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001922:	4a20      	ldr	r2, [pc, #128]	@ (80019a4 <MX_DFSDM1_Init+0xc4>)
 8001924:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001928:	2201      	movs	r2, #1
 800192a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800192c:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 800192e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001932:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001936:	2214      	movs	r2, #20
 8001938:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 800194e:	2201      	movs	r2, #1
 8001950:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001954:	2204      	movs	r2, #4
 8001956:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001960:	2201      	movs	r2, #1
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001966:	2200      	movs	r2, #0
 8001968:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 4;
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 800196c:	2204      	movs	r2, #4
 800196e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001970:	480b      	ldr	r0, [pc, #44]	@ (80019a0 <MX_DFSDM1_Init+0xc0>)
 8001972:	f001 fb23 	bl	8002fbc <HAL_DFSDM_ChannelInit>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 800197c:	f000 f93c 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001980:	2201      	movs	r2, #1
 8001982:	4909      	ldr	r1, [pc, #36]	@ (80019a8 <MX_DFSDM1_Init+0xc8>)
 8001984:	4804      	ldr	r0, [pc, #16]	@ (8001998 <MX_DFSDM1_Init+0xb8>)
 8001986:	f001 fcc7 	bl	8003318 <HAL_DFSDM_FilterConfigRegChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8001990:	f000 f932 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000626c 	.word	0x2000626c
 800199c:	40016200 	.word	0x40016200
 80019a0:	200062c0 	.word	0x200062c0
 80019a4:	40016040 	.word	0x40016040
 80019a8:	00020004 	.word	0x00020004

080019ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019e0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80019e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f2:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <MX_TIM2_Init+0x98>)
 80019f4:	f004 f972 	bl	8005cdc <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019fe:	f000 f8fb 	bl	8001bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	@ (8001a44 <MX_TIM2_Init+0x98>)
 8001a10:	f004 fb33 	bl	800607a <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a1a:	f000 f8ed 	bl	8001bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <MX_TIM2_Init+0x98>)
 8001a2c:	f004 fd60 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a36:	f000 f8df 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20006358 	.word	0x20006358

08001a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a4e:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <MX_USART1_UART_Init+0x94>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a90:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001a92:	f004 fdd3 	bl	800663c <HAL_UART_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a9c:	f000 f8ac 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001aa4:	f005 fbfc 	bl	80072a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f000 f8a3 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001ab6:	f005 fc31 	bl	800731c <HAL_UARTEx_SetRxFifoThreshold>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f000 f89a 	bl	8001bf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <MX_USART1_UART_Init+0x90>)
 8001ac6:	f005 fbb2 	bl	800722e <HAL_UARTEx_DisableFifoMode>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ad0:	f000 f892 	bl	8001bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200063a4 	.word	0x200063a4
 8001adc:	40013800 	.word	0x40013800

08001ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <MX_DMA_Init+0x60>)
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aea:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <MX_DMA_Init+0x60>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <MX_DMA_Init+0x60>)
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <MX_DMA_Init+0x60>)
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <MX_DMA_Init+0x60>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <MX_DMA_Init+0x60>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	200b      	movs	r0, #11
 8001b1c:	f000 fe9d 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b20:	200b      	movs	r0, #11
 8001b22:	f000 feb6 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	200d      	movs	r0, #13
 8001b2c:	f000 fe95 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b30:	200d      	movs	r0, #13
 8001b32:	f000 feae 	bl	8002892 <HAL_NVIC_EnableIRQ>

}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a18      	ldr	r2, [pc, #96]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <MX_GPIO_Init+0xac>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bc0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <MX_GPIO_Init+0xb0>)
 8001bd2:	f002 fa0d 	bl	8003ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2028      	movs	r0, #40	@ 0x28
 8001bdc:	f000 fe3d 	bl	800285a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be0:	2028      	movs	r0, #40	@ 0x28
 8001be2:	f000 fe56 	bl	8002892 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000800 	.word	0x48000800

08001bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <Error_Handler+0x8>

08001c04 <limit_val>:

void mic_DMASampleBuffer(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int32_t *pData, uint32_t Length){
	HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, pData, Length);
}

float limit_val(float input) {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (input > 0) {
 8001c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd10      	ble.n	8001c3e <limit_val+0x3a>
        return (input < clip) ? input : clip; // Minimum of 200 and input
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <limit_val+0x70>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d502      	bpl.n	8001c36 <limit_val+0x32>
 8001c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c34:	e017      	b.n	8001c66 <limit_val+0x62>
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <limit_val+0x70>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	e013      	b.n	8001c66 <limit_val+0x62>
    } else {
        return (input > -clip) ? input : -clip; // Maximum of -200 and input
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <limit_val+0x70>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eef1 7a67 	vneg.f32	s15, s15
 8001c48:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	dd02      	ble.n	8001c5c <limit_val+0x58>
 8001c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5a:	e004      	b.n	8001c66 <limit_val+0x62>
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <limit_val+0x70>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eef1 7a67 	vneg.f32	s15, s15
    }
}
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20006004 	.word	0x20006004

08001c78 <mic_process>:


//needed to remove low freq information thats messing everything up
void mic_process(int32_t *interim_buffer, float32_t *good_buffer, int good_buffer_length) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	@ 0x40
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]

	// Filter coefficients for a 50 Hz high-pass filter with a 48 kHz sample rate
    float alpha = (2 * M_PI * 50) / (48000 + 2 * M_PI * 50);
 8001c84:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <mic_process+0x15c>)
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    float alphinv = 1.0f / (1.0f + (48000 / (2 * M_PI * 2000)));
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <mic_process+0x160>)
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Initialize the previous output (y[n-1]) and previous input (x[n-1])
    float prev_output = 0.0f;
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float prev_input = 0.0f;
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	63bb      	str	r3, [r7, #56]	@ 0x38
    float sum = 0.0f;
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	@ 0x34

    //high pass
    for (int i = 0; i < good_buffer_length; i++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ca2:	e032      	b.n	8001d0a <mic_process+0x92>
        // Get the current input
        float current_input = (float32_t)interim_buffer[i + 200];
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca6:	33c8      	adds	r3, #200	@ 0xc8
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	edc7 7a05 	vstr	s15, [r7, #20]

        // Apply the high-pass filter equation
        float current_output = alpha * (prev_output + current_input - prev_input);
 8001cbc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001cc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	edc7 7a04 	vstr	s15, [r7, #16]

        // Store the filtered output
        good_buffer[i] = current_output;
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	601a      	str	r2, [r3, #0]
        sum += current_output * current_output;
 8001ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cf0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

        // Update previous input and output for the next iteration
        prev_input = current_input;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
        prev_output = current_output;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < good_buffer_length; i++) {
 8001d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d06:	3301      	adds	r3, #1
 8001d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbc8      	blt.n	8001ca4 <mic_process+0x2c>
    }

    // Check against the threshold

    float32_t rms = sqrtf((float)sum / (float)good_buffer_length);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001d20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d24:	eeb0 0a66 	vmov.f32	s0, s13
 8001d28:	f008 f9fe 	bl	800a128 <sqrtf>
 8001d2c:	ed87 0a08 	vstr	s0, [r7, #32]
    if (rms < 500) {
 8001d30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d34:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001ddc <mic_process+0x164>
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d503      	bpl.n	8001d4a <mic_process+0xd2>
        good_buffer[0] = -25.0f; // Sentinel value to indicate skipping
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	4a26      	ldr	r2, [pc, #152]	@ (8001de0 <mic_process+0x168>)
 8001d46:	601a      	str	r2, [r3, #0]
        return;
 8001d48:	e040      	b.n	8001dcc <mic_process+0x154>
    }
    //lowpass
    prev_output = 0.0f;
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < good_buffer_length; i++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d54:	e031      	b.n	8001dba <mic_process+0x142>
    	float current_input = good_buffer[i];
 8001d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61fb      	str	r3, [r7, #28]
    	float current_output = alphinv * current_input + (1 - alphinv) * prev_output;
 8001d62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d86:	edc7 7a06 	vstr	s15, [r7, #24]

        // Store the filtered output
        good_buffer[i] = (float)limit_val(current_output) / clip;
 8001d8a:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d8e:	f7ff ff39 	bl	8001c04 <limit_val>
 8001d92:	eef0 6a40 	vmov.f32	s13, s0
 8001d96:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <mic_process+0x16c>)
 8001d98:	ed93 7a00 	vldr	s14, [r3]
 8001d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da8:	edc3 7a00 	vstr	s15, [r3]

        // Update previous input and output for the next iteration
        prev_input = current_input;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	63bb      	str	r3, [r7, #56]	@ 0x38
        prev_output = current_output;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < good_buffer_length; i++) {
 8001db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db6:	3301      	adds	r3, #1
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbc9      	blt.n	8001d56 <mic_process+0xde>

    }

    //kalman
    kalmanFilter(good_buffer, good_buffer, good_buffer_length);
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	68b8      	ldr	r0, [r7, #8]
 8001dc8:	f7ff fb2a 	bl	8001420 <kalmanFilter>
}
 8001dcc:	3740      	adds	r7, #64	@ 0x40
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	3bd5124e 	.word	0x3bd5124e
 8001dd8:	3e5475e6 	.word	0x3e5475e6
 8001ddc:	43fa0000 	.word	0x43fa0000
 8001de0:	c1c80000 	.word	0xc1c80000
 8001de4:	20006004 	.word	0x20006004

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_MspInit+0x44>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <HAL_MspInit+0x44>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <HAL_MspInit+0x44>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_MspInit+0x44>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_MspInit+0x44>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_MspInit+0x44>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001efc <HAL_DAC_MspInit+0xcc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d150      	bne.n	8001ef4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e52:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_DAC_MspInit+0xd0>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	4a2a      	ldr	r2, [pc, #168]	@ (8001f00 <HAL_DAC_MspInit+0xd0>)
 8001e58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5e:	4b28      	ldr	r3, [pc, #160]	@ (8001f00 <HAL_DAC_MspInit+0xd0>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_DAC_MspInit+0xd0>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a24      	ldr	r2, [pc, #144]	@ (8001f00 <HAL_DAC_MspInit+0xd0>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <HAL_DAC_MspInit+0xd0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e82:	2310      	movs	r3, #16
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e98:	f002 f8aa 	bl	8003ff0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001f08 <HAL_DAC_MspInit+0xd8>)
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001ea4:	2206      	movs	r2, #6
 8001ea6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001eaa:	2210      	movs	r2, #16
 8001eac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001eb6:	2280      	movs	r2, #128	@ 0x80
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eba:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001ecc:	2220      	movs	r2, #32
 8001ece:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001ed8:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001eda:	f001 fdbb 	bl	8003a54 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001ee4:	f7ff fe88 	bl	8001bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a06      	ldr	r2, [pc, #24]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	4a05      	ldr	r2, [pc, #20]	@ (8001f04 <HAL_DAC_MspInit+0xd4>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40007400 	.word	0x40007400
 8001f00:	40021000 	.word	0x40021000
 8001f04:	2000620c 	.word	0x2000620c
 8001f08:	40020008 	.word	0x40020008

08001f0c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0ae      	sub	sp, #184	@ 0xb8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2294      	movs	r2, #148	@ 0x94
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 f832 	bl	8007f96 <memset>
  if(DFSDM1_Init == 0)
 8001f32:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_DFSDM_FilterMspInit+0x174>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d166      	bne.n	8002008 <HAL_DFSDM_FilterMspInit+0xfc>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001f3a:	4b52      	ldr	r3, [pc, #328]	@ (8002084 <HAL_DFSDM_FilterMspInit+0x178>)
 8001f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 5;
 8001f52:	2305      	movs	r3, #5
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 48;
 8001f56:	2330      	movs	r3, #48	@ 0x30
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV5;
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8001f66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f99b 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_DFSDM_FilterMspInit+0x74>
    {
      Error_Handler();
 8001f7c:	f7ff fe3c 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001f80:	4b41      	ldr	r3, [pc, #260]	@ (8002088 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a40      	ldr	r2, [pc, #256]	@ (8002088 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002088 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10b      	bne.n	8001faa <HAL_DFSDM_FilterMspInit+0x9e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f92:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <HAL_DFSDM_FilterMspInit+0x180>)
 8001f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f96:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_DFSDM_FilterMspInit+0x180>)
 8001f98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_DFSDM_FilterMspInit+0x180>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <HAL_DFSDM_FilterMspInit+0x180>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a37      	ldr	r2, [pc, #220]	@ (800208c <HAL_DFSDM_FilterMspInit+0x180>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_DFSDM_FilterMspInit+0x180>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001fc2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001fdc:	2306      	movs	r3, #6
 8001fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4829      	ldr	r0, [pc, #164]	@ (8002090 <HAL_DFSDM_FilterMspInit+0x184>)
 8001fea:	f002 f801 	bl	8003ff0 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT2_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	203f      	movs	r0, #63	@ 0x3f
 8001ff4:	f000 fc31 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT2_IRQn);
 8001ff8:	203f      	movs	r0, #63	@ 0x3f
 8001ffa:	f000 fc4a 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_DFSDM_FilterMspInit+0x174>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_DFSDM_FilterMspInit+0x174>)
 8002006:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a21      	ldr	r2, [pc, #132]	@ (8002094 <HAL_DFSDM_FilterMspInit+0x188>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d131      	bne.n	8002076 <HAL_DFSDM_FilterMspInit+0x16a>
    hdma_dfsdm1_flt2.Instance = DMA1_Channel3;
 8002012:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002014:	4a21      	ldr	r2, [pc, #132]	@ (800209c <HAL_DFSDM_FilterMspInit+0x190>)
 8002016:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 8002018:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 800201a:	2258      	movs	r2, #88	@ 0x58
 800201c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 800202c:	2280      	movs	r2, #128	@ 0x80
 800202e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002036:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002038:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 800203a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800203e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt2.Init.Mode = DMA_NORMAL;
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_HIGH;
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 800204e:	4812      	ldr	r0, [pc, #72]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002050:	f001 fd00 	bl	8003a54 <HAL_DMA_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_DFSDM_FilterMspInit+0x152>
    {
      Error_Handler();
 800205a:	f7ff fdcd 	bl	8001bf8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002070:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8002076:	bf00      	nop
 8002078:	37b8      	adds	r7, #184	@ 0xb8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000a84c 	.word	0x2000a84c
 8002084:	00210800 	.word	0x00210800
 8002088:	2000a848 	.word	0x2000a848
 800208c:	40021000 	.word	0x40021000
 8002090:	48001000 	.word	0x48001000
 8002094:	40016200 	.word	0x40016200
 8002098:	200062f8 	.word	0x200062f8
 800209c:	40020030 	.word	0x40020030

080020a0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0ae      	sub	sp, #184	@ 0xb8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2294      	movs	r2, #148	@ 0x94
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f005 ff68 	bl	8007f96 <memset>
  if(DFSDM1_Init == 0)
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_DFSDM_ChannelMspInit+0xf4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d15e      	bne.n	800218c <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 80020ce:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <HAL_DFSDM_ChannelMspInit+0xf8>)
 80020d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 80020d2:	2320      	movs	r3, #32
 80020d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 80020e2:	2301      	movs	r3, #1
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 5;
 80020e6:	2305      	movs	r3, #5
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 48;
 80020ea:	2330      	movs	r3, #48	@ 0x30
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV5;
 80020ee:	2305      	movs	r3, #5
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 80020f2:	2302      	movs	r3, #2
 80020f4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 80020fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	4618      	mov	r0, r3
 8002106:	f003 f8d1 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_DFSDM_ChannelMspInit+0x74>
    {
      Error_Handler();
 8002110:	f7ff fd72 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002114:	4b21      	ldr	r3, [pc, #132]	@ (800219c <HAL_DFSDM_ChannelMspInit+0xfc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	4a20      	ldr	r2, [pc, #128]	@ (800219c <HAL_DFSDM_ChannelMspInit+0xfc>)
 800211c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <HAL_DFSDM_ChannelMspInit+0xfc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10b      	bne.n	800213e <HAL_DFSDM_ChannelMspInit+0x9e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212a:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_DFSDM_ChannelMspInit+0x100>)
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002130:	6613      	str	r3, [r2, #96]	@ 0x60
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213e:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_DFSDM_ChannelMspInit+0x100>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8002156:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800215a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002170:	2306      	movs	r3, #6
 8002172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002176:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800217a:	4619      	mov	r1, r3
 800217c:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800217e:	f001 ff37 	bl	8003ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <HAL_DFSDM_ChannelMspInit+0xf4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	4a02      	ldr	r2, [pc, #8]	@ (8002194 <HAL_DFSDM_ChannelMspInit+0xf4>)
 800218a:	6013      	str	r3, [r2, #0]
  }

}
 800218c:	bf00      	nop
 800218e:	37b8      	adds	r7, #184	@ 0xb8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000a84c 	.word	0x2000a84c
 8002198:	00210800 	.word	0x00210800
 800219c:	2000a848 	.word	0x2000a848
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48001000 	.word	0x48001000

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b8:	d113      	bne.n	80021e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_TIM_Base_MspInit+0x44>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <HAL_TIM_Base_MspInit+0x44>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_TIM_Base_MspInit+0x44>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	201c      	movs	r0, #28
 80021d8:	f000 fb3f 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021dc:	201c      	movs	r0, #28
 80021de:	f000 fb58 	bl	8002892 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000

080021f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ae      	sub	sp, #184	@ 0xb8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2294      	movs	r2, #148	@ 0x94
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f005 fec0 	bl	8007f96 <memset>
  if(huart->Instance==USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_UART_MspInit+0xb0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d13a      	bne.n	8002296 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002220:	2301      	movs	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f83d 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002238:	f7ff fcde 	bl	8001bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_UART_MspInit+0xb4>)
 800223e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002240:	4a18      	ldr	r2, [pc, #96]	@ (80022a4 <HAL_UART_MspInit+0xb4>)
 8002242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002246:	6613      	str	r3, [r2, #96]	@ 0x60
 8002248:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_UART_MspInit+0xb4>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <HAL_UART_MspInit+0xb4>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002258:	4a12      	ldr	r2, [pc, #72]	@ (80022a4 <HAL_UART_MspInit+0xb4>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_UART_MspInit+0xb4>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226c:	23c0      	movs	r3, #192	@ 0xc0
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <HAL_UART_MspInit+0xb8>)
 8002292:	f001 fead 	bl	8003ff0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002296:	bf00      	nop
 8002298:	37b8      	adds	r7, #184	@ 0xb8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40021000 	.word	0x40021000
 80022a8:	48000400 	.word	0x48000400

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <NMI_Handler+0x4>

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <MemManage_Handler+0x4>

080022c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002302:	f000 f98b 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <DMA1_Channel1_IRQHandler+0x10>)
 8002312:	f001 fd1e 	bl	8003d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000620c 	.word	0x2000620c

08002320 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 8002324:	4803      	ldr	r0, [pc, #12]	@ (8002334 <DMA1_Channel3_IRQHandler+0x14>)
 8002326:	f001 fd14 	bl	8003d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  myDMA_XferCpltCallback(&hdma_dfsdm1_flt2);
 800232a:	4802      	ldr	r0, [pc, #8]	@ (8002334 <DMA1_Channel3_IRQHandler+0x14>)
 800232c:	f7ff f99e 	bl	800166c <myDMA_XferCpltCallback>
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200062f8 	.word	0x200062f8

08002338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM2_IRQHandler+0x10>)
 800233e:	f003 fd95 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20006358 	.word	0x20006358

0800234c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002350:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002354:	f001 fff6 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <DFSDM1_FLT2_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter2 global interrupt.
  */
void DFSDM1_FLT2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 0 */

  /* USER CODE END DFSDM1_FLT2_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter2);
 8002360:	4802      	ldr	r0, [pc, #8]	@ (800236c <DFSDM1_FLT2_IRQHandler+0x10>)
 8002362:	f001 f8c1 	bl	80034e8 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 1 */

  /* USER CODE END DFSDM1_FLT2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000626c 	.word	0x2000626c

08002370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_kill>:

int _kill(int pid, int sig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238a:	f005 fe57 	bl	800803c <__errno>
 800238e:	4603      	mov	r3, r0
 8002390:	2216      	movs	r2, #22
 8002392:	601a      	str	r2, [r3, #0]
  return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_exit>:

void _exit (int status)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffe7 	bl	8002380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <_exit+0x12>

080023b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e00a      	b.n	80023de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c8:	f3af 8000 	nop.w
 80023cc:	4601      	mov	r1, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	60ba      	str	r2, [r7, #8]
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbf0      	blt.n	80023c8 <_read+0x12>
  }

  return len;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e009      	b.n	8002416 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	60ba      	str	r2, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf1      	blt.n	8002402 <_write+0x12>
  }
  return len;
 800241e:	687b      	ldr	r3, [r7, #4]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_close>:

int _close(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002450:	605a      	str	r2, [r3, #4]
  return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_isatty>:

int _isatty(int file)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002498:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <_sbrk+0x5c>)
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <_sbrk+0x60>)
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <_sbrk+0x64>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <_sbrk+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d207      	bcs.n	80024d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c0:	f005 fdbc 	bl	800803c <__errno>
 80024c4:	4603      	mov	r3, r0
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e009      	b.n	80024e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d6:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <_sbrk+0x64>)
 80024e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200a0000 	.word	0x200a0000
 80024f0:	00000400 	.word	0x00000400
 80024f4:	2000a850 	.word	0x2000a850
 80024f8:	2000a9c8 	.word	0x2000a9c8

080024fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <SystemInit+0x20>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002506:	4a05      	ldr	r2, [pc, #20]	@ (800251c <SystemInit+0x20>)
 8002508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800250c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002558 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002524:	f7ff ffea 	bl	80024fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <LoopForever+0x6>)
  ldr r1, =_edata
 800252a:	490d      	ldr	r1, [pc, #52]	@ (8002560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <LoopForever+0xe>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002540:	4c0a      	ldr	r4, [pc, #40]	@ (800256c <LoopForever+0x16>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254e:	f005 fd7b 	bl	8008048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002552:	f7ff f8a1 	bl	8001698 <main>

08002556 <LoopForever>:

LoopForever:
    b LoopForever
 8002556:	e7fe      	b.n	8002556 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002558:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	200061dc 	.word	0x200061dc
  ldr r2, =_sidata
 8002564:	0800a650 	.word	0x0800a650
  ldr r2, =_sbss
 8002568:	200061dc 	.word	0x200061dc
  ldr r4, =_ebss
 800256c:	2000a9c8 	.word	0x2000a9c8

08002570 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC1_IRQHandler>

08002572 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 f961 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002582:	2000      	movs	r0, #0
 8002584:	f000 f80e 	bl	80025a4 <HAL_InitTick>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	e001      	b.n	8002598 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002594:	f7ff fc28 	bl	8001de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002598:	79fb      	ldrb	r3, [r7, #7]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025b0:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <HAL_InitTick+0x6c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d023      	beq.n	8002600 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025b8:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <HAL_InitTick+0x70>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_InitTick+0x6c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f96d 	bl	80028ae <HAL_SYSTICK_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0f      	cmp	r3, #15
 80025de:	d809      	bhi.n	80025f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e0:	2200      	movs	r2, #0
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f000 f937 	bl	800285a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002618 <HAL_InitTick+0x74>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e007      	b.n	8002604 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	e004      	b.n	8002604 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e001      	b.n	8002604 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20006010 	.word	0x20006010
 8002614:	20006008 	.word	0x20006008
 8002618:	2000600c 	.word	0x2000600c

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20006010 	.word	0x20006010
 8002640:	2000a854 	.word	0x2000a854

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2000a854 	.word	0x2000a854

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_Delay+0x44>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20006010 	.word	0x20006010

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff3e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff8e 	bl	8002798 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e014      	b.n	8002902 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	791b      	ldrb	r3, [r3, #4]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff faa1 	bl	8001e30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	795b      	ldrb	r3, [r3, #5]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_DAC_Start+0x16>
 800291c:	2302      	movs	r3, #2
 800291e:	e040      	b.n	80029a2 <HAL_DAC_Start+0x98>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2201      	movs	r2, #1
 800293a:	409a      	lsls	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002954:	2b02      	cmp	r3, #2
 8002956:	d11d      	bne.n	8002994 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	e014      	b.n	8002994 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2102      	movs	r1, #2
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0202 	orr.w	r2, r2, #2
 8002992:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	795b      	ldrb	r3, [r3, #5]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_DAC_Start_DMA+0x1e>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e0ab      	b.n	8002b26 <HAL_DAC_Start_DMA+0x176>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2202      	movs	r2, #2
 80029d8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d12f      	bne.n	8002a40 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_DAC_Start_DMA+0x180>)
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a51      	ldr	r2, [pc, #324]	@ (8002b34 <HAL_DAC_Start_DMA+0x184>)
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a50      	ldr	r2, [pc, #320]	@ (8002b38 <HAL_DAC_Start_DMA+0x188>)
 80029f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a06:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d013      	beq.n	8002a36 <HAL_DAC_Start_DMA+0x86>
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d845      	bhi.n	8002aa0 <HAL_DAC_Start_DMA+0xf0>
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_DAC_Start_DMA+0x72>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d005      	beq.n	8002a2c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002a20:	e03e      	b.n	8002aa0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3308      	adds	r3, #8
 8002a28:	613b      	str	r3, [r7, #16]
        break;
 8002a2a:	e03c      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	613b      	str	r3, [r7, #16]
        break;
 8002a34:	e037      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	613b      	str	r3, [r7, #16]
        break;
 8002a3e:	e032      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a3d      	ldr	r2, [pc, #244]	@ (8002b3c <HAL_DAC_Start_DMA+0x18c>)
 8002a46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b40 <HAL_DAC_Start_DMA+0x190>)
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a3b      	ldr	r2, [pc, #236]	@ (8002b44 <HAL_DAC_Start_DMA+0x194>)
 8002a56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a66:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d013      	beq.n	8002a96 <HAL_DAC_Start_DMA+0xe6>
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d817      	bhi.n	8002aa4 <HAL_DAC_Start_DMA+0xf4>
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_DAC_Start_DMA+0xd2>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d005      	beq.n	8002a8c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002a80:	e010      	b.n	8002aa4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	613b      	str	r3, [r7, #16]
        break;
 8002a8a:	e00c      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3318      	adds	r3, #24
 8002a92:	613b      	str	r3, [r7, #16]
        break;
 8002a94:	e007      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	331c      	adds	r3, #28
 8002a9c:	613b      	str	r3, [r7, #16]
        break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002aa4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6898      	ldr	r0, [r3, #8]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	f001 f86d 	bl	8003ba4 <HAL_DMA_Start_IT>
 8002aca:	4603      	mov	r3, r0
 8002acc:	75fb      	strb	r3, [r7, #23]
 8002ace:	e010      	b.n	8002af2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002ade:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68d8      	ldr	r0, [r3, #12]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	f001 f85b 	bl	8003ba4 <HAL_DMA_Start_IT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e005      	b.n	8002b24 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	08002ea9 	.word	0x08002ea9
 8002b34:	08002ecb 	.word	0x08002ecb
 8002b38:	08002ee7 	.word	0x08002ee7
 8002b3c:	08002f51 	.word	0x08002f51
 8002b40:	08002f73 	.word	0x08002f73
 8002b44:	08002f8f 	.word	0x08002f8f

08002b48 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f87f 	bl	8003c9a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e00c      	b.n	8002bc8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f871 	bl	8003c9a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002bc6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	795b      	ldrb	r3, [r3, #5]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_DAC_ConfigChannel+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e137      	b.n	8002e9c <HAL_DAC_ConfigChannel+0x28c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	f040 8081 	bne.w	8002d44 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c42:	f7ff fcff 	bl	8002644 <HAL_GetTick>
 8002c46:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d140      	bne.n	8002cd0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c4e:	e018      	b.n	8002c82 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c50:	f7ff fcf8 	bl	8002644 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d911      	bls.n	8002c82 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f043 0208 	orr.w	r2, r3, #8
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e10c      	b.n	8002e9c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1df      	bne.n	8002c50 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f7ff fce3 	bl	800265c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	69d2      	ldr	r2, [r2, #28]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ca0:	e023      	b.n	8002cea <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ca2:	f7ff fccf 	bl	8002644 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d90f      	bls.n	8002cd0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0a      	bge.n	8002cd0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f043 0208 	orr.w	r2, r3, #8
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0e5      	b.n	8002e9c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	dbe3      	blt.n	8002ca2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7ff fcbe 	bl	800265c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	69d2      	ldr	r2, [r2, #28]
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	ea02 0103 	and.w	r1, r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6a1a      	ldr	r2, [r3, #32]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	21ff      	movs	r1, #255	@ 0xff
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	ea02 0103 	and.w	r1, r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d11d      	bne.n	8002d88 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	221f      	movs	r2, #31
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2207      	movs	r2, #7
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6819      	ldr	r1, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43da      	mvns	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	400a      	ands	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e2c:	d104      	bne.n	8002e38 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	e018      	b.n	8002e6a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	e00f      	b.n	8002e6a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e4a:	f002 f937 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8002e4e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <HAL_DAC_ConfigChannel+0x294>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d904      	bls.n	8002e62 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e003      	b.n	8002e6a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002e68:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	22c0      	movs	r2, #192	@ 0xc0
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43da      	mvns	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	04c4b400 	.word	0x04c4b400

08002ea8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff fe8b 	bl	8002bd2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	711a      	strb	r2, [r3, #4]
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fe84 	bl	8002be6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f043 0204 	orr.w	r2, r3, #4
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f7ff fe7a 	bl	8002bfa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	711a      	strb	r2, [r3, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ffd8 	bl	8002f14 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	711a      	strb	r2, [r3, #4]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff ffd1 	bl	8002f28 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff ffc7 	bl	8002f3c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	711a      	strb	r2, [r3, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0ac      	b.n	8003128 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fc4e 	bl	8003874 <DFSDM_GetChannelFromInstance>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a55      	ldr	r2, [pc, #340]	@ (8003130 <HAL_DFSDM_ChannelInit+0x174>)
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e09f      	b.n	8003128 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff f859 	bl	80020a0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002fee:	4b51      	ldr	r3, [pc, #324]	@ (8003134 <HAL_DFSDM_ChannelInit+0x178>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8003134 <HAL_DFSDM_ChannelInit+0x178>)
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8003134 <HAL_DFSDM_ChannelInit+0x178>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d125      	bne.n	800304c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003000:	4b4d      	ldr	r3, [pc, #308]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a4c      	ldr	r2, [pc, #304]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003006:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800300a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800300c:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4948      	ldr	r1, [pc, #288]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800301a:	4b47      	ldr	r3, [pc, #284]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a46      	ldr	r2, [pc, #280]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003020:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003024:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	791b      	ldrb	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d108      	bne.n	8003040 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800302e:	4b42      	ldr	r3, [pc, #264]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	493f      	ldr	r1, [pc, #252]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003040:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <HAL_DFSDM_ChannelInit+0x17c>)
 8003046:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800304a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800305a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800306a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003070:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 020f 	bic.w	r2, r2, #15
 8003088:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80030b0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 0207 	and.w	r2, r2, #7
 80030dc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003108:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fbac 	bl	8003874 <DFSDM_GetChannelFromInstance>
 800311c:	4602      	mov	r2, r0
 800311e:	4904      	ldr	r1, [pc, #16]	@ (8003130 <HAL_DFSDM_ChannelInit+0x174>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000a85c 	.word	0x2000a85c
 8003134:	2000a858 	.word	0x2000a858
 8003138:	40016000 	.word	0x40016000

0800313c <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0ca      	b.n	800330c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a66      	ldr	r2, [pc, #408]	@ (8003314 <HAL_DFSDM_FilterInit+0x1b0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003184:	2b01      	cmp	r3, #1
 8003186:	d003      	beq.n	8003190 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0bb      	b.n	800330c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fe fead 	bl	8001f0c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80031c0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7a1b      	ldrb	r3, [r3, #8]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d108      	bne.n	80031dc <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e007      	b.n	80031ec <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80031ea:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7a5b      	ldrb	r3, [r3, #9]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d108      	bne.n	8003206 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e007      	b.n	8003216 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003224:	f023 0308 	bic.w	r3, r3, #8
 8003228:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d108      	bne.n	8003244 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7c1b      	ldrb	r3, [r3, #16]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0210 	orr.w	r2, r2, #16
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e007      	b.n	800326e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0210 	bic.w	r2, r2, #16
 800326c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7c5b      	ldrb	r3, [r3, #17]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0220 	orr.w	r2, r2, #32
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e007      	b.n	8003298 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0220 	bic.w	r2, r2, #32
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80032a6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80032aa:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6959      	ldr	r1, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032be:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80032c6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7c1a      	ldrb	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40016100 	.word	0x40016100

08003318 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02e      	beq.n	8003390 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003338:	2bff      	cmp	r3, #255	@ 0xff
 800333a:	d029      	beq.n	8003390 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800334a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10d      	bne.n	8003372 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e00a      	b.n	8003388 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	631a      	str	r2, [r3, #48]	@ 0x30
 800338e:	e001      	b.n	8003394 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
}
 8003396:	4618      	mov	r0, r3
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
 80033c4:	e064      	b.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d4:	d002      	beq.n	80033dc <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
 80033da:	e059      	b.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10e      	bne.n	8003402 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d002      	beq.n	8003402 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
 8003400:	e046      	b.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800340e:	2b00      	cmp	r3, #0
 8003410:	d107      	bne.n	8003422 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003416:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003418:	2b20      	cmp	r3, #32
 800341a:	d102      	bne.n	8003422 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	e036      	b.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d004      	beq.n	8003436 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003432:	2b03      	cmp	r3, #3
 8003434:	d12a      	bne.n	800348c <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	4a18      	ldr	r2, [pc, #96]	@ (800349c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003444:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344a:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800344c:	2b20      	cmp	r3, #32
 800344e:	d101      	bne.n	8003454 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003450:	4a14      	ldr	r2, [pc, #80]	@ (80034a4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003452:	e000      	b.n	8003456 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003454:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	331c      	adds	r3, #28
 8003466:	4619      	mov	r1, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f000 fb9a 	bl	8003ba4 <HAL_DMA_Start_IT>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	@ 0xff
 800347a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003482:	e005      	b.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fa41 	bl	800390c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800348a:	e001      	b.n	8003490 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	08003835 	.word	0x08003835
 80034a0:	08003851 	.word	0x08003851
 80034a4:	08003819 	.word	0x08003819

080034a8 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d007      	beq.n	80034ce <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d002      	beq.n	80034ce <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e007      	b.n	80034de <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fbe1 	bl	8003c9a <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fa6d 	bl	80039b8 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	@ 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f96e 	bl	8003804 <HAL_DFSDM_FilterErrorCallback>
 8003528:	e13a      	b.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00f      	beq.n	8003554 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f959 	bl	8003804 <HAL_DFSDM_FilterErrorCallback>
 8003552:	e125      	b.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d025      	beq.n	80035aa <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f921 	bl	80037b0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8113 	bne.w	800379e <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 810e 	bne.w	800379e <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0202 	bic.w	r2, r2, #2
 8003590:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003598:	2b02      	cmp	r3, #2
 800359a:	d101      	bne.n	80035a0 <HAL_DFSDM_IRQHandler+0xb8>
 800359c:	2201      	movs	r2, #1
 800359e:	e000      	b.n	80035a2 <HAL_DFSDM_IRQHandler+0xba>
 80035a0:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80035a8:	e0f9      	b.n	800379e <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d034      	beq.n	800361e <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02f      	beq.n	800361e <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f90a 	bl	80037d8 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 80e4 	bne.w	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d112      	bne.n	8003606 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d101      	bne.n	80035fe <HAL_DFSDM_IRQHandler+0x116>
 80035fa:	2201      	movs	r2, #1
 80035fc:	e000      	b.n	8003600 <HAL_DFSDM_IRQHandler+0x118>
 80035fe:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_DFSDM_IRQHandler+0x12e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003614:	e000      	b.n	8003618 <HAL_DFSDM_IRQHandler+0x130>
 8003616:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800361c:	e0c0      	b.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03d      	beq.n	80036a4 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800362e:	2b00      	cmp	r3, #0
 8003630:	d038      	beq.n	80036a4 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800363e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_DFSDM_IRQHandler+0x162>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_DFSDM_IRQHandler+0x164>
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800365a:	e005      	b.n	8003668 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	3301      	adds	r3, #1
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_DFSDM_IRQHandler+0x190>
 8003672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003674:	2b06      	cmp	r3, #6
 8003676:	d9f1      	bls.n	800365c <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_DFSDM_IRQHandler+0x1a2>
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	3308      	adds	r3, #8
 8003682:	2201      	movs	r2, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	e003      	b.n	8003692 <HAL_DFSDM_IRQHandler+0x1aa>
 800368a:	2201      	movs	r2, #1
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8a5 	bl	80037ec <HAL_DFSDM_FilterAwdCallback>
  {
 80036a2:	e07d      	b.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3f      	ldr	r2, [pc, #252]	@ (80037a8 <HAL_DFSDM_IRQHandler+0x2c0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d141      	bne.n	8003732 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03c      	beq.n	8003732 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d037      	beq.n	8003732 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80036d2:	e02a      	b.n	800372a <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01f      	beq.n	800371e <HAL_DFSDM_IRQHandler+0x236>
 80036de:	4a33      	ldr	r2, [pc, #204]	@ (80037ac <HAL_DFSDM_IRQHandler+0x2c4>)
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d019      	beq.n	800371e <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80036ea:	4a30      	ldr	r2, [pc, #192]	@ (80037ac <HAL_DFSDM_IRQHandler+0x2c4>)
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00f      	beq.n	800371e <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f103 0210 	add.w	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8003710:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <HAL_DFSDM_IRQHandler+0x2c4>)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fd0f 	bl	800313c <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	3301      	adds	r3, #1
 8003722:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2b07      	cmp	r3, #7
 800372e:	d9d1      	bls.n	80036d4 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8003730:	e036      	b.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_DFSDM_IRQHandler+0x2c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d131      	bne.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003742:	d32d      	bcc.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	0e1b      	lsrs	r3, r3, #24
 800375a:	b2db      	uxtb	r3, r3
 800375c:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800375e:	e005      	b.n	800376c <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	3301      	adds	r3, #1
 8003764:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_DFSDM_IRQHandler+0x294>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d9f1      	bls.n	8003760 <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f103 0218 	add.w	r2, r3, #24
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 800378e:	4a07      	ldr	r2, [pc, #28]	@ (80037ac <HAL_DFSDM_IRQHandler+0x2c4>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fcda 	bl	8003150 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800379c:	e000      	b.n	80037a0 <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800379e:	bf00      	nop
}
 80037a0:	bf00      	nop
 80037a2:	3730      	adds	r7, #48	@ 0x30
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40016100 	.word	0x40016100
 80037ac:	2000a85c 	.word	0x2000a85c

080037b0 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7ff ffcc 	bl	80037c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff ffb4 	bl	80037b0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2203      	movs	r2, #3
 8003862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff ffcd 	bl	8003804 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e02b      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a19      	ldr	r2, [pc, #100]	@ (80038f4 <DFSDM_GetChannelFromInstance+0x80>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d102      	bne.n	8003898 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e024      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <DFSDM_GetChannelFromInstance+0x84>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d102      	bne.n	80038a6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80038a0:	2302      	movs	r3, #2
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e01d      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <DFSDM_GetChannelFromInstance+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d102      	bne.n	80038b4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80038ae:	2304      	movs	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e016      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a12      	ldr	r2, [pc, #72]	@ (8003900 <DFSDM_GetChannelFromInstance+0x8c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d102      	bne.n	80038c2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80038bc:	2305      	movs	r3, #5
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e00f      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003904 <DFSDM_GetChannelFromInstance+0x90>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d102      	bne.n	80038d0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80038ca:	2306      	movs	r3, #6
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e008      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003908 <DFSDM_GetChannelFromInstance+0x94>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d102      	bne.n	80038de <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80038d8:	2307      	movs	r3, #7
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e001      	b.n	80038e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80038de:	2303      	movs	r3, #3
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40016000 	.word	0x40016000
 80038f4:	40016020 	.word	0x40016020
 80038f8:	40016040 	.word	0x40016040
 80038fc:	40016080 	.word	0x40016080
 8003900:	400160a0 	.word	0x400160a0
 8003904:	400160c0 	.word	0x400160c0
 8003908:	400160e0 	.word	0x400160e0

0800390c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e033      	b.n	8003996 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800394c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003964:	2b03      	cmp	r3, #3
 8003966:	d116      	bne.n	8003996 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d107      	bne.n	8003980 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0202 	orr.w	r2, r2, #2
 800397e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <DFSDM_RegConvStart+0x84>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	e000      	b.n	8003992 <DFSDM_RegConvStart+0x86>
 8003990:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <DFSDM_RegConvStart+0x98>
 80039a0:	2202      	movs	r2, #2
 80039a2:	e000      	b.n	80039a6 <DFSDM_RegConvStart+0x9a>
 80039a4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d107      	bne.n	80039e8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d116      	bne.n	8003a30 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0202 	orr.w	r2, r2, #2
 8003a18:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <DFSDM_RegConvStop+0x72>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a28:	e000      	b.n	8003a2c <DFSDM_RegConvStop+0x74>
 8003a2a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d101      	bne.n	8003a3e <DFSDM_RegConvStop+0x86>
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	e000      	b.n	8003a40 <DFSDM_RegConvStop+0x88>
 8003a3e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e08d      	b.n	8003b82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_DMA_Init+0x138>)
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d80f      	bhi.n	8003a92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b45      	ldr	r3, [pc, #276]	@ (8003b90 <HAL_DMA_Init+0x13c>)
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a45      	ldr	r2, [pc, #276]	@ (8003b94 <HAL_DMA_Init+0x140>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	009a      	lsls	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <HAL_DMA_Init+0x144>)
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a90:	e00e      	b.n	8003ab0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b40      	ldr	r3, [pc, #256]	@ (8003b9c <HAL_DMA_Init+0x148>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b94 <HAL_DMA_Init+0x140>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	009a      	lsls	r2, r3, #2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba0 <HAL_DMA_Init+0x14c>)
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa12 	bl	8003f2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b10:	d102      	bne.n	8003b18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_DMA_Init+0x104>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d80c      	bhi.n	8003b58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa32 	bl	8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	e008      	b.n	8003b6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40020407 	.word	0x40020407
 8003b90:	bffdfff8 	.word	0xbffdfff8
 8003b94:	cccccccd 	.word	0xcccccccd
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	bffdfbf8 	.word	0xbffdfbf8
 8003ba0:	40020400 	.word	0x40020400

08003ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_DMA_Start_IT+0x20>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e066      	b.n	8003c92 <HAL_DMA_Start_IT+0xee>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d155      	bne.n	8003c84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f957 	bl	8003eb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 020e 	orr.w	r2, r2, #14
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e00f      	b.n	8003c3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 020a 	orr.w	r2, r2, #10
 8003c3a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c70:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e005      	b.n	8003c90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d008      	beq.n	8003cc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e040      	b.n	8003d46 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 020e 	bic.w	r2, r2, #14
 8003cd2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	f003 021c 	and.w	r2, r3, #28
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f202 	lsl.w	r2, r1, r2
 8003d06:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d32:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f003 031c 	and.w	r3, r3, #28
 8003d72:	2204      	movs	r2, #4
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d026      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x7a>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d021      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0204 	bic.w	r2, r2, #4
 8003da4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	f003 021c 	and.w	r2, r3, #28
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2104      	movs	r1, #4
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d071      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dca:	e06c      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd0:	f003 031c 	and.w	r3, r3, #28
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02e      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xec>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d029      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020a 	bic.w	r2, r2, #10
 8003e06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	f003 021c 	and.w	r2, r3, #28
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d038      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e3c:	e033      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f003 031c 	and.w	r3, r3, #28
 8003e46:	2208      	movs	r2, #8
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d02a      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x156>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d025      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 020e 	bic.w	r2, r2, #14
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f003 021c 	and.w	r2, r3, #28
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
}
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ec6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ed8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 021c 	and.w	r2, r3, #28
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d108      	bne.n	8003f10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f0e:	e007      	b.n	8003f20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d80a      	bhi.n	8003f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f4c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f54:	e007      	b.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	009a      	lsls	r2, r3, #2
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f60:	4413      	add	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3b08      	subs	r3, #8
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40020407 	.word	0x40020407
 8003f9c:	4002081c 	.word	0x4002081c
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	40020880 	.word	0x40020880

08003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	1000823f 	.word	0x1000823f
 8003fec:	40020940 	.word	0x40020940

08003ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffe:	e166      	b.n	80042ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2101      	movs	r1, #1
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8158 	beq.w	80042c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d005      	beq.n	8004030 <HAL_GPIO_Init+0x40>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d130      	bne.n	8004092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2203      	movs	r2, #3
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4013      	ands	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004066:	2201      	movs	r2, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	f003 0201 	and.w	r2, r3, #1
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d017      	beq.n	80040ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2203      	movs	r2, #3
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d123      	bne.n	8004122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	08da      	lsrs	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3208      	adds	r2, #8
 80040e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	08da      	lsrs	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3208      	adds	r2, #8
 800411c:	6939      	ldr	r1, [r7, #16]
 800411e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0203 	and.w	r2, r3, #3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80b2 	beq.w	80042c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004164:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_GPIO_Init+0x2fc>)
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	4a60      	ldr	r2, [pc, #384]	@ (80042ec <HAL_GPIO_Init+0x2fc>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004170:	4b5e      	ldr	r3, [pc, #376]	@ (80042ec <HAL_GPIO_Init+0x2fc>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800417c:	4a5c      	ldr	r2, [pc, #368]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	220f      	movs	r2, #15
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041a6:	d02b      	beq.n	8004200 <HAL_GPIO_Init+0x210>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a52      	ldr	r2, [pc, #328]	@ (80042f4 <HAL_GPIO_Init+0x304>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d025      	beq.n	80041fc <HAL_GPIO_Init+0x20c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a51      	ldr	r2, [pc, #324]	@ (80042f8 <HAL_GPIO_Init+0x308>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d01f      	beq.n	80041f8 <HAL_GPIO_Init+0x208>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a50      	ldr	r2, [pc, #320]	@ (80042fc <HAL_GPIO_Init+0x30c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d019      	beq.n	80041f4 <HAL_GPIO_Init+0x204>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a4f      	ldr	r2, [pc, #316]	@ (8004300 <HAL_GPIO_Init+0x310>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_GPIO_Init+0x200>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004304 <HAL_GPIO_Init+0x314>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00d      	beq.n	80041ec <HAL_GPIO_Init+0x1fc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a4d      	ldr	r2, [pc, #308]	@ (8004308 <HAL_GPIO_Init+0x318>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <HAL_GPIO_Init+0x1f8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a4c      	ldr	r2, [pc, #304]	@ (800430c <HAL_GPIO_Init+0x31c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_GPIO_Init+0x1f4>
 80041e0:	2307      	movs	r3, #7
 80041e2:	e00e      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041e4:	2308      	movs	r3, #8
 80041e6:	e00c      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041e8:	2306      	movs	r3, #6
 80041ea:	e00a      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041ec:	2305      	movs	r3, #5
 80041ee:	e008      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041f0:	2304      	movs	r3, #4
 80041f2:	e006      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041f4:	2303      	movs	r3, #3
 80041f6:	e004      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e002      	b.n	8004202 <HAL_GPIO_Init+0x212>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_GPIO_Init+0x212>
 8004200:	2300      	movs	r3, #0
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	f002 0203 	and.w	r2, r2, #3
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	4093      	lsls	r3, r2
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004212:	4937      	ldr	r1, [pc, #220]	@ (80042f0 <HAL_GPIO_Init+0x300>)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	3302      	adds	r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004220:	4b3b      	ldr	r3, [pc, #236]	@ (8004310 <HAL_GPIO_Init+0x320>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004244:	4a32      	ldr	r2, [pc, #200]	@ (8004310 <HAL_GPIO_Init+0x320>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800424a:	4b31      	ldr	r3, [pc, #196]	@ (8004310 <HAL_GPIO_Init+0x320>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43db      	mvns	r3, r3
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800426e:	4a28      	ldr	r2, [pc, #160]	@ (8004310 <HAL_GPIO_Init+0x320>)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004274:	4b26      	ldr	r3, [pc, #152]	@ (8004310 <HAL_GPIO_Init+0x320>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	43db      	mvns	r3, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004298:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <HAL_GPIO_Init+0x320>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800429e:	4b1c      	ldr	r3, [pc, #112]	@ (8004310 <HAL_GPIO_Init+0x320>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042c2:	4a13      	ldr	r2, [pc, #76]	@ (8004310 <HAL_GPIO_Init+0x320>)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3301      	adds	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f47f ae91 	bne.w	8004000 <HAL_GPIO_Init+0x10>
  }
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010000 	.word	0x40010000
 80042f4:	48000400 	.word	0x48000400
 80042f8:	48000800 	.word	0x48000800
 80042fc:	48000c00 	.word	0x48000c00
 8004300:	48001000 	.word	0x48001000
 8004304:	48001400 	.word	0x48001400
 8004308:	48001800 	.word	0x48001800
 800430c:	48001c00 	.word	0x48001c00
 8004310:	40010400 	.word	0x40010400

08004314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	887b      	ldrh	r3, [r7, #2]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e001      	b.n	8004336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800435a:	4a05      	ldr	r2, [pc, #20]	@ (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd f922 	bl	80015ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40010400 	.word	0x40010400

08004374 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004378:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004384:	d102      	bne.n	800438c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800438a:	e00b      	b.n	80043a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800438c:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439a:	d102      	bne.n	80043a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800439c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043a0:	e000      	b.n	80043a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80043a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40007000 	.word	0x40007000

080043b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d141      	bne.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043c2:	4b4b      	ldr	r3, [pc, #300]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ce:	d131      	bne.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d0:	4b47      	ldr	r3, [pc, #284]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d6:	4a46      	ldr	r2, [pc, #280]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e0:	4b43      	ldr	r3, [pc, #268]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043e8:	4a41      	ldr	r2, [pc, #260]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043f0:	4b40      	ldr	r3, [pc, #256]	@ (80044f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2232      	movs	r2, #50	@ 0x32
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a3f      	ldr	r2, [pc, #252]	@ (80044f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	0c9b      	lsrs	r3, r3, #18
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	e002      	b.n	800440e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b01      	subs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800440e:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441a:	d102      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f2      	bne.n	8004408 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004422:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442e:	d158      	bne.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e057      	b.n	80044e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004434:	4b2e      	ldr	r3, [pc, #184]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443a:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004444:	e04d      	b.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444c:	d141      	bne.n	80044d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800444e:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445a:	d131      	bne.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800445c:	4b24      	ldr	r3, [pc, #144]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004462:	4a23      	ldr	r2, [pc, #140]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800446c:	4b20      	ldr	r3, [pc, #128]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800447a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2232      	movs	r2, #50	@ 0x32
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	0c9b      	lsrs	r3, r3, #18
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004492:	e002      	b.n	800449a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3b01      	subs	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a6:	d102      	bne.n	80044ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f2      	bne.n	8004494 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ae:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ba:	d112      	bne.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e011      	b.n	80044e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c6:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044d0:	e007      	b.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044d2:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044da:	4a05      	ldr	r2, [pc, #20]	@ (80044f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40007000 	.word	0x40007000
 80044f4:	20006008 	.word	0x20006008
 80044f8:	431bde83 	.word	0x431bde83

080044fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f000 bc08 	b.w	8004d20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004510:	4b96      	ldr	r3, [pc, #600]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451a:	4b94      	ldr	r3, [pc, #592]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80e4 	beq.w	80046fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_RCC_OscConfig+0x4c>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	f040 808b 	bne.w	8004656 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b01      	cmp	r3, #1
 8004544:	f040 8087 	bne.w	8004656 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004548:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_OscConfig+0x64>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e3df      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	4b81      	ldr	r3, [pc, #516]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_RCC_OscConfig+0x7e>
 8004570:	4b7e      	ldr	r3, [pc, #504]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004578:	e005      	b.n	8004586 <HAL_RCC_OscConfig+0x8a>
 800457a:	4b7c      	ldr	r3, [pc, #496]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004586:	4293      	cmp	r3, r2
 8004588:	d223      	bcs.n	80045d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fdcc 	bl	800512c <RCC_SetFlashLatencyFromMSIRange>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e3c0      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800459e:	4b73      	ldr	r3, [pc, #460]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a72      	ldr	r2, [pc, #456]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045a4:	f043 0308 	orr.w	r3, r3, #8
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b70      	ldr	r3, [pc, #448]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	496d      	ldr	r1, [pc, #436]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045bc:	4b6b      	ldr	r3, [pc, #428]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	4968      	ldr	r1, [pc, #416]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	e025      	b.n	800461e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d2:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a65      	ldr	r2, [pc, #404]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b63      	ldr	r3, [pc, #396]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4960      	ldr	r1, [pc, #384]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f0:	4b5e      	ldr	r3, [pc, #376]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	495b      	ldr	r1, [pc, #364]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd8c 	bl	800512c <RCC_SetFlashLatencyFromMSIRange>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e380      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800461e:	f000 fcc1 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004622:	4602      	mov	r2, r0
 8004624:	4b51      	ldr	r3, [pc, #324]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	4950      	ldr	r1, [pc, #320]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004630:	5ccb      	ldrb	r3, [r1, r3]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a4e      	ldr	r2, [pc, #312]	@ (8004774 <HAL_RCC_OscConfig+0x278>)
 800463c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800463e:	4b4e      	ldr	r3, [pc, #312]	@ (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd ffae 	bl	80025a4 <HAL_InitTick>
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d052      	beq.n	80046f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	e364      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d032      	beq.n	80046c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800465e:	4b43      	ldr	r3, [pc, #268]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800466a:	f7fd ffeb 	bl	8002644 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004672:	f7fd ffe7 	bl	8002644 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e34d      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004684:	4b39      	ldr	r3, [pc, #228]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004690:	4b36      	ldr	r3, [pc, #216]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a35      	ldr	r2, [pc, #212]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004696:	f043 0308 	orr.w	r3, r3, #8
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b33      	ldr	r3, [pc, #204]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4930      	ldr	r1, [pc, #192]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ae:	4b2f      	ldr	r3, [pc, #188]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	492b      	ldr	r1, [pc, #172]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
 80046c2:	e01a      	b.n	80046fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046c4:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a28      	ldr	r2, [pc, #160]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046d0:	f7fd ffb8 	bl	8002644 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046d8:	f7fd ffb4 	bl	8002644 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e31a      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1dc>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d073      	beq.n	80047ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d005      	beq.n	8004718 <HAL_RCC_OscConfig+0x21c>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d10e      	bne.n	8004730 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	4b14      	ldr	r3, [pc, #80]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d063      	beq.n	80047ec <HAL_RCC_OscConfig+0x2f0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d15f      	bne.n	80047ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e2f7      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x24c>
 800473a:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a0b      	ldr	r2, [pc, #44]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e025      	b.n	8004794 <HAL_RCC_OscConfig+0x298>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004750:	d114      	bne.n	800477c <HAL_RCC_OscConfig+0x280>
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a05      	ldr	r2, [pc, #20]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b03      	ldr	r3, [pc, #12]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a02      	ldr	r2, [pc, #8]	@ (800476c <HAL_RCC_OscConfig+0x270>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e013      	b.n	8004794 <HAL_RCC_OscConfig+0x298>
 800476c:	40021000 	.word	0x40021000
 8004770:	0800a25c 	.word	0x0800a25c
 8004774:	20006008 	.word	0x20006008
 8004778:	2000600c 	.word	0x2000600c
 800477c:	4ba0      	ldr	r3, [pc, #640]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a9f      	ldr	r2, [pc, #636]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	4b9d      	ldr	r3, [pc, #628]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a9c      	ldr	r2, [pc, #624]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800478e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d013      	beq.n	80047c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fd ff52 	bl	8002644 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a4:	f7fd ff4e 	bl	8002644 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	@ 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e2b4      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	4b92      	ldr	r3, [pc, #584]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x2a8>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd ff3e 	bl	8002644 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7fd ff3a 	bl	8002644 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	@ 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e2a0      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047de:	4b88      	ldr	r3, [pc, #544]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x2d0>
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d060      	beq.n	80048bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d005      	beq.n	800480c <HAL_RCC_OscConfig+0x310>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d119      	bne.n	800483a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d116      	bne.n	800483a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800480c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_OscConfig+0x328>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e27d      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004824:	4b76      	ldr	r3, [pc, #472]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	4973      	ldr	r1, [pc, #460]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004838:	e040      	b.n	80048bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d023      	beq.n	800488a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004842:	4b6f      	ldr	r3, [pc, #444]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a6e      	ldr	r2, [pc, #440]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800484c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd fef9 	bl	8002644 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004856:	f7fd fef5 	bl	8002644 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e25b      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	4b65      	ldr	r3, [pc, #404]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b62      	ldr	r3, [pc, #392]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	061b      	lsls	r3, r3, #24
 8004882:	495f      	ldr	r1, [pc, #380]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	e018      	b.n	80048bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fd fed5 	bl	8002644 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489e:	f7fd fed1 	bl	8002644 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e237      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b0:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d03c      	beq.n	8004942 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01c      	beq.n	800490a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd feb0 	bl	8002644 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fd feac 	bl	8002644 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e212      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80048fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCC_OscConfig+0x3ec>
 8004908:	e01b      	b.n	8004942 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800490c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004910:	4a3b      	ldr	r2, [pc, #236]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fd fe93 	bl	8002644 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004922:	f7fd fe8f 	bl	8002644 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e1f5      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004934:	4b32      	ldr	r3, [pc, #200]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ef      	bne.n	8004922 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80a6 	beq.w	8004a9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004954:	4b2a      	ldr	r3, [pc, #168]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10d      	bne.n	800497c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	4a26      	ldr	r2, [pc, #152]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6593      	str	r3, [r2, #88]	@ 0x58
 800496c:	4b24      	ldr	r3, [pc, #144]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497c:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <HAL_RCC_OscConfig+0x508>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d118      	bne.n	80049ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004988:	4b1e      	ldr	r3, [pc, #120]	@ (8004a04 <HAL_RCC_OscConfig+0x508>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a04 <HAL_RCC_OscConfig+0x508>)
 800498e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004994:	f7fd fe56 	bl	8002644 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499c:	f7fd fe52 	bl	8002644 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1b8      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ae:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <HAL_RCC_OscConfig+0x508>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d108      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4d8>
 80049c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d2:	e029      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d115      	bne.n	8004a08 <HAL_RCC_OscConfig+0x50c>
 80049dc:	4b08      	ldr	r3, [pc, #32]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	4a07      	ldr	r2, [pc, #28]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	4a03      	ldr	r2, [pc, #12]	@ (8004a00 <HAL_RCC_OscConfig+0x504>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049fc:	e014      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40007000 	.word	0x40007000
 8004a08:	4b9d      	ldr	r3, [pc, #628]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	4a9c      	ldr	r2, [pc, #624]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a18:	4b99      	ldr	r3, [pc, #612]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	4a98      	ldr	r2, [pc, #608]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd fe08 	bl	8002644 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fd fe04 	bl	8002644 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e168      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	4b8c      	ldr	r3, [pc, #560]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ed      	beq.n	8004a38 <HAL_RCC_OscConfig+0x53c>
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fdf1 	bl	8002644 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fd fded 	bl	8002644 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e151      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a7c:	4b80      	ldr	r3, [pc, #512]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ed      	bne.n	8004a66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b7b      	ldr	r3, [pc, #492]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a94:	4a7a      	ldr	r2, [pc, #488]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03c      	beq.n	8004b22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01c      	beq.n	8004aea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab0:	4b73      	ldr	r3, [pc, #460]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab6:	4a72      	ldr	r2, [pc, #456]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fdc0 	bl	8002644 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac8:	f7fd fdbc 	bl	8002644 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e122      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ada:	4b69      	ldr	r3, [pc, #420]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x5cc>
 8004ae8:	e01b      	b.n	8004b22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aea:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004af0:	4a63      	ldr	r2, [pc, #396]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fd fda3 	bl	8002644 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b02:	f7fd fd9f 	bl	8002644 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e105      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b14:	4b5a      	ldr	r3, [pc, #360]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ef      	bne.n	8004b02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80f9 	beq.w	8004d1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	f040 80cf 	bne.w	8004cd4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b36:	4b52      	ldr	r3, [pc, #328]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0203 	and.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d12c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b54:	3b01      	subs	r3, #1
 8004b56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d123      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d113      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d071      	beq.n	8004c88 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d068      	beq.n	8004c7c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004baa:	4b35      	ldr	r3, [pc, #212]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bb6:	4b32      	ldr	r3, [pc, #200]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0ac      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2d      	ldr	r2, [pc, #180]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004bcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bd2:	f7fd fd37 	bl	8002644 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fd fd33 	bl	8002644 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e099      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bec:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf8:	4b21      	ldr	r3, [pc, #132]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <HAL_RCC_OscConfig+0x788>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c12:	0212      	lsls	r2, r2, #8
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c1a:	0852      	lsrs	r2, r2, #1
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	0552      	lsls	r2, r2, #21
 8004c20:	4311      	orrs	r1, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c26:	0852      	lsrs	r2, r2, #1
 8004c28:	3a01      	subs	r2, #1
 8004c2a:	0652      	lsls	r2, r2, #25
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c32:	06d2      	lsls	r2, r2, #27
 8004c34:	430a      	orrs	r2, r1
 8004c36:	4912      	ldr	r1, [pc, #72]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c3c:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0f      	ldr	r2, [pc, #60]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c48:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c54:	f7fd fcf6 	bl	8002644 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fd fcf2 	bl	8002644 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e058      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6e:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <HAL_RCC_OscConfig+0x784>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c7a:	e050      	b.n	8004d1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04f      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
 8004c80:	40021000 	.word	0x40021000
 8004c84:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c88:	4b27      	ldr	r3, [pc, #156]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d144      	bne.n	8004d1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c94:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca0:	4b21      	ldr	r3, [pc, #132]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a20      	ldr	r2, [pc, #128]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cac:	f7fd fcca 	bl	8002644 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd fcc6 	bl	8002644 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e02c      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc6:	4b18      	ldr	r3, [pc, #96]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x7b8>
 8004cd2:	e024      	b.n	8004d1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d01f      	beq.n	8004d1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cda:	4b13      	ldr	r3, [pc, #76]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a12      	ldr	r2, [pc, #72]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004ce0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fcad 	bl	8002644 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fca9 	bl	8002644 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e00f      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d00:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	4905      	ldr	r1, [pc, #20]	@ (8004d28 <HAL_RCC_OscConfig+0x82c>)
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_RCC_OscConfig+0x830>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60cb      	str	r3, [r1, #12]
 8004d18:	e001      	b.n	8004d1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	feeefffc 	.word	0xfeeefffc

08004d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e11d      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b90      	ldr	r3, [pc, #576]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d910      	bls.n	8004d78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b8d      	ldr	r3, [pc, #564]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 020f 	bic.w	r2, r3, #15
 8004d5e:	498b      	ldr	r1, [pc, #556]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b89      	ldr	r3, [pc, #548]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e105      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d010      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	4b81      	ldr	r3, [pc, #516]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d908      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b7e      	ldr	r3, [pc, #504]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	497b      	ldr	r1, [pc, #492]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d079      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d11e      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dba:	4b75      	ldr	r3, [pc, #468]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e0dc      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004dca:	f000 fa09 	bl	80051e0 <RCC_GetSysClockFreqFromPLLSource>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4a70      	ldr	r2, [pc, #448]	@ (8004f94 <HAL_RCC_ClockConfig+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d946      	bls.n	8004e64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d140      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004de2:	4b6b      	ldr	r3, [pc, #428]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dea:	4a69      	ldr	r2, [pc, #420]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004df2:	2380      	movs	r3, #128	@ 0x80
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e035      	b.n	8004e64 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e00:	4b63      	ldr	r3, [pc, #396]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0b9      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e18:	4b5d      	ldr	r3, [pc, #372]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0ad      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e28:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0a5      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e38:	f000 f8b4 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4a55      	ldr	r2, [pc, #340]	@ (8004f94 <HAL_RCC_ClockConfig+0x264>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d90f      	bls.n	8004e64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e44:	4b52      	ldr	r3, [pc, #328]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e50:	4b4f      	ldr	r3, [pc, #316]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e58:	4a4d      	ldr	r2, [pc, #308]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e64:	4b4a      	ldr	r3, [pc, #296]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 0203 	bic.w	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4947      	ldr	r1, [pc, #284]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e76:	f7fd fbe5 	bl	8002644 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7e:	f7fd fbe1 	bl	8002644 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e077      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e94:	4b3e      	ldr	r3, [pc, #248]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 020c 	and.w	r2, r3, #12
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d1eb      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b80      	cmp	r3, #128	@ 0x80
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004eac:	4b38      	ldr	r3, [pc, #224]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a37      	ldr	r2, [pc, #220]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b31      	ldr	r3, [pc, #196]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d208      	bcs.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	492b      	ldr	r1, [pc, #172]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee6:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d210      	bcs.n	8004f16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef4:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 020f 	bic.w	r2, r3, #15
 8004efc:	4923      	ldr	r1, [pc, #140]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <HAL_RCC_ClockConfig+0x25c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e036      	b.n	8004f84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f22:	4b1b      	ldr	r3, [pc, #108]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	4918      	ldr	r1, [pc, #96]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f40:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4910      	ldr	r1, [pc, #64]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f54:	f000 f826 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <HAL_RCC_ClockConfig+0x260>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	490c      	ldr	r1, [pc, #48]	@ (8004f98 <HAL_RCC_ClockConfig+0x268>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <HAL_RCC_ClockConfig+0x26c>)
 8004f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <HAL_RCC_ClockConfig+0x270>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fd fb13 	bl	80025a4 <HAL_InitTick>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40022000 	.word	0x40022000
 8004f90:	40021000 	.word	0x40021000
 8004f94:	04c4b400 	.word	0x04c4b400
 8004f98:	0800a25c 	.word	0x0800a25c
 8004f9c:	20006008 	.word	0x20006008
 8004fa0:	2000600c 	.word	0x2000600c

08004fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	@ 0x24
 8004fa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d121      	bne.n	8005016 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d11e      	bne.n	8005016 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fd8:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fe4:	4b31      	ldr	r3, [pc, #196]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e005      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005000:	4a2b      	ldr	r2, [pc, #172]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005008:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005014:	e00a      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d102      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800501c:	4b25      	ldr	r3, [pc, #148]	@ (80050b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e004      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d101      	bne.n	800502c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005028:	4b23      	ldr	r3, [pc, #140]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800502a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d134      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005032:	4b1e      	ldr	r3, [pc, #120]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_GetSysClockFreq+0xa6>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d003      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0xac>
 8005048:	e005      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800504a:	4b1a      	ldr	r3, [pc, #104]	@ (80050b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800504c:	617b      	str	r3, [r7, #20]
      break;
 800504e:	e005      	b.n	800505c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005052:	617b      	str	r3, [r7, #20]
      break;
 8005054:	e002      	b.n	800505c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	617b      	str	r3, [r7, #20]
      break;
 800505a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800505c:	4b13      	ldr	r3, [pc, #76]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	3301      	adds	r3, #1
 8005068:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800506a:	4b10      	ldr	r3, [pc, #64]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	fb03 f202 	mul.w	r2, r3, r2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	0e5b      	lsrs	r3, r3, #25
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	3301      	adds	r3, #1
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800509c:	69bb      	ldr	r3, [r7, #24]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	@ 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	0800a274 	.word	0x0800a274
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200

080050bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20006008 	.word	0x20006008

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d8:	f7ff fff0 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4904      	ldr	r1, [pc, #16]	@ (80050fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800a26c 	.word	0x0800a26c

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005104:	f7ff ffda 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0adb      	lsrs	r3, r3, #11
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	@ (8005128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800a26c 	.word	0x0800a26c

0800512c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005138:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800513a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005144:	f7ff f916 	bl	8004374 <HAL_PWREx_GetVoltageRange>
 8005148:	6178      	str	r0, [r7, #20]
 800514a:	e014      	b.n	8005176 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800514c:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005156:	6593      	str	r3, [r2, #88]	@ 0x58
 8005158:	4b1f      	ldr	r3, [pc, #124]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005164:	f7ff f906 	bl	8004374 <HAL_PWREx_GetVoltageRange>
 8005168:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800516a:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800517c:	d10b      	bne.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b80      	cmp	r3, #128	@ 0x80
 8005182:	d913      	bls.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2ba0      	cmp	r3, #160	@ 0xa0
 8005188:	d902      	bls.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800518a:	2302      	movs	r3, #2
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e00d      	b.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005190:	2301      	movs	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	e00a      	b.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b7f      	cmp	r3, #127	@ 0x7f
 800519a:	d902      	bls.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800519c:	2302      	movs	r3, #2
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e004      	b.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b70      	cmp	r3, #112	@ 0x70
 80051a6:	d101      	bne.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a8:	2301      	movs	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 020f 	bic.w	r2, r3, #15
 80051b4:	4909      	ldr	r1, [pc, #36]	@ (80051dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d001      	beq.n	80051ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40022000 	.word	0x40022000

080051e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051e6:	4b2d      	ldr	r3, [pc, #180]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d00b      	beq.n	800520e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d825      	bhi.n	8005248 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d008      	beq.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d11f      	bne.n	8005248 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005208:	4b25      	ldr	r3, [pc, #148]	@ (80052a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800520a:	613b      	str	r3, [r7, #16]
    break;
 800520c:	e01f      	b.n	800524e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800520e:	4b25      	ldr	r3, [pc, #148]	@ (80052a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005210:	613b      	str	r3, [r7, #16]
    break;
 8005212:	e01c      	b.n	800524e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005214:	4b21      	ldr	r3, [pc, #132]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d107      	bne.n	8005230 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005220:	4b1e      	ldr	r3, [pc, #120]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e005      	b.n	800523c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005230:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800523c:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005244:	613b      	str	r3, [r7, #16]
    break;
 8005246:	e002      	b.n	800524e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
    break;
 800524c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800524e:	4b13      	ldr	r3, [pc, #76]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	3301      	adds	r3, #1
 800525a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800525c:	4b0f      	ldr	r3, [pc, #60]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	fb03 f202 	mul.w	r2, r3, r2
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005274:	4b09      	ldr	r3, [pc, #36]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	0e5b      	lsrs	r3, r3, #25
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800528e:	683b      	ldr	r3, [r7, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40021000 	.word	0x40021000
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	007a1200 	.word	0x007a1200
 80052a8:	0800a274 	.word	0x0800a274

080052ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b4:	2300      	movs	r3, #0
 80052b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052b8:	2300      	movs	r3, #0
 80052ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d040      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052cc:	2b80      	cmp	r3, #128	@ 0x80
 80052ce:	d02a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052d0:	2b80      	cmp	r3, #128	@ 0x80
 80052d2:	d825      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052d4:	2b60      	cmp	r3, #96	@ 0x60
 80052d6:	d026      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052d8:	2b60      	cmp	r3, #96	@ 0x60
 80052da:	d821      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d006      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80052e0:	2b40      	cmp	r3, #64	@ 0x40
 80052e2:	d81d      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d010      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80052ec:	e018      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052ee:	4b89      	ldr	r3, [pc, #548]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	4a88      	ldr	r2, [pc, #544]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052fa:	e015      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fb02 	bl	800590c <RCCEx_PLLSAI1_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800530c:	e00c      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3320      	adds	r3, #32
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fbed 	bl	8005af4 <RCCEx_PLLSAI2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800531e:	e003      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	74fb      	strb	r3, [r7, #19]
      break;
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800532e:	4b79      	ldr	r3, [pc, #484]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005330:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005334:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533c:	4975      	ldr	r1, [pc, #468]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005344:	e001      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d047      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800535e:	d030      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005364:	d82a      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800536a:	d02a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800536c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005370:	d824      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005376:	d008      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800537c:	d81e      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005386:	d010      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005388:	e018      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800538a:	4b62      	ldr	r3, [pc, #392]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	4a61      	ldr	r2, [pc, #388]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005394:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005396:	e015      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fab4 	bl	800590c <RCCEx_PLLSAI1_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053a8:	e00c      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3320      	adds	r3, #32
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fb9f 	bl	8005af4 <RCCEx_PLLSAI2_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053ba:	e003      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	74fb      	strb	r3, [r7, #19]
      break;
 80053c0:	e000      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80053c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ca:	4b52      	ldr	r3, [pc, #328]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d8:	494e      	ldr	r1, [pc, #312]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80053e0:	e001      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 809f 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f4:	2300      	movs	r3, #0
 80053f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053f8:	4b46      	ldr	r3, [pc, #280]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005408:	2300      	movs	r3, #0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800540e:	4b41      	ldr	r3, [pc, #260]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	4a40      	ldr	r2, [pc, #256]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005418:	6593      	str	r3, [r2, #88]	@ 0x58
 800541a:	4b3e      	ldr	r3, [pc, #248]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005426:	2301      	movs	r3, #1
 8005428:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542a:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3a      	ldr	r2, [pc, #232]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005436:	f7fd f905 	bl	8002644 <HAL_GetTick>
 800543a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800543c:	e009      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543e:	f7fd f901 	bl	8002644 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d902      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	74fb      	strb	r3, [r7, #19]
        break;
 8005450:	e005      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005452:	4b31      	ldr	r3, [pc, #196]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0ef      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d15b      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005464:	4b2b      	ldr	r3, [pc, #172]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800546e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01f      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	429a      	cmp	r2, r3
 8005480:	d019      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005482:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800548e:	4b21      	ldr	r3, [pc, #132]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005494:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800549e:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054ae:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d016      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fd f8c0 	bl	8002644 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c6:	e00b      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c8:	f7fd f8bc 	bl	8002644 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d902      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	74fb      	strb	r3, [r7, #19]
            break;
 80054de:	e006      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ec      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f4:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005504:	4903      	ldr	r1, [pc, #12]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800550c:	e008      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	74bb      	strb	r3, [r7, #18]
 8005512:	e005      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005520:	7c7b      	ldrb	r3, [r7, #17]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4ba0      	ldr	r3, [pc, #640]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	4a9f      	ldr	r2, [pc, #636]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005530:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553e:	4b9a      	ldr	r3, [pc, #616]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005544:	f023 0203 	bic.w	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554c:	4996      	ldr	r1, [pc, #600]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005560:	4b91      	ldr	r3, [pc, #580]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f023 020c 	bic.w	r2, r3, #12
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	498e      	ldr	r1, [pc, #568]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005582:	4b89      	ldr	r3, [pc, #548]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005590:	4985      	ldr	r1, [pc, #532]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a4:	4b80      	ldr	r3, [pc, #512]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b2:	497d      	ldr	r1, [pc, #500]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c6:	4b78      	ldr	r3, [pc, #480]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d4:	4974      	ldr	r1, [pc, #464]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e8:	4b6f      	ldr	r3, [pc, #444]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f6:	496c      	ldr	r1, [pc, #432]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560a:	4b67      	ldr	r3, [pc, #412]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005618:	4963      	ldr	r1, [pc, #396]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800562c:	4b5e      	ldr	r3, [pc, #376]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800563a:	495b      	ldr	r1, [pc, #364]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564e:	4b56      	ldr	r3, [pc, #344]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565c:	4952      	ldr	r1, [pc, #328]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005670:	4b4d      	ldr	r3, [pc, #308]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	494a      	ldr	r1, [pc, #296]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005692:	4b45      	ldr	r3, [pc, #276]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a0:	4941      	ldr	r1, [pc, #260]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056b4:	4b3c      	ldr	r3, [pc, #240]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ba:	f023 0203 	bic.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c2:	4939      	ldr	r1, [pc, #228]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d028      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d6:	4b34      	ldr	r3, [pc, #208]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e4:	4930      	ldr	r1, [pc, #192]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056f4:	d106      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f6:	4b2c      	ldr	r3, [pc, #176]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005700:	60d3      	str	r3, [r2, #12]
 8005702:	e011      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800570c:	d10c      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3304      	adds	r3, #4
 8005712:	2101      	movs	r1, #1
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f8f9 	bl	800590c <RCCEx_PLLSAI1_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005724:	7cfb      	ldrb	r3, [r7, #19]
 8005726:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d04d      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005738:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800573c:	d108      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800573e:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005740:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005744:	4a18      	ldr	r2, [pc, #96]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800574a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800574e:	e012      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005750:	4b15      	ldr	r3, [pc, #84]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005756:	4a14      	ldr	r2, [pc, #80]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005760:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800576e:	490e      	ldr	r1, [pc, #56]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800577a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577e:	d106      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005780:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a08      	ldr	r2, [pc, #32]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800578a:	60d3      	str	r3, [r2, #12]
 800578c:	e020      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005796:	d109      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005798:	4b03      	ldr	r3, [pc, #12]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a02      	ldr	r2, [pc, #8]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a2:	60d3      	str	r3, [r2, #12]
 80057a4:	e014      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2101      	movs	r1, #1
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f8a5 	bl	800590c <RCCEx_PLLSAI1_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d028      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ea:	4947      	ldr	r1, [pc, #284]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057fa:	d106      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fc:	4b42      	ldr	r3, [pc, #264]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a41      	ldr	r2, [pc, #260]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005806:	60d3      	str	r3, [r2, #12]
 8005808:	e011      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800580e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005812:	d10c      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	2101      	movs	r1, #1
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f876 	bl	800590c <RCCEx_PLLSAI1_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01e      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800583a:	4b33      	ldr	r3, [pc, #204]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584a:	492f      	ldr	r1, [pc, #188]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800585c:	d10c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	2102      	movs	r1, #2
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f851 	bl	800590c <RCCEx_PLLSAI1_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005884:	4b20      	ldr	r3, [pc, #128]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800588a:	f023 0204 	bic.w	r2, r3, #4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005894:	491c      	ldr	r1, [pc, #112]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058a8:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058ae:	f023 0218 	bic.w	r2, r3, #24
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	4913      	ldr	r1, [pc, #76]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d017      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058dc:	490a      	ldr	r1, [pc, #40]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ee:	d105      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f0:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a04      	ldr	r2, [pc, #16]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000

0800590c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800591a:	4b72      	ldr	r3, [pc, #456]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00e      	beq.n	8005944 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005926:	4b6f      	ldr	r3, [pc, #444]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0203 	and.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d103      	bne.n	800593e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
       ||
 800593a:	2b00      	cmp	r3, #0
 800593c:	d142      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
 8005942:	e03f      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d018      	beq.n	800597e <RCCEx_PLLSAI1_Config+0x72>
 800594c:	2b03      	cmp	r3, #3
 800594e:	d825      	bhi.n	800599c <RCCEx_PLLSAI1_Config+0x90>
 8005950:	2b01      	cmp	r3, #1
 8005952:	d002      	beq.n	800595a <RCCEx_PLLSAI1_Config+0x4e>
 8005954:	2b02      	cmp	r3, #2
 8005956:	d009      	beq.n	800596c <RCCEx_PLLSAI1_Config+0x60>
 8005958:	e020      	b.n	800599c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800595a:	4b62      	ldr	r3, [pc, #392]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11d      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596a:	e01a      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800596c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005974:	2b00      	cmp	r3, #0
 8005976:	d116      	bne.n	80059a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597c:	e013      	b.n	80059a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800597e:	4b59      	ldr	r3, [pc, #356]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10f      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800598a:	4b56      	ldr	r3, [pc, #344]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800599a:	e006      	b.n	80059aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
      break;
 80059a0:	e004      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80059a2:	bf00      	nop
 80059a4:	e002      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80059aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80059b2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4949      	ldr	r1, [pc, #292]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 8086 	bne.w	8005ad8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059cc:	4b45      	ldr	r3, [pc, #276]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a44      	ldr	r2, [pc, #272]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d8:	f7fc fe34 	bl	8002644 <HAL_GetTick>
 80059dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059de:	e009      	b.n	80059f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059e0:	f7fc fe30 	bl	8002644 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d902      	bls.n	80059f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	73fb      	strb	r3, [r7, #15]
        break;
 80059f2:	e005      	b.n	8005a00 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059f4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ef      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d168      	bne.n	8005ad8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d113      	bne.n	8005a34 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0c:	4b35      	ldr	r3, [pc, #212]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	4b35      	ldr	r3, [pc, #212]	@ (8005ae8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	0211      	lsls	r1, r2, #8
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68d2      	ldr	r2, [r2, #12]
 8005a1e:	06d2      	lsls	r2, r2, #27
 8005a20:	4311      	orrs	r1, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6852      	ldr	r2, [r2, #4]
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0112      	lsls	r2, r2, #4
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	492d      	ldr	r1, [pc, #180]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	610b      	str	r3, [r1, #16]
 8005a32:	e02d      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d115      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6892      	ldr	r2, [r2, #8]
 8005a46:	0211      	lsls	r1, r2, #8
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6912      	ldr	r2, [r2, #16]
 8005a4c:	0852      	lsrs	r2, r2, #1
 8005a4e:	3a01      	subs	r2, #1
 8005a50:	0552      	lsls	r2, r2, #21
 8005a52:	4311      	orrs	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6852      	ldr	r2, [r2, #4]
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	4921      	ldr	r1, [pc, #132]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
 8005a64:	e014      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a66:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	4b21      	ldr	r3, [pc, #132]	@ (8005af0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6892      	ldr	r2, [r2, #8]
 8005a72:	0211      	lsls	r1, r2, #8
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6952      	ldr	r2, [r2, #20]
 8005a78:	0852      	lsrs	r2, r2, #1
 8005a7a:	3a01      	subs	r2, #1
 8005a7c:	0652      	lsls	r2, r2, #25
 8005a7e:	4311      	orrs	r1, r2
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6852      	ldr	r2, [r2, #4]
 8005a84:	3a01      	subs	r2, #1
 8005a86:	0112      	lsls	r2, r2, #4
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	4916      	ldr	r1, [pc, #88]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a90:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a13      	ldr	r2, [pc, #76]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc fdd2 	bl	8002644 <HAL_GetTick>
 8005aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aa2:	e009      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa4:	f7fc fdce 	bl	8002644 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d902      	bls.n	8005ab8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ab6:	e005      	b.n	8005ac4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ef      	beq.n	8005aa4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	4904      	ldr	r1, [pc, #16]	@ (8005ae4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	07ff800f 	.word	0x07ff800f
 8005aec:	ff9f800f 	.word	0xff9f800f
 8005af0:	f9ff800f 	.word	0xf9ff800f

08005af4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b02:	4b72      	ldr	r3, [pc, #456]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0203 	and.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d103      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
       ||
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d142      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
 8005b2a:	e03f      	b.n	8005bac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d018      	beq.n	8005b66 <RCCEx_PLLSAI2_Config+0x72>
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d825      	bhi.n	8005b84 <RCCEx_PLLSAI2_Config+0x90>
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d002      	beq.n	8005b42 <RCCEx_PLLSAI2_Config+0x4e>
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d009      	beq.n	8005b54 <RCCEx_PLLSAI2_Config+0x60>
 8005b40:	e020      	b.n	8005b84 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b42:	4b62      	ldr	r3, [pc, #392]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11d      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b52:	e01a      	b.n	8005b8a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b54:	4b5d      	ldr	r3, [pc, #372]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d116      	bne.n	8005b8e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b64:	e013      	b.n	8005b8e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b66:	4b59      	ldr	r3, [pc, #356]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b72:	4b56      	ldr	r3, [pc, #344]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b82:	e006      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
      break;
 8005b88:	e004      	b.n	8005b94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d108      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4949      	ldr	r1, [pc, #292]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 8086 	bne.w	8005cc0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bb4:	4b45      	ldr	r3, [pc, #276]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a44      	ldr	r2, [pc, #272]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc0:	f7fc fd40 	bl	8002644 <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bc6:	e009      	b.n	8005bdc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bc8:	f7fc fd3c 	bl	8002644 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d902      	bls.n	8005bdc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bda:	e005      	b.n	8005be8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ef      	bne.n	8005bc8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d168      	bne.n	8005cc0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d113      	bne.n	8005c1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf4:	4b35      	ldr	r3, [pc, #212]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	4b35      	ldr	r3, [pc, #212]	@ (8005cd0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6892      	ldr	r2, [r2, #8]
 8005c00:	0211      	lsls	r1, r2, #8
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68d2      	ldr	r2, [r2, #12]
 8005c06:	06d2      	lsls	r2, r2, #27
 8005c08:	4311      	orrs	r1, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6852      	ldr	r2, [r2, #4]
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	0112      	lsls	r2, r2, #4
 8005c12:	430a      	orrs	r2, r1
 8005c14:	492d      	ldr	r1, [pc, #180]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	614b      	str	r3, [r1, #20]
 8005c1a:	e02d      	b.n	8005c78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d115      	bne.n	8005c4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c22:	4b2a      	ldr	r3, [pc, #168]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c24:	695a      	ldr	r2, [r3, #20]
 8005c26:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	0211      	lsls	r1, r2, #8
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6912      	ldr	r2, [r2, #16]
 8005c34:	0852      	lsrs	r2, r2, #1
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0552      	lsls	r2, r2, #21
 8005c3a:	4311      	orrs	r1, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6852      	ldr	r2, [r2, #4]
 8005c40:	3a01      	subs	r2, #1
 8005c42:	0112      	lsls	r2, r2, #4
 8005c44:	430a      	orrs	r2, r1
 8005c46:	4921      	ldr	r1, [pc, #132]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	614b      	str	r3, [r1, #20]
 8005c4c:	e014      	b.n	8005c78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	4b21      	ldr	r3, [pc, #132]	@ (8005cd8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6892      	ldr	r2, [r2, #8]
 8005c5a:	0211      	lsls	r1, r2, #8
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6952      	ldr	r2, [r2, #20]
 8005c60:	0852      	lsrs	r2, r2, #1
 8005c62:	3a01      	subs	r2, #1
 8005c64:	0652      	lsls	r2, r2, #25
 8005c66:	4311      	orrs	r1, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6852      	ldr	r2, [r2, #4]
 8005c6c:	3a01      	subs	r2, #1
 8005c6e:	0112      	lsls	r2, r2, #4
 8005c70:	430a      	orrs	r2, r1
 8005c72:	4916      	ldr	r1, [pc, #88]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c78:	4b14      	ldr	r3, [pc, #80]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fc fcde 	bl	8002644 <HAL_GetTick>
 8005c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c8a:	e009      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c8c:	f7fc fcda 	bl	8002644 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d902      	bls.n	8005ca0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c9e:	e005      	b.n	8005cac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0ef      	beq.n	8005c8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005cb2:	4b06      	ldr	r3, [pc, #24]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	4904      	ldr	r1, [pc, #16]	@ (8005ccc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	07ff800f 	.word	0x07ff800f
 8005cd4:	ff9f800f 	.word	0xff9f800f
 8005cd8:	f9ff800f 	.word	0xf9ff800f

08005cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e049      	b.n	8005d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fc fa50 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 faa8 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e04f      	b.n	8005e44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a23      	ldr	r2, [pc, #140]	@ (8005e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01d      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x76>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dce:	d018      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x76>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x76>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x76>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x76>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x76>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a19      	ldr	r2, [pc, #100]	@ (8005e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d115      	bne.n	8005e2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	4b17      	ldr	r3, [pc, #92]	@ (8005e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b06      	cmp	r3, #6
 8005e12:	d015      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0xb4>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e1a:	d011      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	e008      	b.n	8005e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e000      	b.n	8005e42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40013400 	.word	0x40013400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	00010007 	.word	0x00010007

08005e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0202 	mvn.w	r2, #2
 8005ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9bc 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9ae 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f9bf 	bl	8006248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0204 	mvn.w	r2, #4
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f996 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f988 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f999 	bl	8006248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0208 	mvn.w	r2, #8
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f970 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f962 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f973 	bl	8006248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f94a 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f93c 	bl	8006220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f94d 	bl	8006248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f91a 	bl	800620c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00c      	beq.n	8006006 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fb07 	bl	8006614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 faff 	bl	8006628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f907 	bl	800625c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f06f 0220 	mvn.w	r2, #32
 800606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fac7 	bl	8006600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_TIM_ConfigClockSource+0x1c>
 8006092:	2302      	movs	r3, #2
 8006094:	e0b6      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x18a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d2:	d03e      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0xd8>
 80060d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d8:	f200 8087 	bhi.w	80061ea <HAL_TIM_ConfigClockSource+0x170>
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e0:	f000 8086 	beq.w	80061f0 <HAL_TIM_ConfigClockSource+0x176>
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e8:	d87f      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 80060ea:	2b70      	cmp	r3, #112	@ 0x70
 80060ec:	d01a      	beq.n	8006124 <HAL_TIM_ConfigClockSource+0xaa>
 80060ee:	2b70      	cmp	r3, #112	@ 0x70
 80060f0:	d87b      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 80060f2:	2b60      	cmp	r3, #96	@ 0x60
 80060f4:	d050      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x11e>
 80060f6:	2b60      	cmp	r3, #96	@ 0x60
 80060f8:	d877      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 80060fa:	2b50      	cmp	r3, #80	@ 0x50
 80060fc:	d03c      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0xfe>
 80060fe:	2b50      	cmp	r3, #80	@ 0x50
 8006100:	d873      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d058      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0x13e>
 8006106:	2b40      	cmp	r3, #64	@ 0x40
 8006108:	d86f      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 800610a:	2b30      	cmp	r3, #48	@ 0x30
 800610c:	d064      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x15e>
 800610e:	2b30      	cmp	r3, #48	@ 0x30
 8006110:	d86b      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 8006112:	2b20      	cmp	r3, #32
 8006114:	d060      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006116:	2b20      	cmp	r3, #32
 8006118:	d867      	bhi.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d05c      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x15e>
 800611e:	2b10      	cmp	r3, #16
 8006120:	d05a      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006122:	e062      	b.n	80061ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006134:	f000 f9bc 	bl	80064b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006146:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]
      break;
 8006150:	e04f      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	f000 f9a5 	bl	80064b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006174:	609a      	str	r2, [r3, #8]
      break;
 8006176:	e03c      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006184:	461a      	mov	r2, r3
 8006186:	f000 f919 	bl	80063bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2150      	movs	r1, #80	@ 0x50
 8006190:	4618      	mov	r0, r3
 8006192:	f000 f972 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8006196:	e02c      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a4:	461a      	mov	r2, r3
 80061a6:	f000 f938 	bl	800641a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2160      	movs	r1, #96	@ 0x60
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 f962 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 80061b6:	e01c      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c4:	461a      	mov	r2, r3
 80061c6:	f000 f8f9 	bl	80063bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2140      	movs	r1, #64	@ 0x40
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 f952 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 80061d6:	e00c      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 f949 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 80061e8:	e003      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80061f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a46      	ldr	r2, [pc, #280]	@ (800639c <TIM_Base_SetConfig+0x12c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d013      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628e:	d00f      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a43      	ldr	r2, [pc, #268]	@ (80063a0 <TIM_Base_SetConfig+0x130>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a42      	ldr	r2, [pc, #264]	@ (80063a4 <TIM_Base_SetConfig+0x134>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a41      	ldr	r2, [pc, #260]	@ (80063a8 <TIM_Base_SetConfig+0x138>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a40      	ldr	r2, [pc, #256]	@ (80063ac <TIM_Base_SetConfig+0x13c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d108      	bne.n	80062c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a35      	ldr	r2, [pc, #212]	@ (800639c <TIM_Base_SetConfig+0x12c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01f      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d0:	d01b      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a32      	ldr	r2, [pc, #200]	@ (80063a0 <TIM_Base_SetConfig+0x130>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d017      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a31      	ldr	r2, [pc, #196]	@ (80063a4 <TIM_Base_SetConfig+0x134>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a30      	ldr	r2, [pc, #192]	@ (80063a8 <TIM_Base_SetConfig+0x138>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00f      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2f      	ldr	r2, [pc, #188]	@ (80063ac <TIM_Base_SetConfig+0x13c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00b      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2e      	ldr	r2, [pc, #184]	@ (80063b0 <TIM_Base_SetConfig+0x140>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d007      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2d      	ldr	r2, [pc, #180]	@ (80063b4 <TIM_Base_SetConfig+0x144>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2c      	ldr	r2, [pc, #176]	@ (80063b8 <TIM_Base_SetConfig+0x148>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d108      	bne.n	800631c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a16      	ldr	r2, [pc, #88]	@ (800639c <TIM_Base_SetConfig+0x12c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00f      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a18      	ldr	r2, [pc, #96]	@ (80063ac <TIM_Base_SetConfig+0x13c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <TIM_Base_SetConfig+0x140>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a16      	ldr	r2, [pc, #88]	@ (80063b4 <TIM_Base_SetConfig+0x144>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a15      	ldr	r2, [pc, #84]	@ (80063b8 <TIM_Base_SetConfig+0x148>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d103      	bne.n	8006370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d105      	bne.n	800638e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]
  }
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 030a 	bic.w	r3, r3, #10
 80063f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641a:	b480      	push	{r7}
 800641c:	b087      	sub	sp, #28
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f023 0210 	bic.w	r2, r3, #16
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	031b      	lsls	r3, r3, #12
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	f043 0307 	orr.w	r3, r3, #7
 800649c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	609a      	str	r2, [r3, #8]
}
 80064a4:	bf00      	nop
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	021a      	lsls	r2, r3, #8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	609a      	str	r2, [r3, #8]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e068      	b.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2e      	ldr	r2, [pc, #184]	@ (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2d      	ldr	r2, [pc, #180]	@ (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d108      	bne.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1e      	ldr	r2, [pc, #120]	@ (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657a:	d018      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1b      	ldr	r2, [pc, #108]	@ (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1a      	ldr	r2, [pc, #104]	@ (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a18      	ldr	r2, [pc, #96]	@ (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a13      	ldr	r2, [pc, #76]	@ (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a14      	ldr	r2, [pc, #80]	@ (80065fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d10c      	bne.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40014000 	.word	0x40014000

08006600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e042      	b.n	80066d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fb fdc5 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2224      	movs	r2, #36	@ 0x24
 800666a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0201 	bic.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fbb2 	bl	8006df0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8b3 	bl	80067f8 <UART_SetConfig>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e01b      	b.n	80066d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fc31 	bl	8006f34 <UART_CheckIdleState>
 80066d2:	4603      	mov	r3, r0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	@ 0x28
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d17b      	bne.n	80067ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_UART_Transmit+0x26>
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e074      	b.n	80067f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2221      	movs	r2, #33	@ 0x21
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006716:	f7fb ff95 	bl	8002644 <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006734:	d108      	bne.n	8006748 <HAL_UART_Transmit+0x6c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e003      	b.n	8006750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006750:	e030      	b.n	80067b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	2180      	movs	r1, #128	@ 0x80
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fc93 	bl	8007088 <UART_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e03d      	b.n	80067f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10b      	bne.n	8006792 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	881a      	ldrh	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006786:	b292      	uxth	r2, r2
 8006788:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	3302      	adds	r3, #2
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e007      	b.n	80067a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1c8      	bne.n	8006752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2200      	movs	r2, #0
 80067c8:	2140      	movs	r1, #64	@ 0x40
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fc5c 	bl	8007088 <UART_WaitOnFlagUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e006      	b.n	80067f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e000      	b.n	80067f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067fc:	b08c      	sub	sp, #48	@ 0x30
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	431a      	orrs	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	4313      	orrs	r3, r2
 800681e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4baa      	ldr	r3, [pc, #680]	@ (8006ad0 <UART_SetConfig+0x2d8>)
 8006828:	4013      	ands	r3, r2
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006830:	430b      	orrs	r3, r1
 8006832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a9f      	ldr	r2, [pc, #636]	@ (8006ad4 <UART_SetConfig+0x2dc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006860:	4313      	orrs	r3, r2
 8006862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800686e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006878:	430b      	orrs	r3, r1
 800687a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006882:	f023 010f 	bic.w	r1, r3, #15
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a90      	ldr	r2, [pc, #576]	@ (8006ad8 <UART_SetConfig+0x2e0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d125      	bne.n	80068e8 <UART_SetConfig+0xf0>
 800689c:	4b8f      	ldr	r3, [pc, #572]	@ (8006adc <UART_SetConfig+0x2e4>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d81a      	bhi.n	80068e0 <UART_SetConfig+0xe8>
 80068aa:	a201      	add	r2, pc, #4	@ (adr r2, 80068b0 <UART_SetConfig+0xb8>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c6:	e116      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80068c8:	2302      	movs	r3, #2
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ce:	e112      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d6:	e10e      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e10a      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e6:	e106      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae0 <UART_SetConfig+0x2e8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d138      	bne.n	8006964 <UART_SetConfig+0x16c>
 80068f2:	4b7a      	ldr	r3, [pc, #488]	@ (8006adc <UART_SetConfig+0x2e4>)
 80068f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f8:	f003 030c 	and.w	r3, r3, #12
 80068fc:	2b0c      	cmp	r3, #12
 80068fe:	d82d      	bhi.n	800695c <UART_SetConfig+0x164>
 8006900:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <UART_SetConfig+0x110>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800693d 	.word	0x0800693d
 800690c:	0800695d 	.word	0x0800695d
 8006910:	0800695d 	.word	0x0800695d
 8006914:	0800695d 	.word	0x0800695d
 8006918:	0800694d 	.word	0x0800694d
 800691c:	0800695d 	.word	0x0800695d
 8006920:	0800695d 	.word	0x0800695d
 8006924:	0800695d 	.word	0x0800695d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800695d 	.word	0x0800695d
 8006930:	0800695d 	.word	0x0800695d
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006955 	.word	0x08006955
 800693c:	2300      	movs	r3, #0
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e0d8      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006944:	2302      	movs	r3, #2
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e0d4      	b.n	8006af6 <UART_SetConfig+0x2fe>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e0d0      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695a:	e0cc      	b.n	8006af6 <UART_SetConfig+0x2fe>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006962:	e0c8      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5e      	ldr	r2, [pc, #376]	@ (8006ae4 <UART_SetConfig+0x2ec>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d125      	bne.n	80069ba <UART_SetConfig+0x1c2>
 800696e:	4b5b      	ldr	r3, [pc, #364]	@ (8006adc <UART_SetConfig+0x2e4>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006974:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006978:	2b30      	cmp	r3, #48	@ 0x30
 800697a:	d016      	beq.n	80069aa <UART_SetConfig+0x1b2>
 800697c:	2b30      	cmp	r3, #48	@ 0x30
 800697e:	d818      	bhi.n	80069b2 <UART_SetConfig+0x1ba>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d00a      	beq.n	800699a <UART_SetConfig+0x1a2>
 8006984:	2b20      	cmp	r3, #32
 8006986:	d814      	bhi.n	80069b2 <UART_SetConfig+0x1ba>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <UART_SetConfig+0x19a>
 800698c:	2b10      	cmp	r3, #16
 800698e:	d008      	beq.n	80069a2 <UART_SetConfig+0x1aa>
 8006990:	e00f      	b.n	80069b2 <UART_SetConfig+0x1ba>
 8006992:	2300      	movs	r3, #0
 8006994:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006998:	e0ad      	b.n	8006af6 <UART_SetConfig+0x2fe>
 800699a:	2302      	movs	r3, #2
 800699c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a0:	e0a9      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80069a2:	2304      	movs	r3, #4
 80069a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a8:	e0a5      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80069aa:	2308      	movs	r3, #8
 80069ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b0:	e0a1      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80069b2:	2310      	movs	r3, #16
 80069b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b8:	e09d      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a4a      	ldr	r2, [pc, #296]	@ (8006ae8 <UART_SetConfig+0x2f0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d125      	bne.n	8006a10 <UART_SetConfig+0x218>
 80069c4:	4b45      	ldr	r3, [pc, #276]	@ (8006adc <UART_SetConfig+0x2e4>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d0:	d016      	beq.n	8006a00 <UART_SetConfig+0x208>
 80069d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d4:	d818      	bhi.n	8006a08 <UART_SetConfig+0x210>
 80069d6:	2b80      	cmp	r3, #128	@ 0x80
 80069d8:	d00a      	beq.n	80069f0 <UART_SetConfig+0x1f8>
 80069da:	2b80      	cmp	r3, #128	@ 0x80
 80069dc:	d814      	bhi.n	8006a08 <UART_SetConfig+0x210>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <UART_SetConfig+0x1f0>
 80069e2:	2b40      	cmp	r3, #64	@ 0x40
 80069e4:	d008      	beq.n	80069f8 <UART_SetConfig+0x200>
 80069e6:	e00f      	b.n	8006a08 <UART_SetConfig+0x210>
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e082      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80069f0:	2302      	movs	r3, #2
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e07e      	b.n	8006af6 <UART_SetConfig+0x2fe>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e07a      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e076      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0e:	e072      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a35      	ldr	r2, [pc, #212]	@ (8006aec <UART_SetConfig+0x2f4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d12a      	bne.n	8006a70 <UART_SetConfig+0x278>
 8006a1a:	4b30      	ldr	r3, [pc, #192]	@ (8006adc <UART_SetConfig+0x2e4>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a28:	d01a      	beq.n	8006a60 <UART_SetConfig+0x268>
 8006a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a2e:	d81b      	bhi.n	8006a68 <UART_SetConfig+0x270>
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a34:	d00c      	beq.n	8006a50 <UART_SetConfig+0x258>
 8006a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a3a:	d815      	bhi.n	8006a68 <UART_SetConfig+0x270>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <UART_SetConfig+0x250>
 8006a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a44:	d008      	beq.n	8006a58 <UART_SetConfig+0x260>
 8006a46:	e00f      	b.n	8006a68 <UART_SetConfig+0x270>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e052      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a50:	2302      	movs	r3, #2
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e04e      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e04a      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e046      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6e:	e042      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a17      	ldr	r2, [pc, #92]	@ (8006ad4 <UART_SetConfig+0x2dc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d13a      	bne.n	8006af0 <UART_SetConfig+0x2f8>
 8006a7a:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <UART_SetConfig+0x2e4>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a88:	d01a      	beq.n	8006ac0 <UART_SetConfig+0x2c8>
 8006a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a8e:	d81b      	bhi.n	8006ac8 <UART_SetConfig+0x2d0>
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d00c      	beq.n	8006ab0 <UART_SetConfig+0x2b8>
 8006a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a9a:	d815      	bhi.n	8006ac8 <UART_SetConfig+0x2d0>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <UART_SetConfig+0x2b0>
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa4:	d008      	beq.n	8006ab8 <UART_SetConfig+0x2c0>
 8006aa6:	e00f      	b.n	8006ac8 <UART_SetConfig+0x2d0>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e022      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e01e      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e01a      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e016      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ace:	e012      	b.n	8006af6 <UART_SetConfig+0x2fe>
 8006ad0:	cfff69f3 	.word	0xcfff69f3
 8006ad4:	40008000 	.word	0x40008000
 8006ad8:	40013800 	.word	0x40013800
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	40004400 	.word	0x40004400
 8006ae4:	40004800 	.word	0x40004800
 8006ae8:	40004c00 	.word	0x40004c00
 8006aec:	40005000 	.word	0x40005000
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4aae      	ldr	r2, [pc, #696]	@ (8006db4 <UART_SetConfig+0x5bc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	f040 8097 	bne.w	8006c30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d823      	bhi.n	8006b52 <UART_SetConfig+0x35a>
 8006b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <UART_SetConfig+0x318>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b53 	.word	0x08006b53
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b53 	.word	0x08006b53
 8006b20:	08006b43 	.word	0x08006b43
 8006b24:	08006b53 	.word	0x08006b53
 8006b28:	08006b53 	.word	0x08006b53
 8006b2c:	08006b53 	.word	0x08006b53
 8006b30:	08006b4b 	.word	0x08006b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b34:	f7fe face 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3a:	e010      	b.n	8006b5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8006db8 <UART_SetConfig+0x5c0>)
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b40:	e00d      	b.n	8006b5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b42:	f7fe fa2f 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8006b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b48:	e009      	b.n	8006b5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b50:	e005      	b.n	8006b5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8130 	beq.w	8006dc6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6a:	4a94      	ldr	r2, [pc, #592]	@ (8006dbc <UART_SetConfig+0x5c4>)
 8006b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4413      	add	r3, r2
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d305      	bcc.n	8006b96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d903      	bls.n	8006b9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b9c:	e113      	b.n	8006dc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	60bb      	str	r3, [r7, #8]
 8006ba4:	60fa      	str	r2, [r7, #12]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	4a84      	ldr	r2, [pc, #528]	@ (8006dbc <UART_SetConfig+0x5c4>)
 8006bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bc0:	f7fa f80a 	bl	8000bd8 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	020b      	lsls	r3, r1, #8
 8006bd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bda:	0202      	lsls	r2, r0, #8
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	6849      	ldr	r1, [r1, #4]
 8006be0:	0849      	lsrs	r1, r1, #1
 8006be2:	2000      	movs	r0, #0
 8006be4:	460c      	mov	r4, r1
 8006be6:	4605      	mov	r5, r0
 8006be8:	eb12 0804 	adds.w	r8, r2, r4
 8006bec:	eb43 0905 	adc.w	r9, r3, r5
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	469a      	mov	sl, r3
 8006bf8:	4693      	mov	fp, r2
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4649      	mov	r1, r9
 8006c02:	f7f9 ffe9 	bl	8000bd8 <__aeabi_uldivmod>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c14:	d308      	bcc.n	8006c28 <UART_SetConfig+0x430>
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c1c:	d204      	bcs.n	8006c28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	e0ce      	b.n	8006dc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c2e:	e0ca      	b.n	8006dc6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c38:	d166      	bne.n	8006d08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d827      	bhi.n	8006c92 <UART_SetConfig+0x49a>
 8006c42:	a201      	add	r2, pc, #4	@ (adr r2, 8006c48 <UART_SetConfig+0x450>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c6d 	.word	0x08006c6d
 8006c4c:	08006c75 	.word	0x08006c75
 8006c50:	08006c7d 	.word	0x08006c7d
 8006c54:	08006c93 	.word	0x08006c93
 8006c58:	08006c83 	.word	0x08006c83
 8006c5c:	08006c93 	.word	0x08006c93
 8006c60:	08006c93 	.word	0x08006c93
 8006c64:	08006c93 	.word	0x08006c93
 8006c68:	08006c8b 	.word	0x08006c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f7fe fa32 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c72:	e014      	b.n	8006c9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c74:	f7fe fa44 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8006c78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c7a:	e010      	b.n	8006c9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8006db8 <UART_SetConfig+0x5c0>)
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c80:	e00d      	b.n	8006c9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c82:	f7fe f98f 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8006c86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c88:	e009      	b.n	8006c9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c90:	e005      	b.n	8006c9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8090 	beq.w	8006dc6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	4a44      	ldr	r2, [pc, #272]	@ (8006dbc <UART_SetConfig+0x5c4>)
 8006cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb8:	005a      	lsls	r2, r3, #1
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	441a      	add	r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2b0f      	cmp	r3, #15
 8006cd0:	d916      	bls.n	8006d00 <UART_SetConfig+0x508>
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd8:	d212      	bcs.n	8006d00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f023 030f 	bic.w	r3, r3, #15
 8006ce2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	8bfb      	ldrh	r3, [r7, #30]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	8bfa      	ldrh	r2, [r7, #30]
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	e062      	b.n	8006dc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d06:	e05e      	b.n	8006dc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d828      	bhi.n	8006d62 <UART_SetConfig+0x56a>
 8006d10:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <UART_SetConfig+0x520>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	08006d63 	.word	0x08006d63
 8006d28:	08006d53 	.word	0x08006d53
 8006d2c:	08006d63 	.word	0x08006d63
 8006d30:	08006d63 	.word	0x08006d63
 8006d34:	08006d63 	.word	0x08006d63
 8006d38:	08006d5b 	.word	0x08006d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f7fe f9ca 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d42:	e014      	b.n	8006d6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d44:	f7fe f9dc 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8006d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d4a:	e010      	b.n	8006d6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <UART_SetConfig+0x5c0>)
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d50:	e00d      	b.n	8006d6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d52:	f7fe f927 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8006d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d58:	e009      	b.n	8006d6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d60:	e005      	b.n	8006d6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d028      	beq.n	8006dc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	4a10      	ldr	r2, [pc, #64]	@ (8006dbc <UART_SetConfig+0x5c4>)
 8006d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	085b      	lsrs	r3, r3, #1
 8006d8c:	441a      	add	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d96:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	2b0f      	cmp	r3, #15
 8006d9c:	d910      	bls.n	8006dc0 <UART_SetConfig+0x5c8>
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da4:	d20c      	bcs.n	8006dc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60da      	str	r2, [r3, #12]
 8006db0:	e009      	b.n	8006dc6 <UART_SetConfig+0x5ce>
 8006db2:	bf00      	nop
 8006db4:	40008000 	.word	0x40008000
 8006db8:	00f42400 	.word	0x00f42400
 8006dbc:	0800a2a4 	.word	0x0800a2a4
      }
      else
      {
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2200      	movs	r2, #0
 8006de0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006de2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3730      	adds	r7, #48	@ 0x30
 8006dea:	46bd      	mov	sp, r7
 8006dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01a      	beq.n	8006f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eee:	d10a      	bne.n	8006f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	605a      	str	r2, [r3, #4]
  }
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b098      	sub	sp, #96	@ 0x60
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f44:	f7fb fb7e 	bl	8002644 <HAL_GetTick>
 8006f48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d12f      	bne.n	8006fb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f60:	2200      	movs	r2, #0
 8006f62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f88e 	bl	8007088 <UART_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d022      	beq.n	8006fb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e6      	bne.n	8006f72 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e063      	b.n	8007080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d149      	bne.n	800705a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f857 	bl	8007088 <UART_WaitOnFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d03c      	beq.n	800705a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	623b      	str	r3, [r7, #32]
   return(result);
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007000:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e6      	bne.n	8006fe0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	60fb      	str	r3, [r7, #12]
   return(result);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 0301 	bic.w	r3, r3, #1
 8007028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007032:	61fa      	str	r2, [r7, #28]
 8007034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	69b9      	ldr	r1, [r7, #24]
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	617b      	str	r3, [r7, #20]
   return(result);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e012      	b.n	8007080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3758      	adds	r7, #88	@ 0x58
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007098:	e04f      	b.n	800713a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d04b      	beq.n	800713a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a2:	f7fb facf 	bl	8002644 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e04e      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d037      	beq.n	800713a <UART_WaitOnFlagUntilTimeout+0xb2>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b80      	cmp	r3, #128	@ 0x80
 80070ce:	d034      	beq.n	800713a <UART_WaitOnFlagUntilTimeout+0xb2>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b40      	cmp	r3, #64	@ 0x40
 80070d4:	d031      	beq.n	800713a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d110      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2208      	movs	r2, #8
 80070ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f838 	bl	8007162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2208      	movs	r2, #8
 80070f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e029      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007114:	d111      	bne.n	800713a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800711e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f81e 	bl	8007162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e00f      	b.n	800715a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4013      	ands	r3, r2
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	429a      	cmp	r2, r3
 8007148:	bf0c      	ite	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	2300      	movne	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	429a      	cmp	r2, r3
 8007156:	d0a0      	beq.n	800709a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007162:	b480      	push	{r7}
 8007164:	b095      	sub	sp, #84	@ 0x54
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800717e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007188:	643b      	str	r3, [r7, #64]	@ 0x40
 800718a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800718e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e6      	bne.n	800716a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071b2:	f023 0301 	bic.w	r3, r3, #1
 80071b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e3      	bne.n	800719c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d118      	bne.n	800720e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f023 0310 	bic.w	r3, r3, #16
 80071f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	613b      	str	r3, [r7, #16]
   return(result);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007222:	bf00      	nop
 8007224:	3754      	adds	r7, #84	@ 0x54
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_UARTEx_DisableFifoMode+0x16>
 8007240:	2302      	movs	r3, #2
 8007242:	e027      	b.n	8007294 <HAL_UARTEx_DisableFifoMode+0x66>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2224      	movs	r2, #36	@ 0x24
 8007250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007272:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e02d      	b.n	8007314 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2224      	movs	r2, #36	@ 0x24
 80072c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f84f 	bl	8007398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e02d      	b.n	8007390 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2224      	movs	r2, #36	@ 0x24
 8007340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f811 	bl	8007398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d108      	bne.n	80073ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073b8:	e031      	b.n	800741e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073ba:	2308      	movs	r3, #8
 80073bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073be:	2308      	movs	r3, #8
 80073c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	0e5b      	lsrs	r3, r3, #25
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	0f5b      	lsrs	r3, r3, #29
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	7b3a      	ldrb	r2, [r7, #12]
 80073e6:	4911      	ldr	r1, [pc, #68]	@ (800742c <UARTEx_SetNbDataToProcess+0x94>)
 80073e8:	5c8a      	ldrb	r2, [r1, r2]
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ee:	7b3a      	ldrb	r2, [r7, #12]
 80073f0:	490f      	ldr	r1, [pc, #60]	@ (8007430 <UARTEx_SetNbDataToProcess+0x98>)
 80073f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	7b7a      	ldrb	r2, [r7, #13]
 8007404:	4909      	ldr	r1, [pc, #36]	@ (800742c <UARTEx_SetNbDataToProcess+0x94>)
 8007406:	5c8a      	ldrb	r2, [r1, r2]
 8007408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800740c:	7b7a      	ldrb	r2, [r7, #13]
 800740e:	4908      	ldr	r1, [pc, #32]	@ (8007430 <UARTEx_SetNbDataToProcess+0x98>)
 8007410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007412:	fb93 f3f2 	sdiv	r3, r3, r2
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800741e:	bf00      	nop
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	0800a2bc 	.word	0x0800a2bc
 8007430:	0800a2c4 	.word	0x0800a2c4

08007434 <__cvt>:
 8007434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	ec57 6b10 	vmov	r6, r7, d0
 800743c:	2f00      	cmp	r7, #0
 800743e:	460c      	mov	r4, r1
 8007440:	4619      	mov	r1, r3
 8007442:	463b      	mov	r3, r7
 8007444:	bfbb      	ittet	lt
 8007446:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800744a:	461f      	movlt	r7, r3
 800744c:	2300      	movge	r3, #0
 800744e:	232d      	movlt	r3, #45	@ 0x2d
 8007450:	700b      	strb	r3, [r1, #0]
 8007452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007454:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007458:	4691      	mov	r9, r2
 800745a:	f023 0820 	bic.w	r8, r3, #32
 800745e:	bfbc      	itt	lt
 8007460:	4632      	movlt	r2, r6
 8007462:	4616      	movlt	r6, r2
 8007464:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007468:	d005      	beq.n	8007476 <__cvt+0x42>
 800746a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800746e:	d100      	bne.n	8007472 <__cvt+0x3e>
 8007470:	3401      	adds	r4, #1
 8007472:	2102      	movs	r1, #2
 8007474:	e000      	b.n	8007478 <__cvt+0x44>
 8007476:	2103      	movs	r1, #3
 8007478:	ab03      	add	r3, sp, #12
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	ab02      	add	r3, sp, #8
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	ec47 6b10 	vmov	d0, r6, r7
 8007484:	4653      	mov	r3, sl
 8007486:	4622      	mov	r2, r4
 8007488:	f000 fe8e 	bl	80081a8 <_dtoa_r>
 800748c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007490:	4605      	mov	r5, r0
 8007492:	d119      	bne.n	80074c8 <__cvt+0x94>
 8007494:	f019 0f01 	tst.w	r9, #1
 8007498:	d00e      	beq.n	80074b8 <__cvt+0x84>
 800749a:	eb00 0904 	add.w	r9, r0, r4
 800749e:	2200      	movs	r2, #0
 80074a0:	2300      	movs	r3, #0
 80074a2:	4630      	mov	r0, r6
 80074a4:	4639      	mov	r1, r7
 80074a6:	f7f9 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 80074aa:	b108      	cbz	r0, 80074b0 <__cvt+0x7c>
 80074ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80074b0:	2230      	movs	r2, #48	@ 0x30
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	454b      	cmp	r3, r9
 80074b6:	d31e      	bcc.n	80074f6 <__cvt+0xc2>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074bc:	1b5b      	subs	r3, r3, r5
 80074be:	4628      	mov	r0, r5
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	b004      	add	sp, #16
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074cc:	eb00 0904 	add.w	r9, r0, r4
 80074d0:	d1e5      	bne.n	800749e <__cvt+0x6a>
 80074d2:	7803      	ldrb	r3, [r0, #0]
 80074d4:	2b30      	cmp	r3, #48	@ 0x30
 80074d6:	d10a      	bne.n	80074ee <__cvt+0xba>
 80074d8:	2200      	movs	r2, #0
 80074da:	2300      	movs	r3, #0
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f9 fb0a 	bl	8000af8 <__aeabi_dcmpeq>
 80074e4:	b918      	cbnz	r0, 80074ee <__cvt+0xba>
 80074e6:	f1c4 0401 	rsb	r4, r4, #1
 80074ea:	f8ca 4000 	str.w	r4, [sl]
 80074ee:	f8da 3000 	ldr.w	r3, [sl]
 80074f2:	4499      	add	r9, r3
 80074f4:	e7d3      	b.n	800749e <__cvt+0x6a>
 80074f6:	1c59      	adds	r1, r3, #1
 80074f8:	9103      	str	r1, [sp, #12]
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	e7d9      	b.n	80074b2 <__cvt+0x7e>

080074fe <__exponent>:
 80074fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007500:	2900      	cmp	r1, #0
 8007502:	bfba      	itte	lt
 8007504:	4249      	neglt	r1, r1
 8007506:	232d      	movlt	r3, #45	@ 0x2d
 8007508:	232b      	movge	r3, #43	@ 0x2b
 800750a:	2909      	cmp	r1, #9
 800750c:	7002      	strb	r2, [r0, #0]
 800750e:	7043      	strb	r3, [r0, #1]
 8007510:	dd29      	ble.n	8007566 <__exponent+0x68>
 8007512:	f10d 0307 	add.w	r3, sp, #7
 8007516:	461d      	mov	r5, r3
 8007518:	270a      	movs	r7, #10
 800751a:	461a      	mov	r2, r3
 800751c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007520:	fb07 1416 	mls	r4, r7, r6, r1
 8007524:	3430      	adds	r4, #48	@ 0x30
 8007526:	f802 4c01 	strb.w	r4, [r2, #-1]
 800752a:	460c      	mov	r4, r1
 800752c:	2c63      	cmp	r4, #99	@ 0x63
 800752e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007532:	4631      	mov	r1, r6
 8007534:	dcf1      	bgt.n	800751a <__exponent+0x1c>
 8007536:	3130      	adds	r1, #48	@ 0x30
 8007538:	1e94      	subs	r4, r2, #2
 800753a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800753e:	1c41      	adds	r1, r0, #1
 8007540:	4623      	mov	r3, r4
 8007542:	42ab      	cmp	r3, r5
 8007544:	d30a      	bcc.n	800755c <__exponent+0x5e>
 8007546:	f10d 0309 	add.w	r3, sp, #9
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	42ac      	cmp	r4, r5
 800754e:	bf88      	it	hi
 8007550:	2300      	movhi	r3, #0
 8007552:	3302      	adds	r3, #2
 8007554:	4403      	add	r3, r0
 8007556:	1a18      	subs	r0, r3, r0
 8007558:	b003      	add	sp, #12
 800755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007560:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007564:	e7ed      	b.n	8007542 <__exponent+0x44>
 8007566:	2330      	movs	r3, #48	@ 0x30
 8007568:	3130      	adds	r1, #48	@ 0x30
 800756a:	7083      	strb	r3, [r0, #2]
 800756c:	70c1      	strb	r1, [r0, #3]
 800756e:	1d03      	adds	r3, r0, #4
 8007570:	e7f1      	b.n	8007556 <__exponent+0x58>
	...

08007574 <_printf_float>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	b08d      	sub	sp, #52	@ 0x34
 800757a:	460c      	mov	r4, r1
 800757c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007580:	4616      	mov	r6, r2
 8007582:	461f      	mov	r7, r3
 8007584:	4605      	mov	r5, r0
 8007586:	f000 fd0f 	bl	8007fa8 <_localeconv_r>
 800758a:	6803      	ldr	r3, [r0, #0]
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	4618      	mov	r0, r3
 8007590:	f7f8 fe86 	bl	80002a0 <strlen>
 8007594:	2300      	movs	r3, #0
 8007596:	930a      	str	r3, [sp, #40]	@ 0x28
 8007598:	f8d8 3000 	ldr.w	r3, [r8]
 800759c:	9005      	str	r0, [sp, #20]
 800759e:	3307      	adds	r3, #7
 80075a0:	f023 0307 	bic.w	r3, r3, #7
 80075a4:	f103 0208 	add.w	r2, r3, #8
 80075a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075ac:	f8d4 b000 	ldr.w	fp, [r4]
 80075b0:	f8c8 2000 	str.w	r2, [r8]
 80075b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	f8cd 8018 	str.w	r8, [sp, #24]
 80075c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ca:	4b9c      	ldr	r3, [pc, #624]	@ (800783c <_printf_float+0x2c8>)
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295
 80075d0:	f7f9 fac4 	bl	8000b5c <__aeabi_dcmpun>
 80075d4:	bb70      	cbnz	r0, 8007634 <_printf_float+0xc0>
 80075d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075da:	4b98      	ldr	r3, [pc, #608]	@ (800783c <_printf_float+0x2c8>)
 80075dc:	f04f 32ff 	mov.w	r2, #4294967295
 80075e0:	f7f9 fa9e 	bl	8000b20 <__aeabi_dcmple>
 80075e4:	bb30      	cbnz	r0, 8007634 <_printf_float+0xc0>
 80075e6:	2200      	movs	r2, #0
 80075e8:	2300      	movs	r3, #0
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	f7f9 fa8d 	bl	8000b0c <__aeabi_dcmplt>
 80075f2:	b110      	cbz	r0, 80075fa <_printf_float+0x86>
 80075f4:	232d      	movs	r3, #45	@ 0x2d
 80075f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075fa:	4a91      	ldr	r2, [pc, #580]	@ (8007840 <_printf_float+0x2cc>)
 80075fc:	4b91      	ldr	r3, [pc, #580]	@ (8007844 <_printf_float+0x2d0>)
 80075fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007602:	bf94      	ite	ls
 8007604:	4690      	movls	r8, r2
 8007606:	4698      	movhi	r8, r3
 8007608:	2303      	movs	r3, #3
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	f02b 0304 	bic.w	r3, fp, #4
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	f04f 0900 	mov.w	r9, #0
 8007616:	9700      	str	r7, [sp, #0]
 8007618:	4633      	mov	r3, r6
 800761a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f9d2 	bl	80079c8 <_printf_common>
 8007624:	3001      	adds	r0, #1
 8007626:	f040 808d 	bne.w	8007744 <_printf_float+0x1d0>
 800762a:	f04f 30ff 	mov.w	r0, #4294967295
 800762e:	b00d      	add	sp, #52	@ 0x34
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f9 fa8e 	bl	8000b5c <__aeabi_dcmpun>
 8007640:	b140      	cbz	r0, 8007654 <_printf_float+0xe0>
 8007642:	464b      	mov	r3, r9
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfbc      	itt	lt
 8007648:	232d      	movlt	r3, #45	@ 0x2d
 800764a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800764e:	4a7e      	ldr	r2, [pc, #504]	@ (8007848 <_printf_float+0x2d4>)
 8007650:	4b7e      	ldr	r3, [pc, #504]	@ (800784c <_printf_float+0x2d8>)
 8007652:	e7d4      	b.n	80075fe <_printf_float+0x8a>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800765a:	9206      	str	r2, [sp, #24]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	d13b      	bne.n	80076d8 <_printf_float+0x164>
 8007660:	2306      	movs	r3, #6
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007668:	2300      	movs	r3, #0
 800766a:	6022      	str	r2, [r4, #0]
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007670:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007674:	ab09      	add	r3, sp, #36	@ 0x24
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	ec49 8b10 	vmov	d0, r8, r9
 800767e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff fed6 	bl	8007434 <__cvt>
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800768c:	2b47      	cmp	r3, #71	@ 0x47
 800768e:	4680      	mov	r8, r0
 8007690:	d129      	bne.n	80076e6 <_printf_float+0x172>
 8007692:	1cc8      	adds	r0, r1, #3
 8007694:	db02      	blt.n	800769c <_printf_float+0x128>
 8007696:	6863      	ldr	r3, [r4, #4]
 8007698:	4299      	cmp	r1, r3
 800769a:	dd41      	ble.n	8007720 <_printf_float+0x1ac>
 800769c:	f1aa 0a02 	sub.w	sl, sl, #2
 80076a0:	fa5f fa8a 	uxtb.w	sl, sl
 80076a4:	3901      	subs	r1, #1
 80076a6:	4652      	mov	r2, sl
 80076a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80076ae:	f7ff ff26 	bl	80074fe <__exponent>
 80076b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076b4:	1813      	adds	r3, r2, r0
 80076b6:	2a01      	cmp	r2, #1
 80076b8:	4681      	mov	r9, r0
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	dc02      	bgt.n	80076c4 <_printf_float+0x150>
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	07d2      	lsls	r2, r2, #31
 80076c2:	d501      	bpl.n	80076c8 <_printf_float+0x154>
 80076c4:	3301      	adds	r3, #1
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0a2      	beq.n	8007616 <_printf_float+0xa2>
 80076d0:	232d      	movs	r3, #45	@ 0x2d
 80076d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d6:	e79e      	b.n	8007616 <_printf_float+0xa2>
 80076d8:	9a06      	ldr	r2, [sp, #24]
 80076da:	2a47      	cmp	r2, #71	@ 0x47
 80076dc:	d1c2      	bne.n	8007664 <_printf_float+0xf0>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1c0      	bne.n	8007664 <_printf_float+0xf0>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7bd      	b.n	8007662 <_printf_float+0xee>
 80076e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076ea:	d9db      	bls.n	80076a4 <_printf_float+0x130>
 80076ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076f0:	d118      	bne.n	8007724 <_printf_float+0x1b0>
 80076f2:	2900      	cmp	r1, #0
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	dd0b      	ble.n	8007710 <_printf_float+0x19c>
 80076f8:	6121      	str	r1, [r4, #16]
 80076fa:	b913      	cbnz	r3, 8007702 <_printf_float+0x18e>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	07d0      	lsls	r0, r2, #31
 8007700:	d502      	bpl.n	8007708 <_printf_float+0x194>
 8007702:	3301      	adds	r3, #1
 8007704:	440b      	add	r3, r1
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	65a1      	str	r1, [r4, #88]	@ 0x58
 800770a:	f04f 0900 	mov.w	r9, #0
 800770e:	e7db      	b.n	80076c8 <_printf_float+0x154>
 8007710:	b913      	cbnz	r3, 8007718 <_printf_float+0x1a4>
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	07d2      	lsls	r2, r2, #31
 8007716:	d501      	bpl.n	800771c <_printf_float+0x1a8>
 8007718:	3302      	adds	r3, #2
 800771a:	e7f4      	b.n	8007706 <_printf_float+0x192>
 800771c:	2301      	movs	r3, #1
 800771e:	e7f2      	b.n	8007706 <_printf_float+0x192>
 8007720:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007726:	4299      	cmp	r1, r3
 8007728:	db05      	blt.n	8007736 <_printf_float+0x1c2>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	6121      	str	r1, [r4, #16]
 800772e:	07d8      	lsls	r0, r3, #31
 8007730:	d5ea      	bpl.n	8007708 <_printf_float+0x194>
 8007732:	1c4b      	adds	r3, r1, #1
 8007734:	e7e7      	b.n	8007706 <_printf_float+0x192>
 8007736:	2900      	cmp	r1, #0
 8007738:	bfd4      	ite	le
 800773a:	f1c1 0202 	rsble	r2, r1, #2
 800773e:	2201      	movgt	r2, #1
 8007740:	4413      	add	r3, r2
 8007742:	e7e0      	b.n	8007706 <_printf_float+0x192>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	055a      	lsls	r2, r3, #21
 8007748:	d407      	bmi.n	800775a <_printf_float+0x1e6>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	4642      	mov	r2, r8
 800774e:	4631      	mov	r1, r6
 8007750:	4628      	mov	r0, r5
 8007752:	47b8      	blx	r7
 8007754:	3001      	adds	r0, #1
 8007756:	d12b      	bne.n	80077b0 <_printf_float+0x23c>
 8007758:	e767      	b.n	800762a <_printf_float+0xb6>
 800775a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800775e:	f240 80dd 	bls.w	800791c <_printf_float+0x3a8>
 8007762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007766:	2200      	movs	r2, #0
 8007768:	2300      	movs	r3, #0
 800776a:	f7f9 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 800776e:	2800      	cmp	r0, #0
 8007770:	d033      	beq.n	80077da <_printf_float+0x266>
 8007772:	4a37      	ldr	r2, [pc, #220]	@ (8007850 <_printf_float+0x2dc>)
 8007774:	2301      	movs	r3, #1
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f af54 	beq.w	800762a <_printf_float+0xb6>
 8007782:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007786:	4543      	cmp	r3, r8
 8007788:	db02      	blt.n	8007790 <_printf_float+0x21c>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	07d8      	lsls	r0, r3, #31
 800778e:	d50f      	bpl.n	80077b0 <_printf_float+0x23c>
 8007790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af45 	beq.w	800762a <_printf_float+0xb6>
 80077a0:	f04f 0900 	mov.w	r9, #0
 80077a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80077a8:	f104 0a1a 	add.w	sl, r4, #26
 80077ac:	45c8      	cmp	r8, r9
 80077ae:	dc09      	bgt.n	80077c4 <_printf_float+0x250>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	079b      	lsls	r3, r3, #30
 80077b4:	f100 8103 	bmi.w	80079be <_printf_float+0x44a>
 80077b8:	68e0      	ldr	r0, [r4, #12]
 80077ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077bc:	4298      	cmp	r0, r3
 80077be:	bfb8      	it	lt
 80077c0:	4618      	movlt	r0, r3
 80077c2:	e734      	b.n	800762e <_printf_float+0xba>
 80077c4:	2301      	movs	r3, #1
 80077c6:	4652      	mov	r2, sl
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	f43f af2b 	beq.w	800762a <_printf_float+0xb6>
 80077d4:	f109 0901 	add.w	r9, r9, #1
 80077d8:	e7e8      	b.n	80077ac <_printf_float+0x238>
 80077da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dc39      	bgt.n	8007854 <_printf_float+0x2e0>
 80077e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <_printf_float+0x2dc>)
 80077e2:	2301      	movs	r3, #1
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	f43f af1d 	beq.w	800762a <_printf_float+0xb6>
 80077f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077f4:	ea59 0303 	orrs.w	r3, r9, r3
 80077f8:	d102      	bne.n	8007800 <_printf_float+0x28c>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	d5d7      	bpl.n	80077b0 <_printf_float+0x23c>
 8007800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af0d 	beq.w	800762a <_printf_float+0xb6>
 8007810:	f04f 0a00 	mov.w	sl, #0
 8007814:	f104 0b1a 	add.w	fp, r4, #26
 8007818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781a:	425b      	negs	r3, r3
 800781c:	4553      	cmp	r3, sl
 800781e:	dc01      	bgt.n	8007824 <_printf_float+0x2b0>
 8007820:	464b      	mov	r3, r9
 8007822:	e793      	b.n	800774c <_printf_float+0x1d8>
 8007824:	2301      	movs	r3, #1
 8007826:	465a      	mov	r2, fp
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f aefb 	beq.w	800762a <_printf_float+0xb6>
 8007834:	f10a 0a01 	add.w	sl, sl, #1
 8007838:	e7ee      	b.n	8007818 <_printf_float+0x2a4>
 800783a:	bf00      	nop
 800783c:	7fefffff 	.word	0x7fefffff
 8007840:	0800a2cc 	.word	0x0800a2cc
 8007844:	0800a2d0 	.word	0x0800a2d0
 8007848:	0800a2d4 	.word	0x0800a2d4
 800784c:	0800a2d8 	.word	0x0800a2d8
 8007850:	0800a2dc 	.word	0x0800a2dc
 8007854:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007856:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800785a:	4553      	cmp	r3, sl
 800785c:	bfa8      	it	ge
 800785e:	4653      	movge	r3, sl
 8007860:	2b00      	cmp	r3, #0
 8007862:	4699      	mov	r9, r3
 8007864:	dc36      	bgt.n	80078d4 <_printf_float+0x360>
 8007866:	f04f 0b00 	mov.w	fp, #0
 800786a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800786e:	f104 021a 	add.w	r2, r4, #26
 8007872:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007874:	9306      	str	r3, [sp, #24]
 8007876:	eba3 0309 	sub.w	r3, r3, r9
 800787a:	455b      	cmp	r3, fp
 800787c:	dc31      	bgt.n	80078e2 <_printf_float+0x36e>
 800787e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007880:	459a      	cmp	sl, r3
 8007882:	dc3a      	bgt.n	80078fa <_printf_float+0x386>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07da      	lsls	r2, r3, #31
 8007888:	d437      	bmi.n	80078fa <_printf_float+0x386>
 800788a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788c:	ebaa 0903 	sub.w	r9, sl, r3
 8007890:	9b06      	ldr	r3, [sp, #24]
 8007892:	ebaa 0303 	sub.w	r3, sl, r3
 8007896:	4599      	cmp	r9, r3
 8007898:	bfa8      	it	ge
 800789a:	4699      	movge	r9, r3
 800789c:	f1b9 0f00 	cmp.w	r9, #0
 80078a0:	dc33      	bgt.n	800790a <_printf_float+0x396>
 80078a2:	f04f 0800 	mov.w	r8, #0
 80078a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078aa:	f104 0b1a 	add.w	fp, r4, #26
 80078ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b0:	ebaa 0303 	sub.w	r3, sl, r3
 80078b4:	eba3 0309 	sub.w	r3, r3, r9
 80078b8:	4543      	cmp	r3, r8
 80078ba:	f77f af79 	ble.w	80077b0 <_printf_float+0x23c>
 80078be:	2301      	movs	r3, #1
 80078c0:	465a      	mov	r2, fp
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	f43f aeae 	beq.w	800762a <_printf_float+0xb6>
 80078ce:	f108 0801 	add.w	r8, r8, #1
 80078d2:	e7ec      	b.n	80078ae <_printf_float+0x33a>
 80078d4:	4642      	mov	r2, r8
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	d1c2      	bne.n	8007866 <_printf_float+0x2f2>
 80078e0:	e6a3      	b.n	800762a <_printf_float+0xb6>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	9206      	str	r2, [sp, #24]
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae9c 	beq.w	800762a <_printf_float+0xb6>
 80078f2:	9a06      	ldr	r2, [sp, #24]
 80078f4:	f10b 0b01 	add.w	fp, fp, #1
 80078f8:	e7bb      	b.n	8007872 <_printf_float+0x2fe>
 80078fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	d1c0      	bne.n	800788a <_printf_float+0x316>
 8007908:	e68f      	b.n	800762a <_printf_float+0xb6>
 800790a:	9a06      	ldr	r2, [sp, #24]
 800790c:	464b      	mov	r3, r9
 800790e:	4442      	add	r2, r8
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	d1c3      	bne.n	80078a2 <_printf_float+0x32e>
 800791a:	e686      	b.n	800762a <_printf_float+0xb6>
 800791c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007920:	f1ba 0f01 	cmp.w	sl, #1
 8007924:	dc01      	bgt.n	800792a <_printf_float+0x3b6>
 8007926:	07db      	lsls	r3, r3, #31
 8007928:	d536      	bpl.n	8007998 <_printf_float+0x424>
 800792a:	2301      	movs	r3, #1
 800792c:	4642      	mov	r2, r8
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f ae78 	beq.w	800762a <_printf_float+0xb6>
 800793a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae70 	beq.w	800762a <_printf_float+0xb6>
 800794a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800794e:	2200      	movs	r2, #0
 8007950:	2300      	movs	r3, #0
 8007952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007956:	f7f9 f8cf 	bl	8000af8 <__aeabi_dcmpeq>
 800795a:	b9c0      	cbnz	r0, 800798e <_printf_float+0x41a>
 800795c:	4653      	mov	r3, sl
 800795e:	f108 0201 	add.w	r2, r8, #1
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	d10c      	bne.n	8007986 <_printf_float+0x412>
 800796c:	e65d      	b.n	800762a <_printf_float+0xb6>
 800796e:	2301      	movs	r3, #1
 8007970:	465a      	mov	r2, fp
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae56 	beq.w	800762a <_printf_float+0xb6>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	45d0      	cmp	r8, sl
 8007984:	dbf3      	blt.n	800796e <_printf_float+0x3fa>
 8007986:	464b      	mov	r3, r9
 8007988:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800798c:	e6df      	b.n	800774e <_printf_float+0x1da>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	f104 0b1a 	add.w	fp, r4, #26
 8007996:	e7f4      	b.n	8007982 <_printf_float+0x40e>
 8007998:	2301      	movs	r3, #1
 800799a:	4642      	mov	r2, r8
 800799c:	e7e1      	b.n	8007962 <_printf_float+0x3ee>
 800799e:	2301      	movs	r3, #1
 80079a0:	464a      	mov	r2, r9
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f ae3e 	beq.w	800762a <_printf_float+0xb6>
 80079ae:	f108 0801 	add.w	r8, r8, #1
 80079b2:	68e3      	ldr	r3, [r4, #12]
 80079b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079b6:	1a5b      	subs	r3, r3, r1
 80079b8:	4543      	cmp	r3, r8
 80079ba:	dcf0      	bgt.n	800799e <_printf_float+0x42a>
 80079bc:	e6fc      	b.n	80077b8 <_printf_float+0x244>
 80079be:	f04f 0800 	mov.w	r8, #0
 80079c2:	f104 0919 	add.w	r9, r4, #25
 80079c6:	e7f4      	b.n	80079b2 <_printf_float+0x43e>

080079c8 <_printf_common>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4616      	mov	r6, r2
 80079ce:	4698      	mov	r8, r3
 80079d0:	688a      	ldr	r2, [r1, #8]
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bfb8      	it	lt
 80079dc:	4613      	movlt	r3, r2
 80079de:	6033      	str	r3, [r6, #0]
 80079e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079e4:	4607      	mov	r7, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b10a      	cbz	r2, 80079ee <_printf_common+0x26>
 80079ea:	3301      	adds	r3, #1
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	0699      	lsls	r1, r3, #26
 80079f2:	bf42      	ittt	mi
 80079f4:	6833      	ldrmi	r3, [r6, #0]
 80079f6:	3302      	addmi	r3, #2
 80079f8:	6033      	strmi	r3, [r6, #0]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d106      	bne.n	8007a10 <_printf_common+0x48>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	6832      	ldr	r2, [r6, #0]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	dc26      	bgt.n	8007a5e <_printf_common+0x96>
 8007a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	3b00      	subs	r3, #0
 8007a18:	bf18      	it	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	0692      	lsls	r2, r2, #26
 8007a1e:	d42b      	bmi.n	8007a78 <_printf_common+0xb0>
 8007a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a24:	4641      	mov	r1, r8
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c8      	blx	r9
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d01e      	beq.n	8007a6c <_printf_common+0xa4>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	f003 0306 	and.w	r3, r3, #6
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	bf02      	ittt	eq
 8007a3a:	68e5      	ldreq	r5, [r4, #12]
 8007a3c:	6833      	ldreq	r3, [r6, #0]
 8007a3e:	1aed      	subeq	r5, r5, r3
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	bf0c      	ite	eq
 8007a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a48:	2500      	movne	r5, #0
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bfc4      	itt	gt
 8007a4e:	1a9b      	subgt	r3, r3, r2
 8007a50:	18ed      	addgt	r5, r5, r3
 8007a52:	2600      	movs	r6, #0
 8007a54:	341a      	adds	r4, #26
 8007a56:	42b5      	cmp	r5, r6
 8007a58:	d11a      	bne.n	8007a90 <_printf_common+0xc8>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e008      	b.n	8007a70 <_printf_common+0xa8>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	4641      	mov	r1, r8
 8007a64:	4638      	mov	r0, r7
 8007a66:	47c8      	blx	r9
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d103      	bne.n	8007a74 <_printf_common+0xac>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a74:	3501      	adds	r5, #1
 8007a76:	e7c6      	b.n	8007a06 <_printf_common+0x3e>
 8007a78:	18e1      	adds	r1, r4, r3
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	2030      	movs	r0, #48	@ 0x30
 8007a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a82:	4422      	add	r2, r4
 8007a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	e7c7      	b.n	8007a20 <_printf_common+0x58>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4622      	mov	r2, r4
 8007a94:	4641      	mov	r1, r8
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c8      	blx	r9
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d0e6      	beq.n	8007a6c <_printf_common+0xa4>
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	e7d9      	b.n	8007a56 <_printf_common+0x8e>
	...

08007aa4 <_printf_i>:
 8007aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	7e0f      	ldrb	r7, [r1, #24]
 8007aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aac:	2f78      	cmp	r7, #120	@ 0x78
 8007aae:	4691      	mov	r9, r2
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007aba:	d807      	bhi.n	8007acc <_printf_i+0x28>
 8007abc:	2f62      	cmp	r7, #98	@ 0x62
 8007abe:	d80a      	bhi.n	8007ad6 <_printf_i+0x32>
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	f000 80d2 	beq.w	8007c6a <_printf_i+0x1c6>
 8007ac6:	2f58      	cmp	r7, #88	@ 0x58
 8007ac8:	f000 80b9 	beq.w	8007c3e <_printf_i+0x19a>
 8007acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ad4:	e03a      	b.n	8007b4c <_printf_i+0xa8>
 8007ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ada:	2b15      	cmp	r3, #21
 8007adc:	d8f6      	bhi.n	8007acc <_printf_i+0x28>
 8007ade:	a101      	add	r1, pc, #4	@ (adr r1, 8007ae4 <_printf_i+0x40>)
 8007ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b51 	.word	0x08007b51
 8007aec:	08007acd 	.word	0x08007acd
 8007af0:	08007acd 	.word	0x08007acd
 8007af4:	08007acd 	.word	0x08007acd
 8007af8:	08007acd 	.word	0x08007acd
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007acd 	.word	0x08007acd
 8007b04:	08007acd 	.word	0x08007acd
 8007b08:	08007acd 	.word	0x08007acd
 8007b0c:	08007acd 	.word	0x08007acd
 8007b10:	08007c51 	.word	0x08007c51
 8007b14:	08007b7b 	.word	0x08007b7b
 8007b18:	08007c0b 	.word	0x08007c0b
 8007b1c:	08007acd 	.word	0x08007acd
 8007b20:	08007acd 	.word	0x08007acd
 8007b24:	08007c73 	.word	0x08007c73
 8007b28:	08007acd 	.word	0x08007acd
 8007b2c:	08007b7b 	.word	0x08007b7b
 8007b30:	08007acd 	.word	0x08007acd
 8007b34:	08007acd 	.word	0x08007acd
 8007b38:	08007c13 	.word	0x08007c13
 8007b3c:	6833      	ldr	r3, [r6, #0]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6032      	str	r2, [r6, #0]
 8007b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e09d      	b.n	8007c8c <_printf_i+0x1e8>
 8007b50:	6833      	ldr	r3, [r6, #0]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	1d19      	adds	r1, r3, #4
 8007b56:	6031      	str	r1, [r6, #0]
 8007b58:	0606      	lsls	r6, r0, #24
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0xbc>
 8007b5c:	681d      	ldr	r5, [r3, #0]
 8007b5e:	e003      	b.n	8007b68 <_printf_i+0xc4>
 8007b60:	0645      	lsls	r5, r0, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0xb8>
 8007b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	da03      	bge.n	8007b74 <_printf_i+0xd0>
 8007b6c:	232d      	movs	r3, #45	@ 0x2d
 8007b6e:	426d      	negs	r5, r5
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b74:	4859      	ldr	r0, [pc, #356]	@ (8007cdc <_printf_i+0x238>)
 8007b76:	230a      	movs	r3, #10
 8007b78:	e011      	b.n	8007b9e <_printf_i+0xfa>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	6833      	ldr	r3, [r6, #0]
 8007b7e:	0608      	lsls	r0, r1, #24
 8007b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b84:	d402      	bmi.n	8007b8c <_printf_i+0xe8>
 8007b86:	0649      	lsls	r1, r1, #25
 8007b88:	bf48      	it	mi
 8007b8a:	b2ad      	uxthmi	r5, r5
 8007b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b8e:	4853      	ldr	r0, [pc, #332]	@ (8007cdc <_printf_i+0x238>)
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	bf14      	ite	ne
 8007b94:	230a      	movne	r3, #10
 8007b96:	2308      	moveq	r3, #8
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b9e:	6866      	ldr	r6, [r4, #4]
 8007ba0:	60a6      	str	r6, [r4, #8]
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	bfa2      	ittt	ge
 8007ba6:	6821      	ldrge	r1, [r4, #0]
 8007ba8:	f021 0104 	bicge.w	r1, r1, #4
 8007bac:	6021      	strge	r1, [r4, #0]
 8007bae:	b90d      	cbnz	r5, 8007bb4 <_printf_i+0x110>
 8007bb0:	2e00      	cmp	r6, #0
 8007bb2:	d04b      	beq.n	8007c4c <_printf_i+0x1a8>
 8007bb4:	4616      	mov	r6, r2
 8007bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bba:	fb03 5711 	mls	r7, r3, r1, r5
 8007bbe:	5dc7      	ldrb	r7, [r0, r7]
 8007bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bc4:	462f      	mov	r7, r5
 8007bc6:	42bb      	cmp	r3, r7
 8007bc8:	460d      	mov	r5, r1
 8007bca:	d9f4      	bls.n	8007bb6 <_printf_i+0x112>
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d10b      	bne.n	8007be8 <_printf_i+0x144>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	07df      	lsls	r7, r3, #31
 8007bd4:	d508      	bpl.n	8007be8 <_printf_i+0x144>
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	6861      	ldr	r1, [r4, #4]
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	bfde      	ittt	le
 8007bde:	2330      	movle	r3, #48	@ 0x30
 8007be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007be4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007be8:	1b92      	subs	r2, r2, r6
 8007bea:	6122      	str	r2, [r4, #16]
 8007bec:	f8cd a000 	str.w	sl, [sp]
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	aa03      	add	r2, sp, #12
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	f7ff fee6 	bl	80079c8 <_printf_common>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d14a      	bne.n	8007c96 <_printf_i+0x1f2>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	b004      	add	sp, #16
 8007c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f043 0320 	orr.w	r3, r3, #32
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	4833      	ldr	r0, [pc, #204]	@ (8007ce0 <_printf_i+0x23c>)
 8007c14:	2778      	movs	r7, #120	@ 0x78
 8007c16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	6831      	ldr	r1, [r6, #0]
 8007c1e:	061f      	lsls	r7, r3, #24
 8007c20:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c24:	d402      	bmi.n	8007c2c <_printf_i+0x188>
 8007c26:	065f      	lsls	r7, r3, #25
 8007c28:	bf48      	it	mi
 8007c2a:	b2ad      	uxthmi	r5, r5
 8007c2c:	6031      	str	r1, [r6, #0]
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	bf44      	itt	mi
 8007c32:	f043 0320 	orrmi.w	r3, r3, #32
 8007c36:	6023      	strmi	r3, [r4, #0]
 8007c38:	b11d      	cbz	r5, 8007c42 <_printf_i+0x19e>
 8007c3a:	2310      	movs	r3, #16
 8007c3c:	e7ac      	b.n	8007b98 <_printf_i+0xf4>
 8007c3e:	4827      	ldr	r0, [pc, #156]	@ (8007cdc <_printf_i+0x238>)
 8007c40:	e7e9      	b.n	8007c16 <_printf_i+0x172>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	f023 0320 	bic.w	r3, r3, #32
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	e7f6      	b.n	8007c3a <_printf_i+0x196>
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	e7bd      	b.n	8007bcc <_printf_i+0x128>
 8007c50:	6833      	ldr	r3, [r6, #0]
 8007c52:	6825      	ldr	r5, [r4, #0]
 8007c54:	6961      	ldr	r1, [r4, #20]
 8007c56:	1d18      	adds	r0, r3, #4
 8007c58:	6030      	str	r0, [r6, #0]
 8007c5a:	062e      	lsls	r6, r5, #24
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	d501      	bpl.n	8007c64 <_printf_i+0x1c0>
 8007c60:	6019      	str	r1, [r3, #0]
 8007c62:	e002      	b.n	8007c6a <_printf_i+0x1c6>
 8007c64:	0668      	lsls	r0, r5, #25
 8007c66:	d5fb      	bpl.n	8007c60 <_printf_i+0x1bc>
 8007c68:	8019      	strh	r1, [r3, #0]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	4616      	mov	r6, r2
 8007c70:	e7bc      	b.n	8007bec <_printf_i+0x148>
 8007c72:	6833      	ldr	r3, [r6, #0]
 8007c74:	1d1a      	adds	r2, r3, #4
 8007c76:	6032      	str	r2, [r6, #0]
 8007c78:	681e      	ldr	r6, [r3, #0]
 8007c7a:	6862      	ldr	r2, [r4, #4]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7f8 fabe 	bl	8000200 <memchr>
 8007c84:	b108      	cbz	r0, 8007c8a <_printf_i+0x1e6>
 8007c86:	1b80      	subs	r0, r0, r6
 8007c88:	6060      	str	r0, [r4, #4]
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	6123      	str	r3, [r4, #16]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c94:	e7aa      	b.n	8007bec <_printf_i+0x148>
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	4632      	mov	r2, r6
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	47d0      	blx	sl
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d0ad      	beq.n	8007c00 <_printf_i+0x15c>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	079b      	lsls	r3, r3, #30
 8007ca8:	d413      	bmi.n	8007cd2 <_printf_i+0x22e>
 8007caa:	68e0      	ldr	r0, [r4, #12]
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	4298      	cmp	r0, r3
 8007cb0:	bfb8      	it	lt
 8007cb2:	4618      	movlt	r0, r3
 8007cb4:	e7a6      	b.n	8007c04 <_printf_i+0x160>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4632      	mov	r2, r6
 8007cba:	4649      	mov	r1, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	47d0      	blx	sl
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d09d      	beq.n	8007c00 <_printf_i+0x15c>
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	68e3      	ldr	r3, [r4, #12]
 8007cc8:	9903      	ldr	r1, [sp, #12]
 8007cca:	1a5b      	subs	r3, r3, r1
 8007ccc:	42ab      	cmp	r3, r5
 8007cce:	dcf2      	bgt.n	8007cb6 <_printf_i+0x212>
 8007cd0:	e7eb      	b.n	8007caa <_printf_i+0x206>
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	f104 0619 	add.w	r6, r4, #25
 8007cd8:	e7f5      	b.n	8007cc6 <_printf_i+0x222>
 8007cda:	bf00      	nop
 8007cdc:	0800a2de 	.word	0x0800a2de
 8007ce0:	0800a2ef 	.word	0x0800a2ef

08007ce4 <std>:
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	4604      	mov	r4, r0
 8007cea:	e9c0 3300 	strd	r3, r3, [r0]
 8007cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cf2:	6083      	str	r3, [r0, #8]
 8007cf4:	8181      	strh	r1, [r0, #12]
 8007cf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cf8:	81c2      	strh	r2, [r0, #14]
 8007cfa:	6183      	str	r3, [r0, #24]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	2208      	movs	r2, #8
 8007d00:	305c      	adds	r0, #92	@ 0x5c
 8007d02:	f000 f948 	bl	8007f96 <memset>
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <std+0x58>)
 8007d08:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <std+0x5c>)
 8007d0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <std+0x60>)
 8007d10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <std+0x64>)
 8007d14:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d16:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <std+0x68>)
 8007d18:	6224      	str	r4, [r4, #32]
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d006      	beq.n	8007d2c <std+0x48>
 8007d1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d22:	4294      	cmp	r4, r2
 8007d24:	d002      	beq.n	8007d2c <std+0x48>
 8007d26:	33d0      	adds	r3, #208	@ 0xd0
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	d105      	bne.n	8007d38 <std+0x54>
 8007d2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d34:	f000 b9ac 	b.w	8008090 <__retarget_lock_init_recursive>
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08007f11 	.word	0x08007f11
 8007d40:	08007f33 	.word	0x08007f33
 8007d44:	08007f6b 	.word	0x08007f6b
 8007d48:	08007f8f 	.word	0x08007f8f
 8007d4c:	2000a87c 	.word	0x2000a87c

08007d50 <stdio_exit_handler>:
 8007d50:	4a02      	ldr	r2, [pc, #8]	@ (8007d5c <stdio_exit_handler+0xc>)
 8007d52:	4903      	ldr	r1, [pc, #12]	@ (8007d60 <stdio_exit_handler+0x10>)
 8007d54:	4803      	ldr	r0, [pc, #12]	@ (8007d64 <stdio_exit_handler+0x14>)
 8007d56:	f000 b869 	b.w	8007e2c <_fwalk_sglue>
 8007d5a:	bf00      	nop
 8007d5c:	20006014 	.word	0x20006014
 8007d60:	080099ed 	.word	0x080099ed
 8007d64:	20006024 	.word	0x20006024

08007d68 <cleanup_stdio>:
 8007d68:	6841      	ldr	r1, [r0, #4]
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d9c <cleanup_stdio+0x34>)
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	4604      	mov	r4, r0
 8007d72:	d001      	beq.n	8007d78 <cleanup_stdio+0x10>
 8007d74:	f001 fe3a 	bl	80099ec <_fflush_r>
 8007d78:	68a1      	ldr	r1, [r4, #8]
 8007d7a:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <cleanup_stdio+0x38>)
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d002      	beq.n	8007d86 <cleanup_stdio+0x1e>
 8007d80:	4620      	mov	r0, r4
 8007d82:	f001 fe33 	bl	80099ec <_fflush_r>
 8007d86:	68e1      	ldr	r1, [r4, #12]
 8007d88:	4b06      	ldr	r3, [pc, #24]	@ (8007da4 <cleanup_stdio+0x3c>)
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	d004      	beq.n	8007d98 <cleanup_stdio+0x30>
 8007d8e:	4620      	mov	r0, r4
 8007d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d94:	f001 be2a 	b.w	80099ec <_fflush_r>
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	bf00      	nop
 8007d9c:	2000a87c 	.word	0x2000a87c
 8007da0:	2000a8e4 	.word	0x2000a8e4
 8007da4:	2000a94c 	.word	0x2000a94c

08007da8 <global_stdio_init.part.0>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd8 <global_stdio_init.part.0+0x30>)
 8007dac:	4c0b      	ldr	r4, [pc, #44]	@ (8007ddc <global_stdio_init.part.0+0x34>)
 8007dae:	4a0c      	ldr	r2, [pc, #48]	@ (8007de0 <global_stdio_init.part.0+0x38>)
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	4620      	mov	r0, r4
 8007db4:	2200      	movs	r2, #0
 8007db6:	2104      	movs	r1, #4
 8007db8:	f7ff ff94 	bl	8007ce4 <std>
 8007dbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	2109      	movs	r1, #9
 8007dc4:	f7ff ff8e 	bl	8007ce4 <std>
 8007dc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dcc:	2202      	movs	r2, #2
 8007dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd2:	2112      	movs	r1, #18
 8007dd4:	f7ff bf86 	b.w	8007ce4 <std>
 8007dd8:	2000a9b4 	.word	0x2000a9b4
 8007ddc:	2000a87c 	.word	0x2000a87c
 8007de0:	08007d51 	.word	0x08007d51

08007de4 <__sfp_lock_acquire>:
 8007de4:	4801      	ldr	r0, [pc, #4]	@ (8007dec <__sfp_lock_acquire+0x8>)
 8007de6:	f000 b954 	b.w	8008092 <__retarget_lock_acquire_recursive>
 8007dea:	bf00      	nop
 8007dec:	2000a9bd 	.word	0x2000a9bd

08007df0 <__sfp_lock_release>:
 8007df0:	4801      	ldr	r0, [pc, #4]	@ (8007df8 <__sfp_lock_release+0x8>)
 8007df2:	f000 b94f 	b.w	8008094 <__retarget_lock_release_recursive>
 8007df6:	bf00      	nop
 8007df8:	2000a9bd 	.word	0x2000a9bd

08007dfc <__sinit>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4604      	mov	r4, r0
 8007e00:	f7ff fff0 	bl	8007de4 <__sfp_lock_acquire>
 8007e04:	6a23      	ldr	r3, [r4, #32]
 8007e06:	b11b      	cbz	r3, 8007e10 <__sinit+0x14>
 8007e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0c:	f7ff bff0 	b.w	8007df0 <__sfp_lock_release>
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <__sinit+0x28>)
 8007e12:	6223      	str	r3, [r4, #32]
 8007e14:	4b04      	ldr	r3, [pc, #16]	@ (8007e28 <__sinit+0x2c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f5      	bne.n	8007e08 <__sinit+0xc>
 8007e1c:	f7ff ffc4 	bl	8007da8 <global_stdio_init.part.0>
 8007e20:	e7f2      	b.n	8007e08 <__sinit+0xc>
 8007e22:	bf00      	nop
 8007e24:	08007d69 	.word	0x08007d69
 8007e28:	2000a9b4 	.word	0x2000a9b4

08007e2c <_fwalk_sglue>:
 8007e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e30:	4607      	mov	r7, r0
 8007e32:	4688      	mov	r8, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	2600      	movs	r6, #0
 8007e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e40:	d505      	bpl.n	8007e4e <_fwalk_sglue+0x22>
 8007e42:	6824      	ldr	r4, [r4, #0]
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	d1f7      	bne.n	8007e38 <_fwalk_sglue+0xc>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d907      	bls.n	8007e64 <_fwalk_sglue+0x38>
 8007e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	d003      	beq.n	8007e64 <_fwalk_sglue+0x38>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c0      	blx	r8
 8007e62:	4306      	orrs	r6, r0
 8007e64:	3568      	adds	r5, #104	@ 0x68
 8007e66:	e7e9      	b.n	8007e3c <_fwalk_sglue+0x10>

08007e68 <sniprintf>:
 8007e68:	b40c      	push	{r2, r3}
 8007e6a:	b530      	push	{r4, r5, lr}
 8007e6c:	4b17      	ldr	r3, [pc, #92]	@ (8007ecc <sniprintf+0x64>)
 8007e6e:	1e0c      	subs	r4, r1, #0
 8007e70:	681d      	ldr	r5, [r3, #0]
 8007e72:	b09d      	sub	sp, #116	@ 0x74
 8007e74:	da08      	bge.n	8007e88 <sniprintf+0x20>
 8007e76:	238b      	movs	r3, #139	@ 0x8b
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	b01d      	add	sp, #116	@ 0x74
 8007e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e84:	b002      	add	sp, #8
 8007e86:	4770      	bx	lr
 8007e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e90:	bf14      	ite	ne
 8007e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e96:	4623      	moveq	r3, r4
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	9307      	str	r3, [sp, #28]
 8007e9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ea0:	9002      	str	r0, [sp, #8]
 8007ea2:	9006      	str	r0, [sp, #24]
 8007ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ea8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007eaa:	ab21      	add	r3, sp, #132	@ 0x84
 8007eac:	a902      	add	r1, sp, #8
 8007eae:	4628      	mov	r0, r5
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	f001 fc1b 	bl	80096ec <_svfiprintf_r>
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	bfbc      	itt	lt
 8007eba:	238b      	movlt	r3, #139	@ 0x8b
 8007ebc:	602b      	strlt	r3, [r5, #0]
 8007ebe:	2c00      	cmp	r4, #0
 8007ec0:	d0dd      	beq.n	8007e7e <sniprintf+0x16>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e7d9      	b.n	8007e7e <sniprintf+0x16>
 8007eca:	bf00      	nop
 8007ecc:	20006020 	.word	0x20006020

08007ed0 <siprintf>:
 8007ed0:	b40e      	push	{r1, r2, r3}
 8007ed2:	b500      	push	{lr}
 8007ed4:	b09c      	sub	sp, #112	@ 0x70
 8007ed6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ed8:	9002      	str	r0, [sp, #8]
 8007eda:	9006      	str	r0, [sp, #24]
 8007edc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ee0:	4809      	ldr	r0, [pc, #36]	@ (8007f08 <siprintf+0x38>)
 8007ee2:	9107      	str	r1, [sp, #28]
 8007ee4:	9104      	str	r1, [sp, #16]
 8007ee6:	4909      	ldr	r1, [pc, #36]	@ (8007f0c <siprintf+0x3c>)
 8007ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eec:	9105      	str	r1, [sp, #20]
 8007eee:	6800      	ldr	r0, [r0, #0]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	a902      	add	r1, sp, #8
 8007ef4:	f001 fbfa 	bl	80096ec <_svfiprintf_r>
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	b01c      	add	sp, #112	@ 0x70
 8007f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f04:	b003      	add	sp, #12
 8007f06:	4770      	bx	lr
 8007f08:	20006020 	.word	0x20006020
 8007f0c:	ffff0208 	.word	0xffff0208

08007f10 <__sread>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	460c      	mov	r4, r1
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	f000 f86c 	bl	8007ff4 <_read_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	bfab      	itete	ge
 8007f20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f22:	89a3      	ldrhlt	r3, [r4, #12]
 8007f24:	181b      	addge	r3, r3, r0
 8007f26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f2a:	bfac      	ite	ge
 8007f2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f2e:	81a3      	strhlt	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__swrite>:
 8007f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f36:	461f      	mov	r7, r3
 8007f38:	898b      	ldrh	r3, [r1, #12]
 8007f3a:	05db      	lsls	r3, r3, #23
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	4616      	mov	r6, r2
 8007f42:	d505      	bpl.n	8007f50 <__swrite+0x1e>
 8007f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f48:	2302      	movs	r3, #2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f000 f840 	bl	8007fd0 <_lseek_r>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	4628      	mov	r0, r5
 8007f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f66:	f000 b857 	b.w	8008018 <_write_r>

08007f6a <__sseek>:
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f72:	f000 f82d 	bl	8007fd0 <_lseek_r>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	bf15      	itete	ne
 8007f7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f86:	81a3      	strheq	r3, [r4, #12]
 8007f88:	bf18      	it	ne
 8007f8a:	81a3      	strhne	r3, [r4, #12]
 8007f8c:	bd10      	pop	{r4, pc}

08007f8e <__sclose>:
 8007f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f92:	f000 b80d 	b.w	8007fb0 <_close_r>

08007f96 <memset>:
 8007f96:	4402      	add	r2, r0
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d100      	bne.n	8007fa0 <memset+0xa>
 8007f9e:	4770      	bx	lr
 8007fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa4:	e7f9      	b.n	8007f9a <memset+0x4>
	...

08007fa8 <_localeconv_r>:
 8007fa8:	4800      	ldr	r0, [pc, #0]	@ (8007fac <_localeconv_r+0x4>)
 8007faa:	4770      	bx	lr
 8007fac:	20006160 	.word	0x20006160

08007fb0 <_close_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	@ (8007fcc <_close_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7fa fa34 	bl	8002428 <_close>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_close_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_close_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	2000a9b8 	.word	0x2000a9b8

08007fd0 <_lseek_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	@ (8007ff0 <_lseek_r+0x20>)
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7fa fa49 	bl	8002476 <_lseek>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_lseek_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_lseek_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	2000a9b8 	.word	0x2000a9b8

08007ff4 <_read_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	@ (8008014 <_read_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7fa f9d7 	bl	80023b6 <_read>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_read_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_read_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	2000a9b8 	.word	0x2000a9b8

08008018 <_write_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	@ (8008038 <_write_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7fa f9e2 	bl	80023f0 <_write>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_write_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_write_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	2000a9b8 	.word	0x2000a9b8

0800803c <__errno>:
 800803c:	4b01      	ldr	r3, [pc, #4]	@ (8008044 <__errno+0x8>)
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20006020 	.word	0x20006020

08008048 <__libc_init_array>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4d0d      	ldr	r5, [pc, #52]	@ (8008080 <__libc_init_array+0x38>)
 800804c:	4c0d      	ldr	r4, [pc, #52]	@ (8008084 <__libc_init_array+0x3c>)
 800804e:	1b64      	subs	r4, r4, r5
 8008050:	10a4      	asrs	r4, r4, #2
 8008052:	2600      	movs	r6, #0
 8008054:	42a6      	cmp	r6, r4
 8008056:	d109      	bne.n	800806c <__libc_init_array+0x24>
 8008058:	4d0b      	ldr	r5, [pc, #44]	@ (8008088 <__libc_init_array+0x40>)
 800805a:	4c0c      	ldr	r4, [pc, #48]	@ (800808c <__libc_init_array+0x44>)
 800805c:	f002 f886 	bl	800a16c <_init>
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	2600      	movs	r6, #0
 8008066:	42a6      	cmp	r6, r4
 8008068:	d105      	bne.n	8008076 <__libc_init_array+0x2e>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008070:	4798      	blx	r3
 8008072:	3601      	adds	r6, #1
 8008074:	e7ee      	b.n	8008054 <__libc_init_array+0xc>
 8008076:	f855 3b04 	ldr.w	r3, [r5], #4
 800807a:	4798      	blx	r3
 800807c:	3601      	adds	r6, #1
 800807e:	e7f2      	b.n	8008066 <__libc_init_array+0x1e>
 8008080:	0800a648 	.word	0x0800a648
 8008084:	0800a648 	.word	0x0800a648
 8008088:	0800a648 	.word	0x0800a648
 800808c:	0800a64c 	.word	0x0800a64c

08008090 <__retarget_lock_init_recursive>:
 8008090:	4770      	bx	lr

08008092 <__retarget_lock_acquire_recursive>:
 8008092:	4770      	bx	lr

08008094 <__retarget_lock_release_recursive>:
 8008094:	4770      	bx	lr

08008096 <quorem>:
 8008096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	6903      	ldr	r3, [r0, #16]
 800809c:	690c      	ldr	r4, [r1, #16]
 800809e:	42a3      	cmp	r3, r4
 80080a0:	4607      	mov	r7, r0
 80080a2:	db7e      	blt.n	80081a2 <quorem+0x10c>
 80080a4:	3c01      	subs	r4, #1
 80080a6:	f101 0814 	add.w	r8, r1, #20
 80080aa:	00a3      	lsls	r3, r4, #2
 80080ac:	f100 0514 	add.w	r5, r0, #20
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c0:	3301      	adds	r3, #1
 80080c2:	429a      	cmp	r2, r3
 80080c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80080cc:	d32e      	bcc.n	800812c <quorem+0x96>
 80080ce:	f04f 0a00 	mov.w	sl, #0
 80080d2:	46c4      	mov	ip, r8
 80080d4:	46ae      	mov	lr, r5
 80080d6:	46d3      	mov	fp, sl
 80080d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080dc:	b298      	uxth	r0, r3
 80080de:	fb06 a000 	mla	r0, r6, r0, sl
 80080e2:	0c02      	lsrs	r2, r0, #16
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	fb06 2303 	mla	r3, r6, r3, r2
 80080ea:	f8de 2000 	ldr.w	r2, [lr]
 80080ee:	b280      	uxth	r0, r0
 80080f0:	b292      	uxth	r2, r2
 80080f2:	1a12      	subs	r2, r2, r0
 80080f4:	445a      	add	r2, fp
 80080f6:	f8de 0000 	ldr.w	r0, [lr]
 80080fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080fe:	b29b      	uxth	r3, r3
 8008100:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008104:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008108:	b292      	uxth	r2, r2
 800810a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800810e:	45e1      	cmp	r9, ip
 8008110:	f84e 2b04 	str.w	r2, [lr], #4
 8008114:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008118:	d2de      	bcs.n	80080d8 <quorem+0x42>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	58eb      	ldr	r3, [r5, r3]
 800811e:	b92b      	cbnz	r3, 800812c <quorem+0x96>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	3b04      	subs	r3, #4
 8008124:	429d      	cmp	r5, r3
 8008126:	461a      	mov	r2, r3
 8008128:	d32f      	bcc.n	800818a <quorem+0xf4>
 800812a:	613c      	str	r4, [r7, #16]
 800812c:	4638      	mov	r0, r7
 800812e:	f001 f979 	bl	8009424 <__mcmp>
 8008132:	2800      	cmp	r0, #0
 8008134:	db25      	blt.n	8008182 <quorem+0xec>
 8008136:	4629      	mov	r1, r5
 8008138:	2000      	movs	r0, #0
 800813a:	f858 2b04 	ldr.w	r2, [r8], #4
 800813e:	f8d1 c000 	ldr.w	ip, [r1]
 8008142:	fa1f fe82 	uxth.w	lr, r2
 8008146:	fa1f f38c 	uxth.w	r3, ip
 800814a:	eba3 030e 	sub.w	r3, r3, lr
 800814e:	4403      	add	r3, r0
 8008150:	0c12      	lsrs	r2, r2, #16
 8008152:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008156:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008160:	45c1      	cmp	r9, r8
 8008162:	f841 3b04 	str.w	r3, [r1], #4
 8008166:	ea4f 4022 	mov.w	r0, r2, asr #16
 800816a:	d2e6      	bcs.n	800813a <quorem+0xa4>
 800816c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008174:	b922      	cbnz	r2, 8008180 <quorem+0xea>
 8008176:	3b04      	subs	r3, #4
 8008178:	429d      	cmp	r5, r3
 800817a:	461a      	mov	r2, r3
 800817c:	d30b      	bcc.n	8008196 <quorem+0x100>
 800817e:	613c      	str	r4, [r7, #16]
 8008180:	3601      	adds	r6, #1
 8008182:	4630      	mov	r0, r6
 8008184:	b003      	add	sp, #12
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	3b04      	subs	r3, #4
 800818e:	2a00      	cmp	r2, #0
 8008190:	d1cb      	bne.n	800812a <quorem+0x94>
 8008192:	3c01      	subs	r4, #1
 8008194:	e7c6      	b.n	8008124 <quorem+0x8e>
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	3b04      	subs	r3, #4
 800819a:	2a00      	cmp	r2, #0
 800819c:	d1ef      	bne.n	800817e <quorem+0xe8>
 800819e:	3c01      	subs	r4, #1
 80081a0:	e7ea      	b.n	8008178 <quorem+0xe2>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e7ee      	b.n	8008184 <quorem+0xee>
	...

080081a8 <_dtoa_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	69c7      	ldr	r7, [r0, #28]
 80081ae:	b099      	sub	sp, #100	@ 0x64
 80081b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081b4:	ec55 4b10 	vmov	r4, r5, d0
 80081b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80081bc:	4683      	mov	fp, r0
 80081be:	920e      	str	r2, [sp, #56]	@ 0x38
 80081c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081c2:	b97f      	cbnz	r7, 80081e4 <_dtoa_r+0x3c>
 80081c4:	2010      	movs	r0, #16
 80081c6:	f000 fdfd 	bl	8008dc4 <malloc>
 80081ca:	4602      	mov	r2, r0
 80081cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80081d0:	b920      	cbnz	r0, 80081dc <_dtoa_r+0x34>
 80081d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008470 <_dtoa_r+0x2c8>)
 80081d4:	21ef      	movs	r1, #239	@ 0xef
 80081d6:	48a7      	ldr	r0, [pc, #668]	@ (8008474 <_dtoa_r+0x2cc>)
 80081d8:	f001 fc68 	bl	8009aac <__assert_func>
 80081dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081e0:	6007      	str	r7, [r0, #0]
 80081e2:	60c7      	str	r7, [r0, #12]
 80081e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	b159      	cbz	r1, 8008204 <_dtoa_r+0x5c>
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	604a      	str	r2, [r1, #4]
 80081f0:	2301      	movs	r3, #1
 80081f2:	4093      	lsls	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	4658      	mov	r0, fp
 80081f8:	f000 feda 	bl	8008fb0 <_Bfree>
 80081fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	1e2b      	subs	r3, r5, #0
 8008206:	bfb9      	ittee	lt
 8008208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800820c:	9303      	strlt	r3, [sp, #12]
 800820e:	2300      	movge	r3, #0
 8008210:	6033      	strge	r3, [r6, #0]
 8008212:	9f03      	ldr	r7, [sp, #12]
 8008214:	4b98      	ldr	r3, [pc, #608]	@ (8008478 <_dtoa_r+0x2d0>)
 8008216:	bfbc      	itt	lt
 8008218:	2201      	movlt	r2, #1
 800821a:	6032      	strlt	r2, [r6, #0]
 800821c:	43bb      	bics	r3, r7
 800821e:	d112      	bne.n	8008246 <_dtoa_r+0x9e>
 8008220:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008222:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800822c:	4323      	orrs	r3, r4
 800822e:	f000 854d 	beq.w	8008ccc <_dtoa_r+0xb24>
 8008232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008234:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800848c <_dtoa_r+0x2e4>
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 854f 	beq.w	8008cdc <_dtoa_r+0xb34>
 800823e:	f10a 0303 	add.w	r3, sl, #3
 8008242:	f000 bd49 	b.w	8008cd8 <_dtoa_r+0xb30>
 8008246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	ec51 0b17 	vmov	r0, r1, d7
 8008250:	2300      	movs	r3, #0
 8008252:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008256:	f7f8 fc4f 	bl	8000af8 <__aeabi_dcmpeq>
 800825a:	4680      	mov	r8, r0
 800825c:	b158      	cbz	r0, 8008276 <_dtoa_r+0xce>
 800825e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008260:	2301      	movs	r3, #1
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008266:	b113      	cbz	r3, 800826e <_dtoa_r+0xc6>
 8008268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800826a:	4b84      	ldr	r3, [pc, #528]	@ (800847c <_dtoa_r+0x2d4>)
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008490 <_dtoa_r+0x2e8>
 8008272:	f000 bd33 	b.w	8008cdc <_dtoa_r+0xb34>
 8008276:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800827a:	aa16      	add	r2, sp, #88	@ 0x58
 800827c:	a917      	add	r1, sp, #92	@ 0x5c
 800827e:	4658      	mov	r0, fp
 8008280:	f001 f980 	bl	8009584 <__d2b>
 8008284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008288:	4681      	mov	r9, r0
 800828a:	2e00      	cmp	r6, #0
 800828c:	d077      	beq.n	800837e <_dtoa_r+0x1d6>
 800828e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008290:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800829c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082a8:	4619      	mov	r1, r3
 80082aa:	2200      	movs	r2, #0
 80082ac:	4b74      	ldr	r3, [pc, #464]	@ (8008480 <_dtoa_r+0x2d8>)
 80082ae:	f7f8 f803 	bl	80002b8 <__aeabi_dsub>
 80082b2:	a369      	add	r3, pc, #420	@ (adr r3, 8008458 <_dtoa_r+0x2b0>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f9b6 	bl	8000628 <__aeabi_dmul>
 80082bc:	a368      	add	r3, pc, #416	@ (adr r3, 8008460 <_dtoa_r+0x2b8>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 fffb 	bl	80002bc <__adddf3>
 80082c6:	4604      	mov	r4, r0
 80082c8:	4630      	mov	r0, r6
 80082ca:	460d      	mov	r5, r1
 80082cc:	f7f8 f942 	bl	8000554 <__aeabi_i2d>
 80082d0:	a365      	add	r3, pc, #404	@ (adr r3, 8008468 <_dtoa_r+0x2c0>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f8 f9a7 	bl	8000628 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f7 ffeb 	bl	80002bc <__adddf3>
 80082e6:	4604      	mov	r4, r0
 80082e8:	460d      	mov	r5, r1
 80082ea:	f7f8 fc4d 	bl	8000b88 <__aeabi_d2iz>
 80082ee:	2200      	movs	r2, #0
 80082f0:	4607      	mov	r7, r0
 80082f2:	2300      	movs	r3, #0
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f8 fc08 	bl	8000b0c <__aeabi_dcmplt>
 80082fc:	b140      	cbz	r0, 8008310 <_dtoa_r+0x168>
 80082fe:	4638      	mov	r0, r7
 8008300:	f7f8 f928 	bl	8000554 <__aeabi_i2d>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f8 fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 800830c:	b900      	cbnz	r0, 8008310 <_dtoa_r+0x168>
 800830e:	3f01      	subs	r7, #1
 8008310:	2f16      	cmp	r7, #22
 8008312:	d851      	bhi.n	80083b8 <_dtoa_r+0x210>
 8008314:	4b5b      	ldr	r3, [pc, #364]	@ (8008484 <_dtoa_r+0x2dc>)
 8008316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008322:	f7f8 fbf3 	bl	8000b0c <__aeabi_dcmplt>
 8008326:	2800      	cmp	r0, #0
 8008328:	d048      	beq.n	80083bc <_dtoa_r+0x214>
 800832a:	3f01      	subs	r7, #1
 800832c:	2300      	movs	r3, #0
 800832e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008330:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008332:	1b9b      	subs	r3, r3, r6
 8008334:	1e5a      	subs	r2, r3, #1
 8008336:	bf44      	itt	mi
 8008338:	f1c3 0801 	rsbmi	r8, r3, #1
 800833c:	2300      	movmi	r3, #0
 800833e:	9208      	str	r2, [sp, #32]
 8008340:	bf54      	ite	pl
 8008342:	f04f 0800 	movpl.w	r8, #0
 8008346:	9308      	strmi	r3, [sp, #32]
 8008348:	2f00      	cmp	r7, #0
 800834a:	db39      	blt.n	80083c0 <_dtoa_r+0x218>
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008350:	443b      	add	r3, r7
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	2300      	movs	r3, #0
 8008356:	930a      	str	r3, [sp, #40]	@ 0x28
 8008358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835a:	2b09      	cmp	r3, #9
 800835c:	d864      	bhi.n	8008428 <_dtoa_r+0x280>
 800835e:	2b05      	cmp	r3, #5
 8008360:	bfc4      	itt	gt
 8008362:	3b04      	subgt	r3, #4
 8008364:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008368:	f1a3 0302 	sub.w	r3, r3, #2
 800836c:	bfcc      	ite	gt
 800836e:	2400      	movgt	r4, #0
 8008370:	2401      	movle	r4, #1
 8008372:	2b03      	cmp	r3, #3
 8008374:	d863      	bhi.n	800843e <_dtoa_r+0x296>
 8008376:	e8df f003 	tbb	[pc, r3]
 800837a:	372a      	.short	0x372a
 800837c:	5535      	.short	0x5535
 800837e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008382:	441e      	add	r6, r3
 8008384:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008388:	2b20      	cmp	r3, #32
 800838a:	bfc1      	itttt	gt
 800838c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008390:	409f      	lslgt	r7, r3
 8008392:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008396:	fa24 f303 	lsrgt.w	r3, r4, r3
 800839a:	bfd6      	itet	le
 800839c:	f1c3 0320 	rsble	r3, r3, #32
 80083a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80083a4:	fa04 f003 	lslle.w	r0, r4, r3
 80083a8:	f7f8 f8c4 	bl	8000534 <__aeabi_ui2d>
 80083ac:	2201      	movs	r2, #1
 80083ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083b2:	3e01      	subs	r6, #1
 80083b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80083b6:	e777      	b.n	80082a8 <_dtoa_r+0x100>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7b8      	b.n	800832e <_dtoa_r+0x186>
 80083bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80083be:	e7b7      	b.n	8008330 <_dtoa_r+0x188>
 80083c0:	427b      	negs	r3, r7
 80083c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c4:	2300      	movs	r3, #0
 80083c6:	eba8 0807 	sub.w	r8, r8, r7
 80083ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083cc:	e7c4      	b.n	8008358 <_dtoa_r+0x1b0>
 80083ce:	2300      	movs	r3, #0
 80083d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc35      	bgt.n	8008444 <_dtoa_r+0x29c>
 80083d8:	2301      	movs	r3, #1
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	461a      	mov	r2, r3
 80083e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083e2:	e00b      	b.n	80083fc <_dtoa_r+0x254>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e7f3      	b.n	80083d0 <_dtoa_r+0x228>
 80083e8:	2300      	movs	r3, #0
 80083ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ee:	18fb      	adds	r3, r7, r3
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	bfb8      	it	lt
 80083fa:	2301      	movlt	r3, #1
 80083fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008400:	2100      	movs	r1, #0
 8008402:	2204      	movs	r2, #4
 8008404:	f102 0514 	add.w	r5, r2, #20
 8008408:	429d      	cmp	r5, r3
 800840a:	d91f      	bls.n	800844c <_dtoa_r+0x2a4>
 800840c:	6041      	str	r1, [r0, #4]
 800840e:	4658      	mov	r0, fp
 8008410:	f000 fd8e 	bl	8008f30 <_Balloc>
 8008414:	4682      	mov	sl, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	d13c      	bne.n	8008494 <_dtoa_r+0x2ec>
 800841a:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <_dtoa_r+0x2e0>)
 800841c:	4602      	mov	r2, r0
 800841e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008422:	e6d8      	b.n	80081d6 <_dtoa_r+0x2e>
 8008424:	2301      	movs	r3, #1
 8008426:	e7e0      	b.n	80083ea <_dtoa_r+0x242>
 8008428:	2401      	movs	r4, #1
 800842a:	2300      	movs	r3, #0
 800842c:	9309      	str	r3, [sp, #36]	@ 0x24
 800842e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008430:	f04f 33ff 	mov.w	r3, #4294967295
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	2200      	movs	r2, #0
 800843a:	2312      	movs	r3, #18
 800843c:	e7d0      	b.n	80083e0 <_dtoa_r+0x238>
 800843e:	2301      	movs	r3, #1
 8008440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008442:	e7f5      	b.n	8008430 <_dtoa_r+0x288>
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	9307      	str	r3, [sp, #28]
 800844a:	e7d7      	b.n	80083fc <_dtoa_r+0x254>
 800844c:	3101      	adds	r1, #1
 800844e:	0052      	lsls	r2, r2, #1
 8008450:	e7d8      	b.n	8008404 <_dtoa_r+0x25c>
 8008452:	bf00      	nop
 8008454:	f3af 8000 	nop.w
 8008458:	636f4361 	.word	0x636f4361
 800845c:	3fd287a7 	.word	0x3fd287a7
 8008460:	8b60c8b3 	.word	0x8b60c8b3
 8008464:	3fc68a28 	.word	0x3fc68a28
 8008468:	509f79fb 	.word	0x509f79fb
 800846c:	3fd34413 	.word	0x3fd34413
 8008470:	0800a30d 	.word	0x0800a30d
 8008474:	0800a324 	.word	0x0800a324
 8008478:	7ff00000 	.word	0x7ff00000
 800847c:	0800a2dd 	.word	0x0800a2dd
 8008480:	3ff80000 	.word	0x3ff80000
 8008484:	0800a420 	.word	0x0800a420
 8008488:	0800a37c 	.word	0x0800a37c
 800848c:	0800a309 	.word	0x0800a309
 8008490:	0800a2dc 	.word	0x0800a2dc
 8008494:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008498:	6018      	str	r0, [r3, #0]
 800849a:	9b07      	ldr	r3, [sp, #28]
 800849c:	2b0e      	cmp	r3, #14
 800849e:	f200 80a4 	bhi.w	80085ea <_dtoa_r+0x442>
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	f000 80a1 	beq.w	80085ea <_dtoa_r+0x442>
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	dd33      	ble.n	8008514 <_dtoa_r+0x36c>
 80084ac:	4bad      	ldr	r3, [pc, #692]	@ (8008764 <_dtoa_r+0x5bc>)
 80084ae:	f007 020f 	and.w	r2, r7, #15
 80084b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b6:	ed93 7b00 	vldr	d7, [r3]
 80084ba:	05f8      	lsls	r0, r7, #23
 80084bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80084c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084c4:	d516      	bpl.n	80084f4 <_dtoa_r+0x34c>
 80084c6:	4ba8      	ldr	r3, [pc, #672]	@ (8008768 <_dtoa_r+0x5c0>)
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084d0:	f7f8 f9d4 	bl	800087c <__aeabi_ddiv>
 80084d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d8:	f004 040f 	and.w	r4, r4, #15
 80084dc:	2603      	movs	r6, #3
 80084de:	4da2      	ldr	r5, [pc, #648]	@ (8008768 <_dtoa_r+0x5c0>)
 80084e0:	b954      	cbnz	r4, 80084f8 <_dtoa_r+0x350>
 80084e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	f7f8 f9c7 	bl	800087c <__aeabi_ddiv>
 80084ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f2:	e028      	b.n	8008546 <_dtoa_r+0x39e>
 80084f4:	2602      	movs	r6, #2
 80084f6:	e7f2      	b.n	80084de <_dtoa_r+0x336>
 80084f8:	07e1      	lsls	r1, r4, #31
 80084fa:	d508      	bpl.n	800850e <_dtoa_r+0x366>
 80084fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008504:	f7f8 f890 	bl	8000628 <__aeabi_dmul>
 8008508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800850c:	3601      	adds	r6, #1
 800850e:	1064      	asrs	r4, r4, #1
 8008510:	3508      	adds	r5, #8
 8008512:	e7e5      	b.n	80084e0 <_dtoa_r+0x338>
 8008514:	f000 80d2 	beq.w	80086bc <_dtoa_r+0x514>
 8008518:	427c      	negs	r4, r7
 800851a:	4b92      	ldr	r3, [pc, #584]	@ (8008764 <_dtoa_r+0x5bc>)
 800851c:	4d92      	ldr	r5, [pc, #584]	@ (8008768 <_dtoa_r+0x5c0>)
 800851e:	f004 020f 	and.w	r2, r4, #15
 8008522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800852e:	f7f8 f87b 	bl	8000628 <__aeabi_dmul>
 8008532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008536:	1124      	asrs	r4, r4, #4
 8008538:	2300      	movs	r3, #0
 800853a:	2602      	movs	r6, #2
 800853c:	2c00      	cmp	r4, #0
 800853e:	f040 80b2 	bne.w	80086a6 <_dtoa_r+0x4fe>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1d3      	bne.n	80084ee <_dtoa_r+0x346>
 8008546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008548:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80b7 	beq.w	80086c0 <_dtoa_r+0x518>
 8008552:	4b86      	ldr	r3, [pc, #536]	@ (800876c <_dtoa_r+0x5c4>)
 8008554:	2200      	movs	r2, #0
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f8 fad7 	bl	8000b0c <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f000 80ae 	beq.w	80086c0 <_dtoa_r+0x518>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80aa 	beq.w	80086c0 <_dtoa_r+0x518>
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd37      	ble.n	80085e2 <_dtoa_r+0x43a>
 8008572:	1e7b      	subs	r3, r7, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	4620      	mov	r0, r4
 8008578:	4b7d      	ldr	r3, [pc, #500]	@ (8008770 <_dtoa_r+0x5c8>)
 800857a:	2200      	movs	r2, #0
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 f853 	bl	8000628 <__aeabi_dmul>
 8008582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008586:	9c00      	ldr	r4, [sp, #0]
 8008588:	3601      	adds	r6, #1
 800858a:	4630      	mov	r0, r6
 800858c:	f7f7 ffe2 	bl	8000554 <__aeabi_i2d>
 8008590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008594:	f7f8 f848 	bl	8000628 <__aeabi_dmul>
 8008598:	4b76      	ldr	r3, [pc, #472]	@ (8008774 <_dtoa_r+0x5cc>)
 800859a:	2200      	movs	r2, #0
 800859c:	f7f7 fe8e 	bl	80002bc <__adddf3>
 80085a0:	4605      	mov	r5, r0
 80085a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	f040 808d 	bne.w	80086c6 <_dtoa_r+0x51e>
 80085ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085b0:	4b71      	ldr	r3, [pc, #452]	@ (8008778 <_dtoa_r+0x5d0>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f7 fe80 	bl	80002b8 <__aeabi_dsub>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085c0:	462a      	mov	r2, r5
 80085c2:	4633      	mov	r3, r6
 80085c4:	f7f8 fac0 	bl	8000b48 <__aeabi_dcmpgt>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f040 828b 	bne.w	8008ae4 <_dtoa_r+0x93c>
 80085ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d2:	462a      	mov	r2, r5
 80085d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085d8:	f7f8 fa98 	bl	8000b0c <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f040 8128 	bne.w	8008832 <_dtoa_r+0x68a>
 80085e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80085e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80085ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f2c0 815a 	blt.w	80088a6 <_dtoa_r+0x6fe>
 80085f2:	2f0e      	cmp	r7, #14
 80085f4:	f300 8157 	bgt.w	80088a6 <_dtoa_r+0x6fe>
 80085f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008764 <_dtoa_r+0x5bc>)
 80085fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085fe:	ed93 7b00 	vldr	d7, [r3]
 8008602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	ed8d 7b00 	vstr	d7, [sp]
 800860a:	da03      	bge.n	8008614 <_dtoa_r+0x46c>
 800860c:	9b07      	ldr	r3, [sp, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f340 8101 	ble.w	8008816 <_dtoa_r+0x66e>
 8008614:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008618:	4656      	mov	r6, sl
 800861a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f8 f92b 	bl	800087c <__aeabi_ddiv>
 8008626:	f7f8 faaf 	bl	8000b88 <__aeabi_d2iz>
 800862a:	4680      	mov	r8, r0
 800862c:	f7f7 ff92 	bl	8000554 <__aeabi_i2d>
 8008630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008634:	f7f7 fff8 	bl	8000628 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008644:	f7f7 fe38 	bl	80002b8 <__aeabi_dsub>
 8008648:	f806 4b01 	strb.w	r4, [r6], #1
 800864c:	9d07      	ldr	r5, [sp, #28]
 800864e:	eba6 040a 	sub.w	r4, r6, sl
 8008652:	42a5      	cmp	r5, r4
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	f040 8117 	bne.w	800888a <_dtoa_r+0x6e2>
 800865c:	f7f7 fe2e 	bl	80002bc <__adddf3>
 8008660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008664:	4604      	mov	r4, r0
 8008666:	460d      	mov	r5, r1
 8008668:	f7f8 fa6e 	bl	8000b48 <__aeabi_dcmpgt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 80f9 	bne.w	8008864 <_dtoa_r+0x6bc>
 8008672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 fa3d 	bl	8000af8 <__aeabi_dcmpeq>
 800867e:	b118      	cbz	r0, 8008688 <_dtoa_r+0x4e0>
 8008680:	f018 0f01 	tst.w	r8, #1
 8008684:	f040 80ee 	bne.w	8008864 <_dtoa_r+0x6bc>
 8008688:	4649      	mov	r1, r9
 800868a:	4658      	mov	r0, fp
 800868c:	f000 fc90 	bl	8008fb0 <_Bfree>
 8008690:	2300      	movs	r3, #0
 8008692:	7033      	strb	r3, [r6, #0]
 8008694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008696:	3701      	adds	r7, #1
 8008698:	601f      	str	r7, [r3, #0]
 800869a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 831d 	beq.w	8008cdc <_dtoa_r+0xb34>
 80086a2:	601e      	str	r6, [r3, #0]
 80086a4:	e31a      	b.n	8008cdc <_dtoa_r+0xb34>
 80086a6:	07e2      	lsls	r2, r4, #31
 80086a8:	d505      	bpl.n	80086b6 <_dtoa_r+0x50e>
 80086aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086ae:	f7f7 ffbb 	bl	8000628 <__aeabi_dmul>
 80086b2:	3601      	adds	r6, #1
 80086b4:	2301      	movs	r3, #1
 80086b6:	1064      	asrs	r4, r4, #1
 80086b8:	3508      	adds	r5, #8
 80086ba:	e73f      	b.n	800853c <_dtoa_r+0x394>
 80086bc:	2602      	movs	r6, #2
 80086be:	e742      	b.n	8008546 <_dtoa_r+0x39e>
 80086c0:	9c07      	ldr	r4, [sp, #28]
 80086c2:	9704      	str	r7, [sp, #16]
 80086c4:	e761      	b.n	800858a <_dtoa_r+0x3e2>
 80086c6:	4b27      	ldr	r3, [pc, #156]	@ (8008764 <_dtoa_r+0x5bc>)
 80086c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086d2:	4454      	add	r4, sl
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d053      	beq.n	8008780 <_dtoa_r+0x5d8>
 80086d8:	4928      	ldr	r1, [pc, #160]	@ (800877c <_dtoa_r+0x5d4>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f8 f8ce 	bl	800087c <__aeabi_ddiv>
 80086e0:	4633      	mov	r3, r6
 80086e2:	462a      	mov	r2, r5
 80086e4:	f7f7 fde8 	bl	80002b8 <__aeabi_dsub>
 80086e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086ec:	4656      	mov	r6, sl
 80086ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f2:	f7f8 fa49 	bl	8000b88 <__aeabi_d2iz>
 80086f6:	4605      	mov	r5, r0
 80086f8:	f7f7 ff2c 	bl	8000554 <__aeabi_i2d>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008704:	f7f7 fdd8 	bl	80002b8 <__aeabi_dsub>
 8008708:	3530      	adds	r5, #48	@ 0x30
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008712:	f806 5b01 	strb.w	r5, [r6], #1
 8008716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800871a:	f7f8 f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	d171      	bne.n	8008806 <_dtoa_r+0x65e>
 8008722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008726:	4911      	ldr	r1, [pc, #68]	@ (800876c <_dtoa_r+0x5c4>)
 8008728:	2000      	movs	r0, #0
 800872a:	f7f7 fdc5 	bl	80002b8 <__aeabi_dsub>
 800872e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008732:	f7f8 f9eb 	bl	8000b0c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8095 	bne.w	8008866 <_dtoa_r+0x6be>
 800873c:	42a6      	cmp	r6, r4
 800873e:	f43f af50 	beq.w	80085e2 <_dtoa_r+0x43a>
 8008742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008746:	4b0a      	ldr	r3, [pc, #40]	@ (8008770 <_dtoa_r+0x5c8>)
 8008748:	2200      	movs	r2, #0
 800874a:	f7f7 ff6d 	bl	8000628 <__aeabi_dmul>
 800874e:	4b08      	ldr	r3, [pc, #32]	@ (8008770 <_dtoa_r+0x5c8>)
 8008750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008754:	2200      	movs	r2, #0
 8008756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875a:	f7f7 ff65 	bl	8000628 <__aeabi_dmul>
 800875e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008762:	e7c4      	b.n	80086ee <_dtoa_r+0x546>
 8008764:	0800a420 	.word	0x0800a420
 8008768:	0800a3f8 	.word	0x0800a3f8
 800876c:	3ff00000 	.word	0x3ff00000
 8008770:	40240000 	.word	0x40240000
 8008774:	401c0000 	.word	0x401c0000
 8008778:	40140000 	.word	0x40140000
 800877c:	3fe00000 	.word	0x3fe00000
 8008780:	4631      	mov	r1, r6
 8008782:	4628      	mov	r0, r5
 8008784:	f7f7 ff50 	bl	8000628 <__aeabi_dmul>
 8008788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800878c:	9415      	str	r4, [sp, #84]	@ 0x54
 800878e:	4656      	mov	r6, sl
 8008790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008794:	f7f8 f9f8 	bl	8000b88 <__aeabi_d2iz>
 8008798:	4605      	mov	r5, r0
 800879a:	f7f7 fedb 	bl	8000554 <__aeabi_i2d>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087a6:	f7f7 fd87 	bl	80002b8 <__aeabi_dsub>
 80087aa:	3530      	adds	r5, #48	@ 0x30
 80087ac:	f806 5b01 	strb.w	r5, [r6], #1
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	d124      	bne.n	800880a <_dtoa_r+0x662>
 80087c0:	4bac      	ldr	r3, [pc, #688]	@ (8008a74 <_dtoa_r+0x8cc>)
 80087c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087c6:	f7f7 fd79 	bl	80002bc <__adddf3>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d2:	f7f8 f9b9 	bl	8000b48 <__aeabi_dcmpgt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d145      	bne.n	8008866 <_dtoa_r+0x6be>
 80087da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087de:	49a5      	ldr	r1, [pc, #660]	@ (8008a74 <_dtoa_r+0x8cc>)
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7f7 fd69 	bl	80002b8 <__aeabi_dsub>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ee:	f7f8 f98d 	bl	8000b0c <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f aef5 	beq.w	80085e2 <_dtoa_r+0x43a>
 80087f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80087fa:	1e73      	subs	r3, r6, #1
 80087fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80087fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008802:	2b30      	cmp	r3, #48	@ 0x30
 8008804:	d0f8      	beq.n	80087f8 <_dtoa_r+0x650>
 8008806:	9f04      	ldr	r7, [sp, #16]
 8008808:	e73e      	b.n	8008688 <_dtoa_r+0x4e0>
 800880a:	4b9b      	ldr	r3, [pc, #620]	@ (8008a78 <_dtoa_r+0x8d0>)
 800880c:	f7f7 ff0c 	bl	8000628 <__aeabi_dmul>
 8008810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008814:	e7bc      	b.n	8008790 <_dtoa_r+0x5e8>
 8008816:	d10c      	bne.n	8008832 <_dtoa_r+0x68a>
 8008818:	4b98      	ldr	r3, [pc, #608]	@ (8008a7c <_dtoa_r+0x8d4>)
 800881a:	2200      	movs	r2, #0
 800881c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008820:	f7f7 ff02 	bl	8000628 <__aeabi_dmul>
 8008824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008828:	f7f8 f984 	bl	8000b34 <__aeabi_dcmpge>
 800882c:	2800      	cmp	r0, #0
 800882e:	f000 8157 	beq.w	8008ae0 <_dtoa_r+0x938>
 8008832:	2400      	movs	r4, #0
 8008834:	4625      	mov	r5, r4
 8008836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008838:	43db      	mvns	r3, r3
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	4656      	mov	r6, sl
 800883e:	2700      	movs	r7, #0
 8008840:	4621      	mov	r1, r4
 8008842:	4658      	mov	r0, fp
 8008844:	f000 fbb4 	bl	8008fb0 <_Bfree>
 8008848:	2d00      	cmp	r5, #0
 800884a:	d0dc      	beq.n	8008806 <_dtoa_r+0x65e>
 800884c:	b12f      	cbz	r7, 800885a <_dtoa_r+0x6b2>
 800884e:	42af      	cmp	r7, r5
 8008850:	d003      	beq.n	800885a <_dtoa_r+0x6b2>
 8008852:	4639      	mov	r1, r7
 8008854:	4658      	mov	r0, fp
 8008856:	f000 fbab 	bl	8008fb0 <_Bfree>
 800885a:	4629      	mov	r1, r5
 800885c:	4658      	mov	r0, fp
 800885e:	f000 fba7 	bl	8008fb0 <_Bfree>
 8008862:	e7d0      	b.n	8008806 <_dtoa_r+0x65e>
 8008864:	9704      	str	r7, [sp, #16]
 8008866:	4633      	mov	r3, r6
 8008868:	461e      	mov	r6, r3
 800886a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800886e:	2a39      	cmp	r2, #57	@ 0x39
 8008870:	d107      	bne.n	8008882 <_dtoa_r+0x6da>
 8008872:	459a      	cmp	sl, r3
 8008874:	d1f8      	bne.n	8008868 <_dtoa_r+0x6c0>
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	3201      	adds	r2, #1
 800887a:	9204      	str	r2, [sp, #16]
 800887c:	2230      	movs	r2, #48	@ 0x30
 800887e:	f88a 2000 	strb.w	r2, [sl]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	3201      	adds	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7bd      	b.n	8008806 <_dtoa_r+0x65e>
 800888a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a78 <_dtoa_r+0x8d0>)
 800888c:	2200      	movs	r2, #0
 800888e:	f7f7 fecb 	bl	8000628 <__aeabi_dmul>
 8008892:	2200      	movs	r2, #0
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	460d      	mov	r5, r1
 800889a:	f7f8 f92d 	bl	8000af8 <__aeabi_dcmpeq>
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f aebb 	beq.w	800861a <_dtoa_r+0x472>
 80088a4:	e6f0      	b.n	8008688 <_dtoa_r+0x4e0>
 80088a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	f000 80db 	beq.w	8008a64 <_dtoa_r+0x8bc>
 80088ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088b0:	2a01      	cmp	r2, #1
 80088b2:	f300 80bf 	bgt.w	8008a34 <_dtoa_r+0x88c>
 80088b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	f000 80b7 	beq.w	8008a2c <_dtoa_r+0x884>
 80088be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088c4:	4646      	mov	r6, r8
 80088c6:	9a08      	ldr	r2, [sp, #32]
 80088c8:	2101      	movs	r1, #1
 80088ca:	441a      	add	r2, r3
 80088cc:	4658      	mov	r0, fp
 80088ce:	4498      	add	r8, r3
 80088d0:	9208      	str	r2, [sp, #32]
 80088d2:	f000 fc21 	bl	8009118 <__i2b>
 80088d6:	4605      	mov	r5, r0
 80088d8:	b15e      	cbz	r6, 80088f2 <_dtoa_r+0x74a>
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd08      	ble.n	80088f2 <_dtoa_r+0x74a>
 80088e0:	42b3      	cmp	r3, r6
 80088e2:	9a08      	ldr	r2, [sp, #32]
 80088e4:	bfa8      	it	ge
 80088e6:	4633      	movge	r3, r6
 80088e8:	eba8 0803 	sub.w	r8, r8, r3
 80088ec:	1af6      	subs	r6, r6, r3
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088f4:	b1f3      	cbz	r3, 8008934 <_dtoa_r+0x78c>
 80088f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80b7 	beq.w	8008a6c <_dtoa_r+0x8c4>
 80088fe:	b18c      	cbz	r4, 8008924 <_dtoa_r+0x77c>
 8008900:	4629      	mov	r1, r5
 8008902:	4622      	mov	r2, r4
 8008904:	4658      	mov	r0, fp
 8008906:	f000 fcc7 	bl	8009298 <__pow5mult>
 800890a:	464a      	mov	r2, r9
 800890c:	4601      	mov	r1, r0
 800890e:	4605      	mov	r5, r0
 8008910:	4658      	mov	r0, fp
 8008912:	f000 fc17 	bl	8009144 <__multiply>
 8008916:	4649      	mov	r1, r9
 8008918:	9004      	str	r0, [sp, #16]
 800891a:	4658      	mov	r0, fp
 800891c:	f000 fb48 	bl	8008fb0 <_Bfree>
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	4699      	mov	r9, r3
 8008924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008926:	1b1a      	subs	r2, r3, r4
 8008928:	d004      	beq.n	8008934 <_dtoa_r+0x78c>
 800892a:	4649      	mov	r1, r9
 800892c:	4658      	mov	r0, fp
 800892e:	f000 fcb3 	bl	8009298 <__pow5mult>
 8008932:	4681      	mov	r9, r0
 8008934:	2101      	movs	r1, #1
 8008936:	4658      	mov	r0, fp
 8008938:	f000 fbee 	bl	8009118 <__i2b>
 800893c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893e:	4604      	mov	r4, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 81cf 	beq.w	8008ce4 <_dtoa_r+0xb3c>
 8008946:	461a      	mov	r2, r3
 8008948:	4601      	mov	r1, r0
 800894a:	4658      	mov	r0, fp
 800894c:	f000 fca4 	bl	8009298 <__pow5mult>
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	2b01      	cmp	r3, #1
 8008954:	4604      	mov	r4, r0
 8008956:	f300 8095 	bgt.w	8008a84 <_dtoa_r+0x8dc>
 800895a:	9b02      	ldr	r3, [sp, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8087 	bne.w	8008a70 <_dtoa_r+0x8c8>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 8089 	bne.w	8008a80 <_dtoa_r+0x8d8>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008974:	0d1b      	lsrs	r3, r3, #20
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	b12b      	cbz	r3, 8008986 <_dtoa_r+0x7de>
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	3301      	adds	r3, #1
 800897e:	9308      	str	r3, [sp, #32]
 8008980:	f108 0801 	add.w	r8, r8, #1
 8008984:	2301      	movs	r3, #1
 8008986:	930a      	str	r3, [sp, #40]	@ 0x28
 8008988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 81b0 	beq.w	8008cf0 <_dtoa_r+0xb48>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008996:	6918      	ldr	r0, [r3, #16]
 8008998:	f000 fb72 	bl	8009080 <__hi0bits>
 800899c:	f1c0 0020 	rsb	r0, r0, #32
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	4418      	add	r0, r3
 80089a4:	f010 001f 	ands.w	r0, r0, #31
 80089a8:	d077      	beq.n	8008a9a <_dtoa_r+0x8f2>
 80089aa:	f1c0 0320 	rsb	r3, r0, #32
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	dd6b      	ble.n	8008a8a <_dtoa_r+0x8e2>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	f1c0 001c 	rsb	r0, r0, #28
 80089b8:	4403      	add	r3, r0
 80089ba:	4480      	add	r8, r0
 80089bc:	4406      	add	r6, r0
 80089be:	9308      	str	r3, [sp, #32]
 80089c0:	f1b8 0f00 	cmp.w	r8, #0
 80089c4:	dd05      	ble.n	80089d2 <_dtoa_r+0x82a>
 80089c6:	4649      	mov	r1, r9
 80089c8:	4642      	mov	r2, r8
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 fcbe 	bl	800934c <__lshift>
 80089d0:	4681      	mov	r9, r0
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd05      	ble.n	80089e4 <_dtoa_r+0x83c>
 80089d8:	4621      	mov	r1, r4
 80089da:	461a      	mov	r2, r3
 80089dc:	4658      	mov	r0, fp
 80089de:	f000 fcb5 	bl	800934c <__lshift>
 80089e2:	4604      	mov	r4, r0
 80089e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d059      	beq.n	8008a9e <_dtoa_r+0x8f6>
 80089ea:	4621      	mov	r1, r4
 80089ec:	4648      	mov	r0, r9
 80089ee:	f000 fd19 	bl	8009424 <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	da53      	bge.n	8008a9e <_dtoa_r+0x8f6>
 80089f6:	1e7b      	subs	r3, r7, #1
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	4649      	mov	r1, r9
 80089fc:	2300      	movs	r3, #0
 80089fe:	220a      	movs	r2, #10
 8008a00:	4658      	mov	r0, fp
 8008a02:	f000 faf7 	bl	8008ff4 <__multadd>
 8008a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a08:	4681      	mov	r9, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 8172 	beq.w	8008cf4 <_dtoa_r+0xb4c>
 8008a10:	2300      	movs	r3, #0
 8008a12:	4629      	mov	r1, r5
 8008a14:	220a      	movs	r2, #10
 8008a16:	4658      	mov	r0, fp
 8008a18:	f000 faec 	bl	8008ff4 <__multadd>
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	4605      	mov	r5, r0
 8008a22:	dc67      	bgt.n	8008af4 <_dtoa_r+0x94c>
 8008a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	dc41      	bgt.n	8008aae <_dtoa_r+0x906>
 8008a2a:	e063      	b.n	8008af4 <_dtoa_r+0x94c>
 8008a2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a32:	e746      	b.n	80088c2 <_dtoa_r+0x71a>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	1e5c      	subs	r4, r3, #1
 8008a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	bfbf      	itttt	lt
 8008a3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a44:	1ae3      	sublt	r3, r4, r3
 8008a46:	bfb4      	ite	lt
 8008a48:	18d2      	addlt	r2, r2, r3
 8008a4a:	1b1c      	subge	r4, r3, r4
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	bfbc      	itt	lt
 8008a50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a52:	2400      	movlt	r4, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	bfb5      	itete	lt
 8008a58:	eba8 0603 	sublt.w	r6, r8, r3
 8008a5c:	9b07      	ldrge	r3, [sp, #28]
 8008a5e:	2300      	movlt	r3, #0
 8008a60:	4646      	movge	r6, r8
 8008a62:	e730      	b.n	80088c6 <_dtoa_r+0x71e>
 8008a64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a68:	4646      	mov	r6, r8
 8008a6a:	e735      	b.n	80088d8 <_dtoa_r+0x730>
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a6e:	e75c      	b.n	800892a <_dtoa_r+0x782>
 8008a70:	2300      	movs	r3, #0
 8008a72:	e788      	b.n	8008986 <_dtoa_r+0x7de>
 8008a74:	3fe00000 	.word	0x3fe00000
 8008a78:	40240000 	.word	0x40240000
 8008a7c:	40140000 	.word	0x40140000
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	e780      	b.n	8008986 <_dtoa_r+0x7de>
 8008a84:	2300      	movs	r3, #0
 8008a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a88:	e782      	b.n	8008990 <_dtoa_r+0x7e8>
 8008a8a:	d099      	beq.n	80089c0 <_dtoa_r+0x818>
 8008a8c:	9a08      	ldr	r2, [sp, #32]
 8008a8e:	331c      	adds	r3, #28
 8008a90:	441a      	add	r2, r3
 8008a92:	4498      	add	r8, r3
 8008a94:	441e      	add	r6, r3
 8008a96:	9208      	str	r2, [sp, #32]
 8008a98:	e792      	b.n	80089c0 <_dtoa_r+0x818>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	e7f6      	b.n	8008a8c <_dtoa_r+0x8e4>
 8008a9e:	9b07      	ldr	r3, [sp, #28]
 8008aa0:	9704      	str	r7, [sp, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc20      	bgt.n	8008ae8 <_dtoa_r+0x940>
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	dd1e      	ble.n	8008aec <_dtoa_r+0x944>
 8008aae:	9b00      	ldr	r3, [sp, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f aec0 	bne.w	8008836 <_dtoa_r+0x68e>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	2205      	movs	r2, #5
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 fa9a 	bl	8008ff4 <__multadd>
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4648      	mov	r0, r9
 8008ac6:	f000 fcad 	bl	8009424 <__mcmp>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	f77f aeb3 	ble.w	8008836 <_dtoa_r+0x68e>
 8008ad0:	4656      	mov	r6, sl
 8008ad2:	2331      	movs	r3, #49	@ 0x31
 8008ad4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	e6ae      	b.n	800883e <_dtoa_r+0x696>
 8008ae0:	9c07      	ldr	r4, [sp, #28]
 8008ae2:	9704      	str	r7, [sp, #16]
 8008ae4:	4625      	mov	r5, r4
 8008ae6:	e7f3      	b.n	8008ad0 <_dtoa_r+0x928>
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 8104 	beq.w	8008cfc <_dtoa_r+0xb54>
 8008af4:	2e00      	cmp	r6, #0
 8008af6:	dd05      	ble.n	8008b04 <_dtoa_r+0x95c>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4632      	mov	r2, r6
 8008afc:	4658      	mov	r0, fp
 8008afe:	f000 fc25 	bl	800934c <__lshift>
 8008b02:	4605      	mov	r5, r0
 8008b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d05a      	beq.n	8008bc0 <_dtoa_r+0xa18>
 8008b0a:	6869      	ldr	r1, [r5, #4]
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fa0f 	bl	8008f30 <_Balloc>
 8008b12:	4606      	mov	r6, r0
 8008b14:	b928      	cbnz	r0, 8008b22 <_dtoa_r+0x97a>
 8008b16:	4b84      	ldr	r3, [pc, #528]	@ (8008d28 <_dtoa_r+0xb80>)
 8008b18:	4602      	mov	r2, r0
 8008b1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b1e:	f7ff bb5a 	b.w	80081d6 <_dtoa_r+0x2e>
 8008b22:	692a      	ldr	r2, [r5, #16]
 8008b24:	3202      	adds	r2, #2
 8008b26:	0092      	lsls	r2, r2, #2
 8008b28:	f105 010c 	add.w	r1, r5, #12
 8008b2c:	300c      	adds	r0, #12
 8008b2e:	f000 ffaf 	bl	8009a90 <memcpy>
 8008b32:	2201      	movs	r2, #1
 8008b34:	4631      	mov	r1, r6
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 fc08 	bl	800934c <__lshift>
 8008b3c:	f10a 0301 	add.w	r3, sl, #1
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	4453      	add	r3, sl
 8008b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	462f      	mov	r7, r5
 8008b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b52:	4605      	mov	r5, r0
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	4621      	mov	r1, r4
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4648      	mov	r0, r9
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	f7ff fa9a 	bl	8008096 <quorem>
 8008b62:	4639      	mov	r1, r7
 8008b64:	9002      	str	r0, [sp, #8]
 8008b66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f000 fc5a 	bl	8009424 <__mcmp>
 8008b70:	462a      	mov	r2, r5
 8008b72:	9008      	str	r0, [sp, #32]
 8008b74:	4621      	mov	r1, r4
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 fc70 	bl	800945c <__mdiff>
 8008b7c:	68c2      	ldr	r2, [r0, #12]
 8008b7e:	4606      	mov	r6, r0
 8008b80:	bb02      	cbnz	r2, 8008bc4 <_dtoa_r+0xa1c>
 8008b82:	4601      	mov	r1, r0
 8008b84:	4648      	mov	r0, r9
 8008b86:	f000 fc4d 	bl	8009424 <__mcmp>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4658      	mov	r0, fp
 8008b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b92:	f000 fa0d 	bl	8008fb0 <_Bfree>
 8008b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b9a:	9e07      	ldr	r6, [sp, #28]
 8008b9c:	ea43 0102 	orr.w	r1, r3, r2
 8008ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba2:	4319      	orrs	r1, r3
 8008ba4:	d110      	bne.n	8008bc8 <_dtoa_r+0xa20>
 8008ba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008baa:	d029      	beq.n	8008c00 <_dtoa_r+0xa58>
 8008bac:	9b08      	ldr	r3, [sp, #32]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd02      	ble.n	8008bb8 <_dtoa_r+0xa10>
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008bb8:	9b00      	ldr	r3, [sp, #0]
 8008bba:	f883 8000 	strb.w	r8, [r3]
 8008bbe:	e63f      	b.n	8008840 <_dtoa_r+0x698>
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	e7bb      	b.n	8008b3c <_dtoa_r+0x994>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	e7e1      	b.n	8008b8c <_dtoa_r+0x9e4>
 8008bc8:	9b08      	ldr	r3, [sp, #32]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	db04      	blt.n	8008bd8 <_dtoa_r+0xa30>
 8008bce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	d120      	bne.n	8008c1a <_dtoa_r+0xa72>
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	dded      	ble.n	8008bb8 <_dtoa_r+0xa10>
 8008bdc:	4649      	mov	r1, r9
 8008bde:	2201      	movs	r2, #1
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fbb3 	bl	800934c <__lshift>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4681      	mov	r9, r0
 8008bea:	f000 fc1b 	bl	8009424 <__mcmp>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	dc03      	bgt.n	8008bfa <_dtoa_r+0xa52>
 8008bf2:	d1e1      	bne.n	8008bb8 <_dtoa_r+0xa10>
 8008bf4:	f018 0f01 	tst.w	r8, #1
 8008bf8:	d0de      	beq.n	8008bb8 <_dtoa_r+0xa10>
 8008bfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bfe:	d1d8      	bne.n	8008bb2 <_dtoa_r+0xa0a>
 8008c00:	9a00      	ldr	r2, [sp, #0]
 8008c02:	2339      	movs	r3, #57	@ 0x39
 8008c04:	7013      	strb	r3, [r2, #0]
 8008c06:	4633      	mov	r3, r6
 8008c08:	461e      	mov	r6, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c10:	2a39      	cmp	r2, #57	@ 0x39
 8008c12:	d052      	beq.n	8008cba <_dtoa_r+0xb12>
 8008c14:	3201      	adds	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e612      	b.n	8008840 <_dtoa_r+0x698>
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	dd07      	ble.n	8008c2e <_dtoa_r+0xa86>
 8008c1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c22:	d0ed      	beq.n	8008c00 <_dtoa_r+0xa58>
 8008c24:	9a00      	ldr	r2, [sp, #0]
 8008c26:	f108 0301 	add.w	r3, r8, #1
 8008c2a:	7013      	strb	r3, [r2, #0]
 8008c2c:	e608      	b.n	8008840 <_dtoa_r+0x698>
 8008c2e:	9b07      	ldr	r3, [sp, #28]
 8008c30:	9a07      	ldr	r2, [sp, #28]
 8008c32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d028      	beq.n	8008c8e <_dtoa_r+0xae6>
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4658      	mov	r0, fp
 8008c44:	f000 f9d6 	bl	8008ff4 <__multadd>
 8008c48:	42af      	cmp	r7, r5
 8008c4a:	4681      	mov	r9, r0
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	f04f 020a 	mov.w	r2, #10
 8008c54:	4639      	mov	r1, r7
 8008c56:	4658      	mov	r0, fp
 8008c58:	d107      	bne.n	8008c6a <_dtoa_r+0xac2>
 8008c5a:	f000 f9cb 	bl	8008ff4 <__multadd>
 8008c5e:	4607      	mov	r7, r0
 8008c60:	4605      	mov	r5, r0
 8008c62:	9b07      	ldr	r3, [sp, #28]
 8008c64:	3301      	adds	r3, #1
 8008c66:	9307      	str	r3, [sp, #28]
 8008c68:	e774      	b.n	8008b54 <_dtoa_r+0x9ac>
 8008c6a:	f000 f9c3 	bl	8008ff4 <__multadd>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4607      	mov	r7, r0
 8008c72:	2300      	movs	r3, #0
 8008c74:	220a      	movs	r2, #10
 8008c76:	4658      	mov	r0, fp
 8008c78:	f000 f9bc 	bl	8008ff4 <__multadd>
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	e7f0      	b.n	8008c62 <_dtoa_r+0xaba>
 8008c80:	9b00      	ldr	r3, [sp, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfcc      	ite	gt
 8008c86:	461e      	movgt	r6, r3
 8008c88:	2601      	movle	r6, #1
 8008c8a:	4456      	add	r6, sl
 8008c8c:	2700      	movs	r7, #0
 8008c8e:	4649      	mov	r1, r9
 8008c90:	2201      	movs	r2, #1
 8008c92:	4658      	mov	r0, fp
 8008c94:	f000 fb5a 	bl	800934c <__lshift>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4681      	mov	r9, r0
 8008c9c:	f000 fbc2 	bl	8009424 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dcb0      	bgt.n	8008c06 <_dtoa_r+0xa5e>
 8008ca4:	d102      	bne.n	8008cac <_dtoa_r+0xb04>
 8008ca6:	f018 0f01 	tst.w	r8, #1
 8008caa:	d1ac      	bne.n	8008c06 <_dtoa_r+0xa5e>
 8008cac:	4633      	mov	r3, r6
 8008cae:	461e      	mov	r6, r3
 8008cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb4:	2a30      	cmp	r2, #48	@ 0x30
 8008cb6:	d0fa      	beq.n	8008cae <_dtoa_r+0xb06>
 8008cb8:	e5c2      	b.n	8008840 <_dtoa_r+0x698>
 8008cba:	459a      	cmp	sl, r3
 8008cbc:	d1a4      	bne.n	8008c08 <_dtoa_r+0xa60>
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	2331      	movs	r3, #49	@ 0x31
 8008cc6:	f88a 3000 	strb.w	r3, [sl]
 8008cca:	e5b9      	b.n	8008840 <_dtoa_r+0x698>
 8008ccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d2c <_dtoa_r+0xb84>
 8008cd2:	b11b      	cbz	r3, 8008cdc <_dtoa_r+0xb34>
 8008cd4:	f10a 0308 	add.w	r3, sl, #8
 8008cd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4650      	mov	r0, sl
 8008cde:	b019      	add	sp, #100	@ 0x64
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	f77f ae37 	ble.w	800895a <_dtoa_r+0x7b2>
 8008cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e655      	b.n	80089a0 <_dtoa_r+0x7f8>
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f77f aed6 	ble.w	8008aa8 <_dtoa_r+0x900>
 8008cfc:	4656      	mov	r6, sl
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4648      	mov	r0, r9
 8008d02:	f7ff f9c8 	bl	8008096 <quorem>
 8008d06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d0a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d0e:	9b00      	ldr	r3, [sp, #0]
 8008d10:	eba6 020a 	sub.w	r2, r6, sl
 8008d14:	4293      	cmp	r3, r2
 8008d16:	ddb3      	ble.n	8008c80 <_dtoa_r+0xad8>
 8008d18:	4649      	mov	r1, r9
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	4658      	mov	r0, fp
 8008d20:	f000 f968 	bl	8008ff4 <__multadd>
 8008d24:	4681      	mov	r9, r0
 8008d26:	e7ea      	b.n	8008cfe <_dtoa_r+0xb56>
 8008d28:	0800a37c 	.word	0x0800a37c
 8008d2c:	0800a300 	.word	0x0800a300

08008d30 <_free_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4605      	mov	r5, r0
 8008d34:	2900      	cmp	r1, #0
 8008d36:	d041      	beq.n	8008dbc <_free_r+0x8c>
 8008d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3c:	1f0c      	subs	r4, r1, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bfb8      	it	lt
 8008d42:	18e4      	addlt	r4, r4, r3
 8008d44:	f000 f8e8 	bl	8008f18 <__malloc_lock>
 8008d48:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc0 <_free_r+0x90>)
 8008d4a:	6813      	ldr	r3, [r2, #0]
 8008d4c:	b933      	cbnz	r3, 8008d5c <_free_r+0x2c>
 8008d4e:	6063      	str	r3, [r4, #4]
 8008d50:	6014      	str	r4, [r2, #0]
 8008d52:	4628      	mov	r0, r5
 8008d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d58:	f000 b8e4 	b.w	8008f24 <__malloc_unlock>
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	d908      	bls.n	8008d72 <_free_r+0x42>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	1821      	adds	r1, r4, r0
 8008d64:	428b      	cmp	r3, r1
 8008d66:	bf01      	itttt	eq
 8008d68:	6819      	ldreq	r1, [r3, #0]
 8008d6a:	685b      	ldreq	r3, [r3, #4]
 8008d6c:	1809      	addeq	r1, r1, r0
 8008d6e:	6021      	streq	r1, [r4, #0]
 8008d70:	e7ed      	b.n	8008d4e <_free_r+0x1e>
 8008d72:	461a      	mov	r2, r3
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	b10b      	cbz	r3, 8008d7c <_free_r+0x4c>
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	d9fa      	bls.n	8008d72 <_free_r+0x42>
 8008d7c:	6811      	ldr	r1, [r2, #0]
 8008d7e:	1850      	adds	r0, r2, r1
 8008d80:	42a0      	cmp	r0, r4
 8008d82:	d10b      	bne.n	8008d9c <_free_r+0x6c>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	4401      	add	r1, r0
 8008d88:	1850      	adds	r0, r2, r1
 8008d8a:	4283      	cmp	r3, r0
 8008d8c:	6011      	str	r1, [r2, #0]
 8008d8e:	d1e0      	bne.n	8008d52 <_free_r+0x22>
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	6053      	str	r3, [r2, #4]
 8008d96:	4408      	add	r0, r1
 8008d98:	6010      	str	r0, [r2, #0]
 8008d9a:	e7da      	b.n	8008d52 <_free_r+0x22>
 8008d9c:	d902      	bls.n	8008da4 <_free_r+0x74>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	e7d6      	b.n	8008d52 <_free_r+0x22>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	1821      	adds	r1, r4, r0
 8008da8:	428b      	cmp	r3, r1
 8008daa:	bf04      	itt	eq
 8008dac:	6819      	ldreq	r1, [r3, #0]
 8008dae:	685b      	ldreq	r3, [r3, #4]
 8008db0:	6063      	str	r3, [r4, #4]
 8008db2:	bf04      	itt	eq
 8008db4:	1809      	addeq	r1, r1, r0
 8008db6:	6021      	streq	r1, [r4, #0]
 8008db8:	6054      	str	r4, [r2, #4]
 8008dba:	e7ca      	b.n	8008d52 <_free_r+0x22>
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
 8008dbe:	bf00      	nop
 8008dc0:	2000a9c4 	.word	0x2000a9c4

08008dc4 <malloc>:
 8008dc4:	4b02      	ldr	r3, [pc, #8]	@ (8008dd0 <malloc+0xc>)
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	f000 b825 	b.w	8008e18 <_malloc_r>
 8008dce:	bf00      	nop
 8008dd0:	20006020 	.word	0x20006020

08008dd4 <sbrk_aligned>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8008e14 <sbrk_aligned+0x40>)
 8008dd8:	460c      	mov	r4, r1
 8008dda:	6831      	ldr	r1, [r6, #0]
 8008ddc:	4605      	mov	r5, r0
 8008dde:	b911      	cbnz	r1, 8008de6 <sbrk_aligned+0x12>
 8008de0:	f000 fe46 	bl	8009a70 <_sbrk_r>
 8008de4:	6030      	str	r0, [r6, #0]
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 fe41 	bl	8009a70 <_sbrk_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d103      	bne.n	8008dfa <sbrk_aligned+0x26>
 8008df2:	f04f 34ff 	mov.w	r4, #4294967295
 8008df6:	4620      	mov	r0, r4
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	1cc4      	adds	r4, r0, #3
 8008dfc:	f024 0403 	bic.w	r4, r4, #3
 8008e00:	42a0      	cmp	r0, r4
 8008e02:	d0f8      	beq.n	8008df6 <sbrk_aligned+0x22>
 8008e04:	1a21      	subs	r1, r4, r0
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 fe32 	bl	8009a70 <_sbrk_r>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d1f2      	bne.n	8008df6 <sbrk_aligned+0x22>
 8008e10:	e7ef      	b.n	8008df2 <sbrk_aligned+0x1e>
 8008e12:	bf00      	nop
 8008e14:	2000a9c0 	.word	0x2000a9c0

08008e18 <_malloc_r>:
 8008e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e1c:	1ccd      	adds	r5, r1, #3
 8008e1e:	f025 0503 	bic.w	r5, r5, #3
 8008e22:	3508      	adds	r5, #8
 8008e24:	2d0c      	cmp	r5, #12
 8008e26:	bf38      	it	cc
 8008e28:	250c      	movcc	r5, #12
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	db01      	blt.n	8008e34 <_malloc_r+0x1c>
 8008e30:	42a9      	cmp	r1, r5
 8008e32:	d904      	bls.n	8008e3e <_malloc_r+0x26>
 8008e34:	230c      	movs	r3, #12
 8008e36:	6033      	str	r3, [r6, #0]
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f14 <_malloc_r+0xfc>
 8008e42:	f000 f869 	bl	8008f18 <__malloc_lock>
 8008e46:	f8d8 3000 	ldr.w	r3, [r8]
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	bb44      	cbnz	r4, 8008ea0 <_malloc_r+0x88>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff ffbf 	bl	8008dd4 <sbrk_aligned>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	4604      	mov	r4, r0
 8008e5a:	d158      	bne.n	8008f0e <_malloc_r+0xf6>
 8008e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e60:	4627      	mov	r7, r4
 8008e62:	2f00      	cmp	r7, #0
 8008e64:	d143      	bne.n	8008eee <_malloc_r+0xd6>
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d04b      	beq.n	8008f02 <_malloc_r+0xea>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	4630      	mov	r0, r6
 8008e70:	eb04 0903 	add.w	r9, r4, r3
 8008e74:	f000 fdfc 	bl	8009a70 <_sbrk_r>
 8008e78:	4581      	cmp	r9, r0
 8008e7a:	d142      	bne.n	8008f02 <_malloc_r+0xea>
 8008e7c:	6821      	ldr	r1, [r4, #0]
 8008e7e:	1a6d      	subs	r5, r5, r1
 8008e80:	4629      	mov	r1, r5
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7ff ffa6 	bl	8008dd4 <sbrk_aligned>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d03a      	beq.n	8008f02 <_malloc_r+0xea>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	442b      	add	r3, r5
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	f8d8 3000 	ldr.w	r3, [r8]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	bb62      	cbnz	r2, 8008ef4 <_malloc_r+0xdc>
 8008e9a:	f8c8 7000 	str.w	r7, [r8]
 8008e9e:	e00f      	b.n	8008ec0 <_malloc_r+0xa8>
 8008ea0:	6822      	ldr	r2, [r4, #0]
 8008ea2:	1b52      	subs	r2, r2, r5
 8008ea4:	d420      	bmi.n	8008ee8 <_malloc_r+0xd0>
 8008ea6:	2a0b      	cmp	r2, #11
 8008ea8:	d917      	bls.n	8008eda <_malloc_r+0xc2>
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	6025      	str	r5, [r4, #0]
 8008eb0:	bf18      	it	ne
 8008eb2:	6059      	strne	r1, [r3, #4]
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	bf08      	it	eq
 8008eb8:	f8c8 1000 	streq.w	r1, [r8]
 8008ebc:	5162      	str	r2, [r4, r5]
 8008ebe:	604b      	str	r3, [r1, #4]
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f82f 	bl	8008f24 <__malloc_unlock>
 8008ec6:	f104 000b 	add.w	r0, r4, #11
 8008eca:	1d23      	adds	r3, r4, #4
 8008ecc:	f020 0007 	bic.w	r0, r0, #7
 8008ed0:	1ac2      	subs	r2, r0, r3
 8008ed2:	bf1c      	itt	ne
 8008ed4:	1a1b      	subne	r3, r3, r0
 8008ed6:	50a3      	strne	r3, [r4, r2]
 8008ed8:	e7af      	b.n	8008e3a <_malloc_r+0x22>
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	bf0c      	ite	eq
 8008ee0:	f8c8 2000 	streq.w	r2, [r8]
 8008ee4:	605a      	strne	r2, [r3, #4]
 8008ee6:	e7eb      	b.n	8008ec0 <_malloc_r+0xa8>
 8008ee8:	4623      	mov	r3, r4
 8008eea:	6864      	ldr	r4, [r4, #4]
 8008eec:	e7ae      	b.n	8008e4c <_malloc_r+0x34>
 8008eee:	463c      	mov	r4, r7
 8008ef0:	687f      	ldr	r7, [r7, #4]
 8008ef2:	e7b6      	b.n	8008e62 <_malloc_r+0x4a>
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d1fb      	bne.n	8008ef4 <_malloc_r+0xdc>
 8008efc:	2300      	movs	r3, #0
 8008efe:	6053      	str	r3, [r2, #4]
 8008f00:	e7de      	b.n	8008ec0 <_malloc_r+0xa8>
 8008f02:	230c      	movs	r3, #12
 8008f04:	6033      	str	r3, [r6, #0]
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f80c 	bl	8008f24 <__malloc_unlock>
 8008f0c:	e794      	b.n	8008e38 <_malloc_r+0x20>
 8008f0e:	6005      	str	r5, [r0, #0]
 8008f10:	e7d6      	b.n	8008ec0 <_malloc_r+0xa8>
 8008f12:	bf00      	nop
 8008f14:	2000a9c4 	.word	0x2000a9c4

08008f18 <__malloc_lock>:
 8008f18:	4801      	ldr	r0, [pc, #4]	@ (8008f20 <__malloc_lock+0x8>)
 8008f1a:	f7ff b8ba 	b.w	8008092 <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	2000a9bc 	.word	0x2000a9bc

08008f24 <__malloc_unlock>:
 8008f24:	4801      	ldr	r0, [pc, #4]	@ (8008f2c <__malloc_unlock+0x8>)
 8008f26:	f7ff b8b5 	b.w	8008094 <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	2000a9bc 	.word	0x2000a9bc

08008f30 <_Balloc>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	69c6      	ldr	r6, [r0, #28]
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	b976      	cbnz	r6, 8008f58 <_Balloc+0x28>
 8008f3a:	2010      	movs	r0, #16
 8008f3c:	f7ff ff42 	bl	8008dc4 <malloc>
 8008f40:	4602      	mov	r2, r0
 8008f42:	61e0      	str	r0, [r4, #28]
 8008f44:	b920      	cbnz	r0, 8008f50 <_Balloc+0x20>
 8008f46:	4b18      	ldr	r3, [pc, #96]	@ (8008fa8 <_Balloc+0x78>)
 8008f48:	4818      	ldr	r0, [pc, #96]	@ (8008fac <_Balloc+0x7c>)
 8008f4a:	216b      	movs	r1, #107	@ 0x6b
 8008f4c:	f000 fdae 	bl	8009aac <__assert_func>
 8008f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f54:	6006      	str	r6, [r0, #0]
 8008f56:	60c6      	str	r6, [r0, #12]
 8008f58:	69e6      	ldr	r6, [r4, #28]
 8008f5a:	68f3      	ldr	r3, [r6, #12]
 8008f5c:	b183      	cbz	r3, 8008f80 <_Balloc+0x50>
 8008f5e:	69e3      	ldr	r3, [r4, #28]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f66:	b9b8      	cbnz	r0, 8008f98 <_Balloc+0x68>
 8008f68:	2101      	movs	r1, #1
 8008f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f6e:	1d72      	adds	r2, r6, #5
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fdb8 	bl	8009ae8 <_calloc_r>
 8008f78:	b160      	cbz	r0, 8008f94 <_Balloc+0x64>
 8008f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f7e:	e00e      	b.n	8008f9e <_Balloc+0x6e>
 8008f80:	2221      	movs	r2, #33	@ 0x21
 8008f82:	2104      	movs	r1, #4
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 fdaf 	bl	8009ae8 <_calloc_r>
 8008f8a:	69e3      	ldr	r3, [r4, #28]
 8008f8c:	60f0      	str	r0, [r6, #12]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e4      	bne.n	8008f5e <_Balloc+0x2e>
 8008f94:	2000      	movs	r0, #0
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	6802      	ldr	r2, [r0, #0]
 8008f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa4:	e7f7      	b.n	8008f96 <_Balloc+0x66>
 8008fa6:	bf00      	nop
 8008fa8:	0800a30d 	.word	0x0800a30d
 8008fac:	0800a38d 	.word	0x0800a38d

08008fb0 <_Bfree>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	69c6      	ldr	r6, [r0, #28]
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	b976      	cbnz	r6, 8008fd8 <_Bfree+0x28>
 8008fba:	2010      	movs	r0, #16
 8008fbc:	f7ff ff02 	bl	8008dc4 <malloc>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	61e8      	str	r0, [r5, #28]
 8008fc4:	b920      	cbnz	r0, 8008fd0 <_Bfree+0x20>
 8008fc6:	4b09      	ldr	r3, [pc, #36]	@ (8008fec <_Bfree+0x3c>)
 8008fc8:	4809      	ldr	r0, [pc, #36]	@ (8008ff0 <_Bfree+0x40>)
 8008fca:	218f      	movs	r1, #143	@ 0x8f
 8008fcc:	f000 fd6e 	bl	8009aac <__assert_func>
 8008fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd4:	6006      	str	r6, [r0, #0]
 8008fd6:	60c6      	str	r6, [r0, #12]
 8008fd8:	b13c      	cbz	r4, 8008fea <_Bfree+0x3a>
 8008fda:	69eb      	ldr	r3, [r5, #28]
 8008fdc:	6862      	ldr	r2, [r4, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe4:	6021      	str	r1, [r4, #0]
 8008fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	0800a30d 	.word	0x0800a30d
 8008ff0:	0800a38d 	.word	0x0800a38d

08008ff4 <__multadd>:
 8008ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff8:	690d      	ldr	r5, [r1, #16]
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	461e      	mov	r6, r3
 8009000:	f101 0c14 	add.w	ip, r1, #20
 8009004:	2000      	movs	r0, #0
 8009006:	f8dc 3000 	ldr.w	r3, [ip]
 800900a:	b299      	uxth	r1, r3
 800900c:	fb02 6101 	mla	r1, r2, r1, r6
 8009010:	0c1e      	lsrs	r6, r3, #16
 8009012:	0c0b      	lsrs	r3, r1, #16
 8009014:	fb02 3306 	mla	r3, r2, r6, r3
 8009018:	b289      	uxth	r1, r1
 800901a:	3001      	adds	r0, #1
 800901c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009020:	4285      	cmp	r5, r0
 8009022:	f84c 1b04 	str.w	r1, [ip], #4
 8009026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800902a:	dcec      	bgt.n	8009006 <__multadd+0x12>
 800902c:	b30e      	cbz	r6, 8009072 <__multadd+0x7e>
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	42ab      	cmp	r3, r5
 8009032:	dc19      	bgt.n	8009068 <__multadd+0x74>
 8009034:	6861      	ldr	r1, [r4, #4]
 8009036:	4638      	mov	r0, r7
 8009038:	3101      	adds	r1, #1
 800903a:	f7ff ff79 	bl	8008f30 <_Balloc>
 800903e:	4680      	mov	r8, r0
 8009040:	b928      	cbnz	r0, 800904e <__multadd+0x5a>
 8009042:	4602      	mov	r2, r0
 8009044:	4b0c      	ldr	r3, [pc, #48]	@ (8009078 <__multadd+0x84>)
 8009046:	480d      	ldr	r0, [pc, #52]	@ (800907c <__multadd+0x88>)
 8009048:	21ba      	movs	r1, #186	@ 0xba
 800904a:	f000 fd2f 	bl	8009aac <__assert_func>
 800904e:	6922      	ldr	r2, [r4, #16]
 8009050:	3202      	adds	r2, #2
 8009052:	f104 010c 	add.w	r1, r4, #12
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	300c      	adds	r0, #12
 800905a:	f000 fd19 	bl	8009a90 <memcpy>
 800905e:	4621      	mov	r1, r4
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff ffa5 	bl	8008fb0 <_Bfree>
 8009066:	4644      	mov	r4, r8
 8009068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800906c:	3501      	adds	r5, #1
 800906e:	615e      	str	r6, [r3, #20]
 8009070:	6125      	str	r5, [r4, #16]
 8009072:	4620      	mov	r0, r4
 8009074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009078:	0800a37c 	.word	0x0800a37c
 800907c:	0800a38d 	.word	0x0800a38d

08009080 <__hi0bits>:
 8009080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009084:	4603      	mov	r3, r0
 8009086:	bf36      	itet	cc
 8009088:	0403      	lslcc	r3, r0, #16
 800908a:	2000      	movcs	r0, #0
 800908c:	2010      	movcc	r0, #16
 800908e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009092:	bf3c      	itt	cc
 8009094:	021b      	lslcc	r3, r3, #8
 8009096:	3008      	addcc	r0, #8
 8009098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800909c:	bf3c      	itt	cc
 800909e:	011b      	lslcc	r3, r3, #4
 80090a0:	3004      	addcc	r0, #4
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a6:	bf3c      	itt	cc
 80090a8:	009b      	lslcc	r3, r3, #2
 80090aa:	3002      	addcc	r0, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	db05      	blt.n	80090bc <__hi0bits+0x3c>
 80090b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090b4:	f100 0001 	add.w	r0, r0, #1
 80090b8:	bf08      	it	eq
 80090ba:	2020      	moveq	r0, #32
 80090bc:	4770      	bx	lr

080090be <__lo0bits>:
 80090be:	6803      	ldr	r3, [r0, #0]
 80090c0:	4602      	mov	r2, r0
 80090c2:	f013 0007 	ands.w	r0, r3, #7
 80090c6:	d00b      	beq.n	80090e0 <__lo0bits+0x22>
 80090c8:	07d9      	lsls	r1, r3, #31
 80090ca:	d421      	bmi.n	8009110 <__lo0bits+0x52>
 80090cc:	0798      	lsls	r0, r3, #30
 80090ce:	bf49      	itett	mi
 80090d0:	085b      	lsrmi	r3, r3, #1
 80090d2:	089b      	lsrpl	r3, r3, #2
 80090d4:	2001      	movmi	r0, #1
 80090d6:	6013      	strmi	r3, [r2, #0]
 80090d8:	bf5c      	itt	pl
 80090da:	6013      	strpl	r3, [r2, #0]
 80090dc:	2002      	movpl	r0, #2
 80090de:	4770      	bx	lr
 80090e0:	b299      	uxth	r1, r3
 80090e2:	b909      	cbnz	r1, 80090e8 <__lo0bits+0x2a>
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	2010      	movs	r0, #16
 80090e8:	b2d9      	uxtb	r1, r3
 80090ea:	b909      	cbnz	r1, 80090f0 <__lo0bits+0x32>
 80090ec:	3008      	adds	r0, #8
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	0719      	lsls	r1, r3, #28
 80090f2:	bf04      	itt	eq
 80090f4:	091b      	lsreq	r3, r3, #4
 80090f6:	3004      	addeq	r0, #4
 80090f8:	0799      	lsls	r1, r3, #30
 80090fa:	bf04      	itt	eq
 80090fc:	089b      	lsreq	r3, r3, #2
 80090fe:	3002      	addeq	r0, #2
 8009100:	07d9      	lsls	r1, r3, #31
 8009102:	d403      	bmi.n	800910c <__lo0bits+0x4e>
 8009104:	085b      	lsrs	r3, r3, #1
 8009106:	f100 0001 	add.w	r0, r0, #1
 800910a:	d003      	beq.n	8009114 <__lo0bits+0x56>
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	4770      	bx	lr
 8009110:	2000      	movs	r0, #0
 8009112:	4770      	bx	lr
 8009114:	2020      	movs	r0, #32
 8009116:	4770      	bx	lr

08009118 <__i2b>:
 8009118:	b510      	push	{r4, lr}
 800911a:	460c      	mov	r4, r1
 800911c:	2101      	movs	r1, #1
 800911e:	f7ff ff07 	bl	8008f30 <_Balloc>
 8009122:	4602      	mov	r2, r0
 8009124:	b928      	cbnz	r0, 8009132 <__i2b+0x1a>
 8009126:	4b05      	ldr	r3, [pc, #20]	@ (800913c <__i2b+0x24>)
 8009128:	4805      	ldr	r0, [pc, #20]	@ (8009140 <__i2b+0x28>)
 800912a:	f240 1145 	movw	r1, #325	@ 0x145
 800912e:	f000 fcbd 	bl	8009aac <__assert_func>
 8009132:	2301      	movs	r3, #1
 8009134:	6144      	str	r4, [r0, #20]
 8009136:	6103      	str	r3, [r0, #16]
 8009138:	bd10      	pop	{r4, pc}
 800913a:	bf00      	nop
 800913c:	0800a37c 	.word	0x0800a37c
 8009140:	0800a38d 	.word	0x0800a38d

08009144 <__multiply>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4614      	mov	r4, r2
 800914a:	690a      	ldr	r2, [r1, #16]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	429a      	cmp	r2, r3
 8009150:	bfa8      	it	ge
 8009152:	4623      	movge	r3, r4
 8009154:	460f      	mov	r7, r1
 8009156:	bfa4      	itt	ge
 8009158:	460c      	movge	r4, r1
 800915a:	461f      	movge	r7, r3
 800915c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009160:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009164:	68a3      	ldr	r3, [r4, #8]
 8009166:	6861      	ldr	r1, [r4, #4]
 8009168:	eb0a 0609 	add.w	r6, sl, r9
 800916c:	42b3      	cmp	r3, r6
 800916e:	b085      	sub	sp, #20
 8009170:	bfb8      	it	lt
 8009172:	3101      	addlt	r1, #1
 8009174:	f7ff fedc 	bl	8008f30 <_Balloc>
 8009178:	b930      	cbnz	r0, 8009188 <__multiply+0x44>
 800917a:	4602      	mov	r2, r0
 800917c:	4b44      	ldr	r3, [pc, #272]	@ (8009290 <__multiply+0x14c>)
 800917e:	4845      	ldr	r0, [pc, #276]	@ (8009294 <__multiply+0x150>)
 8009180:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009184:	f000 fc92 	bl	8009aac <__assert_func>
 8009188:	f100 0514 	add.w	r5, r0, #20
 800918c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009190:	462b      	mov	r3, r5
 8009192:	2200      	movs	r2, #0
 8009194:	4543      	cmp	r3, r8
 8009196:	d321      	bcc.n	80091dc <__multiply+0x98>
 8009198:	f107 0114 	add.w	r1, r7, #20
 800919c:	f104 0214 	add.w	r2, r4, #20
 80091a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091a8:	9302      	str	r3, [sp, #8]
 80091aa:	1b13      	subs	r3, r2, r4
 80091ac:	3b15      	subs	r3, #21
 80091ae:	f023 0303 	bic.w	r3, r3, #3
 80091b2:	3304      	adds	r3, #4
 80091b4:	f104 0715 	add.w	r7, r4, #21
 80091b8:	42ba      	cmp	r2, r7
 80091ba:	bf38      	it	cc
 80091bc:	2304      	movcc	r3, #4
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	9b02      	ldr	r3, [sp, #8]
 80091c2:	9103      	str	r1, [sp, #12]
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d80c      	bhi.n	80091e2 <__multiply+0x9e>
 80091c8:	2e00      	cmp	r6, #0
 80091ca:	dd03      	ble.n	80091d4 <__multiply+0x90>
 80091cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d05b      	beq.n	800928c <__multiply+0x148>
 80091d4:	6106      	str	r6, [r0, #16]
 80091d6:	b005      	add	sp, #20
 80091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091dc:	f843 2b04 	str.w	r2, [r3], #4
 80091e0:	e7d8      	b.n	8009194 <__multiply+0x50>
 80091e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80091e6:	f1ba 0f00 	cmp.w	sl, #0
 80091ea:	d024      	beq.n	8009236 <__multiply+0xf2>
 80091ec:	f104 0e14 	add.w	lr, r4, #20
 80091f0:	46a9      	mov	r9, r5
 80091f2:	f04f 0c00 	mov.w	ip, #0
 80091f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091fa:	f8d9 3000 	ldr.w	r3, [r9]
 80091fe:	fa1f fb87 	uxth.w	fp, r7
 8009202:	b29b      	uxth	r3, r3
 8009204:	fb0a 330b 	mla	r3, sl, fp, r3
 8009208:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800920c:	f8d9 7000 	ldr.w	r7, [r9]
 8009210:	4463      	add	r3, ip
 8009212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009216:	fb0a c70b 	mla	r7, sl, fp, ip
 800921a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800921e:	b29b      	uxth	r3, r3
 8009220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009224:	4572      	cmp	r2, lr
 8009226:	f849 3b04 	str.w	r3, [r9], #4
 800922a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800922e:	d8e2      	bhi.n	80091f6 <__multiply+0xb2>
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	f845 c003 	str.w	ip, [r5, r3]
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800923c:	3104      	adds	r1, #4
 800923e:	f1b9 0f00 	cmp.w	r9, #0
 8009242:	d021      	beq.n	8009288 <__multiply+0x144>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	f104 0c14 	add.w	ip, r4, #20
 800924a:	46ae      	mov	lr, r5
 800924c:	f04f 0a00 	mov.w	sl, #0
 8009250:	f8bc b000 	ldrh.w	fp, [ip]
 8009254:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009258:	fb09 770b 	mla	r7, r9, fp, r7
 800925c:	4457      	add	r7, sl
 800925e:	b29b      	uxth	r3, r3
 8009260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009264:	f84e 3b04 	str.w	r3, [lr], #4
 8009268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800926c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009270:	f8be 3000 	ldrh.w	r3, [lr]
 8009274:	fb09 330a 	mla	r3, r9, sl, r3
 8009278:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800927c:	4562      	cmp	r2, ip
 800927e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009282:	d8e5      	bhi.n	8009250 <__multiply+0x10c>
 8009284:	9f01      	ldr	r7, [sp, #4]
 8009286:	51eb      	str	r3, [r5, r7]
 8009288:	3504      	adds	r5, #4
 800928a:	e799      	b.n	80091c0 <__multiply+0x7c>
 800928c:	3e01      	subs	r6, #1
 800928e:	e79b      	b.n	80091c8 <__multiply+0x84>
 8009290:	0800a37c 	.word	0x0800a37c
 8009294:	0800a38d 	.word	0x0800a38d

08009298 <__pow5mult>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	4615      	mov	r5, r2
 800929e:	f012 0203 	ands.w	r2, r2, #3
 80092a2:	4607      	mov	r7, r0
 80092a4:	460e      	mov	r6, r1
 80092a6:	d007      	beq.n	80092b8 <__pow5mult+0x20>
 80092a8:	4c25      	ldr	r4, [pc, #148]	@ (8009340 <__pow5mult+0xa8>)
 80092aa:	3a01      	subs	r2, #1
 80092ac:	2300      	movs	r3, #0
 80092ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092b2:	f7ff fe9f 	bl	8008ff4 <__multadd>
 80092b6:	4606      	mov	r6, r0
 80092b8:	10ad      	asrs	r5, r5, #2
 80092ba:	d03d      	beq.n	8009338 <__pow5mult+0xa0>
 80092bc:	69fc      	ldr	r4, [r7, #28]
 80092be:	b97c      	cbnz	r4, 80092e0 <__pow5mult+0x48>
 80092c0:	2010      	movs	r0, #16
 80092c2:	f7ff fd7f 	bl	8008dc4 <malloc>
 80092c6:	4602      	mov	r2, r0
 80092c8:	61f8      	str	r0, [r7, #28]
 80092ca:	b928      	cbnz	r0, 80092d8 <__pow5mult+0x40>
 80092cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009344 <__pow5mult+0xac>)
 80092ce:	481e      	ldr	r0, [pc, #120]	@ (8009348 <__pow5mult+0xb0>)
 80092d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092d4:	f000 fbea 	bl	8009aac <__assert_func>
 80092d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092dc:	6004      	str	r4, [r0, #0]
 80092de:	60c4      	str	r4, [r0, #12]
 80092e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092e8:	b94c      	cbnz	r4, 80092fe <__pow5mult+0x66>
 80092ea:	f240 2171 	movw	r1, #625	@ 0x271
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7ff ff12 	bl	8009118 <__i2b>
 80092f4:	2300      	movs	r3, #0
 80092f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092fa:	4604      	mov	r4, r0
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	f04f 0900 	mov.w	r9, #0
 8009302:	07eb      	lsls	r3, r5, #31
 8009304:	d50a      	bpl.n	800931c <__pow5mult+0x84>
 8009306:	4631      	mov	r1, r6
 8009308:	4622      	mov	r2, r4
 800930a:	4638      	mov	r0, r7
 800930c:	f7ff ff1a 	bl	8009144 <__multiply>
 8009310:	4631      	mov	r1, r6
 8009312:	4680      	mov	r8, r0
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff fe4b 	bl	8008fb0 <_Bfree>
 800931a:	4646      	mov	r6, r8
 800931c:	106d      	asrs	r5, r5, #1
 800931e:	d00b      	beq.n	8009338 <__pow5mult+0xa0>
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	b938      	cbnz	r0, 8009334 <__pow5mult+0x9c>
 8009324:	4622      	mov	r2, r4
 8009326:	4621      	mov	r1, r4
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ff0b 	bl	8009144 <__multiply>
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	f8c0 9000 	str.w	r9, [r0]
 8009334:	4604      	mov	r4, r0
 8009336:	e7e4      	b.n	8009302 <__pow5mult+0x6a>
 8009338:	4630      	mov	r0, r6
 800933a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800933e:	bf00      	nop
 8009340:	0800a3e8 	.word	0x0800a3e8
 8009344:	0800a30d 	.word	0x0800a30d
 8009348:	0800a38d 	.word	0x0800a38d

0800934c <__lshift>:
 800934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	460c      	mov	r4, r1
 8009352:	6849      	ldr	r1, [r1, #4]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	4607      	mov	r7, r0
 800935e:	4691      	mov	r9, r2
 8009360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009364:	f108 0601 	add.w	r6, r8, #1
 8009368:	42b3      	cmp	r3, r6
 800936a:	db0b      	blt.n	8009384 <__lshift+0x38>
 800936c:	4638      	mov	r0, r7
 800936e:	f7ff fddf 	bl	8008f30 <_Balloc>
 8009372:	4605      	mov	r5, r0
 8009374:	b948      	cbnz	r0, 800938a <__lshift+0x3e>
 8009376:	4602      	mov	r2, r0
 8009378:	4b28      	ldr	r3, [pc, #160]	@ (800941c <__lshift+0xd0>)
 800937a:	4829      	ldr	r0, [pc, #164]	@ (8009420 <__lshift+0xd4>)
 800937c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009380:	f000 fb94 	bl	8009aac <__assert_func>
 8009384:	3101      	adds	r1, #1
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	e7ee      	b.n	8009368 <__lshift+0x1c>
 800938a:	2300      	movs	r3, #0
 800938c:	f100 0114 	add.w	r1, r0, #20
 8009390:	f100 0210 	add.w	r2, r0, #16
 8009394:	4618      	mov	r0, r3
 8009396:	4553      	cmp	r3, sl
 8009398:	db33      	blt.n	8009402 <__lshift+0xb6>
 800939a:	6920      	ldr	r0, [r4, #16]
 800939c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093a0:	f104 0314 	add.w	r3, r4, #20
 80093a4:	f019 091f 	ands.w	r9, r9, #31
 80093a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093b0:	d02b      	beq.n	800940a <__lshift+0xbe>
 80093b2:	f1c9 0e20 	rsb	lr, r9, #32
 80093b6:	468a      	mov	sl, r1
 80093b8:	2200      	movs	r2, #0
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	fa00 f009 	lsl.w	r0, r0, r9
 80093c0:	4310      	orrs	r0, r2
 80093c2:	f84a 0b04 	str.w	r0, [sl], #4
 80093c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ca:	459c      	cmp	ip, r3
 80093cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80093d0:	d8f3      	bhi.n	80093ba <__lshift+0x6e>
 80093d2:	ebac 0304 	sub.w	r3, ip, r4
 80093d6:	3b15      	subs	r3, #21
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	3304      	adds	r3, #4
 80093de:	f104 0015 	add.w	r0, r4, #21
 80093e2:	4584      	cmp	ip, r0
 80093e4:	bf38      	it	cc
 80093e6:	2304      	movcc	r3, #4
 80093e8:	50ca      	str	r2, [r1, r3]
 80093ea:	b10a      	cbz	r2, 80093f0 <__lshift+0xa4>
 80093ec:	f108 0602 	add.w	r6, r8, #2
 80093f0:	3e01      	subs	r6, #1
 80093f2:	4638      	mov	r0, r7
 80093f4:	612e      	str	r6, [r5, #16]
 80093f6:	4621      	mov	r1, r4
 80093f8:	f7ff fdda 	bl	8008fb0 <_Bfree>
 80093fc:	4628      	mov	r0, r5
 80093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009402:	f842 0f04 	str.w	r0, [r2, #4]!
 8009406:	3301      	adds	r3, #1
 8009408:	e7c5      	b.n	8009396 <__lshift+0x4a>
 800940a:	3904      	subs	r1, #4
 800940c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009410:	f841 2f04 	str.w	r2, [r1, #4]!
 8009414:	459c      	cmp	ip, r3
 8009416:	d8f9      	bhi.n	800940c <__lshift+0xc0>
 8009418:	e7ea      	b.n	80093f0 <__lshift+0xa4>
 800941a:	bf00      	nop
 800941c:	0800a37c 	.word	0x0800a37c
 8009420:	0800a38d 	.word	0x0800a38d

08009424 <__mcmp>:
 8009424:	690a      	ldr	r2, [r1, #16]
 8009426:	4603      	mov	r3, r0
 8009428:	6900      	ldr	r0, [r0, #16]
 800942a:	1a80      	subs	r0, r0, r2
 800942c:	b530      	push	{r4, r5, lr}
 800942e:	d10e      	bne.n	800944e <__mcmp+0x2a>
 8009430:	3314      	adds	r3, #20
 8009432:	3114      	adds	r1, #20
 8009434:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009438:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800943c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009444:	4295      	cmp	r5, r2
 8009446:	d003      	beq.n	8009450 <__mcmp+0x2c>
 8009448:	d205      	bcs.n	8009456 <__mcmp+0x32>
 800944a:	f04f 30ff 	mov.w	r0, #4294967295
 800944e:	bd30      	pop	{r4, r5, pc}
 8009450:	42a3      	cmp	r3, r4
 8009452:	d3f3      	bcc.n	800943c <__mcmp+0x18>
 8009454:	e7fb      	b.n	800944e <__mcmp+0x2a>
 8009456:	2001      	movs	r0, #1
 8009458:	e7f9      	b.n	800944e <__mcmp+0x2a>
	...

0800945c <__mdiff>:
 800945c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	4689      	mov	r9, r1
 8009462:	4606      	mov	r6, r0
 8009464:	4611      	mov	r1, r2
 8009466:	4648      	mov	r0, r9
 8009468:	4614      	mov	r4, r2
 800946a:	f7ff ffdb 	bl	8009424 <__mcmp>
 800946e:	1e05      	subs	r5, r0, #0
 8009470:	d112      	bne.n	8009498 <__mdiff+0x3c>
 8009472:	4629      	mov	r1, r5
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff fd5b 	bl	8008f30 <_Balloc>
 800947a:	4602      	mov	r2, r0
 800947c:	b928      	cbnz	r0, 800948a <__mdiff+0x2e>
 800947e:	4b3f      	ldr	r3, [pc, #252]	@ (800957c <__mdiff+0x120>)
 8009480:	f240 2137 	movw	r1, #567	@ 0x237
 8009484:	483e      	ldr	r0, [pc, #248]	@ (8009580 <__mdiff+0x124>)
 8009486:	f000 fb11 	bl	8009aac <__assert_func>
 800948a:	2301      	movs	r3, #1
 800948c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009490:	4610      	mov	r0, r2
 8009492:	b003      	add	sp, #12
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	bfbc      	itt	lt
 800949a:	464b      	movlt	r3, r9
 800949c:	46a1      	movlt	r9, r4
 800949e:	4630      	mov	r0, r6
 80094a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094a4:	bfba      	itte	lt
 80094a6:	461c      	movlt	r4, r3
 80094a8:	2501      	movlt	r5, #1
 80094aa:	2500      	movge	r5, #0
 80094ac:	f7ff fd40 	bl	8008f30 <_Balloc>
 80094b0:	4602      	mov	r2, r0
 80094b2:	b918      	cbnz	r0, 80094bc <__mdiff+0x60>
 80094b4:	4b31      	ldr	r3, [pc, #196]	@ (800957c <__mdiff+0x120>)
 80094b6:	f240 2145 	movw	r1, #581	@ 0x245
 80094ba:	e7e3      	b.n	8009484 <__mdiff+0x28>
 80094bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094c0:	6926      	ldr	r6, [r4, #16]
 80094c2:	60c5      	str	r5, [r0, #12]
 80094c4:	f109 0310 	add.w	r3, r9, #16
 80094c8:	f109 0514 	add.w	r5, r9, #20
 80094cc:	f104 0e14 	add.w	lr, r4, #20
 80094d0:	f100 0b14 	add.w	fp, r0, #20
 80094d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	46d9      	mov	r9, fp
 80094e0:	f04f 0c00 	mov.w	ip, #0
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	fa1f f38a 	uxth.w	r3, sl
 80094f4:	4619      	mov	r1, r3
 80094f6:	b283      	uxth	r3, r0
 80094f8:	1acb      	subs	r3, r1, r3
 80094fa:	0c00      	lsrs	r0, r0, #16
 80094fc:	4463      	add	r3, ip
 80094fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009506:	b29b      	uxth	r3, r3
 8009508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800950c:	4576      	cmp	r6, lr
 800950e:	f849 3b04 	str.w	r3, [r9], #4
 8009512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009516:	d8e5      	bhi.n	80094e4 <__mdiff+0x88>
 8009518:	1b33      	subs	r3, r6, r4
 800951a:	3b15      	subs	r3, #21
 800951c:	f023 0303 	bic.w	r3, r3, #3
 8009520:	3415      	adds	r4, #21
 8009522:	3304      	adds	r3, #4
 8009524:	42a6      	cmp	r6, r4
 8009526:	bf38      	it	cc
 8009528:	2304      	movcc	r3, #4
 800952a:	441d      	add	r5, r3
 800952c:	445b      	add	r3, fp
 800952e:	461e      	mov	r6, r3
 8009530:	462c      	mov	r4, r5
 8009532:	4544      	cmp	r4, r8
 8009534:	d30e      	bcc.n	8009554 <__mdiff+0xf8>
 8009536:	f108 0103 	add.w	r1, r8, #3
 800953a:	1b49      	subs	r1, r1, r5
 800953c:	f021 0103 	bic.w	r1, r1, #3
 8009540:	3d03      	subs	r5, #3
 8009542:	45a8      	cmp	r8, r5
 8009544:	bf38      	it	cc
 8009546:	2100      	movcc	r1, #0
 8009548:	440b      	add	r3, r1
 800954a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800954e:	b191      	cbz	r1, 8009576 <__mdiff+0x11a>
 8009550:	6117      	str	r7, [r2, #16]
 8009552:	e79d      	b.n	8009490 <__mdiff+0x34>
 8009554:	f854 1b04 	ldr.w	r1, [r4], #4
 8009558:	46e6      	mov	lr, ip
 800955a:	0c08      	lsrs	r0, r1, #16
 800955c:	fa1c fc81 	uxtah	ip, ip, r1
 8009560:	4471      	add	r1, lr
 8009562:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009566:	b289      	uxth	r1, r1
 8009568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800956c:	f846 1b04 	str.w	r1, [r6], #4
 8009570:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009574:	e7dd      	b.n	8009532 <__mdiff+0xd6>
 8009576:	3f01      	subs	r7, #1
 8009578:	e7e7      	b.n	800954a <__mdiff+0xee>
 800957a:	bf00      	nop
 800957c:	0800a37c 	.word	0x0800a37c
 8009580:	0800a38d 	.word	0x0800a38d

08009584 <__d2b>:
 8009584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009588:	460f      	mov	r7, r1
 800958a:	2101      	movs	r1, #1
 800958c:	ec59 8b10 	vmov	r8, r9, d0
 8009590:	4616      	mov	r6, r2
 8009592:	f7ff fccd 	bl	8008f30 <_Balloc>
 8009596:	4604      	mov	r4, r0
 8009598:	b930      	cbnz	r0, 80095a8 <__d2b+0x24>
 800959a:	4602      	mov	r2, r0
 800959c:	4b23      	ldr	r3, [pc, #140]	@ (800962c <__d2b+0xa8>)
 800959e:	4824      	ldr	r0, [pc, #144]	@ (8009630 <__d2b+0xac>)
 80095a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80095a4:	f000 fa82 	bl	8009aac <__assert_func>
 80095a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095b0:	b10d      	cbz	r5, 80095b6 <__d2b+0x32>
 80095b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	f1b8 0300 	subs.w	r3, r8, #0
 80095bc:	d023      	beq.n	8009606 <__d2b+0x82>
 80095be:	4668      	mov	r0, sp
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	f7ff fd7c 	bl	80090be <__lo0bits>
 80095c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095ca:	b1d0      	cbz	r0, 8009602 <__d2b+0x7e>
 80095cc:	f1c0 0320 	rsb	r3, r0, #32
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	430b      	orrs	r3, r1
 80095d6:	40c2      	lsrs	r2, r0
 80095d8:	6163      	str	r3, [r4, #20]
 80095da:	9201      	str	r2, [sp, #4]
 80095dc:	9b01      	ldr	r3, [sp, #4]
 80095de:	61a3      	str	r3, [r4, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bf0c      	ite	eq
 80095e4:	2201      	moveq	r2, #1
 80095e6:	2202      	movne	r2, #2
 80095e8:	6122      	str	r2, [r4, #16]
 80095ea:	b1a5      	cbz	r5, 8009616 <__d2b+0x92>
 80095ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095f0:	4405      	add	r5, r0
 80095f2:	603d      	str	r5, [r7, #0]
 80095f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095f8:	6030      	str	r0, [r6, #0]
 80095fa:	4620      	mov	r0, r4
 80095fc:	b003      	add	sp, #12
 80095fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009602:	6161      	str	r1, [r4, #20]
 8009604:	e7ea      	b.n	80095dc <__d2b+0x58>
 8009606:	a801      	add	r0, sp, #4
 8009608:	f7ff fd59 	bl	80090be <__lo0bits>
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	6163      	str	r3, [r4, #20]
 8009610:	3020      	adds	r0, #32
 8009612:	2201      	movs	r2, #1
 8009614:	e7e8      	b.n	80095e8 <__d2b+0x64>
 8009616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800961a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800961e:	6038      	str	r0, [r7, #0]
 8009620:	6918      	ldr	r0, [r3, #16]
 8009622:	f7ff fd2d 	bl	8009080 <__hi0bits>
 8009626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800962a:	e7e5      	b.n	80095f8 <__d2b+0x74>
 800962c:	0800a37c 	.word	0x0800a37c
 8009630:	0800a38d 	.word	0x0800a38d

08009634 <__ssputs_r>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	688e      	ldr	r6, [r1, #8]
 800963a:	461f      	mov	r7, r3
 800963c:	42be      	cmp	r6, r7
 800963e:	680b      	ldr	r3, [r1, #0]
 8009640:	4682      	mov	sl, r0
 8009642:	460c      	mov	r4, r1
 8009644:	4690      	mov	r8, r2
 8009646:	d82d      	bhi.n	80096a4 <__ssputs_r+0x70>
 8009648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800964c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009650:	d026      	beq.n	80096a0 <__ssputs_r+0x6c>
 8009652:	6965      	ldr	r5, [r4, #20]
 8009654:	6909      	ldr	r1, [r1, #16]
 8009656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800965a:	eba3 0901 	sub.w	r9, r3, r1
 800965e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009662:	1c7b      	adds	r3, r7, #1
 8009664:	444b      	add	r3, r9
 8009666:	106d      	asrs	r5, r5, #1
 8009668:	429d      	cmp	r5, r3
 800966a:	bf38      	it	cc
 800966c:	461d      	movcc	r5, r3
 800966e:	0553      	lsls	r3, r2, #21
 8009670:	d527      	bpl.n	80096c2 <__ssputs_r+0x8e>
 8009672:	4629      	mov	r1, r5
 8009674:	f7ff fbd0 	bl	8008e18 <_malloc_r>
 8009678:	4606      	mov	r6, r0
 800967a:	b360      	cbz	r0, 80096d6 <__ssputs_r+0xa2>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f000 fa06 	bl	8009a90 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x72>
 80096a4:	463e      	mov	r6, r7
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 f9c6 	bl	8009a3c <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4433      	add	r3, r6
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	462a      	mov	r2, r5
 80096c4:	f000 fa36 	bl	8009b34 <_realloc_r>
 80096c8:	4606      	mov	r6, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d1e0      	bne.n	8009690 <__ssputs_r+0x5c>
 80096ce:	6921      	ldr	r1, [r4, #16]
 80096d0:	4650      	mov	r0, sl
 80096d2:	f7ff fb2d 	bl	8008d30 <_free_r>
 80096d6:	230c      	movs	r3, #12
 80096d8:	f8ca 3000 	str.w	r3, [sl]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e7e9      	b.n	80096be <__ssputs_r+0x8a>
	...

080096ec <_svfiprintf_r>:
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	4698      	mov	r8, r3
 80096f2:	898b      	ldrh	r3, [r1, #12]
 80096f4:	061b      	lsls	r3, r3, #24
 80096f6:	b09d      	sub	sp, #116	@ 0x74
 80096f8:	4607      	mov	r7, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	4614      	mov	r4, r2
 80096fe:	d510      	bpl.n	8009722 <_svfiprintf_r+0x36>
 8009700:	690b      	ldr	r3, [r1, #16]
 8009702:	b973      	cbnz	r3, 8009722 <_svfiprintf_r+0x36>
 8009704:	2140      	movs	r1, #64	@ 0x40
 8009706:	f7ff fb87 	bl	8008e18 <_malloc_r>
 800970a:	6028      	str	r0, [r5, #0]
 800970c:	6128      	str	r0, [r5, #16]
 800970e:	b930      	cbnz	r0, 800971e <_svfiprintf_r+0x32>
 8009710:	230c      	movs	r3, #12
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	b01d      	add	sp, #116	@ 0x74
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	2340      	movs	r3, #64	@ 0x40
 8009720:	616b      	str	r3, [r5, #20]
 8009722:	2300      	movs	r3, #0
 8009724:	9309      	str	r3, [sp, #36]	@ 0x24
 8009726:	2320      	movs	r3, #32
 8009728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800972c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009730:	2330      	movs	r3, #48	@ 0x30
 8009732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098d0 <_svfiprintf_r+0x1e4>
 8009736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800973a:	f04f 0901 	mov.w	r9, #1
 800973e:	4623      	mov	r3, r4
 8009740:	469a      	mov	sl, r3
 8009742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009746:	b10a      	cbz	r2, 800974c <_svfiprintf_r+0x60>
 8009748:	2a25      	cmp	r2, #37	@ 0x25
 800974a:	d1f9      	bne.n	8009740 <_svfiprintf_r+0x54>
 800974c:	ebba 0b04 	subs.w	fp, sl, r4
 8009750:	d00b      	beq.n	800976a <_svfiprintf_r+0x7e>
 8009752:	465b      	mov	r3, fp
 8009754:	4622      	mov	r2, r4
 8009756:	4629      	mov	r1, r5
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ff6b 	bl	8009634 <__ssputs_r>
 800975e:	3001      	adds	r0, #1
 8009760:	f000 80a7 	beq.w	80098b2 <_svfiprintf_r+0x1c6>
 8009764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009766:	445a      	add	r2, fp
 8009768:	9209      	str	r2, [sp, #36]	@ 0x24
 800976a:	f89a 3000 	ldrb.w	r3, [sl]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 809f 	beq.w	80098b2 <_svfiprintf_r+0x1c6>
 8009774:	2300      	movs	r3, #0
 8009776:	f04f 32ff 	mov.w	r2, #4294967295
 800977a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800977e:	f10a 0a01 	add.w	sl, sl, #1
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	9307      	str	r3, [sp, #28]
 8009786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800978a:	931a      	str	r3, [sp, #104]	@ 0x68
 800978c:	4654      	mov	r4, sl
 800978e:	2205      	movs	r2, #5
 8009790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009794:	484e      	ldr	r0, [pc, #312]	@ (80098d0 <_svfiprintf_r+0x1e4>)
 8009796:	f7f6 fd33 	bl	8000200 <memchr>
 800979a:	9a04      	ldr	r2, [sp, #16]
 800979c:	b9d8      	cbnz	r0, 80097d6 <_svfiprintf_r+0xea>
 800979e:	06d0      	lsls	r0, r2, #27
 80097a0:	bf44      	itt	mi
 80097a2:	2320      	movmi	r3, #32
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a8:	0711      	lsls	r1, r2, #28
 80097aa:	bf44      	itt	mi
 80097ac:	232b      	movmi	r3, #43	@ 0x2b
 80097ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b2:	f89a 3000 	ldrb.w	r3, [sl]
 80097b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b8:	d015      	beq.n	80097e6 <_svfiprintf_r+0xfa>
 80097ba:	9a07      	ldr	r2, [sp, #28]
 80097bc:	4654      	mov	r4, sl
 80097be:	2000      	movs	r0, #0
 80097c0:	f04f 0c0a 	mov.w	ip, #10
 80097c4:	4621      	mov	r1, r4
 80097c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ca:	3b30      	subs	r3, #48	@ 0x30
 80097cc:	2b09      	cmp	r3, #9
 80097ce:	d94b      	bls.n	8009868 <_svfiprintf_r+0x17c>
 80097d0:	b1b0      	cbz	r0, 8009800 <_svfiprintf_r+0x114>
 80097d2:	9207      	str	r2, [sp, #28]
 80097d4:	e014      	b.n	8009800 <_svfiprintf_r+0x114>
 80097d6:	eba0 0308 	sub.w	r3, r0, r8
 80097da:	fa09 f303 	lsl.w	r3, r9, r3
 80097de:	4313      	orrs	r3, r2
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	46a2      	mov	sl, r4
 80097e4:	e7d2      	b.n	800978c <_svfiprintf_r+0xa0>
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	1d19      	adds	r1, r3, #4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9103      	str	r1, [sp, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfbb      	ittet	lt
 80097f2:	425b      	neglt	r3, r3
 80097f4:	f042 0202 	orrlt.w	r2, r2, #2
 80097f8:	9307      	strge	r3, [sp, #28]
 80097fa:	9307      	strlt	r3, [sp, #28]
 80097fc:	bfb8      	it	lt
 80097fe:	9204      	strlt	r2, [sp, #16]
 8009800:	7823      	ldrb	r3, [r4, #0]
 8009802:	2b2e      	cmp	r3, #46	@ 0x2e
 8009804:	d10a      	bne.n	800981c <_svfiprintf_r+0x130>
 8009806:	7863      	ldrb	r3, [r4, #1]
 8009808:	2b2a      	cmp	r3, #42	@ 0x2a
 800980a:	d132      	bne.n	8009872 <_svfiprintf_r+0x186>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9203      	str	r2, [sp, #12]
 8009814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009818:	3402      	adds	r4, #2
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098e0 <_svfiprintf_r+0x1f4>
 8009820:	7821      	ldrb	r1, [r4, #0]
 8009822:	2203      	movs	r2, #3
 8009824:	4650      	mov	r0, sl
 8009826:	f7f6 fceb 	bl	8000200 <memchr>
 800982a:	b138      	cbz	r0, 800983c <_svfiprintf_r+0x150>
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	eba0 000a 	sub.w	r0, r0, sl
 8009832:	2240      	movs	r2, #64	@ 0x40
 8009834:	4082      	lsls	r2, r0
 8009836:	4313      	orrs	r3, r2
 8009838:	3401      	adds	r4, #1
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009840:	4824      	ldr	r0, [pc, #144]	@ (80098d4 <_svfiprintf_r+0x1e8>)
 8009842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009846:	2206      	movs	r2, #6
 8009848:	f7f6 fcda 	bl	8000200 <memchr>
 800984c:	2800      	cmp	r0, #0
 800984e:	d036      	beq.n	80098be <_svfiprintf_r+0x1d2>
 8009850:	4b21      	ldr	r3, [pc, #132]	@ (80098d8 <_svfiprintf_r+0x1ec>)
 8009852:	bb1b      	cbnz	r3, 800989c <_svfiprintf_r+0x1b0>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	3307      	adds	r3, #7
 8009858:	f023 0307 	bic.w	r3, r3, #7
 800985c:	3308      	adds	r3, #8
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009862:	4433      	add	r3, r6
 8009864:	9309      	str	r3, [sp, #36]	@ 0x24
 8009866:	e76a      	b.n	800973e <_svfiprintf_r+0x52>
 8009868:	fb0c 3202 	mla	r2, ip, r2, r3
 800986c:	460c      	mov	r4, r1
 800986e:	2001      	movs	r0, #1
 8009870:	e7a8      	b.n	80097c4 <_svfiprintf_r+0xd8>
 8009872:	2300      	movs	r3, #0
 8009874:	3401      	adds	r4, #1
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	4619      	mov	r1, r3
 800987a:	f04f 0c0a 	mov.w	ip, #10
 800987e:	4620      	mov	r0, r4
 8009880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009884:	3a30      	subs	r2, #48	@ 0x30
 8009886:	2a09      	cmp	r2, #9
 8009888:	d903      	bls.n	8009892 <_svfiprintf_r+0x1a6>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c6      	beq.n	800981c <_svfiprintf_r+0x130>
 800988e:	9105      	str	r1, [sp, #20]
 8009890:	e7c4      	b.n	800981c <_svfiprintf_r+0x130>
 8009892:	fb0c 2101 	mla	r1, ip, r1, r2
 8009896:	4604      	mov	r4, r0
 8009898:	2301      	movs	r3, #1
 800989a:	e7f0      	b.n	800987e <_svfiprintf_r+0x192>
 800989c:	ab03      	add	r3, sp, #12
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	462a      	mov	r2, r5
 80098a2:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <_svfiprintf_r+0x1f0>)
 80098a4:	a904      	add	r1, sp, #16
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7fd fe64 	bl	8007574 <_printf_float>
 80098ac:	1c42      	adds	r2, r0, #1
 80098ae:	4606      	mov	r6, r0
 80098b0:	d1d6      	bne.n	8009860 <_svfiprintf_r+0x174>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	065b      	lsls	r3, r3, #25
 80098b6:	f53f af2d 	bmi.w	8009714 <_svfiprintf_r+0x28>
 80098ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098bc:	e72c      	b.n	8009718 <_svfiprintf_r+0x2c>
 80098be:	ab03      	add	r3, sp, #12
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	462a      	mov	r2, r5
 80098c4:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <_svfiprintf_r+0x1f0>)
 80098c6:	a904      	add	r1, sp, #16
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7fe f8eb 	bl	8007aa4 <_printf_i>
 80098ce:	e7ed      	b.n	80098ac <_svfiprintf_r+0x1c0>
 80098d0:	0800a4e8 	.word	0x0800a4e8
 80098d4:	0800a4f2 	.word	0x0800a4f2
 80098d8:	08007575 	.word	0x08007575
 80098dc:	08009635 	.word	0x08009635
 80098e0:	0800a4ee 	.word	0x0800a4ee

080098e4 <__sflush_r>:
 80098e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ec:	0716      	lsls	r6, r2, #28
 80098ee:	4605      	mov	r5, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	d454      	bmi.n	800999e <__sflush_r+0xba>
 80098f4:	684b      	ldr	r3, [r1, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dc02      	bgt.n	8009900 <__sflush_r+0x1c>
 80098fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd48      	ble.n	8009992 <__sflush_r+0xae>
 8009900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009902:	2e00      	cmp	r6, #0
 8009904:	d045      	beq.n	8009992 <__sflush_r+0xae>
 8009906:	2300      	movs	r3, #0
 8009908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800990c:	682f      	ldr	r7, [r5, #0]
 800990e:	6a21      	ldr	r1, [r4, #32]
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	d030      	beq.n	8009976 <__sflush_r+0x92>
 8009914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	0759      	lsls	r1, r3, #29
 800991a:	d505      	bpl.n	8009928 <__sflush_r+0x44>
 800991c:	6863      	ldr	r3, [r4, #4]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009922:	b10b      	cbz	r3, 8009928 <__sflush_r+0x44>
 8009924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009926:	1ad2      	subs	r2, r2, r3
 8009928:	2300      	movs	r3, #0
 800992a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800992c:	6a21      	ldr	r1, [r4, #32]
 800992e:	4628      	mov	r0, r5
 8009930:	47b0      	blx	r6
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	d106      	bne.n	8009946 <__sflush_r+0x62>
 8009938:	6829      	ldr	r1, [r5, #0]
 800993a:	291d      	cmp	r1, #29
 800993c:	d82b      	bhi.n	8009996 <__sflush_r+0xb2>
 800993e:	4a2a      	ldr	r2, [pc, #168]	@ (80099e8 <__sflush_r+0x104>)
 8009940:	410a      	asrs	r2, r1
 8009942:	07d6      	lsls	r6, r2, #31
 8009944:	d427      	bmi.n	8009996 <__sflush_r+0xb2>
 8009946:	2200      	movs	r2, #0
 8009948:	6062      	str	r2, [r4, #4]
 800994a:	04d9      	lsls	r1, r3, #19
 800994c:	6922      	ldr	r2, [r4, #16]
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	d504      	bpl.n	800995c <__sflush_r+0x78>
 8009952:	1c42      	adds	r2, r0, #1
 8009954:	d101      	bne.n	800995a <__sflush_r+0x76>
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	b903      	cbnz	r3, 800995c <__sflush_r+0x78>
 800995a:	6560      	str	r0, [r4, #84]	@ 0x54
 800995c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800995e:	602f      	str	r7, [r5, #0]
 8009960:	b1b9      	cbz	r1, 8009992 <__sflush_r+0xae>
 8009962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009966:	4299      	cmp	r1, r3
 8009968:	d002      	beq.n	8009970 <__sflush_r+0x8c>
 800996a:	4628      	mov	r0, r5
 800996c:	f7ff f9e0 	bl	8008d30 <_free_r>
 8009970:	2300      	movs	r3, #0
 8009972:	6363      	str	r3, [r4, #52]	@ 0x34
 8009974:	e00d      	b.n	8009992 <__sflush_r+0xae>
 8009976:	2301      	movs	r3, #1
 8009978:	4628      	mov	r0, r5
 800997a:	47b0      	blx	r6
 800997c:	4602      	mov	r2, r0
 800997e:	1c50      	adds	r0, r2, #1
 8009980:	d1c9      	bne.n	8009916 <__sflush_r+0x32>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0c6      	beq.n	8009916 <__sflush_r+0x32>
 8009988:	2b1d      	cmp	r3, #29
 800998a:	d001      	beq.n	8009990 <__sflush_r+0xac>
 800998c:	2b16      	cmp	r3, #22
 800998e:	d11e      	bne.n	80099ce <__sflush_r+0xea>
 8009990:	602f      	str	r7, [r5, #0]
 8009992:	2000      	movs	r0, #0
 8009994:	e022      	b.n	80099dc <__sflush_r+0xf8>
 8009996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800999a:	b21b      	sxth	r3, r3
 800999c:	e01b      	b.n	80099d6 <__sflush_r+0xf2>
 800999e:	690f      	ldr	r7, [r1, #16]
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	d0f6      	beq.n	8009992 <__sflush_r+0xae>
 80099a4:	0793      	lsls	r3, r2, #30
 80099a6:	680e      	ldr	r6, [r1, #0]
 80099a8:	bf08      	it	eq
 80099aa:	694b      	ldreq	r3, [r1, #20]
 80099ac:	600f      	str	r7, [r1, #0]
 80099ae:	bf18      	it	ne
 80099b0:	2300      	movne	r3, #0
 80099b2:	eba6 0807 	sub.w	r8, r6, r7
 80099b6:	608b      	str	r3, [r1, #8]
 80099b8:	f1b8 0f00 	cmp.w	r8, #0
 80099bc:	dde9      	ble.n	8009992 <__sflush_r+0xae>
 80099be:	6a21      	ldr	r1, [r4, #32]
 80099c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099c2:	4643      	mov	r3, r8
 80099c4:	463a      	mov	r2, r7
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	2800      	cmp	r0, #0
 80099cc:	dc08      	bgt.n	80099e0 <__sflush_r+0xfc>
 80099ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e0:	4407      	add	r7, r0
 80099e2:	eba8 0800 	sub.w	r8, r8, r0
 80099e6:	e7e7      	b.n	80099b8 <__sflush_r+0xd4>
 80099e8:	dfbffffe 	.word	0xdfbffffe

080099ec <_fflush_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	690b      	ldr	r3, [r1, #16]
 80099f0:	4605      	mov	r5, r0
 80099f2:	460c      	mov	r4, r1
 80099f4:	b913      	cbnz	r3, 80099fc <_fflush_r+0x10>
 80099f6:	2500      	movs	r5, #0
 80099f8:	4628      	mov	r0, r5
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	b118      	cbz	r0, 8009a06 <_fflush_r+0x1a>
 80099fe:	6a03      	ldr	r3, [r0, #32]
 8009a00:	b90b      	cbnz	r3, 8009a06 <_fflush_r+0x1a>
 8009a02:	f7fe f9fb 	bl	8007dfc <__sinit>
 8009a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0f3      	beq.n	80099f6 <_fflush_r+0xa>
 8009a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a10:	07d0      	lsls	r0, r2, #31
 8009a12:	d404      	bmi.n	8009a1e <_fflush_r+0x32>
 8009a14:	0599      	lsls	r1, r3, #22
 8009a16:	d402      	bmi.n	8009a1e <_fflush_r+0x32>
 8009a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a1a:	f7fe fb3a 	bl	8008092 <__retarget_lock_acquire_recursive>
 8009a1e:	4628      	mov	r0, r5
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7ff ff5f 	bl	80098e4 <__sflush_r>
 8009a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a28:	07da      	lsls	r2, r3, #31
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	d4e4      	bmi.n	80099f8 <_fflush_r+0xc>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	059b      	lsls	r3, r3, #22
 8009a32:	d4e1      	bmi.n	80099f8 <_fflush_r+0xc>
 8009a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a36:	f7fe fb2d 	bl	8008094 <__retarget_lock_release_recursive>
 8009a3a:	e7dd      	b.n	80099f8 <_fflush_r+0xc>

08009a3c <memmove>:
 8009a3c:	4288      	cmp	r0, r1
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	eb01 0402 	add.w	r4, r1, r2
 8009a44:	d902      	bls.n	8009a4c <memmove+0x10>
 8009a46:	4284      	cmp	r4, r0
 8009a48:	4623      	mov	r3, r4
 8009a4a:	d807      	bhi.n	8009a5c <memmove+0x20>
 8009a4c:	1e43      	subs	r3, r0, #1
 8009a4e:	42a1      	cmp	r1, r4
 8009a50:	d008      	beq.n	8009a64 <memmove+0x28>
 8009a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a5a:	e7f8      	b.n	8009a4e <memmove+0x12>
 8009a5c:	4402      	add	r2, r0
 8009a5e:	4601      	mov	r1, r0
 8009a60:	428a      	cmp	r2, r1
 8009a62:	d100      	bne.n	8009a66 <memmove+0x2a>
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a6e:	e7f7      	b.n	8009a60 <memmove+0x24>

08009a70 <_sbrk_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	@ (8009a8c <_sbrk_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f8 fd08 	bl	8002490 <_sbrk>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_sbrk_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_sbrk_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	2000a9b8 	.word	0x2000a9b8

08009a90 <memcpy>:
 8009a90:	440a      	add	r2, r1
 8009a92:	4291      	cmp	r1, r2
 8009a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a98:	d100      	bne.n	8009a9c <memcpy+0xc>
 8009a9a:	4770      	bx	lr
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa6:	4291      	cmp	r1, r2
 8009aa8:	d1f9      	bne.n	8009a9e <memcpy+0xe>
 8009aaa:	bd10      	pop	{r4, pc}

08009aac <__assert_func>:
 8009aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aae:	4614      	mov	r4, r2
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <__assert_func+0x2c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	68d8      	ldr	r0, [r3, #12]
 8009aba:	b954      	cbnz	r4, 8009ad2 <__assert_func+0x26>
 8009abc:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <__assert_func+0x30>)
 8009abe:	461c      	mov	r4, r3
 8009ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ac4:	9100      	str	r1, [sp, #0]
 8009ac6:	462b      	mov	r3, r5
 8009ac8:	4905      	ldr	r1, [pc, #20]	@ (8009ae0 <__assert_func+0x34>)
 8009aca:	f000 f86f 	bl	8009bac <fiprintf>
 8009ace:	f000 f87f 	bl	8009bd0 <abort>
 8009ad2:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <__assert_func+0x38>)
 8009ad4:	e7f4      	b.n	8009ac0 <__assert_func+0x14>
 8009ad6:	bf00      	nop
 8009ad8:	20006020 	.word	0x20006020
 8009adc:	0800a53e 	.word	0x0800a53e
 8009ae0:	0800a510 	.word	0x0800a510
 8009ae4:	0800a503 	.word	0x0800a503

08009ae8 <_calloc_r>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	fba1 5402 	umull	r5, r4, r1, r2
 8009aee:	b93c      	cbnz	r4, 8009b00 <_calloc_r+0x18>
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7ff f991 	bl	8008e18 <_malloc_r>
 8009af6:	4606      	mov	r6, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <_calloc_r+0x1e>
 8009afa:	2600      	movs	r6, #0
 8009afc:	4630      	mov	r0, r6
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	220c      	movs	r2, #12
 8009b02:	6002      	str	r2, [r0, #0]
 8009b04:	e7f9      	b.n	8009afa <_calloc_r+0x12>
 8009b06:	462a      	mov	r2, r5
 8009b08:	4621      	mov	r1, r4
 8009b0a:	f7fe fa44 	bl	8007f96 <memset>
 8009b0e:	e7f5      	b.n	8009afc <_calloc_r+0x14>

08009b10 <__ascii_mbtowc>:
 8009b10:	b082      	sub	sp, #8
 8009b12:	b901      	cbnz	r1, 8009b16 <__ascii_mbtowc+0x6>
 8009b14:	a901      	add	r1, sp, #4
 8009b16:	b142      	cbz	r2, 8009b2a <__ascii_mbtowc+0x1a>
 8009b18:	b14b      	cbz	r3, 8009b2e <__ascii_mbtowc+0x1e>
 8009b1a:	7813      	ldrb	r3, [r2, #0]
 8009b1c:	600b      	str	r3, [r1, #0]
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	1e10      	subs	r0, r2, #0
 8009b22:	bf18      	it	ne
 8009b24:	2001      	movne	r0, #1
 8009b26:	b002      	add	sp, #8
 8009b28:	4770      	bx	lr
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	e7fb      	b.n	8009b26 <__ascii_mbtowc+0x16>
 8009b2e:	f06f 0001 	mvn.w	r0, #1
 8009b32:	e7f8      	b.n	8009b26 <__ascii_mbtowc+0x16>

08009b34 <_realloc_r>:
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	4680      	mov	r8, r0
 8009b3a:	4615      	mov	r5, r2
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	b921      	cbnz	r1, 8009b4a <_realloc_r+0x16>
 8009b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b44:	4611      	mov	r1, r2
 8009b46:	f7ff b967 	b.w	8008e18 <_malloc_r>
 8009b4a:	b92a      	cbnz	r2, 8009b58 <_realloc_r+0x24>
 8009b4c:	f7ff f8f0 	bl	8008d30 <_free_r>
 8009b50:	2400      	movs	r4, #0
 8009b52:	4620      	mov	r0, r4
 8009b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b58:	f000 f841 	bl	8009bde <_malloc_usable_size_r>
 8009b5c:	4285      	cmp	r5, r0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	d802      	bhi.n	8009b68 <_realloc_r+0x34>
 8009b62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b66:	d8f4      	bhi.n	8009b52 <_realloc_r+0x1e>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	f7ff f954 	bl	8008e18 <_malloc_r>
 8009b70:	4607      	mov	r7, r0
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0ec      	beq.n	8009b50 <_realloc_r+0x1c>
 8009b76:	42b5      	cmp	r5, r6
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	bf28      	it	cs
 8009b7e:	4632      	movcs	r2, r6
 8009b80:	f7ff ff86 	bl	8009a90 <memcpy>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4640      	mov	r0, r8
 8009b88:	f7ff f8d2 	bl	8008d30 <_free_r>
 8009b8c:	463c      	mov	r4, r7
 8009b8e:	e7e0      	b.n	8009b52 <_realloc_r+0x1e>

08009b90 <__ascii_wctomb>:
 8009b90:	4603      	mov	r3, r0
 8009b92:	4608      	mov	r0, r1
 8009b94:	b141      	cbz	r1, 8009ba8 <__ascii_wctomb+0x18>
 8009b96:	2aff      	cmp	r2, #255	@ 0xff
 8009b98:	d904      	bls.n	8009ba4 <__ascii_wctomb+0x14>
 8009b9a:	228a      	movs	r2, #138	@ 0x8a
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	4770      	bx	lr
 8009ba4:	700a      	strb	r2, [r1, #0]
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	4770      	bx	lr
	...

08009bac <fiprintf>:
 8009bac:	b40e      	push	{r1, r2, r3}
 8009bae:	b503      	push	{r0, r1, lr}
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	4805      	ldr	r0, [pc, #20]	@ (8009bcc <fiprintf+0x20>)
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	f000 f83f 	bl	8009c40 <_vfiprintf_r>
 8009bc2:	b002      	add	sp, #8
 8009bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc8:	b003      	add	sp, #12
 8009bca:	4770      	bx	lr
 8009bcc:	20006020 	.word	0x20006020

08009bd0 <abort>:
 8009bd0:	b508      	push	{r3, lr}
 8009bd2:	2006      	movs	r0, #6
 8009bd4:	f000 fa08 	bl	8009fe8 <raise>
 8009bd8:	2001      	movs	r0, #1
 8009bda:	f7f8 fbe1 	bl	80023a0 <_exit>

08009bde <_malloc_usable_size_r>:
 8009bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009be2:	1f18      	subs	r0, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bfbc      	itt	lt
 8009be8:	580b      	ldrlt	r3, [r1, r0]
 8009bea:	18c0      	addlt	r0, r0, r3
 8009bec:	4770      	bx	lr

08009bee <__sfputc_r>:
 8009bee:	6893      	ldr	r3, [r2, #8]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	b410      	push	{r4}
 8009bf6:	6093      	str	r3, [r2, #8]
 8009bf8:	da08      	bge.n	8009c0c <__sfputc_r+0x1e>
 8009bfa:	6994      	ldr	r4, [r2, #24]
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	db01      	blt.n	8009c04 <__sfputc_r+0x16>
 8009c00:	290a      	cmp	r1, #10
 8009c02:	d103      	bne.n	8009c0c <__sfputc_r+0x1e>
 8009c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c08:	f000 b932 	b.w	8009e70 <__swbuf_r>
 8009c0c:	6813      	ldr	r3, [r2, #0]
 8009c0e:	1c58      	adds	r0, r3, #1
 8009c10:	6010      	str	r0, [r2, #0]
 8009c12:	7019      	strb	r1, [r3, #0]
 8009c14:	4608      	mov	r0, r1
 8009c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <__sfputs_r>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	4614      	mov	r4, r2
 8009c24:	18d5      	adds	r5, r2, r3
 8009c26:	42ac      	cmp	r4, r5
 8009c28:	d101      	bne.n	8009c2e <__sfputs_r+0x12>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e007      	b.n	8009c3e <__sfputs_r+0x22>
 8009c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c32:	463a      	mov	r2, r7
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ffda 	bl	8009bee <__sfputc_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d1f3      	bne.n	8009c26 <__sfputs_r+0xa>
 8009c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c40 <_vfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	460d      	mov	r5, r1
 8009c46:	b09d      	sub	sp, #116	@ 0x74
 8009c48:	4614      	mov	r4, r2
 8009c4a:	4698      	mov	r8, r3
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	b118      	cbz	r0, 8009c58 <_vfiprintf_r+0x18>
 8009c50:	6a03      	ldr	r3, [r0, #32]
 8009c52:	b90b      	cbnz	r3, 8009c58 <_vfiprintf_r+0x18>
 8009c54:	f7fe f8d2 	bl	8007dfc <__sinit>
 8009c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x2a>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x2a>
 8009c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c66:	f7fe fa14 	bl	8008092 <__retarget_lock_acquire_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	071b      	lsls	r3, r3, #28
 8009c6e:	d501      	bpl.n	8009c74 <_vfiprintf_r+0x34>
 8009c70:	692b      	ldr	r3, [r5, #16]
 8009c72:	b99b      	cbnz	r3, 8009c9c <_vfiprintf_r+0x5c>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 f938 	bl	8009eec <__swsetup_r>
 8009c7c:	b170      	cbz	r0, 8009c9c <_vfiprintf_r+0x5c>
 8009c7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c80:	07dc      	lsls	r4, r3, #31
 8009c82:	d504      	bpl.n	8009c8e <_vfiprintf_r+0x4e>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	b01d      	add	sp, #116	@ 0x74
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	0598      	lsls	r0, r3, #22
 8009c92:	d4f7      	bmi.n	8009c84 <_vfiprintf_r+0x44>
 8009c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c96:	f7fe f9fd 	bl	8008094 <__retarget_lock_release_recursive>
 8009c9a:	e7f3      	b.n	8009c84 <_vfiprintf_r+0x44>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009caa:	2330      	movs	r3, #48	@ 0x30
 8009cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e5c <_vfiprintf_r+0x21c>
 8009cb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cb4:	f04f 0901 	mov.w	r9, #1
 8009cb8:	4623      	mov	r3, r4
 8009cba:	469a      	mov	sl, r3
 8009cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc0:	b10a      	cbz	r2, 8009cc6 <_vfiprintf_r+0x86>
 8009cc2:	2a25      	cmp	r2, #37	@ 0x25
 8009cc4:	d1f9      	bne.n	8009cba <_vfiprintf_r+0x7a>
 8009cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cca:	d00b      	beq.n	8009ce4 <_vfiprintf_r+0xa4>
 8009ccc:	465b      	mov	r3, fp
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7ff ffa2 	bl	8009c1c <__sfputs_r>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f000 80a7 	beq.w	8009e2c <_vfiprintf_r+0x1ec>
 8009cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ce0:	445a      	add	r2, fp
 8009ce2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 809f 	beq.w	8009e2c <_vfiprintf_r+0x1ec>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	9307      	str	r3, [sp, #28]
 8009d00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d06:	4654      	mov	r4, sl
 8009d08:	2205      	movs	r2, #5
 8009d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0e:	4853      	ldr	r0, [pc, #332]	@ (8009e5c <_vfiprintf_r+0x21c>)
 8009d10:	f7f6 fa76 	bl	8000200 <memchr>
 8009d14:	9a04      	ldr	r2, [sp, #16]
 8009d16:	b9d8      	cbnz	r0, 8009d50 <_vfiprintf_r+0x110>
 8009d18:	06d1      	lsls	r1, r2, #27
 8009d1a:	bf44      	itt	mi
 8009d1c:	2320      	movmi	r3, #32
 8009d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d22:	0713      	lsls	r3, r2, #28
 8009d24:	bf44      	itt	mi
 8009d26:	232b      	movmi	r3, #43	@ 0x2b
 8009d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d32:	d015      	beq.n	8009d60 <_vfiprintf_r+0x120>
 8009d34:	9a07      	ldr	r2, [sp, #28]
 8009d36:	4654      	mov	r4, sl
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f04f 0c0a 	mov.w	ip, #10
 8009d3e:	4621      	mov	r1, r4
 8009d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d44:	3b30      	subs	r3, #48	@ 0x30
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d94b      	bls.n	8009de2 <_vfiprintf_r+0x1a2>
 8009d4a:	b1b0      	cbz	r0, 8009d7a <_vfiprintf_r+0x13a>
 8009d4c:	9207      	str	r2, [sp, #28]
 8009d4e:	e014      	b.n	8009d7a <_vfiprintf_r+0x13a>
 8009d50:	eba0 0308 	sub.w	r3, r0, r8
 8009d54:	fa09 f303 	lsl.w	r3, r9, r3
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	46a2      	mov	sl, r4
 8009d5e:	e7d2      	b.n	8009d06 <_vfiprintf_r+0xc6>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	1d19      	adds	r1, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	9103      	str	r1, [sp, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfbb      	ittet	lt
 8009d6c:	425b      	neglt	r3, r3
 8009d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d72:	9307      	strge	r3, [sp, #28]
 8009d74:	9307      	strlt	r3, [sp, #28]
 8009d76:	bfb8      	it	lt
 8009d78:	9204      	strlt	r2, [sp, #16]
 8009d7a:	7823      	ldrb	r3, [r4, #0]
 8009d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d7e:	d10a      	bne.n	8009d96 <_vfiprintf_r+0x156>
 8009d80:	7863      	ldrb	r3, [r4, #1]
 8009d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d84:	d132      	bne.n	8009dec <_vfiprintf_r+0x1ac>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	9203      	str	r2, [sp, #12]
 8009d8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d92:	3402      	adds	r4, #2
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e6c <_vfiprintf_r+0x22c>
 8009d9a:	7821      	ldrb	r1, [r4, #0]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	4650      	mov	r0, sl
 8009da0:	f7f6 fa2e 	bl	8000200 <memchr>
 8009da4:	b138      	cbz	r0, 8009db6 <_vfiprintf_r+0x176>
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	eba0 000a 	sub.w	r0, r0, sl
 8009dac:	2240      	movs	r2, #64	@ 0x40
 8009dae:	4082      	lsls	r2, r0
 8009db0:	4313      	orrs	r3, r2
 8009db2:	3401      	adds	r4, #1
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dba:	4829      	ldr	r0, [pc, #164]	@ (8009e60 <_vfiprintf_r+0x220>)
 8009dbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dc0:	2206      	movs	r2, #6
 8009dc2:	f7f6 fa1d 	bl	8000200 <memchr>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d03f      	beq.n	8009e4a <_vfiprintf_r+0x20a>
 8009dca:	4b26      	ldr	r3, [pc, #152]	@ (8009e64 <_vfiprintf_r+0x224>)
 8009dcc:	bb1b      	cbnz	r3, 8009e16 <_vfiprintf_r+0x1d6>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	3307      	adds	r3, #7
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ddc:	443b      	add	r3, r7
 8009dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de0:	e76a      	b.n	8009cb8 <_vfiprintf_r+0x78>
 8009de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009de6:	460c      	mov	r4, r1
 8009de8:	2001      	movs	r0, #1
 8009dea:	e7a8      	b.n	8009d3e <_vfiprintf_r+0xfe>
 8009dec:	2300      	movs	r3, #0
 8009dee:	3401      	adds	r4, #1
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	4619      	mov	r1, r3
 8009df4:	f04f 0c0a 	mov.w	ip, #10
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfe:	3a30      	subs	r2, #48	@ 0x30
 8009e00:	2a09      	cmp	r2, #9
 8009e02:	d903      	bls.n	8009e0c <_vfiprintf_r+0x1cc>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0c6      	beq.n	8009d96 <_vfiprintf_r+0x156>
 8009e08:	9105      	str	r1, [sp, #20]
 8009e0a:	e7c4      	b.n	8009d96 <_vfiprintf_r+0x156>
 8009e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e10:	4604      	mov	r4, r0
 8009e12:	2301      	movs	r3, #1
 8009e14:	e7f0      	b.n	8009df8 <_vfiprintf_r+0x1b8>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <_vfiprintf_r+0x228>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7fd fba7 	bl	8007574 <_printf_float>
 8009e26:	4607      	mov	r7, r0
 8009e28:	1c78      	adds	r0, r7, #1
 8009e2a:	d1d6      	bne.n	8009dda <_vfiprintf_r+0x19a>
 8009e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e2e:	07d9      	lsls	r1, r3, #31
 8009e30:	d405      	bmi.n	8009e3e <_vfiprintf_r+0x1fe>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_vfiprintf_r+0x1fe>
 8009e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e3a:	f7fe f92b 	bl	8008094 <__retarget_lock_release_recursive>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	065b      	lsls	r3, r3, #25
 8009e42:	f53f af1f 	bmi.w	8009c84 <_vfiprintf_r+0x44>
 8009e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e48:	e71e      	b.n	8009c88 <_vfiprintf_r+0x48>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <_vfiprintf_r+0x228>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7fd fe25 	bl	8007aa4 <_printf_i>
 8009e5a:	e7e4      	b.n	8009e26 <_vfiprintf_r+0x1e6>
 8009e5c:	0800a4e8 	.word	0x0800a4e8
 8009e60:	0800a4f2 	.word	0x0800a4f2
 8009e64:	08007575 	.word	0x08007575
 8009e68:	08009c1d 	.word	0x08009c1d
 8009e6c:	0800a4ee 	.word	0x0800a4ee

08009e70 <__swbuf_r>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	460e      	mov	r6, r1
 8009e74:	4614      	mov	r4, r2
 8009e76:	4605      	mov	r5, r0
 8009e78:	b118      	cbz	r0, 8009e82 <__swbuf_r+0x12>
 8009e7a:	6a03      	ldr	r3, [r0, #32]
 8009e7c:	b90b      	cbnz	r3, 8009e82 <__swbuf_r+0x12>
 8009e7e:	f7fd ffbd 	bl	8007dfc <__sinit>
 8009e82:	69a3      	ldr	r3, [r4, #24]
 8009e84:	60a3      	str	r3, [r4, #8]
 8009e86:	89a3      	ldrh	r3, [r4, #12]
 8009e88:	071a      	lsls	r2, r3, #28
 8009e8a:	d501      	bpl.n	8009e90 <__swbuf_r+0x20>
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	b943      	cbnz	r3, 8009ea2 <__swbuf_r+0x32>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f82a 	bl	8009eec <__swsetup_r>
 8009e98:	b118      	cbz	r0, 8009ea2 <__swbuf_r+0x32>
 8009e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	6922      	ldr	r2, [r4, #16]
 8009ea6:	1a98      	subs	r0, r3, r2
 8009ea8:	6963      	ldr	r3, [r4, #20]
 8009eaa:	b2f6      	uxtb	r6, r6
 8009eac:	4283      	cmp	r3, r0
 8009eae:	4637      	mov	r7, r6
 8009eb0:	dc05      	bgt.n	8009ebe <__swbuf_r+0x4e>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f7ff fd99 	bl	80099ec <_fflush_r>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d1ed      	bne.n	8009e9a <__swbuf_r+0x2a>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	6022      	str	r2, [r4, #0]
 8009eca:	701e      	strb	r6, [r3, #0]
 8009ecc:	6962      	ldr	r2, [r4, #20]
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d004      	beq.n	8009ede <__swbuf_r+0x6e>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d5e1      	bpl.n	8009e9e <__swbuf_r+0x2e>
 8009eda:	2e0a      	cmp	r6, #10
 8009edc:	d1df      	bne.n	8009e9e <__swbuf_r+0x2e>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f7ff fd83 	bl	80099ec <_fflush_r>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d0d9      	beq.n	8009e9e <__swbuf_r+0x2e>
 8009eea:	e7d6      	b.n	8009e9a <__swbuf_r+0x2a>

08009eec <__swsetup_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4b29      	ldr	r3, [pc, #164]	@ (8009f94 <__swsetup_r+0xa8>)
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	b118      	cbz	r0, 8009f00 <__swsetup_r+0x14>
 8009ef8:	6a03      	ldr	r3, [r0, #32]
 8009efa:	b90b      	cbnz	r3, 8009f00 <__swsetup_r+0x14>
 8009efc:	f7fd ff7e 	bl	8007dfc <__sinit>
 8009f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f04:	0719      	lsls	r1, r3, #28
 8009f06:	d422      	bmi.n	8009f4e <__swsetup_r+0x62>
 8009f08:	06da      	lsls	r2, r3, #27
 8009f0a:	d407      	bmi.n	8009f1c <__swsetup_r+0x30>
 8009f0c:	2209      	movs	r2, #9
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1a:	e033      	b.n	8009f84 <__swsetup_r+0x98>
 8009f1c:	0758      	lsls	r0, r3, #29
 8009f1e:	d512      	bpl.n	8009f46 <__swsetup_r+0x5a>
 8009f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f22:	b141      	cbz	r1, 8009f36 <__swsetup_r+0x4a>
 8009f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <__swsetup_r+0x46>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f7fe feff 	bl	8008d30 <_free_r>
 8009f32:	2300      	movs	r3, #0
 8009f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	b94b      	cbnz	r3, 8009f66 <__swsetup_r+0x7a>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f5c:	d003      	beq.n	8009f66 <__swsetup_r+0x7a>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 f883 	bl	800a06c <__smakebuf_r>
 8009f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6a:	f013 0201 	ands.w	r2, r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <__swsetup_r+0x9a>
 8009f70:	2200      	movs	r2, #0
 8009f72:	60a2      	str	r2, [r4, #8]
 8009f74:	6962      	ldr	r2, [r4, #20]
 8009f76:	4252      	negs	r2, r2
 8009f78:	61a2      	str	r2, [r4, #24]
 8009f7a:	6922      	ldr	r2, [r4, #16]
 8009f7c:	b942      	cbnz	r2, 8009f90 <__swsetup_r+0xa4>
 8009f7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f82:	d1c5      	bne.n	8009f10 <__swsetup_r+0x24>
 8009f84:	bd38      	pop	{r3, r4, r5, pc}
 8009f86:	0799      	lsls	r1, r3, #30
 8009f88:	bf58      	it	pl
 8009f8a:	6962      	ldrpl	r2, [r4, #20]
 8009f8c:	60a2      	str	r2, [r4, #8]
 8009f8e:	e7f4      	b.n	8009f7a <__swsetup_r+0x8e>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e7f7      	b.n	8009f84 <__swsetup_r+0x98>
 8009f94:	20006020 	.word	0x20006020

08009f98 <_raise_r>:
 8009f98:	291f      	cmp	r1, #31
 8009f9a:	b538      	push	{r3, r4, r5, lr}
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	d904      	bls.n	8009fac <_raise_r+0x14>
 8009fa2:	2316      	movs	r3, #22
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fae:	b112      	cbz	r2, 8009fb6 <_raise_r+0x1e>
 8009fb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fb4:	b94b      	cbnz	r3, 8009fca <_raise_r+0x32>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 f830 	bl	800a01c <_getpid_r>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc6:	f000 b817 	b.w	8009ff8 <_kill_r>
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d00a      	beq.n	8009fe4 <_raise_r+0x4c>
 8009fce:	1c59      	adds	r1, r3, #1
 8009fd0:	d103      	bne.n	8009fda <_raise_r+0x42>
 8009fd2:	2316      	movs	r3, #22
 8009fd4:	6003      	str	r3, [r0, #0]
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	e7e7      	b.n	8009faa <_raise_r+0x12>
 8009fda:	2100      	movs	r1, #0
 8009fdc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	4798      	blx	r3
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e7e0      	b.n	8009faa <_raise_r+0x12>

08009fe8 <raise>:
 8009fe8:	4b02      	ldr	r3, [pc, #8]	@ (8009ff4 <raise+0xc>)
 8009fea:	4601      	mov	r1, r0
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	f7ff bfd3 	b.w	8009f98 <_raise_r>
 8009ff2:	bf00      	nop
 8009ff4:	20006020 	.word	0x20006020

08009ff8 <_kill_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	@ (800a018 <_kill_r+0x20>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	f7f8 f9bb 	bl	8002380 <_kill>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d102      	bne.n	800a014 <_kill_r+0x1c>
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	b103      	cbz	r3, 800a014 <_kill_r+0x1c>
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	bf00      	nop
 800a018:	2000a9b8 	.word	0x2000a9b8

0800a01c <_getpid_r>:
 800a01c:	f7f8 b9a8 	b.w	8002370 <_getpid>

0800a020 <__swhatbuf_r>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	460c      	mov	r4, r1
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2900      	cmp	r1, #0
 800a02a:	b096      	sub	sp, #88	@ 0x58
 800a02c:	4615      	mov	r5, r2
 800a02e:	461e      	mov	r6, r3
 800a030:	da0d      	bge.n	800a04e <__swhatbuf_r+0x2e>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a038:	f04f 0100 	mov.w	r1, #0
 800a03c:	bf14      	ite	ne
 800a03e:	2340      	movne	r3, #64	@ 0x40
 800a040:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a044:	2000      	movs	r0, #0
 800a046:	6031      	str	r1, [r6, #0]
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	b016      	add	sp, #88	@ 0x58
 800a04c:	bd70      	pop	{r4, r5, r6, pc}
 800a04e:	466a      	mov	r2, sp
 800a050:	f000 f848 	bl	800a0e4 <_fstat_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	dbec      	blt.n	800a032 <__swhatbuf_r+0x12>
 800a058:	9901      	ldr	r1, [sp, #4]
 800a05a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a05e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a062:	4259      	negs	r1, r3
 800a064:	4159      	adcs	r1, r3
 800a066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a06a:	e7eb      	b.n	800a044 <__swhatbuf_r+0x24>

0800a06c <__smakebuf_r>:
 800a06c:	898b      	ldrh	r3, [r1, #12]
 800a06e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a070:	079d      	lsls	r5, r3, #30
 800a072:	4606      	mov	r6, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d507      	bpl.n	800a088 <__smakebuf_r+0x1c>
 800a078:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2301      	movs	r3, #1
 800a082:	6163      	str	r3, [r4, #20]
 800a084:	b003      	add	sp, #12
 800a086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a088:	ab01      	add	r3, sp, #4
 800a08a:	466a      	mov	r2, sp
 800a08c:	f7ff ffc8 	bl	800a020 <__swhatbuf_r>
 800a090:	9f00      	ldr	r7, [sp, #0]
 800a092:	4605      	mov	r5, r0
 800a094:	4639      	mov	r1, r7
 800a096:	4630      	mov	r0, r6
 800a098:	f7fe febe 	bl	8008e18 <_malloc_r>
 800a09c:	b948      	cbnz	r0, 800a0b2 <__smakebuf_r+0x46>
 800a09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a2:	059a      	lsls	r2, r3, #22
 800a0a4:	d4ee      	bmi.n	800a084 <__smakebuf_r+0x18>
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	f043 0302 	orr.w	r3, r3, #2
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	e7e2      	b.n	800a078 <__smakebuf_r+0xc>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	6020      	str	r0, [r4, #0]
 800a0b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0c2:	b15b      	cbz	r3, 800a0dc <__smakebuf_r+0x70>
 800a0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f000 f81d 	bl	800a108 <_isatty_r>
 800a0ce:	b128      	cbz	r0, 800a0dc <__smakebuf_r+0x70>
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	f023 0303 	bic.w	r3, r3, #3
 800a0d6:	f043 0301 	orr.w	r3, r3, #1
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	431d      	orrs	r5, r3
 800a0e0:	81a5      	strh	r5, [r4, #12]
 800a0e2:	e7cf      	b.n	800a084 <__smakebuf_r+0x18>

0800a0e4 <_fstat_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	@ (800a104 <_fstat_r+0x20>)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	f7f8 f9a5 	bl	8002440 <_fstat>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d102      	bne.n	800a100 <_fstat_r+0x1c>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	b103      	cbz	r3, 800a100 <_fstat_r+0x1c>
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	bd38      	pop	{r3, r4, r5, pc}
 800a102:	bf00      	nop
 800a104:	2000a9b8 	.word	0x2000a9b8

0800a108 <_isatty_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d06      	ldr	r5, [pc, #24]	@ (800a124 <_isatty_r+0x1c>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	f7f8 f9a4 	bl	8002460 <_isatty>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_isatty_r+0x1a>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_isatty_r+0x1a>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	2000a9b8 	.word	0x2000a9b8

0800a128 <sqrtf>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	ed2d 8b02 	vpush	{d8}
 800a12e:	eeb0 8a40 	vmov.f32	s16, s0
 800a132:	f000 f817 	bl	800a164 <__ieee754_sqrtf>
 800a136:	eeb4 8a48 	vcmp.f32	s16, s16
 800a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13e:	d60c      	bvs.n	800a15a <sqrtf+0x32>
 800a140:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a160 <sqrtf+0x38>
 800a144:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14c:	d505      	bpl.n	800a15a <sqrtf+0x32>
 800a14e:	f7fd ff75 	bl	800803c <__errno>
 800a152:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a156:	2321      	movs	r3, #33	@ 0x21
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	ecbd 8b02 	vpop	{d8}
 800a15e:	bd08      	pop	{r3, pc}
 800a160:	00000000 	.word	0x00000000

0800a164 <__ieee754_sqrtf>:
 800a164:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a168:	4770      	bx	lr
	...

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
