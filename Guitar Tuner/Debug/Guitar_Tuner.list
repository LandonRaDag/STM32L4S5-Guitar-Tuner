
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae50  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800b010  0800b010  0000c010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f0  0800b4f0  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f0  0800b4f0  0000c4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4f8  0800b4f8  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f8  0800b4f8  0000c4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4fc  0800b4fc  0000c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b500  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048cc  200001dc  0800b6dc  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004aa8  0800b6dc  0000daa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc42  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003646  00000000  00000000  00029e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0002d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001369  00000000  00000000  0002eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a9c  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3d7  00000000  00000000  00034ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123d50  00000000  00000000  00052f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176ccc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c60  00000000  00000000  00176d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0017e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800aff8 	.word	0x0800aff8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800aff8 	.word	0x0800aff8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <createGuitarString>:
 *  Created on: Dec 2, 2024
 *      Author: Landon Ra Dagenais
 */
#include <guitar_string.h>

GuitarString createGuitarString(int number, float frequency, float targetFrequency, const char* note) {
 8000ec8:	b490      	push	{r4, r7}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6178      	str	r0, [r7, #20]
 8000ed0:	6139      	str	r1, [r7, #16]
 8000ed2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ed6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
    GuitarString string = {number, frequency, targetFrequency, note};
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    return string;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	461c      	mov	r4, r3
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	3728      	adds	r7, #40	@ 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc90      	pop	{r4, r7}
 8000f02:	4770      	bx	lr

08000f04 <initializeGuitarStrings>:

void initializeGuitarStrings(GuitarString strings[], GuitarString** currentString) {
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6178      	str	r0, [r7, #20]
 8000f0c:	6139      	str	r1, [r7, #16]

    strings[0] = createGuitarString(0, 82.41, 82.41, "E");  // Low E
 8000f0e:	697c      	ldr	r4, [r7, #20]
 8000f10:	463b      	mov	r3, r7
 8000f12:	4a34      	ldr	r2, [pc, #208]	@ (8000fe4 <initializeGuitarStrings+0xe0>)
 8000f14:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8000fe8 <initializeGuitarStrings+0xe4>
 8000f18:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8000fe8 <initializeGuitarStrings+0xe4>
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ffd2 	bl	8000ec8 <createGuitarString>
 8000f24:	463b      	mov	r3, r7
 8000f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strings[1] = createGuitarString(1, 110.00, 110.00, "A");
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f103 0410 	add.w	r4, r3, #16
 8000f32:	463b      	mov	r3, r7
 8000f34:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <initializeGuitarStrings+0xe8>)
 8000f36:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8000ff0 <initializeGuitarStrings+0xec>
 8000f3a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8000ff0 <initializeGuitarStrings+0xec>
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffc1 	bl	8000ec8 <createGuitarString>
 8000f46:	463b      	mov	r3, r7
 8000f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strings[2] = createGuitarString(2, 146.83, 146.83, "D");
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f103 0420 	add.w	r4, r3, #32
 8000f54:	463b      	mov	r3, r7
 8000f56:	4a27      	ldr	r2, [pc, #156]	@ (8000ff4 <initializeGuitarStrings+0xf0>)
 8000f58:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8000ff8 <initializeGuitarStrings+0xf4>
 8000f5c:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8000ff8 <initializeGuitarStrings+0xf4>
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffb0 	bl	8000ec8 <createGuitarString>
 8000f68:	463b      	mov	r3, r7
 8000f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strings[3] = createGuitarString(3, 196.00, 196.00, "G");
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8000f76:	463b      	mov	r3, r7
 8000f78:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <initializeGuitarStrings+0xf8>)
 8000f7a:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001000 <initializeGuitarStrings+0xfc>
 8000f7e:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001000 <initializeGuitarStrings+0xfc>
 8000f82:	2103      	movs	r1, #3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff9f 	bl	8000ec8 <createGuitarString>
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strings[4] = createGuitarString(4, 246.94, 246.94, "B");
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001004 <initializeGuitarStrings+0x100>)
 8000f9c:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001008 <initializeGuitarStrings+0x104>
 8000fa0:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001008 <initializeGuitarStrings+0x104>
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff8e 	bl	8000ec8 <createGuitarString>
 8000fac:	463b      	mov	r3, r7
 8000fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strings[5] = createGuitarString(5, 329.63, 329.63, "e");  // High E
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <initializeGuitarStrings+0x108>)
 8000fbe:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001010 <initializeGuitarStrings+0x10c>
 8000fc2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001010 <initializeGuitarStrings+0x10c>
 8000fc6:	2105      	movs	r1, #5
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff7d 	bl	8000ec8 <createGuitarString>
 8000fce:	463b      	mov	r3, r7
 8000fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Default to the first string (low E in this case)
    *currentString = &strings[0];
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	0800b010 	.word	0x0800b010
 8000fe8:	42a4d1ec 	.word	0x42a4d1ec
 8000fec:	0800b014 	.word	0x0800b014
 8000ff0:	42dc0000 	.word	0x42dc0000
 8000ff4:	0800b018 	.word	0x0800b018
 8000ff8:	4312d47b 	.word	0x4312d47b
 8000ffc:	0800b01c 	.word	0x0800b01c
 8001000:	43440000 	.word	0x43440000
 8001004:	0800b020 	.word	0x0800b020
 8001008:	4376f0a4 	.word	0x4376f0a4
 800100c:	0800b024 	.word	0x0800b024
 8001010:	43a4d0a4 	.word	0x43a4d0a4

08001014 <switchString>:

float calculateTuningOffset(const GuitarString* string) {
    return string->frequency - string->targetFrequency;
}

void switchString(GuitarString strings[], GuitarString** currentString) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]

    int currentIndex = -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	e00d      	b.n	8001046 <switchString+0x32>
        if (&strings[i] == *currentString) {
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	441a      	add	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d102      	bne.n	8001040 <switchString+0x2c>
            currentIndex = i;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	617b      	str	r3, [r7, #20]
            break;
 800103e:	e005      	b.n	800104c <switchString+0x38>
    for (int i = 0; i < 6; i++) {
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	3301      	adds	r3, #1
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	2b05      	cmp	r3, #5
 800104a:	ddee      	ble.n	800102a <switchString+0x16>
        }
    }

    int nextIndex = (currentIndex + 1) % 6;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <switchString+0x6c>)
 8001052:	fb83 3102 	smull	r3, r1, r3, r2
 8001056:	17d3      	asrs	r3, r2, #31
 8001058:	1ac9      	subs	r1, r1, r3
 800105a:	460b      	mov	r3, r1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	440b      	add	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
    *currentString = &strings[nextIndex];
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	441a      	add	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2aaaaaab 	.word	0x2aaaaaab

08001084 <yin_detect_frequency>:

#define THRESHOLD 0.025f          // Threshold for the YIN algorithm

void yin_detect_frequency(float32_t *buffer, uint32_t length, uint32_t sample_rate, GuitarString* string) {
 8001084:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001088:	b093      	sub	sp, #76	@ 0x4c
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	466b      	mov	r3, sp
 8001096:	4618      	mov	r0, r3
	float32_t min_value = 1.0f;
 8001098:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800109c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t min_index = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	643b      	str	r3, [r7, #64]	@ 0x40
	float32_t cumulative_diff[length];
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	460b      	mov	r3, r1
 80010a6:	3b01      	subs	r3, #1
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010aa:	2300      	movs	r3, #0
 80010ac:	4688      	mov	r8, r1
 80010ae:	4699      	mov	r9, r3
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010bc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010c0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010c4:	2300      	movs	r3, #0
 80010c6:	460c      	mov	r4, r1
 80010c8:	461d      	mov	r5, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	016b      	lsls	r3, r5, #5
 80010d4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010d8:	0162      	lsls	r2, r4, #5
 80010da:	008b      	lsls	r3, r1, #2
 80010dc:	3307      	adds	r3, #7
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	ebad 0d03 	sub.w	sp, sp, r3
 80010e6:	466b      	mov	r3, sp
 80010e8:	3303      	adds	r3, #3
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float32_t threshold = THRESHOLD;
 80010f0:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <yin_detect_frequency+0x1b4>)
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	float32_t target_frequency = string->targetFrequency;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t target_lag = (uint32_t)(sample_rate / target_frequency);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001104:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001110:	ee17 3a90 	vmov	r3, s15
 8001114:	623b      	str	r3, [r7, #32]

	uint32_t start_lag = target_lag - 50;
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	3b32      	subs	r3, #50	@ 0x32
 800111a:	61fb      	str	r3, [r7, #28]
	uint32_t end_lag = target_lag + 50;
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	3332      	adds	r3, #50	@ 0x32
 8001120:	61bb      	str	r3, [r7, #24]

	// Step 1: Calculate difference function
	for (uint32_t lag = start_lag ; lag < end_lag; lag++) {
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001126:	e063      	b.n	80011f0 <yin_detect_frequency+0x16c>
		float32_t sum = 0.0f;
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	@ 0x38
		for (uint32_t i = 0; i < length - lag; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
 8001132:	e01e      	b.n	8001172 <yin_detect_frequency+0xee>
			float32_t diff = buffer[i] - buffer[i + lag];
 8001134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	edc7 7a04 	vstr	s15, [r7, #16]
			sum += diff * diff;
 8001158:	edd7 7a04 	vldr	s15, [r7, #16]
 800115c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001160:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001168:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		for (uint32_t i = 0; i < length - lag; i++) {
 800116c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116e:	3301      	adds	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800117a:	429a      	cmp	r2, r3
 800117c:	d3da      	bcc.n	8001134 <yin_detect_frequency+0xb0>
		}
		cumulative_diff[lag] = sum / (float32_t)(length - lag);
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800118c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edc3 7a00 	vstr	s15, [r3]

		// Step 2: Check if cumulative difference crosses the threshold
		if (cumulative_diff[lag] < threshold && lag > 1) {
 80011a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	dd17      	ble.n	80011ea <yin_detect_frequency+0x166>
 80011ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d914      	bls.n	80011ea <yin_detect_frequency+0x166>
			if (cumulative_diff[lag] < min_value) {
 80011c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80011d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd07      	ble.n	80011ea <yin_detect_frequency+0x166>
				min_value = cumulative_diff[lag];
 80011da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	647b      	str	r3, [r7, #68]	@ 0x44
				min_index = lag;
 80011e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011e8:	643b      	str	r3, [r7, #64]	@ 0x40
	for (uint32_t lag = start_lag ; lag < end_lag; lag++) {
 80011ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ec:	3301      	adds	r3, #1
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d397      	bcc.n	8001128 <yin_detect_frequency+0xa4>
			}
		}
	}

	if (min_index > 0) {
 80011f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d014      	beq.n	8001228 <yin_detect_frequency+0x1a4>
		float32_t detected_freq = ((float32_t)sample_rate / (float32_t)min_index) + 1.0f;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800121a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800121e:	edc7 7a05 	vstr	s15, [r7, #20]
		string->frequency = detected_freq;  // Update the string's frequency
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	4685      	mov	sp, r0
	}

}
 800122a:	bf00      	nop
 800122c:	374c      	adds	r7, #76	@ 0x4c
 800122e:	46bd      	mov	sp, r7
 8001230:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	3ccccccd 	.word	0x3ccccccd

0800123c <kalmanFilter>:
#include "KalmanFilter_CMSIS.h"
#include "arm_math.h" // CMSIS-DSP library

// Function to update Kalman filter using CMSIS DSP functions
void kalmanFilter(float32_t* inputArray, float32_t* outputArray, int length) {
 800123c:	b480      	push	{r7}
 800123e:	b08d      	sub	sp, #52	@ 0x34
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	kalman_state_t kstate_cmsis;

	// Initialize the internal Kalman state
    kstate_cmsis.q = 0.01f;  // Small process noise covariance
 8001248:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <kalmanFilter+0xc4>)
 800124a:	617b      	str	r3, [r7, #20]
    kstate_cmsis.r = 0.1f;   // Small measurement noise covariance
 800124c:	4b2d      	ldr	r3, [pc, #180]	@ (8001304 <kalmanFilter+0xc8>)
 800124e:	61bb      	str	r3, [r7, #24]
    kstate_cmsis.x = 0.0f;   // Initial estimate
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    kstate_cmsis.p = 1.0f;   // Initial estimation error covariance (large uncertainty)
 8001256:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800125a:	623b      	str	r3, [r7, #32]
    kstate_cmsis.k = 0.0f;   // Kalman gain initialized to 0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < length; i++) {
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001266:	e040      	b.n	80012ea <kalmanFilter+0xae>
		kstate_cmsis.p += kstate_cmsis.q;
 8001268:	ed97 7a08 	vldr	s14, [r7, #32]
 800126c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001274:	edc7 7a08 	vstr	s15, [r7, #32]

		float32_t div = kstate_cmsis.p + kstate_cmsis.r;
 8001278:	ed97 7a08 	vldr	s14, [r7, #32]
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Calculate the Kalman gain
		kstate_cmsis.k = kstate_cmsis.p / div;
 8001288:	edd7 6a08 	vldr	s13, [r7, #32]
 800128c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001294:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		// Update the estimated value
		kstate_cmsis.x += kstate_cmsis.k * (inputArray[i] - kstate_cmsis.x);
 8001298:	ed97 7a07 	vldr	s14, [r7, #28]
 800129c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	ed93 6a00 	vldr	s12, [r3]
 80012ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80012b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	edc7 7a07 	vstr	s15, [r7, #28]

		// Update the estimation error covariance
		kstate_cmsis.p *= (1 - kstate_cmsis.k);
 80012c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80012c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	edc7 7a08 	vstr	s15, [r7, #32]

		// Store the result in the output array
		outputArray[i] = kstate_cmsis.x;
 80012d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	4413      	add	r3, r2
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80012e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e6:	3301      	adds	r3, #1
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbba      	blt.n	8001268 <kalmanFilter+0x2c>
	}


}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3734      	adds	r7, #52	@ 0x34
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	3c23d70a 	.word	0x3c23d70a
 8001304:	3dcccccd 	.word	0x3dcccccd

08001308 <toggleMode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void toggleMode() {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    if (current_mode == MODE_MICROPHONE) {
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <toggleMode+0x70>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d115      	bne.n	8001342 <toggleMode+0x3a>
        current_mode = MODE_EAR_TUNING;  // Switch to ear tuning mode
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <toggleMode+0x70>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
        HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter2);
 800131c:	4817      	ldr	r0, [pc, #92]	@ (800137c <toggleMode+0x74>)
 800131e:	f002 fff9 	bl	8004314 <HAL_DFSDM_FilterRegularStop_DMA>
        sprintf(msg, "Current mode: Ear Tuning\r\n");
 8001322:	4917      	ldr	r1, [pc, #92]	@ (8001380 <toggleMode+0x78>)
 8001324:	4817      	ldr	r0, [pc, #92]	@ (8001384 <toggleMode+0x7c>)
 8001326:	f007 fd3b 	bl	8008da0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800132a:	4816      	ldr	r0, [pc, #88]	@ (8001384 <toggleMode+0x7c>)
 800132c:	f7fe ffb8 	bl	80002a0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	4912      	ldr	r1, [pc, #72]	@ (8001384 <toggleMode+0x7c>)
 800133a:	4813      	ldr	r0, [pc, #76]	@ (8001388 <toggleMode+0x80>)
 800133c:	f006 f96a 	bl	8007614 <HAL_UART_Transmit>
        HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, mic_rec, MIC_REC_SIZE);

        sprintf(msg, "Current mode: Microphone Tuning\r\n");
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8001340:	e017      	b.n	8001372 <toggleMode+0x6a>
        current_mode = MODE_MICROPHONE;  // Switch to microphone mode
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <toggleMode+0x70>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
        HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, mic_rec, MIC_REC_SIZE);
 8001348:	f640 02c8 	movw	r2, #2248	@ 0x8c8
 800134c:	490f      	ldr	r1, [pc, #60]	@ (800138c <toggleMode+0x84>)
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <toggleMode+0x74>)
 8001350:	f002 ff5e 	bl	8004210 <HAL_DFSDM_FilterRegularStart_DMA>
        sprintf(msg, "Current mode: Microphone Tuning\r\n");
 8001354:	490e      	ldr	r1, [pc, #56]	@ (8001390 <toggleMode+0x88>)
 8001356:	480b      	ldr	r0, [pc, #44]	@ (8001384 <toggleMode+0x7c>)
 8001358:	f007 fd22 	bl	8008da0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <toggleMode+0x7c>)
 800135e:	f7fe ff9f 	bl	80002a0 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	4906      	ldr	r1, [pc, #24]	@ (8001384 <toggleMode+0x7c>)
 800136c:	4806      	ldr	r0, [pc, #24]	@ (8001388 <toggleMode+0x80>)
 800136e:	f006 f951 	bl	8007614 <HAL_UART_Transmit>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000000 	.word	0x20000000
 800137c:	20000334 	.word	0x20000334
 8001380:	0800b028 	.word	0x0800b028
 8001384:	200048c4 	.word	0x200048c4
 8001388:	200004a0 	.word	0x200004a0
 800138c:	2000053c 	.word	0x2000053c
 8001390:	0800b044 	.word	0x0800b044

08001394 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {  // Blue button on PC13
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013a4:	d136      	bne.n	8001414 <HAL_GPIO_EXTI_Callback+0x80>

    	//CHECK BUTTON RELEASE
    	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {  // Button is released
 80013a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013aa:	481c      	ldr	r0, [pc, #112]	@ (800141c <HAL_GPIO_EXTI_Callback+0x88>)
 80013ac:	f003 fee8 	bl	8005180 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d129      	bne.n	800140a <HAL_GPIO_EXTI_Callback+0x76>
            button_release_time = HAL_GetTick();
 80013b6:	f001 f97b 	bl	80026b0 <HAL_GetTick>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a18      	ldr	r2, [pc, #96]	@ (8001420 <HAL_GPIO_EXTI_Callback+0x8c>)
 80013be:	6013      	str	r3, [r2, #0]
            if (button_release_time - button_press_time >= 1000) {
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <HAL_GPIO_EXTI_Callback+0x8c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_GPIO_EXTI_Callback+0x90>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ce:	d302      	bcc.n	80013d6 <HAL_GPIO_EXTI_Callback+0x42>
                toggleMode();  // Button was held long enough
 80013d0:	f7ff ff9a 	bl	8001308 <toggleMode>
            }
        } else {  // Button is pressed
            button_press_time = HAL_GetTick();
        }
    }
}
 80013d4:	e01e      	b.n	8001414 <HAL_GPIO_EXTI_Callback+0x80>
            	switchString(strings, &currString);
 80013d6:	4914      	ldr	r1, [pc, #80]	@ (8001428 <HAL_GPIO_EXTI_Callback+0x94>)
 80013d8:	4814      	ldr	r0, [pc, #80]	@ (800142c <HAL_GPIO_EXTI_Callback+0x98>)
 80013da:	f7ff fe1b 	bl	8001014 <switchString>
    			sprintf(msg, "Switched to String %d (%s).\r\n", currString->number, currString->note);
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_GPIO_EXTI_Callback+0x94>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <HAL_GPIO_EXTI_Callback+0x94>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	4911      	ldr	r1, [pc, #68]	@ (8001430 <HAL_GPIO_EXTI_Callback+0x9c>)
 80013ec:	4811      	ldr	r0, [pc, #68]	@ (8001434 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013ee:	f007 fcd7 	bl	8008da0 <siprintf>
    		    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80013f2:	4810      	ldr	r0, [pc, #64]	@ (8001434 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013f4:	f7fe ff54 	bl	80002a0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001402:	480d      	ldr	r0, [pc, #52]	@ (8001438 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001404:	f006 f906 	bl	8007614 <HAL_UART_Transmit>
}
 8001408:	e004      	b.n	8001414 <HAL_GPIO_EXTI_Callback+0x80>
            button_press_time = HAL_GetTick();
 800140a:	f001 f951 	bl	80026b0 <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_GPIO_EXTI_Callback+0x90>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	48000800 	.word	0x48000800
 8001420:	20000538 	.word	0x20000538
 8001424:	20000534 	.word	0x20000534
 8001428:	200048bc 	.word	0x200048bc
 800142c:	2000485c 	.word	0x2000485c
 8001430:	0800b068 	.word	0x0800b068
 8001434:	200048c4 	.word	0x200048c4
 8001438:	200004a0 	.word	0x200004a0

0800143c <myDMA_XferCpltCallback>:

void myDMA_XferCpltCallback(DMA_HandleTypeDef *hdma){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    if (hdma == &hdma_dfsdm1_flt2) {  // Check if the DMA is for DFSDM
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a06      	ldr	r2, [pc, #24]	@ (8001460 <myDMA_XferCpltCallback+0x24>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d102      	bne.n	8001452 <myDMA_XferCpltCallback+0x16>
    	process = 1;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <myDMA_XferCpltCallback+0x28>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200003c0 	.word	0x200003c0
 8001464:	200048c0 	.word	0x200048c0

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f001 f8b7 	bl	80025de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f87c 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fadc 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 fa98 	bl	80019ac <MX_DMA_Init>
  MX_ADC1_Init();
 800147c:	f000 f8c8 	bl	8001610 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001480:	f000 f93e 	bl	8001700 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001484:	f000 f9f8 	bl	8001878 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001488:	f000 fa44 	bl	8001914 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 800148c:	f000 f96c 	bl	8001768 <MX_DFSDM1_Init>
  MX_OPAMP1_Init();
 8001490:	f000 f9d0 	bl	8001834 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */
  initializeGuitarStrings(strings, &currString);
 8001494:	492a      	ldr	r1, [pc, #168]	@ (8001540 <main+0xd8>)
 8001496:	482b      	ldr	r0, [pc, #172]	@ (8001544 <main+0xdc>)
 8001498:	f7ff fd34 	bl	8000f04 <initializeGuitarStrings>
  sprintf(msg, "Welcome to the tuner! Hole blue button to switch between ear tuner and mic. tap to switch strings\r\n");
 800149c:	492a      	ldr	r1, [pc, #168]	@ (8001548 <main+0xe0>)
 800149e:	482b      	ldr	r0, [pc, #172]	@ (800154c <main+0xe4>)
 80014a0:	f007 fc7e 	bl	8008da0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014a4:	4829      	ldr	r0, [pc, #164]	@ (800154c <main+0xe4>)
 80014a6:	f7fe fefb 	bl	80002a0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	4926      	ldr	r1, [pc, #152]	@ (800154c <main+0xe4>)
 80014b4:	4826      	ldr	r0, [pc, #152]	@ (8001550 <main+0xe8>)
 80014b6:	f006 f8ad 	bl	8007614 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  switch (current_mode) {
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <main+0xec>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d038      	beq.n	8001536 <main+0xce>
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d1f8      	bne.n	80014ba <main+0x52>

		  break;

	  case MODE_MICROPHONE:

		  if (process == 1){
 80014c8:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <main+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d134      	bne.n	800153a <main+0xd2>

			  mic_process(mic_rec, mic_out, BUFFER_SIZE);
 80014d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d4:	4921      	ldr	r1, [pc, #132]	@ (800155c <main+0xf4>)
 80014d6:	4822      	ldr	r0, [pc, #136]	@ (8001560 <main+0xf8>)
 80014d8:	f000 fb44 	bl	8001b64 <mic_process>

			  yin_detect_frequency(mic_out, BUFFER_SIZE, SAMPLE_RATE, currString);
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <main+0xd8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014e8:	481c      	ldr	r0, [pc, #112]	@ (800155c <main+0xf4>)
 80014ea:	f7ff fdcb 	bl	8001084 <yin_detect_frequency>
			  sprintf(msg, "Predicted frequency: %f Hz \r\n", currString->frequency);
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <main+0xd8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f83f 	bl	8000578 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4919      	ldr	r1, [pc, #100]	@ (8001564 <main+0xfc>)
 8001500:	4812      	ldr	r0, [pc, #72]	@ (800154c <main+0xe4>)
 8001502:	f007 fc4d 	bl	8008da0 <siprintf>

			  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001506:	4811      	ldr	r0, [pc, #68]	@ (800154c <main+0xe4>)
 8001508:	f7fe feca 	bl	80002a0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	490d      	ldr	r1, [pc, #52]	@ (800154c <main+0xe4>)
 8001516:	480e      	ldr	r0, [pc, #56]	@ (8001550 <main+0xe8>)
 8001518:	f006 f87c 	bl	8007614 <HAL_UART_Transmit>

			  HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter2);
 800151c:	4812      	ldr	r0, [pc, #72]	@ (8001568 <main+0x100>)
 800151e:	f002 fef9 	bl	8004314 <HAL_DFSDM_FilterRegularStop_DMA>
			  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, mic_rec, MIC_REC_SIZE);
 8001522:	f640 02c8 	movw	r2, #2248	@ 0x8c8
 8001526:	490e      	ldr	r1, [pc, #56]	@ (8001560 <main+0xf8>)
 8001528:	480f      	ldr	r0, [pc, #60]	@ (8001568 <main+0x100>)
 800152a:	f002 fe71 	bl	8004210 <HAL_DFSDM_FilterRegularStart_DMA>
			  process = 0;
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <main+0xf0>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
		  }

		  break;
 8001534:	e001      	b.n	800153a <main+0xd2>
		  break;
 8001536:	bf00      	nop
 8001538:	e7bf      	b.n	80014ba <main+0x52>
		  break;
 800153a:	bf00      	nop
	  switch (current_mode) {
 800153c:	e7bd      	b.n	80014ba <main+0x52>
 800153e:	bf00      	nop
 8001540:	200048bc 	.word	0x200048bc
 8001544:	2000485c 	.word	0x2000485c
 8001548:	0800b088 	.word	0x0800b088
 800154c:	200048c4 	.word	0x200048c4
 8001550:	200004a0 	.word	0x200004a0
 8001554:	20000000 	.word	0x20000000
 8001558:	200048c0 	.word	0x200048c0
 800155c:	2000285c 	.word	0x2000285c
 8001560:	2000053c 	.word	0x2000053c
 8001564:	0800b0ec 	.word	0x0800b0ec
 8001568:	20000334 	.word	0x20000334

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b096      	sub	sp, #88	@ 0x58
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2244      	movs	r2, #68	@ 0x44
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f007 fc73 	bl	8008e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800158e:	2000      	movs	r0, #0
 8001590:	f003 ff1c 	bl	80053cc <HAL_PWREx_ControlVoltageScaling>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800159a:	f000 faa3 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800159e:	2310      	movs	r3, #16
 80015a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a2:	2301      	movs	r3, #1
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80015aa:	23a0      	movs	r3, #160	@ 0xa0
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015b2:	2301      	movs	r3, #1
 80015b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 80015ba:	230f      	movs	r3, #15
 80015bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015be:	2302      	movs	r3, #2
 80015c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 ffa0 	bl	8005514 <HAL_RCC_OscConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015da:	f000 fa83 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	230f      	movs	r3, #15
 80015e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	2303      	movs	r3, #3
 80015e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	2105      	movs	r1, #5
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 fba6 	bl	8005d48 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001602:	f000 fa6f 	bl	8001ae4 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3758      	adds	r7, #88	@ 0x58
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
	__HAL_RCC_ADC_CLK_ENABLE();
 8001628:	4b31      	ldr	r3, [pc, #196]	@ (80016f0 <MX_ADC1_Init+0xe0>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a30      	ldr	r2, [pc, #192]	@ (80016f0 <MX_ADC1_Init+0xe0>)
 800162e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <MX_ADC1_Init+0xe0>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001640:	4b2c      	ldr	r3, [pc, #176]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001642:	4a2d      	ldr	r2, [pc, #180]	@ (80016f8 <MX_ADC1_Init+0xe8>)
 8001644:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001646:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001648:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800164c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164e:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165a:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001660:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001662:	2204      	movs	r2, #4
 8001664:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001666:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001668:	2200      	movs	r2, #0
 800166a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800166c:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 800166e:	2201      	movs	r2, #1
 8001670:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001674:	2201      	movs	r2, #1
 8001676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001680:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001682:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 800168a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 800169a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a8:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 80016aa:	f001 f9f7 	bl	8002a9c <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80016b4:	f000 fa16 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_ADC1_Init+0xec>)
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016bc:	2306      	movs	r3, #6
 80016be:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c4:	237f      	movs	r3, #127	@ 0x7f
 80016c6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016c8:	2304      	movs	r3, #4
 80016ca:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	@ (80016f4 <MX_ADC1_Init+0xe4>)
 80016d8:	f001 fcf8 	bl	80030cc <HAL_ADC_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80016e2:	f000 f9ff 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	200001f8 	.word	0x200001f8
 80016f8:	50040000 	.word	0x50040000
 80016fc:	08600004 	.word	0x08600004

08001700 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2228      	movs	r2, #40	@ 0x28
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f007 fbaa 	bl	8008e66 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_DAC1_Init+0x60>)
 8001714:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <MX_DAC1_Init+0x64>)
 8001716:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001718:	4811      	ldr	r0, [pc, #68]	@ (8001760 <MX_DAC1_Init+0x60>)
 800171a:	f002 fa16 	bl	8003b4a <HAL_DAC_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001724:	f000 f9de 	bl	8001ae4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800172c:	230a      	movs	r3, #10
 800172e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_DAC1_Init+0x60>)
 800174a:	f002 fa21 	bl	8003b90 <HAL_DAC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001754:	f000 f9c6 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200002c0 	.word	0x200002c0
 8001764:	40007400 	.word	0x40007400

08001768 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 800176c:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 800176e:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <MX_DFSDM1_Init+0xbc>)
 8001770:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001772:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 8001778:	4b29      	ldr	r3, [pc, #164]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 800177a:	2201      	movs	r2, #1
 800177c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 8001780:	2201      	movs	r2, #1
 8001782:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8001784:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 8001786:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800178a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 64;
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 800178e:	2240      	movs	r2, #64	@ 0x40
 8001790:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 8001794:	2201      	movs	r2, #1
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 8001798:	4821      	ldr	r0, [pc, #132]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 800179a:	f002 fc19 	bl	8003fd0 <HAL_DFSDM_FilterInit>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80017a4:	f000 f99e 	bl	8001ae4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <MX_DFSDM1_Init+0xc4>)
 80017ac:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ba:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017be:	2214      	movs	r2, #20
 80017c0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017c8:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017dc:	2204      	movs	r2, #4
 80017de:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 4;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <MX_DFSDM1_Init+0xc0>)
 80017fa:	f002 fb15 	bl	8003e28 <HAL_DFSDM_ChannelInit>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8001804:	f000 f96e 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001808:	2201      	movs	r2, #1
 800180a:	4909      	ldr	r1, [pc, #36]	@ (8001830 <MX_DFSDM1_Init+0xc8>)
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <MX_DFSDM1_Init+0xb8>)
 800180e:	f002 fcb9 	bl	8004184 <HAL_DFSDM_FilterConfigRegChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8001818:	f000 f964 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000334 	.word	0x20000334
 8001824:	40016200 	.word	0x40016200
 8001828:	20000388 	.word	0x20000388
 800182c:	40016040 	.word	0x40016040
 8001830:	00020004 	.word	0x00020004

08001834 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001838:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <MX_OPAMP1_Init+0x40>)
 800183c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 8001846:	220c      	movs	r2, #12
 8001848:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_LOWPOWER;
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 8001852:	2202      	movs	r2, #2
 8001854:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	@ (8001870 <MX_OPAMP1_Init+0x3c>)
 800185e:	f003 fcbf 	bl	80051e0 <HAL_OPAMP_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_OPAMP1_Init+0x38>
  {
    Error_Handler();
 8001868:	f000 f93c 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000420 	.word	0x20000420
 8001874:	40007800 	.word	0x40007800

08001878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <MX_TIM2_Init+0x98>)
 8001898:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800189c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018ac:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80018b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018be:	4814      	ldr	r0, [pc, #80]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018c0:	f005 fa18 	bl	8006cf4 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ca:	f000 f90b 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018dc:	f005 fb68 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018e6:	f000 f8fd 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ea:	2320      	movs	r3, #32
 80018ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	@ (8001910 <MX_TIM2_Init+0x98>)
 80018f8:	f005 fd96 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001902:	f000 f8ef 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000454 	.word	0x20000454

08001914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <MX_USART1_UART_Init+0x94>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195c:	4811      	ldr	r0, [pc, #68]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 800195e:	f005 fe09 	bl	8007574 <HAL_UART_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001968:	f000 f8bc 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800196c:	2100      	movs	r1, #0
 800196e:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001970:	f006 fc32 	bl	80081d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800197a:	f000 f8b3 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197e:	2100      	movs	r1, #0
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001982:	f006 fc67 	bl	8008254 <HAL_UARTEx_SetRxFifoThreshold>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800198c:	f000 f8aa 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_USART1_UART_Init+0x90>)
 8001992:	f006 fbe8 	bl	8008166 <HAL_UARTEx_DisableFifoMode>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800199c:	f000 f8a2 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200004a0 	.word	0x200004a0
 80019a8:	40013800 	.word	0x40013800

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_DMA_Init+0x80>)
 80019b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <MX_DMA_Init+0x80>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_DMA_Init+0x80>)
 80019c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_DMA_Init+0x80>)
 80019cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <MX_DMA_Init+0x80>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <MX_DMA_Init+0x80>)
 80019d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	200b      	movs	r0, #11
 80019e8:	f002 f879 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019ec:	200b      	movs	r0, #11
 80019ee:	f002 f892 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200c      	movs	r0, #12
 80019f8:	f002 f871 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019fc:	200c      	movs	r0, #12
 80019fe:	f002 f88a 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	200d      	movs	r0, #13
 8001a08:	f002 f869 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a0c:	200d      	movs	r0, #13
 8001a0e:	f002 f882 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	205e      	movs	r0, #94	@ 0x5e
 8001a18:	f002 f861 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001a1c:	205e      	movs	r0, #94	@ 0x5e
 8001a1e:	f002 f87a 	bl	8003b16 <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <MX_GPIO_Init+0xac>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001aac:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <MX_GPIO_Init+0xb0>)
 8001abe:	f003 f9cd 	bl	8004e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2028      	movs	r0, #40	@ 0x28
 8001ac8:	f002 f809 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001acc:	2028      	movs	r0, #40	@ 0x28
 8001ace:	f002 f822 	bl	8003b16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000800 	.word	0x48000800

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <Error_Handler+0x8>

08001af0 <limit_val>:

void mic_DMASampleBuffer(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int32_t *pData, uint32_t Length){
	HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, pData, Length);
}

float limit_val(float input) {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (input > 0) {
 8001afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001afe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	dd10      	ble.n	8001b2a <limit_val+0x3a>
        return (input < clip) ? input : clip; // Minimum of 200 and input
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <limit_val+0x70>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d502      	bpl.n	8001b22 <limit_val+0x32>
 8001b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b20:	e017      	b.n	8001b52 <limit_val+0x62>
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <limit_val+0x70>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	e013      	b.n	8001b52 <limit_val+0x62>
    } else {
        return (input > -clip) ? input : -clip; // Maximum of -200 and input
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <limit_val+0x70>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eef1 7a67 	vneg.f32	s15, s15
 8001b34:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	dd02      	ble.n	8001b48 <limit_val+0x58>
 8001b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b46:	e004      	b.n	8001b52 <limit_val+0x62>
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <limit_val+0x70>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	eef1 7a67 	vneg.f32	s15, s15
    }
}
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000004 	.word	0x20000004

08001b64 <mic_process>:


//needed to remove low freq information thats messing everything up
void mic_process(int32_t *interim_buffer, float32_t *good_buffer, int good_buffer_length) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	@ 0x38
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]

	// Filter coefficients for a 50 Hz high-pass filter with a 48 kHz sample rate
    float alpha = (2 * M_PI * 50) / (48000 + 2 * M_PI * 50);
 8001b70:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <mic_process+0x10c>)
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    float alphinv = 1.0f / (1.0f + (48000 / (2 * M_PI * 2000)));
 8001b74:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <mic_process+0x110>)
 8001b76:	623b      	str	r3, [r7, #32]

    // Initialize the previous output (y[n-1]) and previous input (x[n-1])
    float prev_output = 0.0f;
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    float prev_input = 0.0f;
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30

    //high pass
    for (int i = 0; i < good_buffer_length; i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b88:	e028      	b.n	8001bdc <mic_process+0x78>
        // Get the current input
        float current_input = (float32_t)interim_buffer[i + 200];
 8001b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8c:	33c8      	adds	r3, #200	@ 0xc8
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	edc7 7a05 	vstr	s15, [r7, #20]

        // Apply the high-pass filter equation
        float current_output = alpha * (prev_output + current_input - prev_input);
 8001ba2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbe:	edc7 7a04 	vstr	s15, [r7, #16]

        // Store the filtered output
        good_buffer[i] = current_output;
 8001bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	601a      	str	r2, [r3, #0]

        // Update previous input and output for the next iteration
        prev_input = current_input;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
        prev_output = current_output;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < good_buffer_length; i++) {
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	3301      	adds	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbd2      	blt.n	8001b8a <mic_process+0x26>
    }

    //lowpass
    prev_output = 0.0f;
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < good_buffer_length; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bee:	e031      	b.n	8001c54 <mic_process+0xf0>
    	float current_input = good_buffer[i];
 8001bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	61fb      	str	r3, [r7, #28]
    	float current_output = alphinv * current_input + (1 - alphinv) * prev_output;
 8001bfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c14:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	edc7 7a06 	vstr	s15, [r7, #24]

        // Store the filtered output
        good_buffer[i] = (float)limit_val(current_output) / clip;
 8001c24:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c28:	f7ff ff62 	bl	8001af0 <limit_val>
 8001c2c:	eef0 6a40 	vmov.f32	s13, s0
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <mic_process+0x114>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c42:	edc3 7a00 	vstr	s15, [r3]

        // Update previous input and output for the next iteration
        prev_input = current_input;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
        prev_output = current_output;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < good_buffer_length; i++) {
 8001c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c50:	3301      	adds	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbc9      	blt.n	8001bf0 <mic_process+0x8c>

    }

    //kalman
    kalmanFilter(good_buffer, good_buffer, good_buffer_length);
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f7ff faeb 	bl	800123c <kalmanFilter>
}
 8001c66:	bf00      	nop
 8001c68:	3738      	adds	r7, #56	@ 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	3bd5124e 	.word	0x3bd5124e
 8001c74:	3e5475e6 	.word	0x3e5475e6
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ae      	sub	sp, #184	@ 0xb8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2294      	movs	r2, #148	@ 0x94
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f007 f8be 	bl	8008e66 <memset>
  if(hadc->Instance==ADC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a39      	ldr	r2, [pc, #228]	@ (8001dd4 <HAL_ADC_MspInit+0x110>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d16a      	bne.n	8001dca <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cf8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001cfa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fadc 	bl	80062c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001d12:	f7ff fee7 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d16:	4b30      	ldr	r3, [pc, #192]	@ (8001dd8 <HAL_ADC_MspInit+0x114>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd8 <HAL_ADC_MspInit+0x114>)
 8001d1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d22:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_ADC_MspInit+0x114>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <HAL_ADC_MspInit+0x114>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <HAL_ADC_MspInit+0x114>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <HAL_ADC_MspInit+0x114>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d4c:	230b      	movs	r3, #11
 8001d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481f      	ldr	r0, [pc, #124]	@ (8001ddc <HAL_ADC_MspInit+0x118>)
 8001d60:	f003 f87c 	bl	8004e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d66:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <HAL_ADC_MspInit+0x120>)
 8001d68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d82:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d94:	2220      	movs	r2, #32
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d9e:	4810      	ldr	r0, [pc, #64]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001da0:	f002 fd8e 	bl	80048c0 <HAL_DMA_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_ADC_MspInit+0xea>
    {
      Error_Handler();
 8001daa:	f7ff fe9b 	bl	8001ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001db2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_ADC_MspInit+0x11c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2012      	movs	r0, #18
 8001dc0:	f001 fe8d 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001dc4:	2012      	movs	r0, #18
 8001dc6:	f001 fea6 	bl	8003b16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	37b8      	adds	r7, #184	@ 0xb8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	20000260 	.word	0x20000260
 8001de4:	4002001c 	.word	0x4002001c

08001de8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <HAL_DAC_MspInit+0xcc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d14f      	bne.n	8001eaa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_DAC_MspInit+0xd0>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <HAL_DAC_MspInit+0xd0>)
 8001e10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e16:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_DAC_MspInit+0xd0>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_DAC_MspInit+0xd0>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	4a24      	ldr	r2, [pc, #144]	@ (8001eb8 <HAL_DAC_MspInit+0xd0>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_DAC_MspInit+0xd0>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3a:	2310      	movs	r3, #16
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e50:	f003 f804 	bl	8004e5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <HAL_DAC_MspInit+0xd8>)
 8001e58:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e5c:	2206      	movs	r2, #6
 8001e5e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e62:	2210      	movs	r2, #16
 8001e64:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e78:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e80:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e84:	2220      	movs	r2, #32
 8001e86:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001e8e:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001e90:	f002 fd16 	bl	80048c0 <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001e9a:	f7ff fe23 	bl	8001ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <HAL_DAC_MspInit+0xd4>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	@ 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40007400 	.word	0x40007400
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	200002d4 	.word	0x200002d4
 8001ec0:	40020008 	.word	0x40020008

08001ec4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2294      	movs	r2, #148	@ 0x94
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 ffbe 	bl	8008e66 <memset>
  if(DFSDM1_Init == 0)
 8001eea:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_DFSDM_FilterMspInit+0x174>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d166      	bne.n	8001fc0 <HAL_DFSDM_FilterMspInit+0xfc>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001ef2:	4b52      	ldr	r3, [pc, #328]	@ (800203c <HAL_DFSDM_FilterMspInit+0x178>)
 8001ef4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 8001f06:	2301      	movs	r3, #1
 8001f08:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 5;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 48;
 8001f0e:	2330      	movs	r3, #48	@ 0x30
 8001f10:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV5;
 8001f12:	2305      	movs	r3, #5
 8001f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001f16:	2302      	movs	r3, #2
 8001f18:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8001f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f22:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 f9cb 	bl	80062c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_DFSDM_FilterMspInit+0x74>
    {
      Error_Handler();
 8001f34:	f7ff fdd6 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001f38:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a40      	ldr	r2, [pc, #256]	@ (8002040 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001f42:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10b      	bne.n	8001f62 <HAL_DFSDM_FilterMspInit+0x9e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002044 <HAL_DFSDM_FilterMspInit+0x180>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002044 <HAL_DFSDM_FilterMspInit+0x180>)
 8001f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f56:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_DFSDM_FilterMspInit+0x180>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f62:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <HAL_DFSDM_FilterMspInit+0x180>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <HAL_DFSDM_FilterMspInit+0x180>)
 8001f68:	f043 0310 	orr.w	r3, r3, #16
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b35      	ldr	r3, [pc, #212]	@ (8002044 <HAL_DFSDM_FilterMspInit+0x180>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001f7a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f94:	2306      	movs	r3, #6
 8001f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4829      	ldr	r0, [pc, #164]	@ (8002048 <HAL_DFSDM_FilterMspInit+0x184>)
 8001fa2:	f002 ff5b 	bl	8004e5c <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT2_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	203f      	movs	r0, #63	@ 0x3f
 8001fac:	f001 fd97 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT2_IRQn);
 8001fb0:	203f      	movs	r0, #63	@ 0x3f
 8001fb2:	f001 fdb0 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_DFSDM_FilterMspInit+0x174>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_DFSDM_FilterMspInit+0x174>)
 8001fbe:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a21      	ldr	r2, [pc, #132]	@ (800204c <HAL_DFSDM_FilterMspInit+0x188>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d131      	bne.n	800202e <HAL_DFSDM_FilterMspInit+0x16a>
    hdma_dfsdm1_flt2.Instance = DMA1_Channel3;
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fcc:	4a21      	ldr	r2, [pc, #132]	@ (8002054 <HAL_DFSDM_FilterMspInit+0x190>)
 8001fce:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fd2:	2258      	movs	r2, #88	@ 0x58
 8001fd4:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fee:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ff6:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt2.Init.Mode = DMA_NORMAL;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_HIGH;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 8002006:	4812      	ldr	r0, [pc, #72]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002008:	f002 fc5a 	bl	80048c0 <HAL_DMA_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_DFSDM_FilterMspInit+0x152>
    {
      Error_Handler();
 8002012:	f7ff fd67 	bl	8001ae4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800201c:	4a0c      	ldr	r2, [pc, #48]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
 8002028:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <HAL_DFSDM_FilterMspInit+0x18c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 800202e:	bf00      	nop
 8002030:	37b8      	adds	r7, #184	@ 0xb8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000492c 	.word	0x2000492c
 800203c:	00210800 	.word	0x00210800
 8002040:	20004928 	.word	0x20004928
 8002044:	40021000 	.word	0x40021000
 8002048:	48001000 	.word	0x48001000
 800204c:	40016200 	.word	0x40016200
 8002050:	200003c0 	.word	0x200003c0
 8002054:	40020030 	.word	0x40020030

08002058 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0ae      	sub	sp, #184	@ 0xb8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	2294      	movs	r2, #148	@ 0x94
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f006 fef4 	bl	8008e66 <memset>
  if(DFSDM1_Init == 0)
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_DFSDM_ChannelMspInit+0xf4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d15e      	bne.n	8002144 <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8002086:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8002088:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 800208a:	2320      	movs	r3, #32
 800208c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 800209a:	2301      	movs	r3, #1
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 5;
 800209e:	2305      	movs	r3, #5
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 48;
 80020a2:	2330      	movs	r3, #48	@ 0x30
 80020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV5;
 80020a6:	2305      	movs	r3, #5
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 80020aa:	2302      	movs	r3, #2
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 80020b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f901 	bl	80062c4 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_DFSDM_ChannelMspInit+0x74>
    {
      Error_Handler();
 80020c8:	f7ff fd0c 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a20      	ldr	r2, [pc, #128]	@ (8002154 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80020d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80020d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d10b      	bne.n	80020f6 <HAL_DFSDM_ChannelMspInit+0x9e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_DFSDM_ChannelMspInit+0x100>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <HAL_DFSDM_ChannelMspInit+0x100>)
 80020e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_DFSDM_ChannelMspInit+0x100>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f6:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <HAL_DFSDM_ChannelMspInit+0x100>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a17      	ldr	r2, [pc, #92]	@ (8002158 <HAL_DFSDM_ChannelMspInit+0x100>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_DFSDM_ChannelMspInit+0x100>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800210e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002112:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002128:	2306      	movs	r3, #6
 800212a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002132:	4619      	mov	r1, r3
 8002134:	4809      	ldr	r0, [pc, #36]	@ (800215c <HAL_DFSDM_ChannelMspInit+0x104>)
 8002136:	f002 fe91 	bl	8004e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800213a:	4b04      	ldr	r3, [pc, #16]	@ (800214c <HAL_DFSDM_ChannelMspInit+0xf4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	4a02      	ldr	r2, [pc, #8]	@ (800214c <HAL_DFSDM_ChannelMspInit+0xf4>)
 8002142:	6013      	str	r3, [r2, #0]
  }

}
 8002144:	bf00      	nop
 8002146:	37b8      	adds	r7, #184	@ 0xb8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000492c 	.word	0x2000492c
 8002150:	00210800 	.word	0x00210800
 8002154:	20004928 	.word	0x20004928
 8002158:	40021000 	.word	0x40021000
 800215c:	48001000 	.word	0x48001000

08002160 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a15      	ldr	r2, [pc, #84]	@ (80021d4 <HAL_OPAMP_MspInit+0x74>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d124      	bne.n	80021cc <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <HAL_OPAMP_MspInit+0x78>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <HAL_OPAMP_MspInit+0x78>)
 8002188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800218c:	6593      	str	r3, [r2, #88]	@ 0x58
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_OPAMP_MspInit+0x78>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <HAL_OPAMP_MspInit+0x78>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a0e      	ldr	r2, [pc, #56]	@ (80021d8 <HAL_OPAMP_MspInit+0x78>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_OPAMP_MspInit+0x78>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80021b2:	2309      	movs	r3, #9
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b6:	2303      	movs	r3, #3
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c8:	f002 fe48 	bl	8004e5c <HAL_GPIO_Init>

  /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	@ 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40007800 	.word	0x40007800
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ec:	d113      	bne.n	8002216 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_TIM_Base_MspInit+0x44>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	201c      	movs	r0, #28
 800220c:	f001 fc67 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002210:	201c      	movs	r0, #28
 8002212:	f001 fc80 	bl	8003b16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ae      	sub	sp, #184	@ 0xb8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	2294      	movs	r2, #148	@ 0x94
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f006 fe0e 	bl	8008e66 <memset>
  if(huart->Instance==USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	@ (80022d4 <HAL_UART_MspInit+0xb0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d13a      	bne.n	80022ca <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002258:	2300      	movs	r3, #0
 800225a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4618      	mov	r0, r3
 8002262:	f004 f82f 	bl	80062c4 <HAL_RCCEx_PeriphCLKConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800226c:	f7ff fc3a 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_UART_MspInit+0xb4>)
 8002272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002274:	4a18      	ldr	r2, [pc, #96]	@ (80022d8 <HAL_UART_MspInit+0xb4>)
 8002276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800227a:	6613      	str	r3, [r2, #96]	@ 0x60
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <HAL_UART_MspInit+0xb4>)
 800227e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002288:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <HAL_UART_MspInit+0xb4>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <HAL_UART_MspInit+0xb4>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <HAL_UART_MspInit+0xb4>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a0:	23c0      	movs	r3, #192	@ 0xc0
 80022a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b8:	2307      	movs	r3, #7
 80022ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	@ (80022dc <HAL_UART_MspInit+0xb8>)
 80022c6:	f002 fdc9 	bl	8004e5c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80022ca:	bf00      	nop
 80022cc:	37b8      	adds	r7, #184	@ 0xb8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48000400 	.word	0x48000400

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <NMI_Handler+0x4>

080022e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <MemManage_Handler+0x4>

080022f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <UsageFault_Handler+0x4>

08002308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002336:	f000 f9a7 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <DMA1_Channel1_IRQHandler+0x10>)
 8002346:	f002 fc3a 	bl	8004bbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200002d4 	.word	0x200002d4

08002354 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <DMA1_Channel2_IRQHandler+0x10>)
 800235a:	f002 fc30 	bl	8004bbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000260 	.word	0x20000260

08002368 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 800236c:	4803      	ldr	r0, [pc, #12]	@ (800237c <DMA1_Channel3_IRQHandler+0x14>)
 800236e:	f002 fc26 	bl	8004bbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  myDMA_XferCpltCallback(&hdma_dfsdm1_flt2);
 8002372:	4802      	ldr	r0, [pc, #8]	@ (800237c <DMA1_Channel3_IRQHandler+0x14>)
 8002374:	f7ff f862 	bl	800143c <myDMA_XferCpltCallback>
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200003c0 	.word	0x200003c0

08002380 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <ADC1_IRQHandler+0x10>)
 8002386:	f000 fccf 	bl	8002d28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200001f8 	.word	0x200001f8

08002394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <TIM2_IRQHandler+0x10>)
 800239a:	f004 fd02 	bl	8006da2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000454 	.word	0x20000454

080023a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80023b0:	f002 fefe 	bl	80051b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <DFSDM1_FLT2_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter2 global interrupt.
  */
void DFSDM1_FLT2_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 0 */

  /* USER CODE END DFSDM1_FLT2_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter2);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DFSDM1_FLT2_IRQHandler+0x10>)
 80023be:	f001 ffc9 	bl	8004354 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 1 */

  /* USER CODE END DFSDM1_FLT2_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000334 	.word	0x20000334

080023cc <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  return 1;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_kill>:

int _kill(int pid, int sig)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023f4:	f006 fd8a 	bl	8008f0c <__errno>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2216      	movs	r2, #22
 80023fc:	601a      	str	r2, [r3, #0]
  return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_exit>:

void _exit (int status)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002412:	f04f 31ff 	mov.w	r1, #4294967295
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffe7 	bl	80023ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <_exit+0x12>

08002420 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e00a      	b.n	8002448 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002432:	f3af 8000 	nop.w
 8002436:	4601      	mov	r1, r0
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	60ba      	str	r2, [r7, #8]
 800243e:	b2ca      	uxtb	r2, r1
 8002440:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3301      	adds	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	dbf0      	blt.n	8002432 <_read+0x12>
  }

  return len;
 8002450:	687b      	ldr	r3, [r7, #4]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e009      	b.n	8002480 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	60ba      	str	r2, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbf1      	blt.n	800246c <_write+0x12>
  }
  return len;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_close>:

int _close(int file)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ba:	605a      	str	r2, [r3, #4]
  return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_isatty>:

int _isatty(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002504:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <_sbrk+0x5c>)
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <_sbrk+0x60>)
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002510:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <_sbrk+0x64>)
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <_sbrk+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800252c:	f006 fcee 	bl	8008f0c <__errno>
 8002530:	4603      	mov	r3, r0
 8002532:	220c      	movs	r2, #12
 8002534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e009      	b.n	8002550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <_sbrk+0x64>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002542:	4b07      	ldr	r3, [pc, #28]	@ (8002560 <_sbrk+0x64>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <_sbrk+0x64>)
 800254c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200a0000 	.word	0x200a0000
 800255c:	00000400 	.word	0x00000400
 8002560:	20004930 	.word	0x20004930
 8002564:	20004aa8 	.word	0x20004aa8

08002568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	@ (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002590:	f7ff ffea 	bl	8002568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002594:	480c      	ldr	r0, [pc, #48]	@ (80025c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002596:	490d      	ldr	r1, [pc, #52]	@ (80025cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <LoopForever+0xe>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025ac:	4c0a      	ldr	r4, [pc, #40]	@ (80025d8 <LoopForever+0x16>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ba:	f006 fcad 	bl	8008f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025be:	f7fe ff53 	bl	8001468 <main>

080025c2 <LoopForever>:

LoopForever:
    b LoopForever
 80025c2:	e7fe      	b.n	80025c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80025d0:	0800b500 	.word	0x0800b500
  ldr r2, =_sbss
 80025d4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80025d8:	20004aa8 	.word	0x20004aa8

080025dc <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <AES_IRQHandler>

080025de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f001 fa6d 	bl	8003ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ee:	2000      	movs	r0, #0
 80025f0:	f000 f80e 	bl	8002610 <HAL_InitTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	e001      	b.n	8002604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002600:	f7ff fb3c 	bl	8001c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002604:	79fb      	ldrb	r3, [r7, #7]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800261c:	4b17      	ldr	r3, [pc, #92]	@ (800267c <HAL_InitTick+0x6c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d023      	beq.n	800266c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_InitTick+0x70>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <HAL_InitTick+0x6c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002632:	fbb3 f3f1 	udiv	r3, r3, r1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fa79 	bl	8003b32 <HAL_SYSTICK_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d809      	bhi.n	8002660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f001 fa43 	bl	8003ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002658:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <HAL_InitTick+0x74>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e007      	b.n	8002670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
 8002664:	e004      	b.n	8002670 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e001      	b.n	8002670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000010 	.word	0x20000010
 8002680:	20000008 	.word	0x20000008
 8002684:	2000000c 	.word	0x2000000c

08002688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_IncTick+0x20>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_IncTick+0x24>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <HAL_IncTick+0x24>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000010 	.word	0x20000010
 80026ac:	20004934 	.word	0x20004934

080026b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_GetTick+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20004934 	.word	0x20004934

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff ffee 	bl	80026b0 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffde 	bl	80026b0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000010 	.word	0x20000010

08002710 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3360      	adds	r3, #96	@ 0x60
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <LL_ADC_SetOffset+0x44>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	03fff000 	.word	0x03fff000

080027c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3360      	adds	r3, #96	@ 0x60
 80027ce:	461a      	mov	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3360      	adds	r3, #96	@ 0x60
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800286e:	b480      	push	{r7}
 8002870:	b087      	sub	sp, #28
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3330      	adds	r3, #48	@ 0x30
 800287e:	461a      	mov	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	4413      	add	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	211f      	movs	r1, #31
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 011f 	and.w	r1, r3, #31
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3314      	adds	r3, #20
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0e5b      	lsrs	r3, r3, #25
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0d1b      	lsrs	r3, r3, #20
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2107      	movs	r1, #7
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	401a      	ands	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0d1b      	lsrs	r3, r3, #20
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	431a      	orrs	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0318 	and.w	r3, r3, #24
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002968:	40d9      	lsrs	r1, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	400b      	ands	r3, r1
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	0007ffff 	.word	0x0007ffff

0800298c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800299c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6093      	str	r3, [r2, #8]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029c4:	d101      	bne.n	80029ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a14:	d101      	bne.n	8002a1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <LL_ADC_IsEnabled+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_ADC_IsEnabled+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d101      	bne.n	8002a66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d101      	bne.n	8002a8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e129      	b.n	8002d0a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff f8fd 	bl	8001cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff67 	bl	80029b0 <LL_ADC_IsDeepPowerDownEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff4d 	bl	800298c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff82 	bl	8002a00 <LL_ADC_IsInternalRegulatorEnabled>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff66 	bl	80029d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b0c:	4b81      	ldr	r3, [pc, #516]	@ (8002d14 <HAL_ADC_Init+0x278>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	4a81      	ldr	r2, [pc, #516]	@ (8002d18 <HAL_ADC_Init+0x27c>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff64 	bl	8002a00 <LL_ADC_IsInternalRegulatorEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff75 	bl	8002a4e <LL_ADC_REG_IsConversionOngoing>
 8002b64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80c2 	bne.w	8002cf8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 80be 	bne.w	8002cf8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b84:	f043 0202 	orr.w	r2, r3, #2
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff49 	bl	8002a28 <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b9c:	485f      	ldr	r0, [pc, #380]	@ (8002d1c <HAL_ADC_Init+0x280>)
 8002b9e:	f7ff ff43 	bl	8002a28 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4619      	mov	r1, r3
 8002bae:	485c      	ldr	r0, [pc, #368]	@ (8002d20 <HAL_ADC_Init+0x284>)
 8002bb0:	f7ff fdae 	bl	8002710 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e5b      	ldrb	r3, [r3, #25]
 8002bb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bbe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bc4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d106      	bne.n	8002bf0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	3b01      	subs	r3, #1
 8002be8:	045b      	lsls	r3, r3, #17
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b44      	ldr	r3, [pc, #272]	@ (8002d24 <HAL_ADC_Init+0x288>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff25 	bl	8002a74 <LL_ADC_INJ_IsConversionOngoing>
 8002c2a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d140      	bne.n	8002cb4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d13d      	bne.n	8002cb4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e1b      	ldrb	r3, [r3, #24]
 8002c40:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c42:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c5a:	f023 0306 	bic.w	r3, r3, #6
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d118      	bne.n	8002ca4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c94:	430a      	orrs	r2, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e007      	b.n	8002cb4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10c      	bne.n	8002cd6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f023 010f 	bic.w	r1, r3, #15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cd4:	e007      	b.n	8002ce6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 020f 	bic.w	r2, r2, #15
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cf6:	e007      	b.n	8002d08 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f043 0210 	orr.w	r2, r3, #16
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000008 	.word	0x20000008
 8002d18:	053e2d63 	.word	0x053e2d63
 8002d1c:	50040000 	.word	0x50040000
 8002d20:	50040300 	.word	0x50040300
 8002d24:	fff0c007 	.word	0xfff0c007

08002d28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x56>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fdcf 	bl	8003914 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x6a>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05e      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d059      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d105      	bne.n	8002dbe <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fd40 	bl	8002848 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03e      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d135      	bne.n	8002e4c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d12e      	bne.n	8002e4c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe2b 	bl	8002a4e <LL_ADC_REG_IsConversionOngoing>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11a      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 020c 	bic.w	r2, r2, #12
 8002e0c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d112      	bne.n	8002e4c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e32:	e00b      	b.n	8002e4c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	f043 0210 	orr.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f91f 	bl	8003090 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	220c      	movs	r2, #12
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_ADC_IRQHandler+0x146>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d072      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d06d      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fd11 	bl	80028c6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ea4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fccc 	bl	8002848 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eb0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d047      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_ADC_IRQHandler+0x1b2>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d03f      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13a      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee4:	2b40      	cmp	r3, #64	@ 0x40
 8002ee6:	d133      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d12e      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fdbc 	bl	8002a74 <LL_ADC_INJ_IsConversionOngoing>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11a      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f10:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d112      	bne.n	8002f50 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f36:	e00b      	b.n	8002f50 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fcb7 	bl	80038c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2260      	movs	r2, #96	@ 0x60
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x264>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f890 	bl	80030a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2280      	movs	r2, #128	@ 0x80
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x294>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fc9d 	bl	80038ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_ADC_IRQHandler+0x2c4>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fc8f 	bl	8003900 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02a      	beq.n	800304c <HAL_ADC_IRQHandler+0x324>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d025      	beq.n	800304c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8003008:	2301      	movs	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e008      	b.n	8003020 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800301c:	2301      	movs	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f83a 	bl	80030b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2210      	movs	r2, #16
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <HAL_ADC_IRQHandler+0x360>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	f043 0208 	orr.w	r2, r3, #8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003080:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fc28 	bl	80038d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b0b6      	sub	sp, #216	@ 0xd8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x22>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e3d5      	b.n	800389a <HAL_ADC_ConfigChannel+0x7ce>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fca7 	bl	8002a4e <LL_ADC_REG_IsConversionOngoing>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 83ba 	bne.w	800387c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d824      	bhi.n	8003162 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	3b02      	subs	r3, #2
 800311e:	2b03      	cmp	r3, #3
 8003120:	d81b      	bhi.n	800315a <HAL_ADC_ConfigChannel+0x8e>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <HAL_ADC_ConfigChannel+0x5c>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	08003139 	.word	0x08003139
 800312c:	08003141 	.word	0x08003141
 8003130:	08003149 	.word	0x08003149
 8003134:	08003151 	.word	0x08003151
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003138:	230c      	movs	r3, #12
 800313a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800313e:	e010      	b.n	8003162 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003140:	2312      	movs	r3, #18
 8003142:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003146:	e00c      	b.n	8003162 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003148:	2318      	movs	r3, #24
 800314a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800314e:	e008      	b.n	8003162 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003158:	e003      	b.n	8003162 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800315a:	2306      	movs	r3, #6
 800315c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003160:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003170:	f7ff fb7d 	bl	800286e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fc68 	bl	8002a4e <LL_ADC_REG_IsConversionOngoing>
 800317e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fc74 	bl	8002a74 <LL_ADC_INJ_IsConversionOngoing>
 800318c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 81bf 	bne.w	8003518 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800319a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 81ba 	bne.w	8003518 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031ac:	d10f      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7ff fb97 	bl	80028ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fb2b 	bl	8002822 <LL_ADC_SetSamplingTimeCommonConfig>
 80031cc:	e00e      	b.n	80031ec <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	461a      	mov	r2, r3
 80031dc:	f7ff fb86 	bl	80028ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fb1b 	bl	8002822 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	08db      	lsrs	r3, r3, #3
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d00a      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6919      	ldr	r1, [r3, #16]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800321e:	f7ff faab 	bl	8002778 <LL_ADC_SetOffset>
 8003222:	e179      	b.n	8003518 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fac8 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8003230:	4603      	mov	r3, r0
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x184>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fabd 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	0e9b      	lsrs	r3, r3, #26
 800324a:	f003 021f 	and.w	r2, r3, #31
 800324e:	e01e      	b.n	800328e <HAL_ADC_ConfigChannel+0x1c2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fab2 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800326e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e004      	b.n	800328c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003282:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x1da>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	e018      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x20c>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80032ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80032c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80032ca:	2320      	movs	r3, #32
 80032cc:	e004      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80032ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032d8:	429a      	cmp	r2, r3
 80032da:	d106      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fa81 	bl	80027ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fa65 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x24a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fa5a 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	e01e      	b.n	8003354 <HAL_ADC_ConfigChannel+0x288>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fa4f 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800333c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e004      	b.n	8003352 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_ConfigChannel+0x2a0>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	e018      	b.n	800339e <HAL_ADC_ConfigChannel+0x2d2>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003380:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e004      	b.n	800339e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fa1e 	bl	80027ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2102      	movs	r1, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fa02 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x310>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f9f7 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	e01e      	b.n	800341a <HAL_ADC_ConfigChannel+0x34e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f9ec 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80033fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800340a:	2320      	movs	r3, #32
 800340c:	e004      	b.n	8003418 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x366>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e014      	b.n	800345c <HAL_ADC_ConfigChannel+0x390>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003442:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003446:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e004      	b.n	800345c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003452:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800345c:	429a      	cmp	r2, r3
 800345e:	d106      	bne.n	800346e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f9bf 	bl	80027ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2103      	movs	r1, #3
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f9a3 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_ADC_ConfigChannel+0x3ce>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2103      	movs	r1, #3
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f998 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	e017      	b.n	80034ca <HAL_ADC_ConfigChannel+0x3fe>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2103      	movs	r1, #3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f98d 	bl	80027c0 <LL_ADC_GetOffsetChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80034b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034b4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80034b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80034c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x416>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	e011      	b.n	8003506 <HAL_ADC_ConfigChannel+0x43a>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80034f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80034f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e003      	b.n	8003506 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80034fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003506:	429a      	cmp	r2, r3
 8003508:	d106      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	2103      	movs	r1, #3
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff f96a 	bl	80027ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fa83 	bl	8002a28 <LL_ADC_IsEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 813f 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f7ff fa04 	bl	8002944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a8e      	ldr	r2, [pc, #568]	@ (800377c <HAL_ADC_ConfigChannel+0x6b0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f040 8130 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x4a4>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2b09      	cmp	r3, #9
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e019      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x4d8>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e003      	b.n	8003594 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800358c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2b09      	cmp	r3, #9
 800359c:	bf94      	ite	ls
 800359e:	2301      	movls	r3, #1
 80035a0:	2300      	movhi	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d079      	beq.n	800369c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x4f8>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	3301      	adds	r3, #1
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c2:	e015      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x524>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e003      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80035e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	069b      	lsls	r3, r3, #26
 80035ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x544>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	e017      	b.n	8003640 <HAL_ADC_ConfigChannel+0x574>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003620:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800362c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	ea42 0103 	orr.w	r1, r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x59a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	051b      	lsls	r3, r3, #20
 8003664:	e018      	b.n	8003698 <HAL_ADC_ConfigChannel+0x5cc>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e003      	b.n	800368a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003698:	430b      	orrs	r3, r1
 800369a:	e080      	b.n	800379e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x5ec>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	3301      	adds	r3, #1
 80036b0:	069b      	lsls	r3, r3, #26
 80036b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036b6:	e015      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x618>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80036d0:	2320      	movs	r3, #32
 80036d2:	e003      	b.n	80036dc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	069b      	lsls	r3, r3, #26
 80036e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x638>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	3301      	adds	r3, #1
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	e017      	b.n	8003734 <HAL_ADC_ConfigChannel+0x668>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	61bb      	str	r3, [r7, #24]
  return result;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800371c:	2320      	movs	r3, #32
 800371e:	e003      	b.n	8003728 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	ea42 0103 	orr.w	r1, r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x694>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	3301      	adds	r3, #1
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	3b1e      	subs	r3, #30
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800375e:	e01d      	b.n	800379c <HAL_ADC_ConfigChannel+0x6d0>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	60fb      	str	r3, [r7, #12]
  return result;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003778:	2320      	movs	r3, #32
 800377a:	e005      	b.n	8003788 <HAL_ADC_ConfigChannel+0x6bc>
 800377c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	f003 021f 	and.w	r2, r3, #31
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	3b1e      	subs	r3, #30
 8003796:	051b      	lsls	r3, r3, #20
 8003798:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7ff f8a2 	bl	80028ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d06c      	beq.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b4:	483c      	ldr	r0, [pc, #240]	@ (80038a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80037b6:	f7fe ffd1 	bl	800275c <LL_ADC_GetCommonPathInternalCh>
 80037ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3a      	ldr	r2, [pc, #232]	@ (80038ac <HAL_ADC_ConfigChannel+0x7e0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d127      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d121      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a35      	ldr	r2, [pc, #212]	@ (80038b0 <HAL_ADC_ConfigChannel+0x7e4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d157      	bne.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037e6:	4619      	mov	r1, r3
 80037e8:	482f      	ldr	r0, [pc, #188]	@ (80038a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80037ea:	f7fe ffa4 	bl	8002736 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ee:	4b31      	ldr	r3, [pc, #196]	@ (80038b4 <HAL_ADC_ConfigChannel+0x7e8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	4a30      	ldr	r2, [pc, #192]	@ (80038b8 <HAL_ADC_ConfigChannel+0x7ec>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003808:	e002      	b.n	8003810 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3b01      	subs	r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f9      	bne.n	800380a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003816:	e03a      	b.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_ADC_ConfigChannel+0x7f0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d113      	bne.n	800384a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1f      	ldr	r2, [pc, #124]	@ (80038b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d12a      	bne.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800383c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003840:	4619      	mov	r1, r3
 8003842:	4819      	ldr	r0, [pc, #100]	@ (80038a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003844:	f7fe ff77 	bl	8002736 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003848:	e021      	b.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1c      	ldr	r2, [pc, #112]	@ (80038c0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d11c      	bne.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003858:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a12      	ldr	r2, [pc, #72]	@ (80038b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800386e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003872:	4619      	mov	r1, r3
 8003874:	480c      	ldr	r0, [pc, #48]	@ (80038a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003876:	f7fe ff5e 	bl	8002736 <LL_ADC_SetCommonPathInternalCh>
 800387a:	e008      	b.n	800388e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003896:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800389a:	4618      	mov	r0, r3
 800389c:	37d8      	adds	r7, #216	@ 0xd8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	80080000 	.word	0x80080000
 80038a8:	50040300 	.word	0x50040300
 80038ac:	c7520000 	.word	0xc7520000
 80038b0:	50040000 	.word	0x50040000
 80038b4:	20000008 	.word	0x20000008
 80038b8:	053e2d63 	.word	0x053e2d63
 80038bc:	cb840000 	.word	0xcb840000
 80038c0:	80000001 	.word	0x80000001

080038c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395a:	4a04      	ldr	r2, [pc, #16]	@ (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	60d3      	str	r3, [r2, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__NVIC_GetPriorityGrouping+0x18>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 0307 	and.w	r3, r3, #7
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db0b      	blt.n	80039b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4907      	ldr	r1, [pc, #28]	@ (80039c4 <__NVIC_EnableIRQ+0x38>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2001      	movs	r0, #1
 80039ae:	fa00 f202 	lsl.w	r2, r0, r2
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db0a      	blt.n	80039f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	490c      	ldr	r1, [pc, #48]	@ (8003a14 <__NVIC_SetPriority+0x4c>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	0112      	lsls	r2, r2, #4
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	440b      	add	r3, r1
 80039ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f0:	e00a      	b.n	8003a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4908      	ldr	r1, [pc, #32]	@ (8003a18 <__NVIC_SetPriority+0x50>)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	3b04      	subs	r3, #4
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	440b      	add	r3, r1
 8003a06:	761a      	strb	r2, [r3, #24]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000e100 	.word	0xe000e100
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	@ 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f1c3 0307 	rsb	r3, r3, #7
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	bf28      	it	cs
 8003a3a:	2304      	movcs	r3, #4
 8003a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d902      	bls.n	8003a4c <NVIC_EncodePriority+0x30>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3b03      	subs	r3, #3
 8003a4a:	e000      	b.n	8003a4e <NVIC_EncodePriority+0x32>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43d9      	mvns	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	4313      	orrs	r3, r2
         );
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3724      	adds	r7, #36	@ 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a94:	d301      	bcc.n	8003a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <SysTick_Config+0x40>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa2:	210f      	movs	r1, #15
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	f7ff ff8e 	bl	80039c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <SysTick_Config+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <SysTick_Config+0x40>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000e010 	.word	0xe000e010

08003ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff29 	bl	8003928 <__NVIC_SetPriorityGrouping>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003af0:	f7ff ff3e 	bl	8003970 <__NVIC_GetPriorityGrouping>
 8003af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	f7ff ff8e 	bl	8003a1c <NVIC_EncodePriority>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff5d 	bl	80039c8 <__NVIC_SetPriority>
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff31 	bl	800398c <__NVIC_EnableIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffa2 	bl	8003a84 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e014      	b.n	8003b86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	791b      	ldrb	r3, [r3, #4]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fe f93b 	bl	8001de8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	795b      	ldrb	r3, [r3, #5]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_DAC_ConfigChannel+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e137      	b.n	8003e1c <HAL_DAC_ConfigChannel+0x28c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	f040 8081 	bne.w	8003cc4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003bc2:	f7fe fd75 	bl	80026b0 <HAL_GetTick>
 8003bc6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d140      	bne.n	8003c50 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bce:	e018      	b.n	8003c02 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bd0:	f7fe fd6e 	bl	80026b0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d911      	bls.n	8003c02 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f043 0208 	orr.w	r2, r3, #8
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e10c      	b.n	8003e1c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1df      	bne.n	8003bd0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003c10:	2001      	movs	r0, #1
 8003c12:	f7fe fd59 	bl	80026c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	69d2      	ldr	r2, [r2, #28]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c20:	e023      	b.n	8003c6a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c22:	f7fe fd45 	bl	80026b0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d90f      	bls.n	8003c50 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da0a      	bge.n	8003c50 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f043 0208 	orr.w	r2, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0e5      	b.n	8003e1c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	dbe3      	blt.n	8003c22 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f7fe fd34 	bl	80026c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	69d2      	ldr	r2, [r2, #28]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	ea02 0103 	and.w	r1, r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	21ff      	movs	r1, #255	@ 0xff
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	ea02 0103 	and.w	r1, r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d11d      	bne.n	8003d08 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	221f      	movs	r2, #31
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2207      	movs	r2, #7
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dac:	d104      	bne.n	8003db8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e018      	b.n	8003dea <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e00f      	b.n	8003dea <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003dca:	f002 f983 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8003dce:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <HAL_DAC_ConfigChannel+0x294>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d904      	bls.n	8003de2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e003      	b.n	8003dea <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003de8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	22c0      	movs	r2, #192	@ 0xc0
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43da      	mvns	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	400a      	ands	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	04c4b400 	.word	0x04c4b400

08003e28 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0ac      	b.n	8003f94 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fc4e 	bl	80046e0 <DFSDM_GetChannelFromInstance>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4a55      	ldr	r2, [pc, #340]	@ (8003f9c <HAL_DFSDM_ChannelInit+0x174>)
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e09f      	b.n	8003f94 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fe f8ff 	bl	8002058 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003e5a:	4b51      	ldr	r3, [pc, #324]	@ (8003fa0 <HAL_DFSDM_ChannelInit+0x178>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	4a4f      	ldr	r2, [pc, #316]	@ (8003fa0 <HAL_DFSDM_ChannelInit+0x178>)
 8003e62:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003e64:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa0 <HAL_DFSDM_ChannelInit+0x178>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d125      	bne.n	8003eb8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e76:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003e78:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4948      	ldr	r1, [pc, #288]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003e86:	4b47      	ldr	r3, [pc, #284]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a46      	ldr	r2, [pc, #280]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e8c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003e90:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	791b      	ldrb	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003e9a:	4b42      	ldr	r3, [pc, #264]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	493f      	ldr	r1, [pc, #252]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003eac:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003eb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003ec6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ed6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003edc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 020f 	bic.w	r2, r2, #15
 8003ef4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003f1c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f002 0207 	and.w	r2, r2, #7
 8003f48:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f74:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fbac 	bl	80046e0 <DFSDM_GetChannelFromInstance>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4904      	ldr	r1, [pc, #16]	@ (8003f9c <HAL_DFSDM_ChannelInit+0x174>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	2000493c 	.word	0x2000493c
 8003fa0:	20004938 	.word	0x20004938
 8003fa4:	40016000 	.word	0x40016000

08003fa8 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0ca      	b.n	8004178 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a66      	ldr	r2, [pc, #408]	@ (8004180 <HAL_DFSDM_FilterInit+0x1b0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d109      	bne.n	8004000 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d003      	beq.n	8003ffc <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0bb      	b.n	8004178 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fd ff53 	bl	8001ec4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800402c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7a1b      	ldrb	r3, [r3, #8]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d108      	bne.n	8004048 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004056:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7a5b      	ldrb	r3, [r3, #9]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e007      	b.n	8004082 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004090:	f023 0308 	bic.w	r3, r3, #8
 8004094:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d108      	bne.n	80040b0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7c1b      	ldrb	r3, [r3, #16]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d108      	bne.n	80040ca <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0210 	orr.w	r2, r2, #16
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e007      	b.n	80040da <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0210 	bic.w	r2, r2, #16
 80040d8:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	7c5b      	ldrb	r3, [r3, #17]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d108      	bne.n	80040f4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0220 	orr.w	r2, r2, #32
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e007      	b.n	8004104 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0220 	bic.w	r2, r2, #32
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8004112:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8004116:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6959      	ldr	r1, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800412a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004132:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7c1a      	ldrb	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40016100 	.word	0x40016100

08004184 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02e      	beq.n	80041fc <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80041a4:	2bff      	cmp	r3, #255	@ 0xff
 80041a6:	d029      	beq.n	80041fc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80041b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ba:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10d      	bne.n	80041de <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e00a      	b.n	80041f4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80041fa:	e001      	b.n	8004200 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
}
 8004202:	4618      	mov	r0, r3
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
 8004230:	e064      	b.n	80042fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800423c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004240:	d002      	beq.n	8004248 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
 8004246:	e059      	b.n	80042fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10e      	bne.n	800426e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d002      	beq.n	800426e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
 800426c:	e046      	b.n	80042fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004284:	2b20      	cmp	r3, #32
 8004286:	d102      	bne.n	800428e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
 800428c:	e036      	b.n	80042fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d004      	beq.n	80042a2 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d12a      	bne.n	80042f8 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80042a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	4a17      	ldr	r2, [pc, #92]	@ (800430c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80042b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d101      	bne.n	80042c0 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80042be:	e000      	b.n	80042c2 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80042c0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	331c      	adds	r3, #28
 80042d2:	4619      	mov	r1, r3
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f000 fb9a 	bl	8004a10 <HAL_DMA_Start_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	22ff      	movs	r2, #255	@ 0xff
 80042e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80042ee:	e005      	b.n	80042fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fa41 	bl	8004778 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80042f6:	e001      	b.n	80042fc <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	080046a1 	.word	0x080046a1
 800430c:	080046bd 	.word	0x080046bd
 8004310:	08004685 	.word	0x08004685

08004314 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004326:	2b02      	cmp	r3, #2
 8004328:	d007      	beq.n	800433a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004330:	2b04      	cmp	r3, #4
 8004332:	d002      	beq.n	800433a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e007      	b.n	800434a <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fbe1 	bl	8004b06 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fa6d 	bl	8004824 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	@ 0x30
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00f      	beq.n	8004396 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2208      	movs	r2, #8
 8004386:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f96e 	bl	8004670 <HAL_DFSDM_FilterErrorCallback>
 8004394:	e13a      	b.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00f      	beq.n	80043c0 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2204      	movs	r2, #4
 80043b0:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f959 	bl	8004670 <HAL_DFSDM_FilterErrorCallback>
 80043be:	e125      	b.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d025      	beq.n	8004416 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d020      	beq.n	8004416 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f921 	bl	800461c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 8113 	bne.w	800460a <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 810e 	bne.w	800460a <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0202 	bic.w	r2, r2, #2
 80043fc:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004404:	2b02      	cmp	r3, #2
 8004406:	d101      	bne.n	800440c <HAL_DFSDM_IRQHandler+0xb8>
 8004408:	2201      	movs	r2, #1
 800440a:	e000      	b.n	800440e <HAL_DFSDM_IRQHandler+0xba>
 800440c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004414:	e0f9      	b.n	800460a <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d034      	beq.n	800448a <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004426:	2b00      	cmp	r3, #0
 8004428:	d02f      	beq.n	800448a <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f90a 	bl	8004644 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443e:	2b00      	cmp	r3, #0
 8004440:	f040 80e4 	bne.w	800460c <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d112      	bne.n	8004472 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8004462:	2b03      	cmp	r3, #3
 8004464:	d101      	bne.n	800446a <HAL_DFSDM_IRQHandler+0x116>
 8004466:	2201      	movs	r2, #1
 8004468:	e000      	b.n	800446c <HAL_DFSDM_IRQHandler+0x118>
 800446a:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <HAL_DFSDM_IRQHandler+0x12e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004480:	e000      	b.n	8004484 <HAL_DFSDM_IRQHandler+0x130>
 8004482:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004488:	e0c0      	b.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	d03d      	beq.n	8004510 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800449a:	2b00      	cmp	r3, #0
 800449c:	d038      	beq.n	8004510 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_DFSDM_IRQHandler+0x162>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_DFSDM_IRQHandler+0x164>
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 80044c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80044c6:	e005      	b.n	80044d4 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	3301      	adds	r3, #1
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 80044ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <HAL_DFSDM_IRQHandler+0x190>
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d9f1      	bls.n	80044c8 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_DFSDM_IRQHandler+0x1a2>
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	3308      	adds	r3, #8
 80044ee:	2201      	movs	r2, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	e003      	b.n	80044fe <HAL_DFSDM_IRQHandler+0x1aa>
 80044f6:	2201      	movs	r2, #1
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8a5 	bl	8004658 <HAL_DFSDM_FilterAwdCallback>
  {
 800450e:	e07d      	b.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3f      	ldr	r2, [pc, #252]	@ (8004614 <HAL_DFSDM_IRQHandler+0x2c0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d141      	bne.n	800459e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004520:	2b00      	cmp	r3, #0
 8004522:	d03c      	beq.n	800459e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800452a:	2b00      	cmp	r3, #0
 800452c:	d037      	beq.n	800459e <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	b2db      	uxtb	r3, r3
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800453e:	e02a      	b.n	8004596 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01f      	beq.n	800458a <HAL_DFSDM_IRQHandler+0x236>
 800454a:	4a33      	ldr	r2, [pc, #204]	@ (8004618 <HAL_DFSDM_IRQHandler+0x2c4>)
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d019      	beq.n	800458a <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8004556:	4a30      	ldr	r2, [pc, #192]	@ (8004618 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00f      	beq.n	800458a <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	f103 0210 	add.w	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f202 	lsl.w	r2, r1, r2
 800457a:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 800457c:	4a26      	ldr	r2, [pc, #152]	@ (8004618 <HAL_DFSDM_IRQHandler+0x2c4>)
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fd0f 	bl	8003fa8 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	3301      	adds	r3, #1
 800458e:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b07      	cmp	r3, #7
 800459a:	d9d1      	bls.n	8004540 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 800459c:	e036      	b.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004614 <HAL_DFSDM_IRQHandler+0x2c0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d131      	bne.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ae:	d32d      	bcc.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d028      	beq.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	0e1b      	lsrs	r3, r3, #24
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80045ca:	e005      	b.n	80045d8 <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_DFSDM_IRQHandler+0x294>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d9f1      	bls.n	80045cc <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f103 0218 	add.w	r2, r3, #24
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f202 	lsl.w	r2, r1, r2
 80045f8:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80045fa:	4a07      	ldr	r2, [pc, #28]	@ (8004618 <HAL_DFSDM_IRQHandler+0x2c4>)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fcda 	bl	8003fbc <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8004608:	e000      	b.n	800460c <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800460a:	bf00      	nop
}
 800460c:	bf00      	nop
 800460e:	3730      	adds	r7, #48	@ 0x30
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40016100 	.word	0x40016100
 8004618:	2000493c 	.word	0x2000493c

0800461c <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ffcc 	bl	8004630 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff ffb4 	bl	800461c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2203      	movs	r2, #3
 80046ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff ffcd 	bl	8004670 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <DFSDM_GetChannelFromInstance+0x7c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d102      	bne.n	80046f6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e02b      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <DFSDM_GetChannelFromInstance+0x80>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d102      	bne.n	8004704 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e024      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a17      	ldr	r2, [pc, #92]	@ (8004764 <DFSDM_GetChannelFromInstance+0x84>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d102      	bne.n	8004712 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800470c:	2302      	movs	r3, #2
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e01d      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a14      	ldr	r2, [pc, #80]	@ (8004768 <DFSDM_GetChannelFromInstance+0x88>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d102      	bne.n	8004720 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800471a:	2304      	movs	r3, #4
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e016      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a12      	ldr	r2, [pc, #72]	@ (800476c <DFSDM_GetChannelFromInstance+0x8c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d102      	bne.n	800472e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004728:	2305      	movs	r3, #5
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e00f      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a0f      	ldr	r2, [pc, #60]	@ (8004770 <DFSDM_GetChannelFromInstance+0x90>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d102      	bne.n	800473c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004736:	2306      	movs	r3, #6
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e008      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0d      	ldr	r2, [pc, #52]	@ (8004774 <DFSDM_GetChannelFromInstance+0x94>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d102      	bne.n	800474a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004744:	2307      	movs	r3, #7
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e001      	b.n	800474e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800474a:	2303      	movs	r3, #3
 800474c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40016000 	.word	0x40016000
 8004760:	40016020 	.word	0x40016020
 8004764:	40016040 	.word	0x40016040
 8004768:	40016080 	.word	0x40016080
 800476c:	400160a0 	.word	0x400160a0
 8004770:	400160c0 	.word	0x400160c0
 8004774:	400160e0 	.word	0x400160e0

08004778 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e033      	b.n	8004802 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80047b8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d116      	bne.n	8004802 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0202 	orr.w	r2, r2, #2
 80047ea:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d102      	bne.n	80047fc <DFSDM_RegConvStart+0x84>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	e000      	b.n	80047fe <DFSDM_RegConvStart+0x86>
 80047fc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <DFSDM_RegConvStart+0x98>
 800480c:	2202      	movs	r2, #2
 800480e:	e000      	b.n	8004812 <DFSDM_RegConvStart+0x9a>
 8004810:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004840:	2b01      	cmp	r3, #1
 8004842:	d107      	bne.n	8004854 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800486a:	2b04      	cmp	r3, #4
 800486c:	d116      	bne.n	800489c <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0202 	orr.w	r2, r2, #2
 8004884:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 800488c:	2b01      	cmp	r3, #1
 800488e:	d102      	bne.n	8004896 <DFSDM_RegConvStop+0x72>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	e000      	b.n	8004898 <DFSDM_RegConvStop+0x74>
 8004896:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d101      	bne.n	80048aa <DFSDM_RegConvStop+0x86>
 80048a6:	2201      	movs	r2, #1
 80048a8:	e000      	b.n	80048ac <DFSDM_RegConvStop+0x88>
 80048aa:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e08d      	b.n	80049ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b47      	ldr	r3, [pc, #284]	@ (80049f8 <HAL_DMA_Init+0x138>)
 80048da:	429a      	cmp	r2, r3
 80048dc:	d80f      	bhi.n	80048fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b45      	ldr	r3, [pc, #276]	@ (80049fc <HAL_DMA_Init+0x13c>)
 80048e6:	4413      	add	r3, r2
 80048e8:	4a45      	ldr	r2, [pc, #276]	@ (8004a00 <HAL_DMA_Init+0x140>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	009a      	lsls	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a42      	ldr	r2, [pc, #264]	@ (8004a04 <HAL_DMA_Init+0x144>)
 80048fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80048fc:	e00e      	b.n	800491c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <HAL_DMA_Init+0x148>)
 8004906:	4413      	add	r3, r2
 8004908:	4a3d      	ldr	r2, [pc, #244]	@ (8004a00 <HAL_DMA_Init+0x140>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	009a      	lsls	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a3c      	ldr	r2, [pc, #240]	@ (8004a0c <HAL_DMA_Init+0x14c>)
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004936:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa12 	bl	8004d98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800497c:	d102      	bne.n	8004984 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004998:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d010      	beq.n	80049c4 <HAL_DMA_Init+0x104>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d80c      	bhi.n	80049c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa32 	bl	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e008      	b.n	80049d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40020407 	.word	0x40020407
 80049fc:	bffdfff8 	.word	0xbffdfff8
 8004a00:	cccccccd 	.word	0xcccccccd
 8004a04:	40020000 	.word	0x40020000
 8004a08:	bffdfbf8 	.word	0xbffdfbf8
 8004a0c:	40020400 	.word	0x40020400

08004a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_DMA_Start_IT+0x20>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e066      	b.n	8004afe <HAL_DMA_Start_IT+0xee>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d155      	bne.n	8004af0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f957 	bl	8004d1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 020e 	orr.w	r2, r2, #14
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e00f      	b.n	8004aa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 020a 	orr.w	r2, r2, #10
 8004aa6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004adc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e005      	b.n	8004afc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d008      	beq.n	8004b30 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e040      	b.n	8004bb2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 020e 	bic.w	r2, r2, #14
 8004b3e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b4e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b64:	f003 021c 	and.w	r2, r3, #28
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b72:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	f003 031c 	and.w	r3, r3, #28
 8004bde:	2204      	movs	r2, #4
 8004be0:	409a      	lsls	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d026      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x7a>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d021      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0204 	bic.w	r2, r2, #4
 8004c10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f003 021c 	and.w	r2, r3, #28
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	2104      	movs	r1, #4
 8004c20:	fa01 f202 	lsl.w	r2, r1, r2
 8004c24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d071      	beq.n	8004d12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c36:	e06c      	b.n	8004d12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3c:	f003 031c 	and.w	r3, r3, #28
 8004c40:	2202      	movs	r2, #2
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02e      	beq.n	8004caa <HAL_DMA_IRQHandler+0xec>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d029      	beq.n	8004caa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 020a 	bic.w	r2, r2, #10
 8004c72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	f003 021c 	and.w	r2, r3, #28
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	2102      	movs	r1, #2
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d038      	beq.n	8004d12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ca8:	e033      	b.n	8004d12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	f003 031c 	and.w	r3, r3, #28
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02a      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x156>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d025      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 020e 	bic.w	r2, r2, #14
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cdc:	f003 021c 	and.w	r2, r3, #28
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d004      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
}
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d44:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f003 021c 	and.w	r2, r3, #28
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	2101      	movs	r1, #1
 8004d54:	fa01 f202 	lsl.w	r2, r1, r2
 8004d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d108      	bne.n	8004d7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d7a:	e007      	b.n	8004d8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d80a      	bhi.n	8004dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004db8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6493      	str	r3, [r2, #72]	@ 0x48
 8004dc0:	e007      	b.n	8004dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	009a      	lsls	r2, r3, #2
 8004dca:	4b0f      	ldr	r3, [pc, #60]	@ (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3b08      	subs	r3, #8
 8004dda:	4a0c      	ldr	r2, [pc, #48]	@ (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004de8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40020407 	.word	0x40020407
 8004e08:	4002081c 	.word	0x4002081c
 8004e0c:	cccccccd 	.word	0xcccccccd
 8004e10:	40020880 	.word	0x40020880

08004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a08      	ldr	r2, [pc, #32]	@ (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2201      	movs	r2, #1
 8004e42:	409a      	lsls	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	1000823f 	.word	0x1000823f
 8004e58:	40020940 	.word	0x40020940

08004e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e6a:	e166      	b.n	800513a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8158 	beq.w	8005134 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d005      	beq.n	8004e9c <HAL_GPIO_Init+0x40>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d130      	bne.n	8004efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0201 	and.w	r2, r3, #1
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d017      	beq.n	8004f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	2203      	movs	r2, #3
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d123      	bne.n	8004f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	08da      	lsrs	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3208      	adds	r2, #8
 8004f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	6939      	ldr	r1, [r7, #16]
 8004f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	2203      	movs	r2, #3
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0203 	and.w	r2, r3, #3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80b2 	beq.w	8005134 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd0:	4b61      	ldr	r3, [pc, #388]	@ (8005158 <HAL_GPIO_Init+0x2fc>)
 8004fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd4:	4a60      	ldr	r2, [pc, #384]	@ (8005158 <HAL_GPIO_Init+0x2fc>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8005158 <HAL_GPIO_Init+0x2fc>)
 8004fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	@ (800515c <HAL_GPIO_Init+0x300>)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	089b      	lsrs	r3, r3, #2
 8004fee:	3302      	adds	r3, #2
 8004ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	220f      	movs	r2, #15
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005012:	d02b      	beq.n	800506c <HAL_GPIO_Init+0x210>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a52      	ldr	r2, [pc, #328]	@ (8005160 <HAL_GPIO_Init+0x304>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d025      	beq.n	8005068 <HAL_GPIO_Init+0x20c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a51      	ldr	r2, [pc, #324]	@ (8005164 <HAL_GPIO_Init+0x308>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01f      	beq.n	8005064 <HAL_GPIO_Init+0x208>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a50      	ldr	r2, [pc, #320]	@ (8005168 <HAL_GPIO_Init+0x30c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d019      	beq.n	8005060 <HAL_GPIO_Init+0x204>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a4f      	ldr	r2, [pc, #316]	@ (800516c <HAL_GPIO_Init+0x310>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <HAL_GPIO_Init+0x200>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a4e      	ldr	r2, [pc, #312]	@ (8005170 <HAL_GPIO_Init+0x314>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00d      	beq.n	8005058 <HAL_GPIO_Init+0x1fc>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a4d      	ldr	r2, [pc, #308]	@ (8005174 <HAL_GPIO_Init+0x318>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <HAL_GPIO_Init+0x1f8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a4c      	ldr	r2, [pc, #304]	@ (8005178 <HAL_GPIO_Init+0x31c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d101      	bne.n	8005050 <HAL_GPIO_Init+0x1f4>
 800504c:	2307      	movs	r3, #7
 800504e:	e00e      	b.n	800506e <HAL_GPIO_Init+0x212>
 8005050:	2308      	movs	r3, #8
 8005052:	e00c      	b.n	800506e <HAL_GPIO_Init+0x212>
 8005054:	2306      	movs	r3, #6
 8005056:	e00a      	b.n	800506e <HAL_GPIO_Init+0x212>
 8005058:	2305      	movs	r3, #5
 800505a:	e008      	b.n	800506e <HAL_GPIO_Init+0x212>
 800505c:	2304      	movs	r3, #4
 800505e:	e006      	b.n	800506e <HAL_GPIO_Init+0x212>
 8005060:	2303      	movs	r3, #3
 8005062:	e004      	b.n	800506e <HAL_GPIO_Init+0x212>
 8005064:	2302      	movs	r3, #2
 8005066:	e002      	b.n	800506e <HAL_GPIO_Init+0x212>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_GPIO_Init+0x212>
 800506c:	2300      	movs	r3, #0
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	f002 0203 	and.w	r2, r2, #3
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	4093      	lsls	r3, r2
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800507e:	4937      	ldr	r1, [pc, #220]	@ (800515c <HAL_GPIO_Init+0x300>)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	3302      	adds	r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800508c:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <HAL_GPIO_Init+0x320>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	43db      	mvns	r3, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050b0:	4a32      	ldr	r2, [pc, #200]	@ (800517c <HAL_GPIO_Init+0x320>)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050b6:	4b31      	ldr	r3, [pc, #196]	@ (800517c <HAL_GPIO_Init+0x320>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	43db      	mvns	r3, r3
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050da:	4a28      	ldr	r2, [pc, #160]	@ (800517c <HAL_GPIO_Init+0x320>)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80050e0:	4b26      	ldr	r3, [pc, #152]	@ (800517c <HAL_GPIO_Init+0x320>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005104:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <HAL_GPIO_Init+0x320>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_GPIO_Init+0x320>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	43db      	mvns	r3, r3
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800512e:	4a13      	ldr	r2, [pc, #76]	@ (800517c <HAL_GPIO_Init+0x320>)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3301      	adds	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	f47f ae91 	bne.w	8004e6c <HAL_GPIO_Init+0x10>
  }
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40021000 	.word	0x40021000
 800515c:	40010000 	.word	0x40010000
 8005160:	48000400 	.word	0x48000400
 8005164:	48000800 	.word	0x48000800
 8005168:	48000c00 	.word	0x48000c00
 800516c:	48001000 	.word	0x48001000
 8005170:	48001400 	.word	0x48001400
 8005174:	48001800 	.word	0x48001800
 8005178:	48001c00 	.word	0x48001c00
 800517c:	40010400 	.word	0x40010400

08005180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	887b      	ldrh	r3, [r7, #2]
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
 800519c:	e001      	b.n	80051a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ba:	4b08      	ldr	r3, [pc, #32]	@ (80051dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051c6:	4a05      	ldr	r2, [pc, #20]	@ (80051dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc f8e0 	bl	8001394 <HAL_GPIO_EXTI_Callback>
  }
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40010400 	.word	0x40010400

080051e0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0c3      	b.n	800537e <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d101      	bne.n	8005206 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0bb      	b.n	800537e <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d101      	bne.n	8005216 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0b3      	b.n	800537e <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc ff94 	bl	8002160 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005246:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d11b      	bne.n	8005288 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 800525a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6891      	ldr	r1, [r2, #8]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68d2      	ldr	r2, [r2, #12]
 8005266:	4311      	orrs	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6992      	ldr	r2, [r2, #24]
 800526c:	4311      	orrs	r1, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6912      	ldr	r2, [r2, #16]
 8005272:	4311      	orrs	r1, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6952      	ldr	r2, [r2, #20]
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	69d2      	ldr	r2, [r2, #28]
 800527e:	4311      	orrs	r1, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	430b      	orrs	r3, r1
 8005286:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b0c      	cmp	r3, #12
 800528e:	d115      	bne.n	80052bc <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 800529a:	f023 030e 	bic.w	r3, r3, #14
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6891      	ldr	r1, [r2, #8]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68d2      	ldr	r2, [r2, #12]
 80052a6:	4311      	orrs	r1, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6952      	ldr	r2, [r2, #20]
 80052ac:	4311      	orrs	r1, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	69d2      	ldr	r2, [r2, #28]
 80052b2:	4311      	orrs	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d118      	bne.n	80052f6 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 80052ce:	f023 030e 	bic.w	r3, r3, #14
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6891      	ldr	r1, [r2, #8]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	4311      	orrs	r1, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6912      	ldr	r2, [r2, #16]
 80052e0:	4311      	orrs	r1, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6952      	ldr	r2, [r2, #20]
 80052e6:	4311      	orrs	r1, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	69d2      	ldr	r2, [r2, #28]
 80052ec:	4311      	orrs	r1, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052fe:	d12a      	bne.n	8005356 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d013      	beq.n	8005330 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005312:	4313      	orrs	r3, r2
 8005314:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005320:	f023 031f 	bic.w	r3, r3, #31
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	430b      	orrs	r3, r1
 800532c:	6053      	str	r3, [r2, #4]
 800532e:	e012      	b.n	8005356 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800533a:	4313      	orrs	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005348:	f023 031f 	bic.w	r3, r3, #31
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	430b      	orrs	r3, r1
 8005354:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8005356:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <HAL_OPAMP_Init+0x1a8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4909      	ldr	r1, [pc, #36]	@ (8005388 <HAL_OPAMP_Init+0x1a8>)
 8005364:	4313      	orrs	r3, r2
 8005366:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40007800 	.word	0x40007800

0800538c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005390:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539c:	d102      	bne.n	80053a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800539e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053a2:	e00b      	b.n	80053bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80053a4:	4b08      	ldr	r3, [pc, #32]	@ (80053c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80053a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b2:	d102      	bne.n	80053ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80053b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053b8:	e000      	b.n	80053bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80053ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80053bc:	4618      	mov	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40007000 	.word	0x40007000

080053cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d141      	bne.n	800545e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053da:	4b4b      	ldr	r3, [pc, #300]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e6:	d131      	bne.n	800544c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053e8:	4b47      	ldr	r3, [pc, #284]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ee:	4a46      	ldr	r2, [pc, #280]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053f8:	4b43      	ldr	r3, [pc, #268]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005400:	4a41      	ldr	r2, [pc, #260]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005406:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005408:	4b40      	ldr	r3, [pc, #256]	@ (800550c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2232      	movs	r2, #50	@ 0x32
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	4a3f      	ldr	r2, [pc, #252]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	0c9b      	lsrs	r3, r3, #18
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800541e:	e002      	b.n	8005426 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3b01      	subs	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005426:	4b38      	ldr	r3, [pc, #224]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005432:	d102      	bne.n	800543a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f2      	bne.n	8005420 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800543a:	4b33      	ldr	r3, [pc, #204]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005446:	d158      	bne.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e057      	b.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800544c:	4b2e      	ldr	r3, [pc, #184]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005452:	4a2d      	ldr	r2, [pc, #180]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800545c:	e04d      	b.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005464:	d141      	bne.n	80054ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005466:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005472:	d131      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005474:	4b24      	ldr	r3, [pc, #144]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800547a:	4a23      	ldr	r2, [pc, #140]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005484:	4b20      	ldr	r3, [pc, #128]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800548c:	4a1e      	ldr	r2, [pc, #120]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2232      	movs	r2, #50	@ 0x32
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	4a1c      	ldr	r2, [pc, #112]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	0c9b      	lsrs	r3, r3, #18
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054aa:	e002      	b.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b2:	4b15      	ldr	r3, [pc, #84]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054be:	d102      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f2      	bne.n	80054ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054c6:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d2:	d112      	bne.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e011      	b.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054de:	4a0a      	ldr	r2, [pc, #40]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054e8:	e007      	b.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054f2:	4a05      	ldr	r2, [pc, #20]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40007000 	.word	0x40007000
 800550c:	20000008 	.word	0x20000008
 8005510:	431bde83 	.word	0x431bde83

08005514 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f000 bc08 	b.w	8005d38 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005528:	4b96      	ldr	r3, [pc, #600]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005532:	4b94      	ldr	r3, [pc, #592]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80e4 	beq.w	8005712 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <HAL_RCC_OscConfig+0x4c>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b0c      	cmp	r3, #12
 8005554:	f040 808b 	bne.w	800566e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	f040 8087 	bne.w	800566e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005560:	4b88      	ldr	r3, [pc, #544]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_OscConfig+0x64>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e3df      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	4b81      	ldr	r3, [pc, #516]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_RCC_OscConfig+0x7e>
 8005588:	4b7e      	ldr	r3, [pc, #504]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005590:	e005      	b.n	800559e <HAL_RCC_OscConfig+0x8a>
 8005592:	4b7c      	ldr	r3, [pc, #496]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800559e:	4293      	cmp	r3, r2
 80055a0:	d223      	bcs.n	80055ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fdcc 	bl	8006144 <RCC_SetFlashLatencyFromMSIRange>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e3c0      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055b6:	4b73      	ldr	r3, [pc, #460]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a72      	ldr	r2, [pc, #456]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055bc:	f043 0308 	orr.w	r3, r3, #8
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4b70      	ldr	r3, [pc, #448]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	496d      	ldr	r1, [pc, #436]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	4968      	ldr	r1, [pc, #416]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	e025      	b.n	8005636 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ea:	4b66      	ldr	r3, [pc, #408]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a65      	ldr	r2, [pc, #404]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055f0:	f043 0308 	orr.w	r3, r3, #8
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b63      	ldr	r3, [pc, #396]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	4960      	ldr	r1, [pc, #384]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005608:	4b5e      	ldr	r3, [pc, #376]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	495b      	ldr	r1, [pc, #364]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005618:	4313      	orrs	r3, r2
 800561a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fd8c 	bl	8006144 <RCC_SetFlashLatencyFromMSIRange>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e380      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005636:	f000 fcc1 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 800563a:	4602      	mov	r2, r0
 800563c:	4b51      	ldr	r3, [pc, #324]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	4950      	ldr	r1, [pc, #320]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005648:	5ccb      	ldrb	r3, [r1, r3]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	4a4e      	ldr	r2, [pc, #312]	@ (800578c <HAL_RCC_OscConfig+0x278>)
 8005654:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005656:	4b4e      	ldr	r3, [pc, #312]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc ffd8 	bl	8002610 <HAL_InitTick>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d052      	beq.n	8005710 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	e364      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d032      	beq.n	80056dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005676:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a42      	ldr	r2, [pc, #264]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005682:	f7fd f815 	bl	80026b0 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800568a:	f7fd f811 	bl	80026b0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e34d      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800569c:	4b39      	ldr	r3, [pc, #228]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056a8:	4b36      	ldr	r3, [pc, #216]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a35      	ldr	r2, [pc, #212]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b33      	ldr	r3, [pc, #204]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4930      	ldr	r1, [pc, #192]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	492b      	ldr	r1, [pc, #172]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]
 80056da:	e01a      	b.n	8005712 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056dc:	4b29      	ldr	r3, [pc, #164]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a28      	ldr	r2, [pc, #160]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056e8:	f7fc ffe2 	bl	80026b0 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056f0:	f7fc ffde 	bl	80026b0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e31a      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005702:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x1dc>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d073      	beq.n	8005806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d005      	beq.n	8005730 <HAL_RCC_OscConfig+0x21c>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d10e      	bne.n	8005748 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d10b      	bne.n	8005748 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d063      	beq.n	8005804 <HAL_RCC_OscConfig+0x2f0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d15f      	bne.n	8005804 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e2f7      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x24c>
 8005752:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a0b      	ldr	r2, [pc, #44]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e025      	b.n	80057ac <HAL_RCC_OscConfig+0x298>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005768:	d114      	bne.n	8005794 <HAL_RCC_OscConfig+0x280>
 800576a:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a05      	ldr	r2, [pc, #20]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	4b03      	ldr	r3, [pc, #12]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a02      	ldr	r2, [pc, #8]	@ (8005784 <HAL_RCC_OscConfig+0x270>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e013      	b.n	80057ac <HAL_RCC_OscConfig+0x298>
 8005784:	40021000 	.word	0x40021000
 8005788:	0800b10c 	.word	0x0800b10c
 800578c:	20000008 	.word	0x20000008
 8005790:	2000000c 	.word	0x2000000c
 8005794:	4ba0      	ldr	r3, [pc, #640]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a9f      	ldr	r2, [pc, #636]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800579a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b9d      	ldr	r3, [pc, #628]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a9c      	ldr	r2, [pc, #624]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80057a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d013      	beq.n	80057dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fc ff7c 	bl	80026b0 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fc ff78 	bl	80026b0 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	@ 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e2b4      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ce:	4b92      	ldr	r3, [pc, #584]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x2a8>
 80057da:	e014      	b.n	8005806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fc ff68 	bl	80026b0 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e4:	f7fc ff64 	bl	80026b0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	@ 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e2a0      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f6:	4b88      	ldr	r3, [pc, #544]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x2d0>
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d060      	beq.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d005      	beq.n	8005824 <HAL_RCC_OscConfig+0x310>
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d119      	bne.n	8005852 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d116      	bne.n	8005852 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005824:	4b7c      	ldr	r3, [pc, #496]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_OscConfig+0x328>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e27d      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583c:	4b76      	ldr	r3, [pc, #472]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	061b      	lsls	r3, r3, #24
 800584a:	4973      	ldr	r1, [pc, #460]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005850:	e040      	b.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d023      	beq.n	80058a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800585a:	4b6f      	ldr	r3, [pc, #444]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a6e      	ldr	r2, [pc, #440]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fc ff23 	bl	80026b0 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800586e:	f7fc ff1f 	bl	80026b0 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e25b      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005880:	4b65      	ldr	r3, [pc, #404]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588c:	4b62      	ldr	r3, [pc, #392]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	061b      	lsls	r3, r3, #24
 800589a:	495f      	ldr	r1, [pc, #380]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800589c:	4313      	orrs	r3, r2
 800589e:	604b      	str	r3, [r1, #4]
 80058a0:	e018      	b.n	80058d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80058a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ae:	f7fc feff 	bl	80026b0 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b6:	f7fc fefb 	bl	80026b0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e237      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c8:	4b53      	ldr	r3, [pc, #332]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d03c      	beq.n	800595a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01c      	beq.n	8005922 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f8:	f7fc feda 	bl	80026b0 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005900:	f7fc fed6 	bl	80026b0 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e212      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005912:	4b41      	ldr	r3, [pc, #260]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ef      	beq.n	8005900 <HAL_RCC_OscConfig+0x3ec>
 8005920:	e01b      	b.n	800595a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005922:	4b3d      	ldr	r3, [pc, #244]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005928:	4a3b      	ldr	r2, [pc, #236]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7fc febd 	bl	80026b0 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593a:	f7fc feb9 	bl	80026b0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e1f5      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800594c:	4b32      	ldr	r3, [pc, #200]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800594e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1ef      	bne.n	800593a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80a6 	beq.w	8005ab4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005968:	2300      	movs	r3, #0
 800596a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800596c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800596e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10d      	bne.n	8005994 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005978:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800597a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597c:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 800597e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005982:	6593      	str	r3, [r2, #88]	@ 0x58
 8005984:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005990:	2301      	movs	r3, #1
 8005992:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005994:	4b21      	ldr	r3, [pc, #132]	@ (8005a1c <HAL_RCC_OscConfig+0x508>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d118      	bne.n	80059d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a1c <HAL_RCC_OscConfig+0x508>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <HAL_RCC_OscConfig+0x508>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ac:	f7fc fe80 	bl	80026b0 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b4:	f7fc fe7c 	bl	80026b0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e1b8      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c6:	4b15      	ldr	r3, [pc, #84]	@ (8005a1c <HAL_RCC_OscConfig+0x508>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d108      	bne.n	80059ec <HAL_RCC_OscConfig+0x4d8>
 80059da:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059ea:	e029      	b.n	8005a40 <HAL_RCC_OscConfig+0x52c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d115      	bne.n	8005a20 <HAL_RCC_OscConfig+0x50c>
 80059f4:	4b08      	ldr	r3, [pc, #32]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	4a07      	ldr	r2, [pc, #28]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a04:	4b04      	ldr	r3, [pc, #16]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0a:	4a03      	ldr	r2, [pc, #12]	@ (8005a18 <HAL_RCC_OscConfig+0x504>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a14:	e014      	b.n	8005a40 <HAL_RCC_OscConfig+0x52c>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40007000 	.word	0x40007000
 8005a20:	4b9d      	ldr	r3, [pc, #628]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a26:	4a9c      	ldr	r2, [pc, #624]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a30:	4b99      	ldr	r3, [pc, #612]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a36:	4a98      	ldr	r2, [pc, #608]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005a38:	f023 0304 	bic.w	r3, r3, #4
 8005a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fc fe32 	bl	80026b0 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a50:	f7fc fe2e 	bl	80026b0 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e168      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a66:	4b8c      	ldr	r3, [pc, #560]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ed      	beq.n	8005a50 <HAL_RCC_OscConfig+0x53c>
 8005a74:	e015      	b.n	8005aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a76:	f7fc fe1b 	bl	80026b0 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fc fe17 	bl	80026b0 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e151      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a94:	4b80      	ldr	r3, [pc, #512]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ed      	bne.n	8005a7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	4a7a      	ldr	r2, [pc, #488]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d03c      	beq.n	8005b3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ac8:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ace:	4a72      	ldr	r2, [pc, #456]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fc fdea 	bl	80026b0 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae0:	f7fc fde6 	bl	80026b0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e122      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005af2:	4b69      	ldr	r3, [pc, #420]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ef      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x5cc>
 8005b00:	e01b      	b.n	8005b3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b02:	4b65      	ldr	r3, [pc, #404]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b08:	4a63      	ldr	r2, [pc, #396]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7fc fdcd 	bl	80026b0 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b1a:	f7fc fdc9 	bl	80026b0 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e105      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1ef      	bne.n	8005b1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80f9 	beq.w	8005d36 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	f040 80cf 	bne.w	8005cec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b4e:	4b52      	ldr	r3, [pc, #328]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d12c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d123      	bne.n	8005bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d11b      	bne.n	8005bbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d113      	bne.n	8005bbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d071      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	d068      	beq.n	8005c94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bc2:	4b35      	ldr	r3, [pc, #212]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d105      	bne.n	8005bda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bce:	4b32      	ldr	r3, [pc, #200]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e0ac      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005bde:	4b2e      	ldr	r3, [pc, #184]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005be4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005be8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bea:	f7fc fd61 	bl	80026b0 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf2:	f7fc fd5d 	bl	80026b0 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e099      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c04:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f0      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c10:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	4b21      	ldr	r3, [pc, #132]	@ (8005c9c <HAL_RCC_OscConfig+0x788>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c20:	3a01      	subs	r2, #1
 8005c22:	0112      	lsls	r2, r2, #4
 8005c24:	4311      	orrs	r1, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c2a:	0212      	lsls	r2, r2, #8
 8005c2c:	4311      	orrs	r1, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c32:	0852      	lsrs	r2, r2, #1
 8005c34:	3a01      	subs	r2, #1
 8005c36:	0552      	lsls	r2, r2, #21
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c3e:	0852      	lsrs	r2, r2, #1
 8005c40:	3a01      	subs	r2, #1
 8005c42:	0652      	lsls	r2, r2, #25
 8005c44:	4311      	orrs	r1, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c4a:	06d2      	lsls	r2, r2, #27
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	4912      	ldr	r1, [pc, #72]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c54:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a0f      	ldr	r2, [pc, #60]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c60:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a0c      	ldr	r2, [pc, #48]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c6c:	f7fc fd20 	bl	80026b0 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fc fd1c 	bl	80026b0 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e058      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c86:	4b04      	ldr	r3, [pc, #16]	@ (8005c98 <HAL_RCC_OscConfig+0x784>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c92:	e050      	b.n	8005d36 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e04f      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca0:	4b27      	ldr	r3, [pc, #156]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d144      	bne.n	8005d36 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cac:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a23      	ldr	r2, [pc, #140]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cb8:	4b21      	ldr	r3, [pc, #132]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a20      	ldr	r2, [pc, #128]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cc4:	f7fc fcf4 	bl	80026b0 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fc fcf0 	bl	80026b0 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e02c      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cde:	4b18      	ldr	r3, [pc, #96]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x7b8>
 8005cea:	e024      	b.n	8005d36 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d01f      	beq.n	8005d32 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf2:	4b13      	ldr	r3, [pc, #76]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a12      	ldr	r2, [pc, #72]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfe:	f7fc fcd7 	bl	80026b0 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d06:	f7fc fcd3 	bl	80026b0 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e00f      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d18:	4b09      	ldr	r3, [pc, #36]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1f0      	bne.n	8005d06 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d24:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	4905      	ldr	r1, [pc, #20]	@ (8005d40 <HAL_RCC_OscConfig+0x82c>)
 8005d2a:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <HAL_RCC_OscConfig+0x830>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60cb      	str	r3, [r1, #12]
 8005d30:	e001      	b.n	8005d36 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40021000 	.word	0x40021000
 8005d44:	feeefffc 	.word	0xfeeefffc

08005d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e11d      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d60:	4b90      	ldr	r3, [pc, #576]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d910      	bls.n	8005d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 020f 	bic.w	r2, r3, #15
 8005d76:	498b      	ldr	r1, [pc, #556]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b89      	ldr	r3, [pc, #548]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e105      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	4b81      	ldr	r3, [pc, #516]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d908      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dac:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	497b      	ldr	r1, [pc, #492]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d079      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d11e      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd2:	4b75      	ldr	r3, [pc, #468]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0dc      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005de2:	f000 fa09 	bl	80061f8 <RCC_GetSysClockFreqFromPLLSource>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4a70      	ldr	r2, [pc, #448]	@ (8005fac <HAL_RCC_ClockConfig+0x264>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d946      	bls.n	8005e7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005dee:	4b6e      	ldr	r3, [pc, #440]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d140      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e02:	4a69      	ldr	r2, [pc, #420]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e035      	b.n	8005e7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d107      	bne.n	8005e28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e18:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d115      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0b9      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e30:	4b5d      	ldr	r3, [pc, #372]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0ad      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e40:	4b59      	ldr	r3, [pc, #356]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0a5      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005e50:	f000 f8b4 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4a55      	ldr	r2, [pc, #340]	@ (8005fac <HAL_RCC_ClockConfig+0x264>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d90f      	bls.n	8005e7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005e5c:	4b52      	ldr	r3, [pc, #328]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e68:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e70:	4a4d      	ldr	r2, [pc, #308]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e78:	2380      	movs	r3, #128	@ 0x80
 8005e7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 0203 	bic.w	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4947      	ldr	r1, [pc, #284]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e8e:	f7fc fc0f 	bl	80026b0 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e94:	e00a      	b.n	8005eac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e96:	f7fc fc0b 	bl	80026b0 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e077      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eac:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 020c 	and.w	r2, r3, #12
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d1eb      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ec4:	4b38      	ldr	r3, [pc, #224]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4a37      	ldr	r2, [pc, #220]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ece:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d010      	beq.n	8005efe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d208      	bcs.n	8005efe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eec:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	492b      	ldr	r1, [pc, #172]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005efe:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d210      	bcs.n	8005f2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0c:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f023 020f 	bic.w	r2, r3, #15
 8005f14:	4923      	ldr	r1, [pc, #140]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1c:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <HAL_RCC_ClockConfig+0x25c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e036      	b.n	8005f9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4918      	ldr	r1, [pc, #96]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f58:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4910      	ldr	r1, [pc, #64]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f6c:	f000 f826 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <HAL_RCC_ClockConfig+0x260>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	490c      	ldr	r1, [pc, #48]	@ (8005fb0 <HAL_RCC_ClockConfig+0x268>)
 8005f7e:	5ccb      	ldrb	r3, [r1, r3]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
 8005f88:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <HAL_RCC_ClockConfig+0x26c>)
 8005f8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <HAL_RCC_ClockConfig+0x270>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fc fb3d 	bl	8002610 <HAL_InitTick>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73fb      	strb	r3, [r7, #15]

  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40022000 	.word	0x40022000
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	04c4b400 	.word	0x04c4b400
 8005fb0:	0800b10c 	.word	0x0800b10c
 8005fb4:	20000008 	.word	0x20000008
 8005fb8:	2000000c 	.word	0x2000000c

08005fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	@ 0x24
 8005fc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fca:	4b3e      	ldr	r3, [pc, #248]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b0c      	cmp	r3, #12
 8005fe8:	d121      	bne.n	800602e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d11e      	bne.n	800602e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ff0:	4b34      	ldr	r3, [pc, #208]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ffc:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	e005      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800600c:	4b2d      	ldr	r3, [pc, #180]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006018:	4a2b      	ldr	r2, [pc, #172]	@ (80060c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10d      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800602c:	e00a      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b04      	cmp	r3, #4
 8006032:	d102      	bne.n	800603a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006034:	4b25      	ldr	r3, [pc, #148]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e004      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d101      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006040:	4b23      	ldr	r3, [pc, #140]	@ (80060d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006042:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b0c      	cmp	r3, #12
 8006048:	d134      	bne.n	80060b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800604a:	4b1e      	ldr	r3, [pc, #120]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d003      	beq.n	8006062 <HAL_RCC_GetSysClockFreq+0xa6>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d003      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0xac>
 8006060:	e005      	b.n	800606e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006064:	617b      	str	r3, [r7, #20]
      break;
 8006066:	e005      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006068:	4b19      	ldr	r3, [pc, #100]	@ (80060d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800606a:	617b      	str	r3, [r7, #20]
      break;
 800606c:	e002      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	617b      	str	r3, [r7, #20]
      break;
 8006072:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006074:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	3301      	adds	r3, #1
 8006080:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	fb03 f202 	mul.w	r2, r3, r2
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800609a:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	0e5b      	lsrs	r3, r3, #25
 80060a0:	f003 0303 	and.w	r3, r3, #3
 80060a4:	3301      	adds	r3, #1
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060b4:	69bb      	ldr	r3, [r7, #24]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3724      	adds	r7, #36	@ 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40021000 	.word	0x40021000
 80060c8:	0800b124 	.word	0x0800b124
 80060cc:	00f42400 	.word	0x00f42400
 80060d0:	007a1200 	.word	0x007a1200

080060d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d8:	4b03      	ldr	r3, [pc, #12]	@ (80060e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20000008 	.word	0x20000008

080060ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060f0:	f7ff fff0 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4904      	ldr	r1, [pc, #16]	@ (8006114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40021000 	.word	0x40021000
 8006114:	0800b11c 	.word	0x0800b11c

08006118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800611c:	f7ff ffda 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b06      	ldr	r3, [pc, #24]	@ (800613c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	0adb      	lsrs	r3, r3, #11
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4904      	ldr	r1, [pc, #16]	@ (8006140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40021000 	.word	0x40021000
 8006140:	0800b11c 	.word	0x0800b11c

08006144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006150:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800615c:	f7ff f916 	bl	800538c <HAL_PWREx_GetVoltageRange>
 8006160:	6178      	str	r0, [r7, #20]
 8006162:	e014      	b.n	800618e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006164:	4b22      	ldr	r3, [pc, #136]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006168:	4a21      	ldr	r2, [pc, #132]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800616e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006170:	4b1f      	ldr	r3, [pc, #124]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800617c:	f7ff f906 	bl	800538c <HAL_PWREx_GetVoltageRange>
 8006180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006182:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006186:	4a1a      	ldr	r2, [pc, #104]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800618c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006194:	d10b      	bne.n	80061ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b80      	cmp	r3, #128	@ 0x80
 800619a:	d913      	bls.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2ba0      	cmp	r3, #160	@ 0xa0
 80061a0:	d902      	bls.n	80061a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061a2:	2302      	movs	r3, #2
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	e00d      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061a8:	2301      	movs	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	e00a      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b2:	d902      	bls.n	80061ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80061b4:	2302      	movs	r3, #2
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	e004      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b70      	cmp	r3, #112	@ 0x70
 80061be:	d101      	bne.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061c0:	2301      	movs	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061c4:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 020f 	bic.w	r2, r3, #15
 80061cc:	4909      	ldr	r1, [pc, #36]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061d4:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d001      	beq.n	80061e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40022000 	.word	0x40022000

080061f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061fe:	4b2d      	ldr	r3, [pc, #180]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d00b      	beq.n	8006226 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d825      	bhi.n	8006260 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d008      	beq.n	800622c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d11f      	bne.n	8006260 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006220:	4b25      	ldr	r3, [pc, #148]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006222:	613b      	str	r3, [r7, #16]
    break;
 8006224:	e01f      	b.n	8006266 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006226:	4b25      	ldr	r3, [pc, #148]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006228:	613b      	str	r3, [r7, #16]
    break;
 800622a:	e01c      	b.n	8006266 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800622c:	4b21      	ldr	r3, [pc, #132]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006238:	4b1e      	ldr	r3, [pc, #120]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800623a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e005      	b.n	8006254 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006248:	4b1a      	ldr	r3, [pc, #104]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006254:	4a1a      	ldr	r2, [pc, #104]	@ (80062c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800625c:	613b      	str	r3, [r7, #16]
    break;
 800625e:	e002      	b.n	8006266 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
    break;
 8006264:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	091b      	lsrs	r3, r3, #4
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	3301      	adds	r3, #1
 8006272:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006274:	4b0f      	ldr	r3, [pc, #60]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	fb03 f202 	mul.w	r2, r3, r2
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800628c:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	0e5b      	lsrs	r3, r3, #25
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	3301      	adds	r3, #1
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80062a6:	683b      	ldr	r3, [r7, #0]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	40021000 	.word	0x40021000
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	007a1200 	.word	0x007a1200
 80062c0:	0800b124 	.word	0x0800b124

080062c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062cc:	2300      	movs	r3, #0
 80062ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d0:	2300      	movs	r3, #0
 80062d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d040      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e4:	2b80      	cmp	r3, #128	@ 0x80
 80062e6:	d02a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062e8:	2b80      	cmp	r3, #128	@ 0x80
 80062ea:	d825      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062ec:	2b60      	cmp	r3, #96	@ 0x60
 80062ee:	d026      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062f0:	2b60      	cmp	r3, #96	@ 0x60
 80062f2:	d821      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d006      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d81d      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d010      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006304:	e018      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006306:	4b89      	ldr	r3, [pc, #548]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4a88      	ldr	r2, [pc, #544]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800630c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006310:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006312:	e015      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fb02 	bl	8006924 <RCCEx_PLLSAI1_Config>
 8006320:	4603      	mov	r3, r0
 8006322:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006324:	e00c      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3320      	adds	r3, #32
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fbed 	bl	8006b0c <RCCEx_PLLSAI2_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006336:	e003      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	74fb      	strb	r3, [r7, #19]
      break;
 800633c:	e000      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800633e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006346:	4b79      	ldr	r3, [pc, #484]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006348:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800634c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006354:	4975      	ldr	r1, [pc, #468]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800635c:	e001      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d047      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006376:	d030      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637c:	d82a      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800637e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006382:	d02a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006384:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006388:	d824      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800638a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638e:	d008      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006394:	d81e      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800639a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800639e:	d010      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80063a0:	e018      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063a2:	4b62      	ldr	r3, [pc, #392]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	4a61      	ldr	r2, [pc, #388]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063ae:	e015      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fab4 	bl	8006924 <RCCEx_PLLSAI1_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063c0:	e00c      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3320      	adds	r3, #32
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fb9f 	bl	8006b0c <RCCEx_PLLSAI2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	74fb      	strb	r3, [r7, #19]
      break;
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80063da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063e2:	4b52      	ldr	r3, [pc, #328]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f0:	494e      	ldr	r1, [pc, #312]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80063f8:	e001      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fa:	7cfb      	ldrb	r3, [r7, #19]
 80063fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 809f 	beq.w	800654a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800640c:	2300      	movs	r3, #0
 800640e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006410:	4b46      	ldr	r3, [pc, #280]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006420:	2300      	movs	r3, #0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006426:	4b41      	ldr	r3, [pc, #260]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642a:	4a40      	ldr	r2, [pc, #256]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006430:	6593      	str	r3, [r2, #88]	@ 0x58
 8006432:	4b3e      	ldr	r3, [pc, #248]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643e:	2301      	movs	r3, #1
 8006440:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006442:	4b3b      	ldr	r3, [pc, #236]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3a      	ldr	r2, [pc, #232]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800644c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800644e:	f7fc f92f 	bl	80026b0 <HAL_GetTick>
 8006452:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006454:	e009      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006456:	f7fc f92b 	bl	80026b0 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d902      	bls.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	74fb      	strb	r3, [r7, #19]
        break;
 8006468:	e005      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800646a:	4b31      	ldr	r3, [pc, #196]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0ef      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006476:	7cfb      	ldrb	r3, [r7, #19]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d15b      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800647c:	4b2b      	ldr	r3, [pc, #172]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006486:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d01f      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	429a      	cmp	r2, r3
 8006498:	d019      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800649a:	4b24      	ldr	r3, [pc, #144]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064a6:	4b21      	ldr	r3, [pc, #132]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ac:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064b6:	4b1d      	ldr	r3, [pc, #116]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064bc:	4a1b      	ldr	r2, [pc, #108]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064c6:	4a19      	ldr	r2, [pc, #100]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d016      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fc f8ea 	bl	80026b0 <HAL_GetTick>
 80064dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064de:	e00b      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e0:	f7fc f8e6 	bl	80026b0 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d902      	bls.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	74fb      	strb	r3, [r7, #19]
            break;
 80064f6:	e006      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064f8:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ec      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006506:	7cfb      	ldrb	r3, [r7, #19]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800650c:	4b07      	ldr	r3, [pc, #28]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006512:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651c:	4903      	ldr	r1, [pc, #12]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006524:	e008      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006526:	7cfb      	ldrb	r3, [r7, #19]
 8006528:	74bb      	strb	r3, [r7, #18]
 800652a:	e005      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800652c:	40021000 	.word	0x40021000
 8006530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006538:	7c7b      	ldrb	r3, [r7, #17]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d105      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800653e:	4ba0      	ldr	r3, [pc, #640]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006542:	4a9f      	ldr	r2, [pc, #636]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006548:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006556:	4b9a      	ldr	r3, [pc, #616]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655c:	f023 0203 	bic.w	r2, r3, #3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006564:	4996      	ldr	r1, [pc, #600]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006578:	4b91      	ldr	r3, [pc, #580]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657e:	f023 020c 	bic.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	498e      	ldr	r1, [pc, #568]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800659a:	4b89      	ldr	r3, [pc, #548]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a8:	4985      	ldr	r1, [pc, #532]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065bc:	4b80      	ldr	r3, [pc, #512]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ca:	497d      	ldr	r1, [pc, #500]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065de:	4b78      	ldr	r3, [pc, #480]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ec:	4974      	ldr	r1, [pc, #464]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006600:	4b6f      	ldr	r3, [pc, #444]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800660e:	496c      	ldr	r1, [pc, #432]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006622:	4b67      	ldr	r3, [pc, #412]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006630:	4963      	ldr	r1, [pc, #396]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006644:	4b5e      	ldr	r3, [pc, #376]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006652:	495b      	ldr	r1, [pc, #364]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006666:	4b56      	ldr	r3, [pc, #344]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006674:	4952      	ldr	r1, [pc, #328]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006688:	4b4d      	ldr	r3, [pc, #308]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006696:	494a      	ldr	r1, [pc, #296]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066aa:	4b45      	ldr	r3, [pc, #276]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b8:	4941      	ldr	r1, [pc, #260]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066cc:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066d2:	f023 0203 	bic.w	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066da:	4939      	ldr	r1, [pc, #228]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d028      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ee:	4b34      	ldr	r3, [pc, #208]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fc:	4930      	ldr	r1, [pc, #192]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006708:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800670c:	d106      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800670e:	4b2c      	ldr	r3, [pc, #176]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006714:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006718:	60d3      	str	r3, [r2, #12]
 800671a:	e011      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006720:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006724:	d10c      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f8f9 	bl	8006924 <RCCEx_PLLSAI1_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006736:	7cfb      	ldrb	r3, [r7, #19]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d04d      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006754:	d108      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006756:	4b1a      	ldr	r3, [pc, #104]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006758:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800675c:	4a18      	ldr	r2, [pc, #96]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800675e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006762:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006766:	e012      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006768:	4b15      	ldr	r3, [pc, #84]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800676a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800676e:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006770:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006774:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006778:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006786:	490e      	ldr	r1, [pc, #56]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006796:	d106      	bne.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006798:	4b09      	ldr	r3, [pc, #36]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800679e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067a2:	60d3      	str	r3, [r2, #12]
 80067a4:	e020      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ae:	d109      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067b0:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4a02      	ldr	r2, [pc, #8]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ba:	60d3      	str	r3, [r2, #12]
 80067bc:	e014      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80067be:	bf00      	nop
 80067c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f8a5 	bl	8006924 <RCCEx_PLLSAI1_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d028      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006802:	4947      	ldr	r1, [pc, #284]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800680e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006812:	d106      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006814:	4b42      	ldr	r3, [pc, #264]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4a41      	ldr	r2, [pc, #260]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800681a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800681e:	60d3      	str	r3, [r2, #12]
 8006820:	e011      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800682a:	d10c      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	2101      	movs	r1, #1
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f876 	bl	8006924 <RCCEx_PLLSAI1_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800683c:	7cfb      	ldrb	r3, [r7, #19]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006842:	7cfb      	ldrb	r3, [r7, #19]
 8006844:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01e      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006852:	4b33      	ldr	r3, [pc, #204]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006858:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006862:	492f      	ldr	r1, [pc, #188]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006874:	d10c      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f000 f851 	bl	8006924 <RCCEx_PLLSAI1_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006886:	7cfb      	ldrb	r3, [r7, #19]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800688c:	7cfb      	ldrb	r3, [r7, #19]
 800688e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800689c:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800689e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068a2:	f023 0204 	bic.w	r2, r3, #4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ac:	491c      	ldr	r1, [pc, #112]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80068c0:	4b17      	ldr	r3, [pc, #92]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068c6:	f023 0218 	bic.w	r2, r3, #24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d0:	4913      	ldr	r1, [pc, #76]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d017      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068f4:	490a      	ldr	r1, [pc, #40]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006906:	d105      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4a04      	ldr	r2, [pc, #16]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800690e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006912:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006914:	7cbb      	ldrb	r3, [r7, #18]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40021000 	.word	0x40021000

08006924 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006932:	4b72      	ldr	r3, [pc, #456]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800693e:	4b6f      	ldr	r3, [pc, #444]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0203 	and.w	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d103      	bne.n	8006956 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
       ||
 8006952:	2b00      	cmp	r3, #0
 8006954:	d142      	bne.n	80069dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	e03f      	b.n	80069dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d018      	beq.n	8006996 <RCCEx_PLLSAI1_Config+0x72>
 8006964:	2b03      	cmp	r3, #3
 8006966:	d825      	bhi.n	80069b4 <RCCEx_PLLSAI1_Config+0x90>
 8006968:	2b01      	cmp	r3, #1
 800696a:	d002      	beq.n	8006972 <RCCEx_PLLSAI1_Config+0x4e>
 800696c:	2b02      	cmp	r3, #2
 800696e:	d009      	beq.n	8006984 <RCCEx_PLLSAI1_Config+0x60>
 8006970:	e020      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006972:	4b62      	ldr	r3, [pc, #392]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d11d      	bne.n	80069ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006982:	e01a      	b.n	80069ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006984:	4b5d      	ldr	r3, [pc, #372]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698c:	2b00      	cmp	r3, #0
 800698e:	d116      	bne.n	80069be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006994:	e013      	b.n	80069be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006996:	4b59      	ldr	r3, [pc, #356]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069a2:	4b56      	ldr	r3, [pc, #344]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069b2:	e006      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e004      	b.n	80069c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d108      	bne.n	80069dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80069ca:	4b4c      	ldr	r3, [pc, #304]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f023 0203 	bic.w	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4949      	ldr	r1, [pc, #292]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 8086 	bne.w	8006af0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069e4:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a44      	ldr	r2, [pc, #272]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f0:	f7fb fe5e 	bl	80026b0 <HAL_GetTick>
 80069f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069f6:	e009      	b.n	8006a0c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069f8:	f7fb fe5a 	bl	80026b0 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d902      	bls.n	8006a0c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	73fb      	strb	r3, [r7, #15]
        break;
 8006a0a:	e005      	b.n	8006a18 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1ef      	bne.n	80069f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d168      	bne.n	8006af0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d113      	bne.n	8006a4c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a24:	4b35      	ldr	r3, [pc, #212]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6892      	ldr	r2, [r2, #8]
 8006a30:	0211      	lsls	r1, r2, #8
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68d2      	ldr	r2, [r2, #12]
 8006a36:	06d2      	lsls	r2, r2, #27
 8006a38:	4311      	orrs	r1, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6852      	ldr	r2, [r2, #4]
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	0112      	lsls	r2, r2, #4
 8006a42:	430a      	orrs	r2, r1
 8006a44:	492d      	ldr	r1, [pc, #180]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]
 8006a4a:	e02d      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d115      	bne.n	8006a7e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a52:	4b2a      	ldr	r3, [pc, #168]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	4b2b      	ldr	r3, [pc, #172]	@ (8006b04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6892      	ldr	r2, [r2, #8]
 8006a5e:	0211      	lsls	r1, r2, #8
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6912      	ldr	r2, [r2, #16]
 8006a64:	0852      	lsrs	r2, r2, #1
 8006a66:	3a01      	subs	r2, #1
 8006a68:	0552      	lsls	r2, r2, #21
 8006a6a:	4311      	orrs	r1, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6852      	ldr	r2, [r2, #4]
 8006a70:	3a01      	subs	r2, #1
 8006a72:	0112      	lsls	r2, r2, #4
 8006a74:	430a      	orrs	r2, r1
 8006a76:	4921      	ldr	r1, [pc, #132]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	610b      	str	r3, [r1, #16]
 8006a7c:	e014      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	4b21      	ldr	r3, [pc, #132]	@ (8006b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6892      	ldr	r2, [r2, #8]
 8006a8a:	0211      	lsls	r1, r2, #8
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6952      	ldr	r2, [r2, #20]
 8006a90:	0852      	lsrs	r2, r2, #1
 8006a92:	3a01      	subs	r2, #1
 8006a94:	0652      	lsls	r2, r2, #25
 8006a96:	4311      	orrs	r1, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6852      	ldr	r2, [r2, #4]
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	4916      	ldr	r1, [pc, #88]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006aa8:	4b14      	ldr	r3, [pc, #80]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fb fdfc 	bl	80026b0 <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aba:	e009      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006abc:	f7fb fdf8 	bl	80026b0 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d902      	bls.n	8006ad0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ace:	e005      	b.n	8006adc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ef      	beq.n	8006abc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	4904      	ldr	r1, [pc, #16]	@ (8006afc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	07ff800f 	.word	0x07ff800f
 8006b04:	ff9f800f 	.word	0xff9f800f
 8006b08:	f9ff800f 	.word	0xf9ff800f

08006b0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b1a:	4b72      	ldr	r3, [pc, #456]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b26:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0203 	and.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d103      	bne.n	8006b3e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
       ||
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d142      	bne.n	8006bc4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	e03f      	b.n	8006bc4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d018      	beq.n	8006b7e <RCCEx_PLLSAI2_Config+0x72>
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d825      	bhi.n	8006b9c <RCCEx_PLLSAI2_Config+0x90>
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d002      	beq.n	8006b5a <RCCEx_PLLSAI2_Config+0x4e>
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d009      	beq.n	8006b6c <RCCEx_PLLSAI2_Config+0x60>
 8006b58:	e020      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b5a:	4b62      	ldr	r3, [pc, #392]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11d      	bne.n	8006ba2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b6a:	e01a      	b.n	8006ba2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d116      	bne.n	8006ba6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b7c:	e013      	b.n	8006ba6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b7e:	4b59      	ldr	r3, [pc, #356]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10f      	bne.n	8006baa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b8a:	4b56      	ldr	r3, [pc, #344]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b9a:	e006      	b.n	8006baa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	e004      	b.n	8006bac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f023 0203 	bic.w	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4949      	ldr	r1, [pc, #292]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 8086 	bne.w	8006cd8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bcc:	4b45      	ldr	r3, [pc, #276]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a44      	ldr	r2, [pc, #272]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd8:	f7fb fd6a 	bl	80026b0 <HAL_GetTick>
 8006bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bde:	e009      	b.n	8006bf4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006be0:	f7fb fd66 	bl	80026b0 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d902      	bls.n	8006bf4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8006bf2:	e005      	b.n	8006c00 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1ef      	bne.n	8006be0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d168      	bne.n	8006cd8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d113      	bne.n	8006c34 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c0c:	4b35      	ldr	r3, [pc, #212]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	4b35      	ldr	r3, [pc, #212]	@ (8006ce8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	0211      	lsls	r1, r2, #8
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	68d2      	ldr	r2, [r2, #12]
 8006c1e:	06d2      	lsls	r2, r2, #27
 8006c20:	4311      	orrs	r1, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6852      	ldr	r2, [r2, #4]
 8006c26:	3a01      	subs	r2, #1
 8006c28:	0112      	lsls	r2, r2, #4
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	492d      	ldr	r1, [pc, #180]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	614b      	str	r3, [r1, #20]
 8006c32:	e02d      	b.n	8006c90 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d115      	bne.n	8006c66 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006cec <RCCEx_PLLSAI2_Config+0x1e0>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	0211      	lsls	r1, r2, #8
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6912      	ldr	r2, [r2, #16]
 8006c4c:	0852      	lsrs	r2, r2, #1
 8006c4e:	3a01      	subs	r2, #1
 8006c50:	0552      	lsls	r2, r2, #21
 8006c52:	4311      	orrs	r1, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6852      	ldr	r2, [r2, #4]
 8006c58:	3a01      	subs	r2, #1
 8006c5a:	0112      	lsls	r2, r2, #4
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	4921      	ldr	r1, [pc, #132]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	614b      	str	r3, [r1, #20]
 8006c64:	e014      	b.n	8006c90 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	4b21      	ldr	r3, [pc, #132]	@ (8006cf0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6892      	ldr	r2, [r2, #8]
 8006c72:	0211      	lsls	r1, r2, #8
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6952      	ldr	r2, [r2, #20]
 8006c78:	0852      	lsrs	r2, r2, #1
 8006c7a:	3a01      	subs	r2, #1
 8006c7c:	0652      	lsls	r2, r2, #25
 8006c7e:	4311      	orrs	r1, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6852      	ldr	r2, [r2, #4]
 8006c84:	3a01      	subs	r2, #1
 8006c86:	0112      	lsls	r2, r2, #4
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	4916      	ldr	r1, [pc, #88]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c90:	4b14      	ldr	r3, [pc, #80]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a13      	ldr	r2, [pc, #76]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9c:	f7fb fd08 	bl	80026b0 <HAL_GetTick>
 8006ca0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ca2:	e009      	b.n	8006cb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ca4:	f7fb fd04 	bl	80026b0 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d902      	bls.n	8006cb8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	73fb      	strb	r3, [r7, #15]
          break;
 8006cb6:	e005      	b.n	8006cc4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0ef      	beq.n	8006ca4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ccc:	695a      	ldr	r2, [r3, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	4904      	ldr	r1, [pc, #16]	@ (8006ce4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	07ff800f 	.word	0x07ff800f
 8006cec:	ff9f800f 	.word	0xff9f800f
 8006cf0:	f9ff800f 	.word	0xf9ff800f

08006cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e049      	b.n	8006d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fb fa5e 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 fa38 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d020      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01b      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f06f 0202 	mvn.w	r2, #2
 8006dd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f9bc 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8006df2:	e005      	b.n	8006e00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f9ae 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9bf 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d020      	beq.n	8006e52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01b      	beq.n	8006e52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f06f 0204 	mvn.w	r2, #4
 8006e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f996 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8006e3e:	e005      	b.n	8006e4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f988 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f999 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d020      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01b      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f06f 0208 	mvn.w	r2, #8
 8006e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2204      	movs	r2, #4
 8006e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f970 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8006e8a:	e005      	b.n	8006e98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f962 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f973 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01b      	beq.n	8006eea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f06f 0210 	mvn.w	r2, #16
 8006eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2208      	movs	r2, #8
 8006ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f94a 	bl	800716a <HAL_TIM_IC_CaptureCallback>
 8006ed6:	e005      	b.n	8006ee4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f93c 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f94d 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0201 	mvn.w	r2, #1
 8006f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f91a 	bl	8007142 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00c      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb08 	bl	800754c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb00 	bl	8007560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f907 	bl	8007192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0220 	mvn.w	r2, #32
 8006fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fac8 	bl	8007538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0b6      	b.n	800713a <HAL_TIM_ConfigClockSource+0x18a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007008:	d03e      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0xd8>
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700e:	f200 8087 	bhi.w	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007016:	f000 8086 	beq.w	8007126 <HAL_TIM_ConfigClockSource+0x176>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d87f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007020:	2b70      	cmp	r3, #112	@ 0x70
 8007022:	d01a      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xaa>
 8007024:	2b70      	cmp	r3, #112	@ 0x70
 8007026:	d87b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007028:	2b60      	cmp	r3, #96	@ 0x60
 800702a:	d050      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x11e>
 800702c:	2b60      	cmp	r3, #96	@ 0x60
 800702e:	d877      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007030:	2b50      	cmp	r3, #80	@ 0x50
 8007032:	d03c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0xfe>
 8007034:	2b50      	cmp	r3, #80	@ 0x50
 8007036:	d873      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007038:	2b40      	cmp	r3, #64	@ 0x40
 800703a:	d058      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x13e>
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d86f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007040:	2b30      	cmp	r3, #48	@ 0x30
 8007042:	d064      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d86b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d060      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d867      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 8007054:	2b10      	cmp	r3, #16
 8007056:	d05a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 8007058:	e062      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800706a:	f000 f9bd 	bl	80073e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800707c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	609a      	str	r2, [r3, #8]
      break;
 8007086:	e04f      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007098:	f000 f9a6 	bl	80073e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070aa:	609a      	str	r2, [r3, #8]
      break;
 80070ac:	e03c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 f91a 	bl	80072f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2150      	movs	r1, #80	@ 0x50
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f973 	bl	80073b2 <TIM_ITRx_SetConfig>
      break;
 80070cc:	e02c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 f939 	bl	8007352 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2160      	movs	r1, #96	@ 0x60
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f963 	bl	80073b2 <TIM_ITRx_SetConfig>
      break;
 80070ec:	e01c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 f8fa 	bl	80072f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2140      	movs	r1, #64	@ 0x40
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f953 	bl	80073b2 <TIM_ITRx_SetConfig>
      break;
 800710c:	e00c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f000 f94a 	bl	80073b2 <TIM_ITRx_SetConfig>
      break;
 800711e:	e003      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
      break;
 8007124:	e000      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a46      	ldr	r2, [pc, #280]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d00f      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a43      	ldr	r2, [pc, #268]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a42      	ldr	r2, [pc, #264]	@ (80072dc <TIM_Base_SetConfig+0x134>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a41      	ldr	r2, [pc, #260]	@ (80072e0 <TIM_Base_SetConfig+0x138>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a40      	ldr	r2, [pc, #256]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d108      	bne.n	80071fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a35      	ldr	r2, [pc, #212]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01f      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007208:	d01b      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a32      	ldr	r2, [pc, #200]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d017      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a31      	ldr	r2, [pc, #196]	@ (80072dc <TIM_Base_SetConfig+0x134>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a30      	ldr	r2, [pc, #192]	@ (80072e0 <TIM_Base_SetConfig+0x138>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00f      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2f      	ldr	r2, [pc, #188]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00b      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a2e      	ldr	r2, [pc, #184]	@ (80072e8 <TIM_Base_SetConfig+0x140>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2d      	ldr	r2, [pc, #180]	@ (80072ec <TIM_Base_SetConfig+0x144>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_Base_SetConfig+0x9a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2c      	ldr	r2, [pc, #176]	@ (80072f0 <TIM_Base_SetConfig+0x148>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a16      	ldr	r2, [pc, #88]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00f      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a18      	ldr	r2, [pc, #96]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00b      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a17      	ldr	r2, [pc, #92]	@ (80072e8 <TIM_Base_SetConfig+0x140>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d007      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <TIM_Base_SetConfig+0x144>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_Base_SetConfig+0xf8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a15      	ldr	r2, [pc, #84]	@ (80072f0 <TIM_Base_SetConfig+0x148>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d103      	bne.n	80072a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d105      	bne.n	80072c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f023 0201 	bic.w	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	611a      	str	r2, [r3, #16]
  }
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40014800 	.word	0x40014800

080072f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f023 0201 	bic.w	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800731e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f023 030a 	bic.w	r3, r3, #10
 8007330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f023 0210 	bic.w	r2, r3, #16
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800737c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	031b      	lsls	r3, r3, #12
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800738e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f043 0307 	orr.w	r3, r3, #7
 80073d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	609a      	str	r2, [r3, #8]
}
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	021a      	lsls	r2, r3, #8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	431a      	orrs	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	609a      	str	r2, [r3, #8]
}
 800741c:	bf00      	nop
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e068      	b.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2e      	ldr	r2, [pc, #184]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2d      	ldr	r2, [pc, #180]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800747a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d01d      	beq.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b2:	d018      	beq.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d013      	beq.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1a      	ldr	r2, [pc, #104]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00e      	beq.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d009      	beq.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a13      	ldr	r2, [pc, #76]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d004      	beq.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a14      	ldr	r2, [pc, #80]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d10c      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40013400 	.word	0x40013400
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40014000 	.word	0x40014000

08007538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e042      	b.n	800760c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fa fe43 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2224      	movs	r2, #36	@ 0x24
 80075a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0201 	bic.w	r2, r2, #1
 80075b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fbb2 	bl	8007d28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f8b3 	bl	8007730 <UART_SetConfig>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e01b      	b.n	800760c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fc31 	bl	8007e6c <UART_CheckIdleState>
 800760a:	4603      	mov	r3, r0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	@ 0x28
 8007618:	af02      	add	r7, sp, #8
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	2b20      	cmp	r3, #32
 800762c:	d17b      	bne.n	8007726 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_UART_Transmit+0x26>
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e074      	b.n	8007728 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2221      	movs	r2, #33	@ 0x21
 800764a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800764e:	f7fb f82f 	bl	80026b0 <HAL_GetTick>
 8007652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800766c:	d108      	bne.n	8007680 <HAL_UART_Transmit+0x6c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e003      	b.n	8007688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007688:	e030      	b.n	80076ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	2180      	movs	r1, #128	@ 0x80
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fc93 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e03d      	b.n	8007728 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076be:	b292      	uxth	r2, r2
 80076c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	3302      	adds	r3, #2
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	e007      	b.n	80076da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	781a      	ldrb	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1c8      	bne.n	800768a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2200      	movs	r2, #0
 8007700:	2140      	movs	r1, #64	@ 0x40
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fc5c 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e006      	b.n	8007728 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	e000      	b.n	8007728 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
  }
}
 8007728:	4618      	mov	r0, r3
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007734:	b08c      	sub	sp, #48	@ 0x30
 8007736:	af00      	add	r7, sp, #0
 8007738:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	431a      	orrs	r2, r3
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4313      	orrs	r3, r2
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4baa      	ldr	r3, [pc, #680]	@ (8007a08 <UART_SetConfig+0x2d8>)
 8007760:	4013      	ands	r3, r2
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007768:	430b      	orrs	r3, r1
 800776a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a9f      	ldr	r2, [pc, #636]	@ (8007a0c <UART_SetConfig+0x2dc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007798:	4313      	orrs	r3, r2
 800779a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80077a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ba:	f023 010f 	bic.w	r1, r3, #15
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a90      	ldr	r2, [pc, #576]	@ (8007a10 <UART_SetConfig+0x2e0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d125      	bne.n	8007820 <UART_SetConfig+0xf0>
 80077d4:	4b8f      	ldr	r3, [pc, #572]	@ (8007a14 <UART_SetConfig+0x2e4>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d81a      	bhi.n	8007818 <UART_SetConfig+0xe8>
 80077e2:	a201      	add	r2, pc, #4	@ (adr r2, 80077e8 <UART_SetConfig+0xb8>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007809 	.word	0x08007809
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007811 	.word	0x08007811
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fe:	e116      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007800:	2302      	movs	r3, #2
 8007802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007806:	e112      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007808:	2304      	movs	r3, #4
 800780a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800780e:	e10e      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007810:	2308      	movs	r3, #8
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007816:	e10a      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007818:	2310      	movs	r3, #16
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e106      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a7c      	ldr	r2, [pc, #496]	@ (8007a18 <UART_SetConfig+0x2e8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d138      	bne.n	800789c <UART_SetConfig+0x16c>
 800782a:	4b7a      	ldr	r3, [pc, #488]	@ (8007a14 <UART_SetConfig+0x2e4>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	f003 030c 	and.w	r3, r3, #12
 8007834:	2b0c      	cmp	r3, #12
 8007836:	d82d      	bhi.n	8007894 <UART_SetConfig+0x164>
 8007838:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <UART_SetConfig+0x110>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007875 	.word	0x08007875
 8007844:	08007895 	.word	0x08007895
 8007848:	08007895 	.word	0x08007895
 800784c:	08007895 	.word	0x08007895
 8007850:	08007885 	.word	0x08007885
 8007854:	08007895 	.word	0x08007895
 8007858:	08007895 	.word	0x08007895
 800785c:	08007895 	.word	0x08007895
 8007860:	0800787d 	.word	0x0800787d
 8007864:	08007895 	.word	0x08007895
 8007868:	08007895 	.word	0x08007895
 800786c:	08007895 	.word	0x08007895
 8007870:	0800788d 	.word	0x0800788d
 8007874:	2300      	movs	r3, #0
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787a:	e0d8      	b.n	8007a2e <UART_SetConfig+0x2fe>
 800787c:	2302      	movs	r3, #2
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007882:	e0d4      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788a:	e0d0      	b.n	8007a2e <UART_SetConfig+0x2fe>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007892:	e0cc      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789a:	e0c8      	b.n	8007a2e <UART_SetConfig+0x2fe>
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a5e      	ldr	r2, [pc, #376]	@ (8007a1c <UART_SetConfig+0x2ec>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d125      	bne.n	80078f2 <UART_SetConfig+0x1c2>
 80078a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007a14 <UART_SetConfig+0x2e4>)
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078b0:	2b30      	cmp	r3, #48	@ 0x30
 80078b2:	d016      	beq.n	80078e2 <UART_SetConfig+0x1b2>
 80078b4:	2b30      	cmp	r3, #48	@ 0x30
 80078b6:	d818      	bhi.n	80078ea <UART_SetConfig+0x1ba>
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d00a      	beq.n	80078d2 <UART_SetConfig+0x1a2>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d814      	bhi.n	80078ea <UART_SetConfig+0x1ba>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <UART_SetConfig+0x19a>
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d008      	beq.n	80078da <UART_SetConfig+0x1aa>
 80078c8:	e00f      	b.n	80078ea <UART_SetConfig+0x1ba>
 80078ca:	2300      	movs	r3, #0
 80078cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d0:	e0ad      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80078d2:	2302      	movs	r3, #2
 80078d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d8:	e0a9      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80078da:	2304      	movs	r3, #4
 80078dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e0:	e0a5      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80078e2:	2308      	movs	r3, #8
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e8:	e0a1      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80078ea:	2310      	movs	r3, #16
 80078ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f0:	e09d      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007a20 <UART_SetConfig+0x2f0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d125      	bne.n	8007948 <UART_SetConfig+0x218>
 80078fc:	4b45      	ldr	r3, [pc, #276]	@ (8007a14 <UART_SetConfig+0x2e4>)
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007902:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007906:	2bc0      	cmp	r3, #192	@ 0xc0
 8007908:	d016      	beq.n	8007938 <UART_SetConfig+0x208>
 800790a:	2bc0      	cmp	r3, #192	@ 0xc0
 800790c:	d818      	bhi.n	8007940 <UART_SetConfig+0x210>
 800790e:	2b80      	cmp	r3, #128	@ 0x80
 8007910:	d00a      	beq.n	8007928 <UART_SetConfig+0x1f8>
 8007912:	2b80      	cmp	r3, #128	@ 0x80
 8007914:	d814      	bhi.n	8007940 <UART_SetConfig+0x210>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <UART_SetConfig+0x1f0>
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d008      	beq.n	8007930 <UART_SetConfig+0x200>
 800791e:	e00f      	b.n	8007940 <UART_SetConfig+0x210>
 8007920:	2300      	movs	r3, #0
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007926:	e082      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e07e      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e07a      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e076      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e072      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a35      	ldr	r2, [pc, #212]	@ (8007a24 <UART_SetConfig+0x2f4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d12a      	bne.n	80079a8 <UART_SetConfig+0x278>
 8007952:	4b30      	ldr	r3, [pc, #192]	@ (8007a14 <UART_SetConfig+0x2e4>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800795c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007960:	d01a      	beq.n	8007998 <UART_SetConfig+0x268>
 8007962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007966:	d81b      	bhi.n	80079a0 <UART_SetConfig+0x270>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800796c:	d00c      	beq.n	8007988 <UART_SetConfig+0x258>
 800796e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007972:	d815      	bhi.n	80079a0 <UART_SetConfig+0x270>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <UART_SetConfig+0x250>
 8007978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797c:	d008      	beq.n	8007990 <UART_SetConfig+0x260>
 800797e:	e00f      	b.n	80079a0 <UART_SetConfig+0x270>
 8007980:	2300      	movs	r3, #0
 8007982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007986:	e052      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007988:	2302      	movs	r3, #2
 800798a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798e:	e04e      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007996:	e04a      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e046      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e042      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a17      	ldr	r2, [pc, #92]	@ (8007a0c <UART_SetConfig+0x2dc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d13a      	bne.n	8007a28 <UART_SetConfig+0x2f8>
 80079b2:	4b18      	ldr	r3, [pc, #96]	@ (8007a14 <UART_SetConfig+0x2e4>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c0:	d01a      	beq.n	80079f8 <UART_SetConfig+0x2c8>
 80079c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c6:	d81b      	bhi.n	8007a00 <UART_SetConfig+0x2d0>
 80079c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079cc:	d00c      	beq.n	80079e8 <UART_SetConfig+0x2b8>
 80079ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d2:	d815      	bhi.n	8007a00 <UART_SetConfig+0x2d0>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <UART_SetConfig+0x2b0>
 80079d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079dc:	d008      	beq.n	80079f0 <UART_SetConfig+0x2c0>
 80079de:	e00f      	b.n	8007a00 <UART_SetConfig+0x2d0>
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079e6:	e022      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80079e8:	2302      	movs	r3, #2
 80079ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ee:	e01e      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079f6:	e01a      	b.n	8007a2e <UART_SetConfig+0x2fe>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	e016      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	e012      	b.n	8007a2e <UART_SetConfig+0x2fe>
 8007a08:	cfff69f3 	.word	0xcfff69f3
 8007a0c:	40008000 	.word	0x40008000
 8007a10:	40013800 	.word	0x40013800
 8007a14:	40021000 	.word	0x40021000
 8007a18:	40004400 	.word	0x40004400
 8007a1c:	40004800 	.word	0x40004800
 8007a20:	40004c00 	.word	0x40004c00
 8007a24:	40005000 	.word	0x40005000
 8007a28:	2310      	movs	r3, #16
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4aae      	ldr	r2, [pc, #696]	@ (8007cec <UART_SetConfig+0x5bc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	f040 8097 	bne.w	8007b68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d823      	bhi.n	8007a8a <UART_SetConfig+0x35a>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <UART_SetConfig+0x318>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007a8b 	.word	0x08007a8b
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a8b 	.word	0x08007a8b
 8007a58:	08007a7b 	.word	0x08007a7b
 8007a5c:	08007a8b 	.word	0x08007a8b
 8007a60:	08007a8b 	.word	0x08007a8b
 8007a64:	08007a8b 	.word	0x08007a8b
 8007a68:	08007a83 	.word	0x08007a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a6c:	f7fe fb3e 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 8007a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a72:	e010      	b.n	8007a96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a74:	4b9e      	ldr	r3, [pc, #632]	@ (8007cf0 <UART_SetConfig+0x5c0>)
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a78:	e00d      	b.n	8007a96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fe fa9f 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8007a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a80:	e009      	b.n	8007a96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a88:	e005      	b.n	8007a96 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8130 	beq.w	8007cfe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa2:	4a94      	ldr	r2, [pc, #592]	@ (8007cf4 <UART_SetConfig+0x5c4>)
 8007aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	4413      	add	r3, r2
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d305      	bcc.n	8007ace <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d903      	bls.n	8007ad6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ad4:	e113      	b.n	8007cfe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	2200      	movs	r2, #0
 8007ada:	60bb      	str	r3, [r7, #8]
 8007adc:	60fa      	str	r2, [r7, #12]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae2:	4a84      	ldr	r2, [pc, #528]	@ (8007cf4 <UART_SetConfig+0x5c4>)
 8007ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2200      	movs	r2, #0
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007af8:	f7f9 f86e 	bl	8000bd8 <__aeabi_uldivmod>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4610      	mov	r0, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	020b      	lsls	r3, r1, #8
 8007b0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b12:	0202      	lsls	r2, r0, #8
 8007b14:	6979      	ldr	r1, [r7, #20]
 8007b16:	6849      	ldr	r1, [r1, #4]
 8007b18:	0849      	lsrs	r1, r1, #1
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	4605      	mov	r5, r0
 8007b20:	eb12 0804 	adds.w	r8, r2, r4
 8007b24:	eb43 0905 	adc.w	r9, r3, r5
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	469a      	mov	sl, r3
 8007b30:	4693      	mov	fp, r2
 8007b32:	4652      	mov	r2, sl
 8007b34:	465b      	mov	r3, fp
 8007b36:	4640      	mov	r0, r8
 8007b38:	4649      	mov	r1, r9
 8007b3a:	f7f9 f84d 	bl	8000bd8 <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4613      	mov	r3, r2
 8007b44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b4c:	d308      	bcc.n	8007b60 <UART_SetConfig+0x430>
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b54:	d204      	bcs.n	8007b60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6a3a      	ldr	r2, [r7, #32]
 8007b5c:	60da      	str	r2, [r3, #12]
 8007b5e:	e0ce      	b.n	8007cfe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b66:	e0ca      	b.n	8007cfe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b70:	d166      	bne.n	8007c40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d827      	bhi.n	8007bca <UART_SetConfig+0x49a>
 8007b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <UART_SetConfig+0x450>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bcb 	.word	0x08007bcb
 8007b90:	08007bbb 	.word	0x08007bbb
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007bcb 	.word	0x08007bcb
 8007b9c:	08007bcb 	.word	0x08007bcb
 8007ba0:	08007bc3 	.word	0x08007bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f7fe faa2 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 8007ba8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007baa:	e014      	b.n	8007bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bac:	f7fe fab4 	bl	8006118 <HAL_RCC_GetPCLK2Freq>
 8007bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bb2:	e010      	b.n	8007bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8007cf0 <UART_SetConfig+0x5c0>)
 8007bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bb8:	e00d      	b.n	8007bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bba:	f7fe f9ff 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8007bbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bc0:	e009      	b.n	8007bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bc8:	e005      	b.n	8007bd6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8090 	beq.w	8007cfe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be2:	4a44      	ldr	r2, [pc, #272]	@ (8007cf4 <UART_SetConfig+0x5c4>)
 8007be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be8:	461a      	mov	r2, r3
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf0:	005a      	lsls	r2, r3, #1
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	441a      	add	r2, r3
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c02:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d916      	bls.n	8007c38 <UART_SetConfig+0x508>
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c10:	d212      	bcs.n	8007c38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f023 030f 	bic.w	r3, r3, #15
 8007c1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	8bfb      	ldrh	r3, [r7, #30]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	8bfa      	ldrh	r2, [r7, #30]
 8007c34:	60da      	str	r2, [r3, #12]
 8007c36:	e062      	b.n	8007cfe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c3e:	e05e      	b.n	8007cfe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d828      	bhi.n	8007c9a <UART_SetConfig+0x56a>
 8007c48:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <UART_SetConfig+0x520>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	08007c9b 	.word	0x08007c9b
 8007c60:	08007c8b 	.word	0x08007c8b
 8007c64:	08007c9b 	.word	0x08007c9b
 8007c68:	08007c9b 	.word	0x08007c9b
 8007c6c:	08007c9b 	.word	0x08007c9b
 8007c70:	08007c93 	.word	0x08007c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe fa3a 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 8007c78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c7a:	e014      	b.n	8007ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c7c:	f7fe fa4c 	bl	8006118 <HAL_RCC_GetPCLK2Freq>
 8007c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c82:	e010      	b.n	8007ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c84:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf0 <UART_SetConfig+0x5c0>)
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c88:	e00d      	b.n	8007ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8a:	f7fe f997 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8007c8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c90:	e009      	b.n	8007ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c98:	e005      	b.n	8007ca6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ca4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d028      	beq.n	8007cfe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb0:	4a10      	ldr	r2, [pc, #64]	@ (8007cf4 <UART_SetConfig+0x5c4>)
 8007cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	441a      	add	r2, r3
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	d910      	bls.n	8007cf8 <UART_SetConfig+0x5c8>
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cdc:	d20c      	bcs.n	8007cf8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60da      	str	r2, [r3, #12]
 8007ce8:	e009      	b.n	8007cfe <UART_SetConfig+0x5ce>
 8007cea:	bf00      	nop
 8007cec:	40008000 	.word	0x40008000
 8007cf0:	00f42400 	.word	0x00f42400
 8007cf4:	0800b154 	.word	0x0800b154
      }
      else
      {
        ret = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2200      	movs	r2, #0
 8007d12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2200      	movs	r2, #0
 8007d18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d1a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3730      	adds	r7, #48	@ 0x30
 8007d22:	46bd      	mov	sp, r7
 8007d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01a      	beq.n	8007e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e26:	d10a      	bne.n	8007e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
  }
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b098      	sub	sp, #96	@ 0x60
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e7c:	f7fa fc18 	bl	80026b0 <HAL_GetTick>
 8007e80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d12f      	bne.n	8007ef0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f88e 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d022      	beq.n	8007ef0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e6      	bne.n	8007eaa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e063      	b.n	8007fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d149      	bne.n	8007f92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007efe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f06:	2200      	movs	r2, #0
 8007f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f857 	bl	8007fc0 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d03c      	beq.n	8007f92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	623b      	str	r3, [r7, #32]
   return(result);
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f6a:	61fa      	str	r2, [r7, #28]
 8007f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	617b      	str	r3, [r7, #20]
   return(result);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e012      	b.n	8007fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3758      	adds	r7, #88	@ 0x58
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd0:	e04f      	b.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d04b      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fda:	f7fa fb69 	bl	80026b0 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d302      	bcc.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e04e      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d037      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b80      	cmp	r3, #128	@ 0x80
 8008006:	d034      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b40      	cmp	r3, #64	@ 0x40
 800800c:	d031      	beq.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b08      	cmp	r3, #8
 800801a:	d110      	bne.n	800803e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2208      	movs	r2, #8
 8008022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f838 	bl	800809a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2208      	movs	r2, #8
 800802e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e029      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800804c:	d111      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f81e 	bl	800809a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e00f      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	429a      	cmp	r2, r3
 800808e:	d0a0      	beq.n	8007fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800809a:	b480      	push	{r7}
 800809c:	b095      	sub	sp, #84	@ 0x54
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e3      	bne.n	80080d4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d118      	bne.n	8008146 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	60bb      	str	r3, [r7, #8]
   return(result);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 0310 	bic.w	r3, r3, #16
 8008128:	647b      	str	r3, [r7, #68]	@ 0x44
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6979      	ldr	r1, [r7, #20]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	613b      	str	r3, [r7, #16]
   return(result);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e6      	bne.n	8008114 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800815a:	bf00      	nop
 800815c:	3754      	adds	r7, #84	@ 0x54
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UARTEx_DisableFifoMode+0x16>
 8008178:	2302      	movs	r3, #2
 800817a:	e027      	b.n	80081cc <HAL_UARTEx_DisableFifoMode+0x66>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	@ 0x24
 8008188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e02d      	b.n	800824c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	@ 0x24
 80081fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f84f 	bl	80082d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008268:	2302      	movs	r3, #2
 800826a:	e02d      	b.n	80082c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	@ 0x24
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0201 	bic.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f811 	bl	80082d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d108      	bne.n	80082f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082f0:	e031      	b.n	8008356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082f2:	2308      	movs	r3, #8
 80082f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082f6:	2308      	movs	r3, #8
 80082f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	0e5b      	lsrs	r3, r3, #25
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	0f5b      	lsrs	r3, r3, #29
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0307 	and.w	r3, r3, #7
 8008318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	7b3a      	ldrb	r2, [r7, #12]
 800831e:	4911      	ldr	r1, [pc, #68]	@ (8008364 <UARTEx_SetNbDataToProcess+0x94>)
 8008320:	5c8a      	ldrb	r2, [r1, r2]
 8008322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008326:	7b3a      	ldrb	r2, [r7, #12]
 8008328:	490f      	ldr	r1, [pc, #60]	@ (8008368 <UARTEx_SetNbDataToProcess+0x98>)
 800832a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800832c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008330:	b29a      	uxth	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	7b7a      	ldrb	r2, [r7, #13]
 800833c:	4909      	ldr	r1, [pc, #36]	@ (8008364 <UARTEx_SetNbDataToProcess+0x94>)
 800833e:	5c8a      	ldrb	r2, [r1, r2]
 8008340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008344:	7b7a      	ldrb	r2, [r7, #13]
 8008346:	4908      	ldr	r1, [pc, #32]	@ (8008368 <UARTEx_SetNbDataToProcess+0x98>)
 8008348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800834a:	fb93 f3f2 	sdiv	r3, r3, r2
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	0800b16c 	.word	0x0800b16c
 8008368:	0800b174 	.word	0x0800b174

0800836c <__cvt>:
 800836c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	ec57 6b10 	vmov	r6, r7, d0
 8008374:	2f00      	cmp	r7, #0
 8008376:	460c      	mov	r4, r1
 8008378:	4619      	mov	r1, r3
 800837a:	463b      	mov	r3, r7
 800837c:	bfbb      	ittet	lt
 800837e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008382:	461f      	movlt	r7, r3
 8008384:	2300      	movge	r3, #0
 8008386:	232d      	movlt	r3, #45	@ 0x2d
 8008388:	700b      	strb	r3, [r1, #0]
 800838a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800838c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008390:	4691      	mov	r9, r2
 8008392:	f023 0820 	bic.w	r8, r3, #32
 8008396:	bfbc      	itt	lt
 8008398:	4632      	movlt	r2, r6
 800839a:	4616      	movlt	r6, r2
 800839c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083a0:	d005      	beq.n	80083ae <__cvt+0x42>
 80083a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80083a6:	d100      	bne.n	80083aa <__cvt+0x3e>
 80083a8:	3401      	adds	r4, #1
 80083aa:	2102      	movs	r1, #2
 80083ac:	e000      	b.n	80083b0 <__cvt+0x44>
 80083ae:	2103      	movs	r1, #3
 80083b0:	ab03      	add	r3, sp, #12
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	ab02      	add	r3, sp, #8
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	ec47 6b10 	vmov	d0, r6, r7
 80083bc:	4653      	mov	r3, sl
 80083be:	4622      	mov	r2, r4
 80083c0:	f000 fe5a 	bl	8009078 <_dtoa_r>
 80083c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083c8:	4605      	mov	r5, r0
 80083ca:	d119      	bne.n	8008400 <__cvt+0x94>
 80083cc:	f019 0f01 	tst.w	r9, #1
 80083d0:	d00e      	beq.n	80083f0 <__cvt+0x84>
 80083d2:	eb00 0904 	add.w	r9, r0, r4
 80083d6:	2200      	movs	r2, #0
 80083d8:	2300      	movs	r3, #0
 80083da:	4630      	mov	r0, r6
 80083dc:	4639      	mov	r1, r7
 80083de:	f7f8 fb8b 	bl	8000af8 <__aeabi_dcmpeq>
 80083e2:	b108      	cbz	r0, 80083e8 <__cvt+0x7c>
 80083e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80083e8:	2230      	movs	r2, #48	@ 0x30
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	454b      	cmp	r3, r9
 80083ee:	d31e      	bcc.n	800842e <__cvt+0xc2>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083f4:	1b5b      	subs	r3, r3, r5
 80083f6:	4628      	mov	r0, r5
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	b004      	add	sp, #16
 80083fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008400:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008404:	eb00 0904 	add.w	r9, r0, r4
 8008408:	d1e5      	bne.n	80083d6 <__cvt+0x6a>
 800840a:	7803      	ldrb	r3, [r0, #0]
 800840c:	2b30      	cmp	r3, #48	@ 0x30
 800840e:	d10a      	bne.n	8008426 <__cvt+0xba>
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	f7f8 fb6e 	bl	8000af8 <__aeabi_dcmpeq>
 800841c:	b918      	cbnz	r0, 8008426 <__cvt+0xba>
 800841e:	f1c4 0401 	rsb	r4, r4, #1
 8008422:	f8ca 4000 	str.w	r4, [sl]
 8008426:	f8da 3000 	ldr.w	r3, [sl]
 800842a:	4499      	add	r9, r3
 800842c:	e7d3      	b.n	80083d6 <__cvt+0x6a>
 800842e:	1c59      	adds	r1, r3, #1
 8008430:	9103      	str	r1, [sp, #12]
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e7d9      	b.n	80083ea <__cvt+0x7e>

08008436 <__exponent>:
 8008436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008438:	2900      	cmp	r1, #0
 800843a:	bfba      	itte	lt
 800843c:	4249      	neglt	r1, r1
 800843e:	232d      	movlt	r3, #45	@ 0x2d
 8008440:	232b      	movge	r3, #43	@ 0x2b
 8008442:	2909      	cmp	r1, #9
 8008444:	7002      	strb	r2, [r0, #0]
 8008446:	7043      	strb	r3, [r0, #1]
 8008448:	dd29      	ble.n	800849e <__exponent+0x68>
 800844a:	f10d 0307 	add.w	r3, sp, #7
 800844e:	461d      	mov	r5, r3
 8008450:	270a      	movs	r7, #10
 8008452:	461a      	mov	r2, r3
 8008454:	fbb1 f6f7 	udiv	r6, r1, r7
 8008458:	fb07 1416 	mls	r4, r7, r6, r1
 800845c:	3430      	adds	r4, #48	@ 0x30
 800845e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008462:	460c      	mov	r4, r1
 8008464:	2c63      	cmp	r4, #99	@ 0x63
 8008466:	f103 33ff 	add.w	r3, r3, #4294967295
 800846a:	4631      	mov	r1, r6
 800846c:	dcf1      	bgt.n	8008452 <__exponent+0x1c>
 800846e:	3130      	adds	r1, #48	@ 0x30
 8008470:	1e94      	subs	r4, r2, #2
 8008472:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008476:	1c41      	adds	r1, r0, #1
 8008478:	4623      	mov	r3, r4
 800847a:	42ab      	cmp	r3, r5
 800847c:	d30a      	bcc.n	8008494 <__exponent+0x5e>
 800847e:	f10d 0309 	add.w	r3, sp, #9
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	42ac      	cmp	r4, r5
 8008486:	bf88      	it	hi
 8008488:	2300      	movhi	r3, #0
 800848a:	3302      	adds	r3, #2
 800848c:	4403      	add	r3, r0
 800848e:	1a18      	subs	r0, r3, r0
 8008490:	b003      	add	sp, #12
 8008492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008494:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008498:	f801 6f01 	strb.w	r6, [r1, #1]!
 800849c:	e7ed      	b.n	800847a <__exponent+0x44>
 800849e:	2330      	movs	r3, #48	@ 0x30
 80084a0:	3130      	adds	r1, #48	@ 0x30
 80084a2:	7083      	strb	r3, [r0, #2]
 80084a4:	70c1      	strb	r1, [r0, #3]
 80084a6:	1d03      	adds	r3, r0, #4
 80084a8:	e7f1      	b.n	800848e <__exponent+0x58>
	...

080084ac <_printf_float>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	b08d      	sub	sp, #52	@ 0x34
 80084b2:	460c      	mov	r4, r1
 80084b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80084b8:	4616      	mov	r6, r2
 80084ba:	461f      	mov	r7, r3
 80084bc:	4605      	mov	r5, r0
 80084be:	f000 fcdb 	bl	8008e78 <_localeconv_r>
 80084c2:	6803      	ldr	r3, [r0, #0]
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f7 feea 	bl	80002a0 <strlen>
 80084cc:	2300      	movs	r3, #0
 80084ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d0:	f8d8 3000 	ldr.w	r3, [r8]
 80084d4:	9005      	str	r0, [sp, #20]
 80084d6:	3307      	adds	r3, #7
 80084d8:	f023 0307 	bic.w	r3, r3, #7
 80084dc:	f103 0208 	add.w	r2, r3, #8
 80084e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80084e4:	f8d4 b000 	ldr.w	fp, [r4]
 80084e8:	f8c8 2000 	str.w	r2, [r8]
 80084ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084f4:	9307      	str	r3, [sp, #28]
 80084f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80084fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008502:	4b9c      	ldr	r3, [pc, #624]	@ (8008774 <_printf_float+0x2c8>)
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	f7f8 fb28 	bl	8000b5c <__aeabi_dcmpun>
 800850c:	bb70      	cbnz	r0, 800856c <_printf_float+0xc0>
 800850e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008512:	4b98      	ldr	r3, [pc, #608]	@ (8008774 <_printf_float+0x2c8>)
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	f7f8 fb02 	bl	8000b20 <__aeabi_dcmple>
 800851c:	bb30      	cbnz	r0, 800856c <_printf_float+0xc0>
 800851e:	2200      	movs	r2, #0
 8008520:	2300      	movs	r3, #0
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	f7f8 faf1 	bl	8000b0c <__aeabi_dcmplt>
 800852a:	b110      	cbz	r0, 8008532 <_printf_float+0x86>
 800852c:	232d      	movs	r3, #45	@ 0x2d
 800852e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008532:	4a91      	ldr	r2, [pc, #580]	@ (8008778 <_printf_float+0x2cc>)
 8008534:	4b91      	ldr	r3, [pc, #580]	@ (800877c <_printf_float+0x2d0>)
 8008536:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800853a:	bf94      	ite	ls
 800853c:	4690      	movls	r8, r2
 800853e:	4698      	movhi	r8, r3
 8008540:	2303      	movs	r3, #3
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	f02b 0304 	bic.w	r3, fp, #4
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	f04f 0900 	mov.w	r9, #0
 800854e:	9700      	str	r7, [sp, #0]
 8008550:	4633      	mov	r3, r6
 8008552:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008554:	4621      	mov	r1, r4
 8008556:	4628      	mov	r0, r5
 8008558:	f000 f9d2 	bl	8008900 <_printf_common>
 800855c:	3001      	adds	r0, #1
 800855e:	f040 808d 	bne.w	800867c <_printf_float+0x1d0>
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
 8008566:	b00d      	add	sp, #52	@ 0x34
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 faf2 	bl	8000b5c <__aeabi_dcmpun>
 8008578:	b140      	cbz	r0, 800858c <_printf_float+0xe0>
 800857a:	464b      	mov	r3, r9
 800857c:	2b00      	cmp	r3, #0
 800857e:	bfbc      	itt	lt
 8008580:	232d      	movlt	r3, #45	@ 0x2d
 8008582:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008586:	4a7e      	ldr	r2, [pc, #504]	@ (8008780 <_printf_float+0x2d4>)
 8008588:	4b7e      	ldr	r3, [pc, #504]	@ (8008784 <_printf_float+0x2d8>)
 800858a:	e7d4      	b.n	8008536 <_printf_float+0x8a>
 800858c:	6863      	ldr	r3, [r4, #4]
 800858e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008592:	9206      	str	r2, [sp, #24]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	d13b      	bne.n	8008610 <_printf_float+0x164>
 8008598:	2306      	movs	r3, #6
 800859a:	6063      	str	r3, [r4, #4]
 800859c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80085a0:	2300      	movs	r3, #0
 80085a2:	6022      	str	r2, [r4, #0]
 80085a4:	9303      	str	r3, [sp, #12]
 80085a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80085a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80085ac:	ab09      	add	r3, sp, #36	@ 0x24
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	6861      	ldr	r1, [r4, #4]
 80085b2:	ec49 8b10 	vmov	d0, r8, r9
 80085b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80085ba:	4628      	mov	r0, r5
 80085bc:	f7ff fed6 	bl	800836c <__cvt>
 80085c0:	9b06      	ldr	r3, [sp, #24]
 80085c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085c4:	2b47      	cmp	r3, #71	@ 0x47
 80085c6:	4680      	mov	r8, r0
 80085c8:	d129      	bne.n	800861e <_printf_float+0x172>
 80085ca:	1cc8      	adds	r0, r1, #3
 80085cc:	db02      	blt.n	80085d4 <_printf_float+0x128>
 80085ce:	6863      	ldr	r3, [r4, #4]
 80085d0:	4299      	cmp	r1, r3
 80085d2:	dd41      	ble.n	8008658 <_printf_float+0x1ac>
 80085d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80085d8:	fa5f fa8a 	uxtb.w	sl, sl
 80085dc:	3901      	subs	r1, #1
 80085de:	4652      	mov	r2, sl
 80085e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80085e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80085e6:	f7ff ff26 	bl	8008436 <__exponent>
 80085ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085ec:	1813      	adds	r3, r2, r0
 80085ee:	2a01      	cmp	r2, #1
 80085f0:	4681      	mov	r9, r0
 80085f2:	6123      	str	r3, [r4, #16]
 80085f4:	dc02      	bgt.n	80085fc <_printf_float+0x150>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	07d2      	lsls	r2, r2, #31
 80085fa:	d501      	bpl.n	8008600 <_printf_float+0x154>
 80085fc:	3301      	adds	r3, #1
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0a2      	beq.n	800854e <_printf_float+0xa2>
 8008608:	232d      	movs	r3, #45	@ 0x2d
 800860a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800860e:	e79e      	b.n	800854e <_printf_float+0xa2>
 8008610:	9a06      	ldr	r2, [sp, #24]
 8008612:	2a47      	cmp	r2, #71	@ 0x47
 8008614:	d1c2      	bne.n	800859c <_printf_float+0xf0>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1c0      	bne.n	800859c <_printf_float+0xf0>
 800861a:	2301      	movs	r3, #1
 800861c:	e7bd      	b.n	800859a <_printf_float+0xee>
 800861e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008622:	d9db      	bls.n	80085dc <_printf_float+0x130>
 8008624:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008628:	d118      	bne.n	800865c <_printf_float+0x1b0>
 800862a:	2900      	cmp	r1, #0
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	dd0b      	ble.n	8008648 <_printf_float+0x19c>
 8008630:	6121      	str	r1, [r4, #16]
 8008632:	b913      	cbnz	r3, 800863a <_printf_float+0x18e>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	07d0      	lsls	r0, r2, #31
 8008638:	d502      	bpl.n	8008640 <_printf_float+0x194>
 800863a:	3301      	adds	r3, #1
 800863c:	440b      	add	r3, r1
 800863e:	6123      	str	r3, [r4, #16]
 8008640:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008642:	f04f 0900 	mov.w	r9, #0
 8008646:	e7db      	b.n	8008600 <_printf_float+0x154>
 8008648:	b913      	cbnz	r3, 8008650 <_printf_float+0x1a4>
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	07d2      	lsls	r2, r2, #31
 800864e:	d501      	bpl.n	8008654 <_printf_float+0x1a8>
 8008650:	3302      	adds	r3, #2
 8008652:	e7f4      	b.n	800863e <_printf_float+0x192>
 8008654:	2301      	movs	r3, #1
 8008656:	e7f2      	b.n	800863e <_printf_float+0x192>
 8008658:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800865c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865e:	4299      	cmp	r1, r3
 8008660:	db05      	blt.n	800866e <_printf_float+0x1c2>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	6121      	str	r1, [r4, #16]
 8008666:	07d8      	lsls	r0, r3, #31
 8008668:	d5ea      	bpl.n	8008640 <_printf_float+0x194>
 800866a:	1c4b      	adds	r3, r1, #1
 800866c:	e7e7      	b.n	800863e <_printf_float+0x192>
 800866e:	2900      	cmp	r1, #0
 8008670:	bfd4      	ite	le
 8008672:	f1c1 0202 	rsble	r2, r1, #2
 8008676:	2201      	movgt	r2, #1
 8008678:	4413      	add	r3, r2
 800867a:	e7e0      	b.n	800863e <_printf_float+0x192>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	055a      	lsls	r2, r3, #21
 8008680:	d407      	bmi.n	8008692 <_printf_float+0x1e6>
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	4642      	mov	r2, r8
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	d12b      	bne.n	80086e8 <_printf_float+0x23c>
 8008690:	e767      	b.n	8008562 <_printf_float+0xb6>
 8008692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008696:	f240 80dd 	bls.w	8008854 <_printf_float+0x3a8>
 800869a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800869e:	2200      	movs	r2, #0
 80086a0:	2300      	movs	r3, #0
 80086a2:	f7f8 fa29 	bl	8000af8 <__aeabi_dcmpeq>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d033      	beq.n	8008712 <_printf_float+0x266>
 80086aa:	4a37      	ldr	r2, [pc, #220]	@ (8008788 <_printf_float+0x2dc>)
 80086ac:	2301      	movs	r3, #1
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	f43f af54 	beq.w	8008562 <_printf_float+0xb6>
 80086ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80086be:	4543      	cmp	r3, r8
 80086c0:	db02      	blt.n	80086c8 <_printf_float+0x21c>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	07d8      	lsls	r0, r3, #31
 80086c6:	d50f      	bpl.n	80086e8 <_printf_float+0x23c>
 80086c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	f43f af45 	beq.w	8008562 <_printf_float+0xb6>
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80086e0:	f104 0a1a 	add.w	sl, r4, #26
 80086e4:	45c8      	cmp	r8, r9
 80086e6:	dc09      	bgt.n	80086fc <_printf_float+0x250>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	079b      	lsls	r3, r3, #30
 80086ec:	f100 8103 	bmi.w	80088f6 <_printf_float+0x44a>
 80086f0:	68e0      	ldr	r0, [r4, #12]
 80086f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086f4:	4298      	cmp	r0, r3
 80086f6:	bfb8      	it	lt
 80086f8:	4618      	movlt	r0, r3
 80086fa:	e734      	b.n	8008566 <_printf_float+0xba>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4652      	mov	r2, sl
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f af2b 	beq.w	8008562 <_printf_float+0xb6>
 800870c:	f109 0901 	add.w	r9, r9, #1
 8008710:	e7e8      	b.n	80086e4 <_printf_float+0x238>
 8008712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	dc39      	bgt.n	800878c <_printf_float+0x2e0>
 8008718:	4a1b      	ldr	r2, [pc, #108]	@ (8008788 <_printf_float+0x2dc>)
 800871a:	2301      	movs	r3, #1
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f af1d 	beq.w	8008562 <_printf_float+0xb6>
 8008728:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800872c:	ea59 0303 	orrs.w	r3, r9, r3
 8008730:	d102      	bne.n	8008738 <_printf_float+0x28c>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	07d9      	lsls	r1, r3, #31
 8008736:	d5d7      	bpl.n	80086e8 <_printf_float+0x23c>
 8008738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873c:	4631      	mov	r1, r6
 800873e:	4628      	mov	r0, r5
 8008740:	47b8      	blx	r7
 8008742:	3001      	adds	r0, #1
 8008744:	f43f af0d 	beq.w	8008562 <_printf_float+0xb6>
 8008748:	f04f 0a00 	mov.w	sl, #0
 800874c:	f104 0b1a 	add.w	fp, r4, #26
 8008750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008752:	425b      	negs	r3, r3
 8008754:	4553      	cmp	r3, sl
 8008756:	dc01      	bgt.n	800875c <_printf_float+0x2b0>
 8008758:	464b      	mov	r3, r9
 800875a:	e793      	b.n	8008684 <_printf_float+0x1d8>
 800875c:	2301      	movs	r3, #1
 800875e:	465a      	mov	r2, fp
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f aefb 	beq.w	8008562 <_printf_float+0xb6>
 800876c:	f10a 0a01 	add.w	sl, sl, #1
 8008770:	e7ee      	b.n	8008750 <_printf_float+0x2a4>
 8008772:	bf00      	nop
 8008774:	7fefffff 	.word	0x7fefffff
 8008778:	0800b17c 	.word	0x0800b17c
 800877c:	0800b180 	.word	0x0800b180
 8008780:	0800b184 	.word	0x0800b184
 8008784:	0800b188 	.word	0x0800b188
 8008788:	0800b18c 	.word	0x0800b18c
 800878c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800878e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008792:	4553      	cmp	r3, sl
 8008794:	bfa8      	it	ge
 8008796:	4653      	movge	r3, sl
 8008798:	2b00      	cmp	r3, #0
 800879a:	4699      	mov	r9, r3
 800879c:	dc36      	bgt.n	800880c <_printf_float+0x360>
 800879e:	f04f 0b00 	mov.w	fp, #0
 80087a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087a6:	f104 021a 	add.w	r2, r4, #26
 80087aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087ac:	9306      	str	r3, [sp, #24]
 80087ae:	eba3 0309 	sub.w	r3, r3, r9
 80087b2:	455b      	cmp	r3, fp
 80087b4:	dc31      	bgt.n	800881a <_printf_float+0x36e>
 80087b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b8:	459a      	cmp	sl, r3
 80087ba:	dc3a      	bgt.n	8008832 <_printf_float+0x386>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	07da      	lsls	r2, r3, #31
 80087c0:	d437      	bmi.n	8008832 <_printf_float+0x386>
 80087c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c4:	ebaa 0903 	sub.w	r9, sl, r3
 80087c8:	9b06      	ldr	r3, [sp, #24]
 80087ca:	ebaa 0303 	sub.w	r3, sl, r3
 80087ce:	4599      	cmp	r9, r3
 80087d0:	bfa8      	it	ge
 80087d2:	4699      	movge	r9, r3
 80087d4:	f1b9 0f00 	cmp.w	r9, #0
 80087d8:	dc33      	bgt.n	8008842 <_printf_float+0x396>
 80087da:	f04f 0800 	mov.w	r8, #0
 80087de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087e2:	f104 0b1a 	add.w	fp, r4, #26
 80087e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e8:	ebaa 0303 	sub.w	r3, sl, r3
 80087ec:	eba3 0309 	sub.w	r3, r3, r9
 80087f0:	4543      	cmp	r3, r8
 80087f2:	f77f af79 	ble.w	80086e8 <_printf_float+0x23c>
 80087f6:	2301      	movs	r3, #1
 80087f8:	465a      	mov	r2, fp
 80087fa:	4631      	mov	r1, r6
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b8      	blx	r7
 8008800:	3001      	adds	r0, #1
 8008802:	f43f aeae 	beq.w	8008562 <_printf_float+0xb6>
 8008806:	f108 0801 	add.w	r8, r8, #1
 800880a:	e7ec      	b.n	80087e6 <_printf_float+0x33a>
 800880c:	4642      	mov	r2, r8
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	d1c2      	bne.n	800879e <_printf_float+0x2f2>
 8008818:	e6a3      	b.n	8008562 <_printf_float+0xb6>
 800881a:	2301      	movs	r3, #1
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	9206      	str	r2, [sp, #24]
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	f43f ae9c 	beq.w	8008562 <_printf_float+0xb6>
 800882a:	9a06      	ldr	r2, [sp, #24]
 800882c:	f10b 0b01 	add.w	fp, fp, #1
 8008830:	e7bb      	b.n	80087aa <_printf_float+0x2fe>
 8008832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008836:	4631      	mov	r1, r6
 8008838:	4628      	mov	r0, r5
 800883a:	47b8      	blx	r7
 800883c:	3001      	adds	r0, #1
 800883e:	d1c0      	bne.n	80087c2 <_printf_float+0x316>
 8008840:	e68f      	b.n	8008562 <_printf_float+0xb6>
 8008842:	9a06      	ldr	r2, [sp, #24]
 8008844:	464b      	mov	r3, r9
 8008846:	4442      	add	r2, r8
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	d1c3      	bne.n	80087da <_printf_float+0x32e>
 8008852:	e686      	b.n	8008562 <_printf_float+0xb6>
 8008854:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008858:	f1ba 0f01 	cmp.w	sl, #1
 800885c:	dc01      	bgt.n	8008862 <_printf_float+0x3b6>
 800885e:	07db      	lsls	r3, r3, #31
 8008860:	d536      	bpl.n	80088d0 <_printf_float+0x424>
 8008862:	2301      	movs	r3, #1
 8008864:	4642      	mov	r2, r8
 8008866:	4631      	mov	r1, r6
 8008868:	4628      	mov	r0, r5
 800886a:	47b8      	blx	r7
 800886c:	3001      	adds	r0, #1
 800886e:	f43f ae78 	beq.w	8008562 <_printf_float+0xb6>
 8008872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	f43f ae70 	beq.w	8008562 <_printf_float+0xb6>
 8008882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008886:	2200      	movs	r2, #0
 8008888:	2300      	movs	r3, #0
 800888a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888e:	f7f8 f933 	bl	8000af8 <__aeabi_dcmpeq>
 8008892:	b9c0      	cbnz	r0, 80088c6 <_printf_float+0x41a>
 8008894:	4653      	mov	r3, sl
 8008896:	f108 0201 	add.w	r2, r8, #1
 800889a:	4631      	mov	r1, r6
 800889c:	4628      	mov	r0, r5
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	d10c      	bne.n	80088be <_printf_float+0x412>
 80088a4:	e65d      	b.n	8008562 <_printf_float+0xb6>
 80088a6:	2301      	movs	r3, #1
 80088a8:	465a      	mov	r2, fp
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f ae56 	beq.w	8008562 <_printf_float+0xb6>
 80088b6:	f108 0801 	add.w	r8, r8, #1
 80088ba:	45d0      	cmp	r8, sl
 80088bc:	dbf3      	blt.n	80088a6 <_printf_float+0x3fa>
 80088be:	464b      	mov	r3, r9
 80088c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80088c4:	e6df      	b.n	8008686 <_printf_float+0x1da>
 80088c6:	f04f 0800 	mov.w	r8, #0
 80088ca:	f104 0b1a 	add.w	fp, r4, #26
 80088ce:	e7f4      	b.n	80088ba <_printf_float+0x40e>
 80088d0:	2301      	movs	r3, #1
 80088d2:	4642      	mov	r2, r8
 80088d4:	e7e1      	b.n	800889a <_printf_float+0x3ee>
 80088d6:	2301      	movs	r3, #1
 80088d8:	464a      	mov	r2, r9
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f ae3e 	beq.w	8008562 <_printf_float+0xb6>
 80088e6:	f108 0801 	add.w	r8, r8, #1
 80088ea:	68e3      	ldr	r3, [r4, #12]
 80088ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088ee:	1a5b      	subs	r3, r3, r1
 80088f0:	4543      	cmp	r3, r8
 80088f2:	dcf0      	bgt.n	80088d6 <_printf_float+0x42a>
 80088f4:	e6fc      	b.n	80086f0 <_printf_float+0x244>
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	f104 0919 	add.w	r9, r4, #25
 80088fe:	e7f4      	b.n	80088ea <_printf_float+0x43e>

08008900 <_printf_common>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	4616      	mov	r6, r2
 8008906:	4698      	mov	r8, r3
 8008908:	688a      	ldr	r2, [r1, #8]
 800890a:	690b      	ldr	r3, [r1, #16]
 800890c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008910:	4293      	cmp	r3, r2
 8008912:	bfb8      	it	lt
 8008914:	4613      	movlt	r3, r2
 8008916:	6033      	str	r3, [r6, #0]
 8008918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800891c:	4607      	mov	r7, r0
 800891e:	460c      	mov	r4, r1
 8008920:	b10a      	cbz	r2, 8008926 <_printf_common+0x26>
 8008922:	3301      	adds	r3, #1
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	0699      	lsls	r1, r3, #26
 800892a:	bf42      	ittt	mi
 800892c:	6833      	ldrmi	r3, [r6, #0]
 800892e:	3302      	addmi	r3, #2
 8008930:	6033      	strmi	r3, [r6, #0]
 8008932:	6825      	ldr	r5, [r4, #0]
 8008934:	f015 0506 	ands.w	r5, r5, #6
 8008938:	d106      	bne.n	8008948 <_printf_common+0x48>
 800893a:	f104 0a19 	add.w	sl, r4, #25
 800893e:	68e3      	ldr	r3, [r4, #12]
 8008940:	6832      	ldr	r2, [r6, #0]
 8008942:	1a9b      	subs	r3, r3, r2
 8008944:	42ab      	cmp	r3, r5
 8008946:	dc26      	bgt.n	8008996 <_printf_common+0x96>
 8008948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	3b00      	subs	r3, #0
 8008950:	bf18      	it	ne
 8008952:	2301      	movne	r3, #1
 8008954:	0692      	lsls	r2, r2, #26
 8008956:	d42b      	bmi.n	80089b0 <_printf_common+0xb0>
 8008958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800895c:	4641      	mov	r1, r8
 800895e:	4638      	mov	r0, r7
 8008960:	47c8      	blx	r9
 8008962:	3001      	adds	r0, #1
 8008964:	d01e      	beq.n	80089a4 <_printf_common+0xa4>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	6922      	ldr	r2, [r4, #16]
 800896a:	f003 0306 	and.w	r3, r3, #6
 800896e:	2b04      	cmp	r3, #4
 8008970:	bf02      	ittt	eq
 8008972:	68e5      	ldreq	r5, [r4, #12]
 8008974:	6833      	ldreq	r3, [r6, #0]
 8008976:	1aed      	subeq	r5, r5, r3
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	bf0c      	ite	eq
 800897c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008980:	2500      	movne	r5, #0
 8008982:	4293      	cmp	r3, r2
 8008984:	bfc4      	itt	gt
 8008986:	1a9b      	subgt	r3, r3, r2
 8008988:	18ed      	addgt	r5, r5, r3
 800898a:	2600      	movs	r6, #0
 800898c:	341a      	adds	r4, #26
 800898e:	42b5      	cmp	r5, r6
 8008990:	d11a      	bne.n	80089c8 <_printf_common+0xc8>
 8008992:	2000      	movs	r0, #0
 8008994:	e008      	b.n	80089a8 <_printf_common+0xa8>
 8008996:	2301      	movs	r3, #1
 8008998:	4652      	mov	r2, sl
 800899a:	4641      	mov	r1, r8
 800899c:	4638      	mov	r0, r7
 800899e:	47c8      	blx	r9
 80089a0:	3001      	adds	r0, #1
 80089a2:	d103      	bne.n	80089ac <_printf_common+0xac>
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ac:	3501      	adds	r5, #1
 80089ae:	e7c6      	b.n	800893e <_printf_common+0x3e>
 80089b0:	18e1      	adds	r1, r4, r3
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	2030      	movs	r0, #48	@ 0x30
 80089b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089ba:	4422      	add	r2, r4
 80089bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089c4:	3302      	adds	r3, #2
 80089c6:	e7c7      	b.n	8008958 <_printf_common+0x58>
 80089c8:	2301      	movs	r3, #1
 80089ca:	4622      	mov	r2, r4
 80089cc:	4641      	mov	r1, r8
 80089ce:	4638      	mov	r0, r7
 80089d0:	47c8      	blx	r9
 80089d2:	3001      	adds	r0, #1
 80089d4:	d0e6      	beq.n	80089a4 <_printf_common+0xa4>
 80089d6:	3601      	adds	r6, #1
 80089d8:	e7d9      	b.n	800898e <_printf_common+0x8e>
	...

080089dc <_printf_i>:
 80089dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	7e0f      	ldrb	r7, [r1, #24]
 80089e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089e4:	2f78      	cmp	r7, #120	@ 0x78
 80089e6:	4691      	mov	r9, r2
 80089e8:	4680      	mov	r8, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	469a      	mov	sl, r3
 80089ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089f2:	d807      	bhi.n	8008a04 <_printf_i+0x28>
 80089f4:	2f62      	cmp	r7, #98	@ 0x62
 80089f6:	d80a      	bhi.n	8008a0e <_printf_i+0x32>
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	f000 80d2 	beq.w	8008ba2 <_printf_i+0x1c6>
 80089fe:	2f58      	cmp	r7, #88	@ 0x58
 8008a00:	f000 80b9 	beq.w	8008b76 <_printf_i+0x19a>
 8008a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a0c:	e03a      	b.n	8008a84 <_printf_i+0xa8>
 8008a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a12:	2b15      	cmp	r3, #21
 8008a14:	d8f6      	bhi.n	8008a04 <_printf_i+0x28>
 8008a16:	a101      	add	r1, pc, #4	@ (adr r1, 8008a1c <_printf_i+0x40>)
 8008a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a1c:	08008a75 	.word	0x08008a75
 8008a20:	08008a89 	.word	0x08008a89
 8008a24:	08008a05 	.word	0x08008a05
 8008a28:	08008a05 	.word	0x08008a05
 8008a2c:	08008a05 	.word	0x08008a05
 8008a30:	08008a05 	.word	0x08008a05
 8008a34:	08008a89 	.word	0x08008a89
 8008a38:	08008a05 	.word	0x08008a05
 8008a3c:	08008a05 	.word	0x08008a05
 8008a40:	08008a05 	.word	0x08008a05
 8008a44:	08008a05 	.word	0x08008a05
 8008a48:	08008b89 	.word	0x08008b89
 8008a4c:	08008ab3 	.word	0x08008ab3
 8008a50:	08008b43 	.word	0x08008b43
 8008a54:	08008a05 	.word	0x08008a05
 8008a58:	08008a05 	.word	0x08008a05
 8008a5c:	08008bab 	.word	0x08008bab
 8008a60:	08008a05 	.word	0x08008a05
 8008a64:	08008ab3 	.word	0x08008ab3
 8008a68:	08008a05 	.word	0x08008a05
 8008a6c:	08008a05 	.word	0x08008a05
 8008a70:	08008b4b 	.word	0x08008b4b
 8008a74:	6833      	ldr	r3, [r6, #0]
 8008a76:	1d1a      	adds	r2, r3, #4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6032      	str	r2, [r6, #0]
 8008a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a84:	2301      	movs	r3, #1
 8008a86:	e09d      	b.n	8008bc4 <_printf_i+0x1e8>
 8008a88:	6833      	ldr	r3, [r6, #0]
 8008a8a:	6820      	ldr	r0, [r4, #0]
 8008a8c:	1d19      	adds	r1, r3, #4
 8008a8e:	6031      	str	r1, [r6, #0]
 8008a90:	0606      	lsls	r6, r0, #24
 8008a92:	d501      	bpl.n	8008a98 <_printf_i+0xbc>
 8008a94:	681d      	ldr	r5, [r3, #0]
 8008a96:	e003      	b.n	8008aa0 <_printf_i+0xc4>
 8008a98:	0645      	lsls	r5, r0, #25
 8008a9a:	d5fb      	bpl.n	8008a94 <_printf_i+0xb8>
 8008a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	da03      	bge.n	8008aac <_printf_i+0xd0>
 8008aa4:	232d      	movs	r3, #45	@ 0x2d
 8008aa6:	426d      	negs	r5, r5
 8008aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aac:	4859      	ldr	r0, [pc, #356]	@ (8008c14 <_printf_i+0x238>)
 8008aae:	230a      	movs	r3, #10
 8008ab0:	e011      	b.n	8008ad6 <_printf_i+0xfa>
 8008ab2:	6821      	ldr	r1, [r4, #0]
 8008ab4:	6833      	ldr	r3, [r6, #0]
 8008ab6:	0608      	lsls	r0, r1, #24
 8008ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008abc:	d402      	bmi.n	8008ac4 <_printf_i+0xe8>
 8008abe:	0649      	lsls	r1, r1, #25
 8008ac0:	bf48      	it	mi
 8008ac2:	b2ad      	uxthmi	r5, r5
 8008ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ac6:	4853      	ldr	r0, [pc, #332]	@ (8008c14 <_printf_i+0x238>)
 8008ac8:	6033      	str	r3, [r6, #0]
 8008aca:	bf14      	ite	ne
 8008acc:	230a      	movne	r3, #10
 8008ace:	2308      	moveq	r3, #8
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ad6:	6866      	ldr	r6, [r4, #4]
 8008ad8:	60a6      	str	r6, [r4, #8]
 8008ada:	2e00      	cmp	r6, #0
 8008adc:	bfa2      	ittt	ge
 8008ade:	6821      	ldrge	r1, [r4, #0]
 8008ae0:	f021 0104 	bicge.w	r1, r1, #4
 8008ae4:	6021      	strge	r1, [r4, #0]
 8008ae6:	b90d      	cbnz	r5, 8008aec <_printf_i+0x110>
 8008ae8:	2e00      	cmp	r6, #0
 8008aea:	d04b      	beq.n	8008b84 <_printf_i+0x1a8>
 8008aec:	4616      	mov	r6, r2
 8008aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8008af2:	fb03 5711 	mls	r7, r3, r1, r5
 8008af6:	5dc7      	ldrb	r7, [r0, r7]
 8008af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008afc:	462f      	mov	r7, r5
 8008afe:	42bb      	cmp	r3, r7
 8008b00:	460d      	mov	r5, r1
 8008b02:	d9f4      	bls.n	8008aee <_printf_i+0x112>
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d10b      	bne.n	8008b20 <_printf_i+0x144>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	07df      	lsls	r7, r3, #31
 8008b0c:	d508      	bpl.n	8008b20 <_printf_i+0x144>
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	6861      	ldr	r1, [r4, #4]
 8008b12:	4299      	cmp	r1, r3
 8008b14:	bfde      	ittt	le
 8008b16:	2330      	movle	r3, #48	@ 0x30
 8008b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b20:	1b92      	subs	r2, r2, r6
 8008b22:	6122      	str	r2, [r4, #16]
 8008b24:	f8cd a000 	str.w	sl, [sp]
 8008b28:	464b      	mov	r3, r9
 8008b2a:	aa03      	add	r2, sp, #12
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f7ff fee6 	bl	8008900 <_printf_common>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d14a      	bne.n	8008bce <_printf_i+0x1f2>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	b004      	add	sp, #16
 8008b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	f043 0320 	orr.w	r3, r3, #32
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	4833      	ldr	r0, [pc, #204]	@ (8008c18 <_printf_i+0x23c>)
 8008b4c:	2778      	movs	r7, #120	@ 0x78
 8008b4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	6831      	ldr	r1, [r6, #0]
 8008b56:	061f      	lsls	r7, r3, #24
 8008b58:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b5c:	d402      	bmi.n	8008b64 <_printf_i+0x188>
 8008b5e:	065f      	lsls	r7, r3, #25
 8008b60:	bf48      	it	mi
 8008b62:	b2ad      	uxthmi	r5, r5
 8008b64:	6031      	str	r1, [r6, #0]
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	bf44      	itt	mi
 8008b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b6e:	6023      	strmi	r3, [r4, #0]
 8008b70:	b11d      	cbz	r5, 8008b7a <_printf_i+0x19e>
 8008b72:	2310      	movs	r3, #16
 8008b74:	e7ac      	b.n	8008ad0 <_printf_i+0xf4>
 8008b76:	4827      	ldr	r0, [pc, #156]	@ (8008c14 <_printf_i+0x238>)
 8008b78:	e7e9      	b.n	8008b4e <_printf_i+0x172>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	f023 0320 	bic.w	r3, r3, #32
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	e7f6      	b.n	8008b72 <_printf_i+0x196>
 8008b84:	4616      	mov	r6, r2
 8008b86:	e7bd      	b.n	8008b04 <_printf_i+0x128>
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	6825      	ldr	r5, [r4, #0]
 8008b8c:	6961      	ldr	r1, [r4, #20]
 8008b8e:	1d18      	adds	r0, r3, #4
 8008b90:	6030      	str	r0, [r6, #0]
 8008b92:	062e      	lsls	r6, r5, #24
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0x1c0>
 8008b98:	6019      	str	r1, [r3, #0]
 8008b9a:	e002      	b.n	8008ba2 <_printf_i+0x1c6>
 8008b9c:	0668      	lsls	r0, r5, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0x1bc>
 8008ba0:	8019      	strh	r1, [r3, #0]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6123      	str	r3, [r4, #16]
 8008ba6:	4616      	mov	r6, r2
 8008ba8:	e7bc      	b.n	8008b24 <_printf_i+0x148>
 8008baa:	6833      	ldr	r3, [r6, #0]
 8008bac:	1d1a      	adds	r2, r3, #4
 8008bae:	6032      	str	r2, [r6, #0]
 8008bb0:	681e      	ldr	r6, [r3, #0]
 8008bb2:	6862      	ldr	r2, [r4, #4]
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7f7 fb22 	bl	8000200 <memchr>
 8008bbc:	b108      	cbz	r0, 8008bc2 <_printf_i+0x1e6>
 8008bbe:	1b80      	subs	r0, r0, r6
 8008bc0:	6060      	str	r0, [r4, #4]
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	6123      	str	r3, [r4, #16]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bcc:	e7aa      	b.n	8008b24 <_printf_i+0x148>
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	47d0      	blx	sl
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d0ad      	beq.n	8008b38 <_printf_i+0x15c>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	079b      	lsls	r3, r3, #30
 8008be0:	d413      	bmi.n	8008c0a <_printf_i+0x22e>
 8008be2:	68e0      	ldr	r0, [r4, #12]
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	4298      	cmp	r0, r3
 8008be8:	bfb8      	it	lt
 8008bea:	4618      	movlt	r0, r3
 8008bec:	e7a6      	b.n	8008b3c <_printf_i+0x160>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	47d0      	blx	sl
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d09d      	beq.n	8008b38 <_printf_i+0x15c>
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	9903      	ldr	r1, [sp, #12]
 8008c02:	1a5b      	subs	r3, r3, r1
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	dcf2      	bgt.n	8008bee <_printf_i+0x212>
 8008c08:	e7eb      	b.n	8008be2 <_printf_i+0x206>
 8008c0a:	2500      	movs	r5, #0
 8008c0c:	f104 0619 	add.w	r6, r4, #25
 8008c10:	e7f5      	b.n	8008bfe <_printf_i+0x222>
 8008c12:	bf00      	nop
 8008c14:	0800b18e 	.word	0x0800b18e
 8008c18:	0800b19f 	.word	0x0800b19f

08008c1c <std>:
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	4604      	mov	r4, r0
 8008c22:	e9c0 3300 	strd	r3, r3, [r0]
 8008c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c2a:	6083      	str	r3, [r0, #8]
 8008c2c:	8181      	strh	r1, [r0, #12]
 8008c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c30:	81c2      	strh	r2, [r0, #14]
 8008c32:	6183      	str	r3, [r0, #24]
 8008c34:	4619      	mov	r1, r3
 8008c36:	2208      	movs	r2, #8
 8008c38:	305c      	adds	r0, #92	@ 0x5c
 8008c3a:	f000 f914 	bl	8008e66 <memset>
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c74 <std+0x58>)
 8008c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c42:	4b0d      	ldr	r3, [pc, #52]	@ (8008c78 <std+0x5c>)
 8008c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c46:	4b0d      	ldr	r3, [pc, #52]	@ (8008c7c <std+0x60>)
 8008c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c80 <std+0x64>)
 8008c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <std+0x68>)
 8008c50:	6224      	str	r4, [r4, #32]
 8008c52:	429c      	cmp	r4, r3
 8008c54:	d006      	beq.n	8008c64 <std+0x48>
 8008c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c5a:	4294      	cmp	r4, r2
 8008c5c:	d002      	beq.n	8008c64 <std+0x48>
 8008c5e:	33d0      	adds	r3, #208	@ 0xd0
 8008c60:	429c      	cmp	r4, r3
 8008c62:	d105      	bne.n	8008c70 <std+0x54>
 8008c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c6c:	f000 b978 	b.w	8008f60 <__retarget_lock_init_recursive>
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	bf00      	nop
 8008c74:	08008de1 	.word	0x08008de1
 8008c78:	08008e03 	.word	0x08008e03
 8008c7c:	08008e3b 	.word	0x08008e3b
 8008c80:	08008e5f 	.word	0x08008e5f
 8008c84:	2000495c 	.word	0x2000495c

08008c88 <stdio_exit_handler>:
 8008c88:	4a02      	ldr	r2, [pc, #8]	@ (8008c94 <stdio_exit_handler+0xc>)
 8008c8a:	4903      	ldr	r1, [pc, #12]	@ (8008c98 <stdio_exit_handler+0x10>)
 8008c8c:	4803      	ldr	r0, [pc, #12]	@ (8008c9c <stdio_exit_handler+0x14>)
 8008c8e:	f000 b869 	b.w	8008d64 <_fwalk_sglue>
 8008c92:	bf00      	nop
 8008c94:	20000014 	.word	0x20000014
 8008c98:	0800a8bd 	.word	0x0800a8bd
 8008c9c:	20000024 	.word	0x20000024

08008ca0 <cleanup_stdio>:
 8008ca0:	6841      	ldr	r1, [r0, #4]
 8008ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd4 <cleanup_stdio+0x34>)
 8008ca4:	4299      	cmp	r1, r3
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	d001      	beq.n	8008cb0 <cleanup_stdio+0x10>
 8008cac:	f001 fe06 	bl	800a8bc <_fflush_r>
 8008cb0:	68a1      	ldr	r1, [r4, #8]
 8008cb2:	4b09      	ldr	r3, [pc, #36]	@ (8008cd8 <cleanup_stdio+0x38>)
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	d002      	beq.n	8008cbe <cleanup_stdio+0x1e>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f001 fdff 	bl	800a8bc <_fflush_r>
 8008cbe:	68e1      	ldr	r1, [r4, #12]
 8008cc0:	4b06      	ldr	r3, [pc, #24]	@ (8008cdc <cleanup_stdio+0x3c>)
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	d004      	beq.n	8008cd0 <cleanup_stdio+0x30>
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ccc:	f001 bdf6 	b.w	800a8bc <_fflush_r>
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	bf00      	nop
 8008cd4:	2000495c 	.word	0x2000495c
 8008cd8:	200049c4 	.word	0x200049c4
 8008cdc:	20004a2c 	.word	0x20004a2c

08008ce0 <global_stdio_init.part.0>:
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d10 <global_stdio_init.part.0+0x30>)
 8008ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8008d14 <global_stdio_init.part.0+0x34>)
 8008ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8008d18 <global_stdio_init.part.0+0x38>)
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	4620      	mov	r0, r4
 8008cec:	2200      	movs	r2, #0
 8008cee:	2104      	movs	r1, #4
 8008cf0:	f7ff ff94 	bl	8008c1c <std>
 8008cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	2109      	movs	r1, #9
 8008cfc:	f7ff ff8e 	bl	8008c1c <std>
 8008d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d04:	2202      	movs	r2, #2
 8008d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0a:	2112      	movs	r1, #18
 8008d0c:	f7ff bf86 	b.w	8008c1c <std>
 8008d10:	20004a94 	.word	0x20004a94
 8008d14:	2000495c 	.word	0x2000495c
 8008d18:	08008c89 	.word	0x08008c89

08008d1c <__sfp_lock_acquire>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	@ (8008d24 <__sfp_lock_acquire+0x8>)
 8008d1e:	f000 b920 	b.w	8008f62 <__retarget_lock_acquire_recursive>
 8008d22:	bf00      	nop
 8008d24:	20004a9d 	.word	0x20004a9d

08008d28 <__sfp_lock_release>:
 8008d28:	4801      	ldr	r0, [pc, #4]	@ (8008d30 <__sfp_lock_release+0x8>)
 8008d2a:	f000 b91b 	b.w	8008f64 <__retarget_lock_release_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20004a9d 	.word	0x20004a9d

08008d34 <__sinit>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	4604      	mov	r4, r0
 8008d38:	f7ff fff0 	bl	8008d1c <__sfp_lock_acquire>
 8008d3c:	6a23      	ldr	r3, [r4, #32]
 8008d3e:	b11b      	cbz	r3, 8008d48 <__sinit+0x14>
 8008d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d44:	f7ff bff0 	b.w	8008d28 <__sfp_lock_release>
 8008d48:	4b04      	ldr	r3, [pc, #16]	@ (8008d5c <__sinit+0x28>)
 8008d4a:	6223      	str	r3, [r4, #32]
 8008d4c:	4b04      	ldr	r3, [pc, #16]	@ (8008d60 <__sinit+0x2c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1f5      	bne.n	8008d40 <__sinit+0xc>
 8008d54:	f7ff ffc4 	bl	8008ce0 <global_stdio_init.part.0>
 8008d58:	e7f2      	b.n	8008d40 <__sinit+0xc>
 8008d5a:	bf00      	nop
 8008d5c:	08008ca1 	.word	0x08008ca1
 8008d60:	20004a94 	.word	0x20004a94

08008d64 <_fwalk_sglue>:
 8008d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d68:	4607      	mov	r7, r0
 8008d6a:	4688      	mov	r8, r1
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	2600      	movs	r6, #0
 8008d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d74:	f1b9 0901 	subs.w	r9, r9, #1
 8008d78:	d505      	bpl.n	8008d86 <_fwalk_sglue+0x22>
 8008d7a:	6824      	ldr	r4, [r4, #0]
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	d1f7      	bne.n	8008d70 <_fwalk_sglue+0xc>
 8008d80:	4630      	mov	r0, r6
 8008d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d86:	89ab      	ldrh	r3, [r5, #12]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d907      	bls.n	8008d9c <_fwalk_sglue+0x38>
 8008d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d90:	3301      	adds	r3, #1
 8008d92:	d003      	beq.n	8008d9c <_fwalk_sglue+0x38>
 8008d94:	4629      	mov	r1, r5
 8008d96:	4638      	mov	r0, r7
 8008d98:	47c0      	blx	r8
 8008d9a:	4306      	orrs	r6, r0
 8008d9c:	3568      	adds	r5, #104	@ 0x68
 8008d9e:	e7e9      	b.n	8008d74 <_fwalk_sglue+0x10>

08008da0 <siprintf>:
 8008da0:	b40e      	push	{r1, r2, r3}
 8008da2:	b500      	push	{lr}
 8008da4:	b09c      	sub	sp, #112	@ 0x70
 8008da6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008da8:	9002      	str	r0, [sp, #8]
 8008daa:	9006      	str	r0, [sp, #24]
 8008dac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008db0:	4809      	ldr	r0, [pc, #36]	@ (8008dd8 <siprintf+0x38>)
 8008db2:	9107      	str	r1, [sp, #28]
 8008db4:	9104      	str	r1, [sp, #16]
 8008db6:	4909      	ldr	r1, [pc, #36]	@ (8008ddc <siprintf+0x3c>)
 8008db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dbc:	9105      	str	r1, [sp, #20]
 8008dbe:	6800      	ldr	r0, [r0, #0]
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	a902      	add	r1, sp, #8
 8008dc4:	f001 fbfa 	bl	800a5bc <_svfiprintf_r>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	b01c      	add	sp, #112	@ 0x70
 8008dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd4:	b003      	add	sp, #12
 8008dd6:	4770      	bx	lr
 8008dd8:	20000020 	.word	0x20000020
 8008ddc:	ffff0208 	.word	0xffff0208

08008de0 <__sread>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	460c      	mov	r4, r1
 8008de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de8:	f000 f86c 	bl	8008ec4 <_read_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	bfab      	itete	ge
 8008df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008df2:	89a3      	ldrhlt	r3, [r4, #12]
 8008df4:	181b      	addge	r3, r3, r0
 8008df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dfa:	bfac      	ite	ge
 8008dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dfe:	81a3      	strhlt	r3, [r4, #12]
 8008e00:	bd10      	pop	{r4, pc}

08008e02 <__swrite>:
 8008e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e06:	461f      	mov	r7, r3
 8008e08:	898b      	ldrh	r3, [r1, #12]
 8008e0a:	05db      	lsls	r3, r3, #23
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	4616      	mov	r6, r2
 8008e12:	d505      	bpl.n	8008e20 <__swrite+0x1e>
 8008e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e18:	2302      	movs	r3, #2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f000 f840 	bl	8008ea0 <_lseek_r>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	463b      	mov	r3, r7
 8008e30:	4628      	mov	r0, r5
 8008e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e36:	f000 b857 	b.w	8008ee8 <_write_r>

08008e3a <__sseek>:
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e42:	f000 f82d 	bl	8008ea0 <_lseek_r>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	bf15      	itete	ne
 8008e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e56:	81a3      	strheq	r3, [r4, #12]
 8008e58:	bf18      	it	ne
 8008e5a:	81a3      	strhne	r3, [r4, #12]
 8008e5c:	bd10      	pop	{r4, pc}

08008e5e <__sclose>:
 8008e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e62:	f000 b80d 	b.w	8008e80 <_close_r>

08008e66 <memset>:
 8008e66:	4402      	add	r2, r0
 8008e68:	4603      	mov	r3, r0
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d100      	bne.n	8008e70 <memset+0xa>
 8008e6e:	4770      	bx	lr
 8008e70:	f803 1b01 	strb.w	r1, [r3], #1
 8008e74:	e7f9      	b.n	8008e6a <memset+0x4>
	...

08008e78 <_localeconv_r>:
 8008e78:	4800      	ldr	r0, [pc, #0]	@ (8008e7c <_localeconv_r+0x4>)
 8008e7a:	4770      	bx	lr
 8008e7c:	20000160 	.word	0x20000160

08008e80 <_close_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d06      	ldr	r5, [pc, #24]	@ (8008e9c <_close_r+0x1c>)
 8008e84:	2300      	movs	r3, #0
 8008e86:	4604      	mov	r4, r0
 8008e88:	4608      	mov	r0, r1
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	f7f9 fb01 	bl	8002492 <_close>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d102      	bne.n	8008e9a <_close_r+0x1a>
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	b103      	cbz	r3, 8008e9a <_close_r+0x1a>
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	20004a98 	.word	0x20004a98

08008ea0 <_lseek_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d07      	ldr	r5, [pc, #28]	@ (8008ec0 <_lseek_r+0x20>)
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	602a      	str	r2, [r5, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f7f9 fb16 	bl	80024e0 <_lseek>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_lseek_r+0x1e>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_lseek_r+0x1e>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20004a98 	.word	0x20004a98

08008ec4 <_read_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	@ (8008ee4 <_read_r+0x20>)
 8008ec8:	4604      	mov	r4, r0
 8008eca:	4608      	mov	r0, r1
 8008ecc:	4611      	mov	r1, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	602a      	str	r2, [r5, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f7f9 faa4 	bl	8002420 <_read>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_read_r+0x1e>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_read_r+0x1e>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20004a98 	.word	0x20004a98

08008ee8 <_write_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	@ (8008f08 <_write_r+0x20>)
 8008eec:	4604      	mov	r4, r0
 8008eee:	4608      	mov	r0, r1
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	602a      	str	r2, [r5, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7f9 faaf 	bl	800245a <_write>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_write_r+0x1e>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_write_r+0x1e>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	20004a98 	.word	0x20004a98

08008f0c <__errno>:
 8008f0c:	4b01      	ldr	r3, [pc, #4]	@ (8008f14 <__errno+0x8>)
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000020 	.word	0x20000020

08008f18 <__libc_init_array>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f50 <__libc_init_array+0x38>)
 8008f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f54 <__libc_init_array+0x3c>)
 8008f1e:	1b64      	subs	r4, r4, r5
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	2600      	movs	r6, #0
 8008f24:	42a6      	cmp	r6, r4
 8008f26:	d109      	bne.n	8008f3c <__libc_init_array+0x24>
 8008f28:	4d0b      	ldr	r5, [pc, #44]	@ (8008f58 <__libc_init_array+0x40>)
 8008f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f5c <__libc_init_array+0x44>)
 8008f2c:	f002 f864 	bl	800aff8 <_init>
 8008f30:	1b64      	subs	r4, r4, r5
 8008f32:	10a4      	asrs	r4, r4, #2
 8008f34:	2600      	movs	r6, #0
 8008f36:	42a6      	cmp	r6, r4
 8008f38:	d105      	bne.n	8008f46 <__libc_init_array+0x2e>
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f40:	4798      	blx	r3
 8008f42:	3601      	adds	r6, #1
 8008f44:	e7ee      	b.n	8008f24 <__libc_init_array+0xc>
 8008f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4a:	4798      	blx	r3
 8008f4c:	3601      	adds	r6, #1
 8008f4e:	e7f2      	b.n	8008f36 <__libc_init_array+0x1e>
 8008f50:	0800b4f8 	.word	0x0800b4f8
 8008f54:	0800b4f8 	.word	0x0800b4f8
 8008f58:	0800b4f8 	.word	0x0800b4f8
 8008f5c:	0800b4fc 	.word	0x0800b4fc

08008f60 <__retarget_lock_init_recursive>:
 8008f60:	4770      	bx	lr

08008f62 <__retarget_lock_acquire_recursive>:
 8008f62:	4770      	bx	lr

08008f64 <__retarget_lock_release_recursive>:
 8008f64:	4770      	bx	lr

08008f66 <quorem>:
 8008f66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6a:	6903      	ldr	r3, [r0, #16]
 8008f6c:	690c      	ldr	r4, [r1, #16]
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	4607      	mov	r7, r0
 8008f72:	db7e      	blt.n	8009072 <quorem+0x10c>
 8008f74:	3c01      	subs	r4, #1
 8008f76:	f101 0814 	add.w	r8, r1, #20
 8008f7a:	00a3      	lsls	r3, r4, #2
 8008f7c:	f100 0514 	add.w	r5, r0, #20
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f90:	3301      	adds	r3, #1
 8008f92:	429a      	cmp	r2, r3
 8008f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f9c:	d32e      	bcc.n	8008ffc <quorem+0x96>
 8008f9e:	f04f 0a00 	mov.w	sl, #0
 8008fa2:	46c4      	mov	ip, r8
 8008fa4:	46ae      	mov	lr, r5
 8008fa6:	46d3      	mov	fp, sl
 8008fa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fac:	b298      	uxth	r0, r3
 8008fae:	fb06 a000 	mla	r0, r6, r0, sl
 8008fb2:	0c02      	lsrs	r2, r0, #16
 8008fb4:	0c1b      	lsrs	r3, r3, #16
 8008fb6:	fb06 2303 	mla	r3, r6, r3, r2
 8008fba:	f8de 2000 	ldr.w	r2, [lr]
 8008fbe:	b280      	uxth	r0, r0
 8008fc0:	b292      	uxth	r2, r2
 8008fc2:	1a12      	subs	r2, r2, r0
 8008fc4:	445a      	add	r2, fp
 8008fc6:	f8de 0000 	ldr.w	r0, [lr]
 8008fca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008fd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008fd8:	b292      	uxth	r2, r2
 8008fda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fde:	45e1      	cmp	r9, ip
 8008fe0:	f84e 2b04 	str.w	r2, [lr], #4
 8008fe4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008fe8:	d2de      	bcs.n	8008fa8 <quorem+0x42>
 8008fea:	9b00      	ldr	r3, [sp, #0]
 8008fec:	58eb      	ldr	r3, [r5, r3]
 8008fee:	b92b      	cbnz	r3, 8008ffc <quorem+0x96>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	3b04      	subs	r3, #4
 8008ff4:	429d      	cmp	r5, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	d32f      	bcc.n	800905a <quorem+0xf4>
 8008ffa:	613c      	str	r4, [r7, #16]
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f001 f979 	bl	800a2f4 <__mcmp>
 8009002:	2800      	cmp	r0, #0
 8009004:	db25      	blt.n	8009052 <quorem+0xec>
 8009006:	4629      	mov	r1, r5
 8009008:	2000      	movs	r0, #0
 800900a:	f858 2b04 	ldr.w	r2, [r8], #4
 800900e:	f8d1 c000 	ldr.w	ip, [r1]
 8009012:	fa1f fe82 	uxth.w	lr, r2
 8009016:	fa1f f38c 	uxth.w	r3, ip
 800901a:	eba3 030e 	sub.w	r3, r3, lr
 800901e:	4403      	add	r3, r0
 8009020:	0c12      	lsrs	r2, r2, #16
 8009022:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009026:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800902a:	b29b      	uxth	r3, r3
 800902c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009030:	45c1      	cmp	r9, r8
 8009032:	f841 3b04 	str.w	r3, [r1], #4
 8009036:	ea4f 4022 	mov.w	r0, r2, asr #16
 800903a:	d2e6      	bcs.n	800900a <quorem+0xa4>
 800903c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009044:	b922      	cbnz	r2, 8009050 <quorem+0xea>
 8009046:	3b04      	subs	r3, #4
 8009048:	429d      	cmp	r5, r3
 800904a:	461a      	mov	r2, r3
 800904c:	d30b      	bcc.n	8009066 <quorem+0x100>
 800904e:	613c      	str	r4, [r7, #16]
 8009050:	3601      	adds	r6, #1
 8009052:	4630      	mov	r0, r6
 8009054:	b003      	add	sp, #12
 8009056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	3b04      	subs	r3, #4
 800905e:	2a00      	cmp	r2, #0
 8009060:	d1cb      	bne.n	8008ffa <quorem+0x94>
 8009062:	3c01      	subs	r4, #1
 8009064:	e7c6      	b.n	8008ff4 <quorem+0x8e>
 8009066:	6812      	ldr	r2, [r2, #0]
 8009068:	3b04      	subs	r3, #4
 800906a:	2a00      	cmp	r2, #0
 800906c:	d1ef      	bne.n	800904e <quorem+0xe8>
 800906e:	3c01      	subs	r4, #1
 8009070:	e7ea      	b.n	8009048 <quorem+0xe2>
 8009072:	2000      	movs	r0, #0
 8009074:	e7ee      	b.n	8009054 <quorem+0xee>
	...

08009078 <_dtoa_r>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	69c7      	ldr	r7, [r0, #28]
 800907e:	b099      	sub	sp, #100	@ 0x64
 8009080:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009084:	ec55 4b10 	vmov	r4, r5, d0
 8009088:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800908a:	9109      	str	r1, [sp, #36]	@ 0x24
 800908c:	4683      	mov	fp, r0
 800908e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009090:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009092:	b97f      	cbnz	r7, 80090b4 <_dtoa_r+0x3c>
 8009094:	2010      	movs	r0, #16
 8009096:	f000 fdfd 	bl	8009c94 <malloc>
 800909a:	4602      	mov	r2, r0
 800909c:	f8cb 001c 	str.w	r0, [fp, #28]
 80090a0:	b920      	cbnz	r0, 80090ac <_dtoa_r+0x34>
 80090a2:	4ba7      	ldr	r3, [pc, #668]	@ (8009340 <_dtoa_r+0x2c8>)
 80090a4:	21ef      	movs	r1, #239	@ 0xef
 80090a6:	48a7      	ldr	r0, [pc, #668]	@ (8009344 <_dtoa_r+0x2cc>)
 80090a8:	f001 fc68 	bl	800a97c <__assert_func>
 80090ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80090b0:	6007      	str	r7, [r0, #0]
 80090b2:	60c7      	str	r7, [r0, #12]
 80090b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090b8:	6819      	ldr	r1, [r3, #0]
 80090ba:	b159      	cbz	r1, 80090d4 <_dtoa_r+0x5c>
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	604a      	str	r2, [r1, #4]
 80090c0:	2301      	movs	r3, #1
 80090c2:	4093      	lsls	r3, r2
 80090c4:	608b      	str	r3, [r1, #8]
 80090c6:	4658      	mov	r0, fp
 80090c8:	f000 feda 	bl	8009e80 <_Bfree>
 80090cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	1e2b      	subs	r3, r5, #0
 80090d6:	bfb9      	ittee	lt
 80090d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80090dc:	9303      	strlt	r3, [sp, #12]
 80090de:	2300      	movge	r3, #0
 80090e0:	6033      	strge	r3, [r6, #0]
 80090e2:	9f03      	ldr	r7, [sp, #12]
 80090e4:	4b98      	ldr	r3, [pc, #608]	@ (8009348 <_dtoa_r+0x2d0>)
 80090e6:	bfbc      	itt	lt
 80090e8:	2201      	movlt	r2, #1
 80090ea:	6032      	strlt	r2, [r6, #0]
 80090ec:	43bb      	bics	r3, r7
 80090ee:	d112      	bne.n	8009116 <_dtoa_r+0x9e>
 80090f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090fc:	4323      	orrs	r3, r4
 80090fe:	f000 854d 	beq.w	8009b9c <_dtoa_r+0xb24>
 8009102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009104:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800935c <_dtoa_r+0x2e4>
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 854f 	beq.w	8009bac <_dtoa_r+0xb34>
 800910e:	f10a 0303 	add.w	r3, sl, #3
 8009112:	f000 bd49 	b.w	8009ba8 <_dtoa_r+0xb30>
 8009116:	ed9d 7b02 	vldr	d7, [sp, #8]
 800911a:	2200      	movs	r2, #0
 800911c:	ec51 0b17 	vmov	r0, r1, d7
 8009120:	2300      	movs	r3, #0
 8009122:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009126:	f7f7 fce7 	bl	8000af8 <__aeabi_dcmpeq>
 800912a:	4680      	mov	r8, r0
 800912c:	b158      	cbz	r0, 8009146 <_dtoa_r+0xce>
 800912e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009130:	2301      	movs	r3, #1
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009136:	b113      	cbz	r3, 800913e <_dtoa_r+0xc6>
 8009138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800913a:	4b84      	ldr	r3, [pc, #528]	@ (800934c <_dtoa_r+0x2d4>)
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009360 <_dtoa_r+0x2e8>
 8009142:	f000 bd33 	b.w	8009bac <_dtoa_r+0xb34>
 8009146:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800914a:	aa16      	add	r2, sp, #88	@ 0x58
 800914c:	a917      	add	r1, sp, #92	@ 0x5c
 800914e:	4658      	mov	r0, fp
 8009150:	f001 f980 	bl	800a454 <__d2b>
 8009154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009158:	4681      	mov	r9, r0
 800915a:	2e00      	cmp	r6, #0
 800915c:	d077      	beq.n	800924e <_dtoa_r+0x1d6>
 800915e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009160:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800916c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009178:	4619      	mov	r1, r3
 800917a:	2200      	movs	r2, #0
 800917c:	4b74      	ldr	r3, [pc, #464]	@ (8009350 <_dtoa_r+0x2d8>)
 800917e:	f7f7 f89b 	bl	80002b8 <__aeabi_dsub>
 8009182:	a369      	add	r3, pc, #420	@ (adr r3, 8009328 <_dtoa_r+0x2b0>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7f7 fa4e 	bl	8000628 <__aeabi_dmul>
 800918c:	a368      	add	r3, pc, #416	@ (adr r3, 8009330 <_dtoa_r+0x2b8>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 f893 	bl	80002bc <__adddf3>
 8009196:	4604      	mov	r4, r0
 8009198:	4630      	mov	r0, r6
 800919a:	460d      	mov	r5, r1
 800919c:	f7f7 f9da 	bl	8000554 <__aeabi_i2d>
 80091a0:	a365      	add	r3, pc, #404	@ (adr r3, 8009338 <_dtoa_r+0x2c0>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 fa3f 	bl	8000628 <__aeabi_dmul>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4620      	mov	r0, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7f7 f883 	bl	80002bc <__adddf3>
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	f7f7 fce5 	bl	8000b88 <__aeabi_d2iz>
 80091be:	2200      	movs	r2, #0
 80091c0:	4607      	mov	r7, r0
 80091c2:	2300      	movs	r3, #0
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f7 fca0 	bl	8000b0c <__aeabi_dcmplt>
 80091cc:	b140      	cbz	r0, 80091e0 <_dtoa_r+0x168>
 80091ce:	4638      	mov	r0, r7
 80091d0:	f7f7 f9c0 	bl	8000554 <__aeabi_i2d>
 80091d4:	4622      	mov	r2, r4
 80091d6:	462b      	mov	r3, r5
 80091d8:	f7f7 fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 80091dc:	b900      	cbnz	r0, 80091e0 <_dtoa_r+0x168>
 80091de:	3f01      	subs	r7, #1
 80091e0:	2f16      	cmp	r7, #22
 80091e2:	d851      	bhi.n	8009288 <_dtoa_r+0x210>
 80091e4:	4b5b      	ldr	r3, [pc, #364]	@ (8009354 <_dtoa_r+0x2dc>)
 80091e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091f2:	f7f7 fc8b 	bl	8000b0c <__aeabi_dcmplt>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d048      	beq.n	800928c <_dtoa_r+0x214>
 80091fa:	3f01      	subs	r7, #1
 80091fc:	2300      	movs	r3, #0
 80091fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8009200:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009202:	1b9b      	subs	r3, r3, r6
 8009204:	1e5a      	subs	r2, r3, #1
 8009206:	bf44      	itt	mi
 8009208:	f1c3 0801 	rsbmi	r8, r3, #1
 800920c:	2300      	movmi	r3, #0
 800920e:	9208      	str	r2, [sp, #32]
 8009210:	bf54      	ite	pl
 8009212:	f04f 0800 	movpl.w	r8, #0
 8009216:	9308      	strmi	r3, [sp, #32]
 8009218:	2f00      	cmp	r7, #0
 800921a:	db39      	blt.n	8009290 <_dtoa_r+0x218>
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009220:	443b      	add	r3, r7
 8009222:	9308      	str	r3, [sp, #32]
 8009224:	2300      	movs	r3, #0
 8009226:	930a      	str	r3, [sp, #40]	@ 0x28
 8009228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800922a:	2b09      	cmp	r3, #9
 800922c:	d864      	bhi.n	80092f8 <_dtoa_r+0x280>
 800922e:	2b05      	cmp	r3, #5
 8009230:	bfc4      	itt	gt
 8009232:	3b04      	subgt	r3, #4
 8009234:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009238:	f1a3 0302 	sub.w	r3, r3, #2
 800923c:	bfcc      	ite	gt
 800923e:	2400      	movgt	r4, #0
 8009240:	2401      	movle	r4, #1
 8009242:	2b03      	cmp	r3, #3
 8009244:	d863      	bhi.n	800930e <_dtoa_r+0x296>
 8009246:	e8df f003 	tbb	[pc, r3]
 800924a:	372a      	.short	0x372a
 800924c:	5535      	.short	0x5535
 800924e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009252:	441e      	add	r6, r3
 8009254:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009258:	2b20      	cmp	r3, #32
 800925a:	bfc1      	itttt	gt
 800925c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009260:	409f      	lslgt	r7, r3
 8009262:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009266:	fa24 f303 	lsrgt.w	r3, r4, r3
 800926a:	bfd6      	itet	le
 800926c:	f1c3 0320 	rsble	r3, r3, #32
 8009270:	ea47 0003 	orrgt.w	r0, r7, r3
 8009274:	fa04 f003 	lslle.w	r0, r4, r3
 8009278:	f7f7 f95c 	bl	8000534 <__aeabi_ui2d>
 800927c:	2201      	movs	r2, #1
 800927e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009282:	3e01      	subs	r6, #1
 8009284:	9214      	str	r2, [sp, #80]	@ 0x50
 8009286:	e777      	b.n	8009178 <_dtoa_r+0x100>
 8009288:	2301      	movs	r3, #1
 800928a:	e7b8      	b.n	80091fe <_dtoa_r+0x186>
 800928c:	9012      	str	r0, [sp, #72]	@ 0x48
 800928e:	e7b7      	b.n	8009200 <_dtoa_r+0x188>
 8009290:	427b      	negs	r3, r7
 8009292:	930a      	str	r3, [sp, #40]	@ 0x28
 8009294:	2300      	movs	r3, #0
 8009296:	eba8 0807 	sub.w	r8, r8, r7
 800929a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800929c:	e7c4      	b.n	8009228 <_dtoa_r+0x1b0>
 800929e:	2300      	movs	r3, #0
 80092a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dc35      	bgt.n	8009314 <_dtoa_r+0x29c>
 80092a8:	2301      	movs	r3, #1
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	9307      	str	r3, [sp, #28]
 80092ae:	461a      	mov	r2, r3
 80092b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092b2:	e00b      	b.n	80092cc <_dtoa_r+0x254>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e7f3      	b.n	80092a0 <_dtoa_r+0x228>
 80092b8:	2300      	movs	r3, #0
 80092ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	9307      	str	r3, [sp, #28]
 80092c8:	bfb8      	it	lt
 80092ca:	2301      	movlt	r3, #1
 80092cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80092d0:	2100      	movs	r1, #0
 80092d2:	2204      	movs	r2, #4
 80092d4:	f102 0514 	add.w	r5, r2, #20
 80092d8:	429d      	cmp	r5, r3
 80092da:	d91f      	bls.n	800931c <_dtoa_r+0x2a4>
 80092dc:	6041      	str	r1, [r0, #4]
 80092de:	4658      	mov	r0, fp
 80092e0:	f000 fd8e 	bl	8009e00 <_Balloc>
 80092e4:	4682      	mov	sl, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d13c      	bne.n	8009364 <_dtoa_r+0x2ec>
 80092ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009358 <_dtoa_r+0x2e0>)
 80092ec:	4602      	mov	r2, r0
 80092ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80092f2:	e6d8      	b.n	80090a6 <_dtoa_r+0x2e>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e7e0      	b.n	80092ba <_dtoa_r+0x242>
 80092f8:	2401      	movs	r4, #1
 80092fa:	2300      	movs	r3, #0
 80092fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009300:	f04f 33ff 	mov.w	r3, #4294967295
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	9307      	str	r3, [sp, #28]
 8009308:	2200      	movs	r2, #0
 800930a:	2312      	movs	r3, #18
 800930c:	e7d0      	b.n	80092b0 <_dtoa_r+0x238>
 800930e:	2301      	movs	r3, #1
 8009310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009312:	e7f5      	b.n	8009300 <_dtoa_r+0x288>
 8009314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	9307      	str	r3, [sp, #28]
 800931a:	e7d7      	b.n	80092cc <_dtoa_r+0x254>
 800931c:	3101      	adds	r1, #1
 800931e:	0052      	lsls	r2, r2, #1
 8009320:	e7d8      	b.n	80092d4 <_dtoa_r+0x25c>
 8009322:	bf00      	nop
 8009324:	f3af 8000 	nop.w
 8009328:	636f4361 	.word	0x636f4361
 800932c:	3fd287a7 	.word	0x3fd287a7
 8009330:	8b60c8b3 	.word	0x8b60c8b3
 8009334:	3fc68a28 	.word	0x3fc68a28
 8009338:	509f79fb 	.word	0x509f79fb
 800933c:	3fd34413 	.word	0x3fd34413
 8009340:	0800b1bd 	.word	0x0800b1bd
 8009344:	0800b1d4 	.word	0x0800b1d4
 8009348:	7ff00000 	.word	0x7ff00000
 800934c:	0800b18d 	.word	0x0800b18d
 8009350:	3ff80000 	.word	0x3ff80000
 8009354:	0800b2d0 	.word	0x0800b2d0
 8009358:	0800b22c 	.word	0x0800b22c
 800935c:	0800b1b9 	.word	0x0800b1b9
 8009360:	0800b18c 	.word	0x0800b18c
 8009364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009368:	6018      	str	r0, [r3, #0]
 800936a:	9b07      	ldr	r3, [sp, #28]
 800936c:	2b0e      	cmp	r3, #14
 800936e:	f200 80a4 	bhi.w	80094ba <_dtoa_r+0x442>
 8009372:	2c00      	cmp	r4, #0
 8009374:	f000 80a1 	beq.w	80094ba <_dtoa_r+0x442>
 8009378:	2f00      	cmp	r7, #0
 800937a:	dd33      	ble.n	80093e4 <_dtoa_r+0x36c>
 800937c:	4bad      	ldr	r3, [pc, #692]	@ (8009634 <_dtoa_r+0x5bc>)
 800937e:	f007 020f 	and.w	r2, r7, #15
 8009382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009386:	ed93 7b00 	vldr	d7, [r3]
 800938a:	05f8      	lsls	r0, r7, #23
 800938c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009394:	d516      	bpl.n	80093c4 <_dtoa_r+0x34c>
 8009396:	4ba8      	ldr	r3, [pc, #672]	@ (8009638 <_dtoa_r+0x5c0>)
 8009398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800939c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093a0:	f7f7 fa6c 	bl	800087c <__aeabi_ddiv>
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	f004 040f 	and.w	r4, r4, #15
 80093ac:	2603      	movs	r6, #3
 80093ae:	4da2      	ldr	r5, [pc, #648]	@ (8009638 <_dtoa_r+0x5c0>)
 80093b0:	b954      	cbnz	r4, 80093c8 <_dtoa_r+0x350>
 80093b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ba:	f7f7 fa5f 	bl	800087c <__aeabi_ddiv>
 80093be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093c2:	e028      	b.n	8009416 <_dtoa_r+0x39e>
 80093c4:	2602      	movs	r6, #2
 80093c6:	e7f2      	b.n	80093ae <_dtoa_r+0x336>
 80093c8:	07e1      	lsls	r1, r4, #31
 80093ca:	d508      	bpl.n	80093de <_dtoa_r+0x366>
 80093cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093d4:	f7f7 f928 	bl	8000628 <__aeabi_dmul>
 80093d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093dc:	3601      	adds	r6, #1
 80093de:	1064      	asrs	r4, r4, #1
 80093e0:	3508      	adds	r5, #8
 80093e2:	e7e5      	b.n	80093b0 <_dtoa_r+0x338>
 80093e4:	f000 80d2 	beq.w	800958c <_dtoa_r+0x514>
 80093e8:	427c      	negs	r4, r7
 80093ea:	4b92      	ldr	r3, [pc, #584]	@ (8009634 <_dtoa_r+0x5bc>)
 80093ec:	4d92      	ldr	r5, [pc, #584]	@ (8009638 <_dtoa_r+0x5c0>)
 80093ee:	f004 020f 	and.w	r2, r4, #15
 80093f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093fe:	f7f7 f913 	bl	8000628 <__aeabi_dmul>
 8009402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009406:	1124      	asrs	r4, r4, #4
 8009408:	2300      	movs	r3, #0
 800940a:	2602      	movs	r6, #2
 800940c:	2c00      	cmp	r4, #0
 800940e:	f040 80b2 	bne.w	8009576 <_dtoa_r+0x4fe>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1d3      	bne.n	80093be <_dtoa_r+0x346>
 8009416:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009418:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80b7 	beq.w	8009590 <_dtoa_r+0x518>
 8009422:	4b86      	ldr	r3, [pc, #536]	@ (800963c <_dtoa_r+0x5c4>)
 8009424:	2200      	movs	r2, #0
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f7 fb6f 	bl	8000b0c <__aeabi_dcmplt>
 800942e:	2800      	cmp	r0, #0
 8009430:	f000 80ae 	beq.w	8009590 <_dtoa_r+0x518>
 8009434:	9b07      	ldr	r3, [sp, #28]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 80aa 	beq.w	8009590 <_dtoa_r+0x518>
 800943c:	9b00      	ldr	r3, [sp, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd37      	ble.n	80094b2 <_dtoa_r+0x43a>
 8009442:	1e7b      	subs	r3, r7, #1
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	4620      	mov	r0, r4
 8009448:	4b7d      	ldr	r3, [pc, #500]	@ (8009640 <_dtoa_r+0x5c8>)
 800944a:	2200      	movs	r2, #0
 800944c:	4629      	mov	r1, r5
 800944e:	f7f7 f8eb 	bl	8000628 <__aeabi_dmul>
 8009452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009456:	9c00      	ldr	r4, [sp, #0]
 8009458:	3601      	adds	r6, #1
 800945a:	4630      	mov	r0, r6
 800945c:	f7f7 f87a 	bl	8000554 <__aeabi_i2d>
 8009460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009464:	f7f7 f8e0 	bl	8000628 <__aeabi_dmul>
 8009468:	4b76      	ldr	r3, [pc, #472]	@ (8009644 <_dtoa_r+0x5cc>)
 800946a:	2200      	movs	r2, #0
 800946c:	f7f6 ff26 	bl	80002bc <__adddf3>
 8009470:	4605      	mov	r5, r0
 8009472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009476:	2c00      	cmp	r4, #0
 8009478:	f040 808d 	bne.w	8009596 <_dtoa_r+0x51e>
 800947c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009480:	4b71      	ldr	r3, [pc, #452]	@ (8009648 <_dtoa_r+0x5d0>)
 8009482:	2200      	movs	r2, #0
 8009484:	f7f6 ff18 	bl	80002b8 <__aeabi_dsub>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009490:	462a      	mov	r2, r5
 8009492:	4633      	mov	r3, r6
 8009494:	f7f7 fb58 	bl	8000b48 <__aeabi_dcmpgt>
 8009498:	2800      	cmp	r0, #0
 800949a:	f040 828b 	bne.w	80099b4 <_dtoa_r+0x93c>
 800949e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a2:	462a      	mov	r2, r5
 80094a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80094a8:	f7f7 fb30 	bl	8000b0c <__aeabi_dcmplt>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	f040 8128 	bne.w	8009702 <_dtoa_r+0x68a>
 80094b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80094b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80094ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f2c0 815a 	blt.w	8009776 <_dtoa_r+0x6fe>
 80094c2:	2f0e      	cmp	r7, #14
 80094c4:	f300 8157 	bgt.w	8009776 <_dtoa_r+0x6fe>
 80094c8:	4b5a      	ldr	r3, [pc, #360]	@ (8009634 <_dtoa_r+0x5bc>)
 80094ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ce:	ed93 7b00 	vldr	d7, [r3]
 80094d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	ed8d 7b00 	vstr	d7, [sp]
 80094da:	da03      	bge.n	80094e4 <_dtoa_r+0x46c>
 80094dc:	9b07      	ldr	r3, [sp, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f340 8101 	ble.w	80096e6 <_dtoa_r+0x66e>
 80094e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094e8:	4656      	mov	r6, sl
 80094ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	f7f7 f9c3 	bl	800087c <__aeabi_ddiv>
 80094f6:	f7f7 fb47 	bl	8000b88 <__aeabi_d2iz>
 80094fa:	4680      	mov	r8, r0
 80094fc:	f7f7 f82a 	bl	8000554 <__aeabi_i2d>
 8009500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009504:	f7f7 f890 	bl	8000628 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009514:	f7f6 fed0 	bl	80002b8 <__aeabi_dsub>
 8009518:	f806 4b01 	strb.w	r4, [r6], #1
 800951c:	9d07      	ldr	r5, [sp, #28]
 800951e:	eba6 040a 	sub.w	r4, r6, sl
 8009522:	42a5      	cmp	r5, r4
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	f040 8117 	bne.w	800975a <_dtoa_r+0x6e2>
 800952c:	f7f6 fec6 	bl	80002bc <__adddf3>
 8009530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	f7f7 fb06 	bl	8000b48 <__aeabi_dcmpgt>
 800953c:	2800      	cmp	r0, #0
 800953e:	f040 80f9 	bne.w	8009734 <_dtoa_r+0x6bc>
 8009542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f7 fad5 	bl	8000af8 <__aeabi_dcmpeq>
 800954e:	b118      	cbz	r0, 8009558 <_dtoa_r+0x4e0>
 8009550:	f018 0f01 	tst.w	r8, #1
 8009554:	f040 80ee 	bne.w	8009734 <_dtoa_r+0x6bc>
 8009558:	4649      	mov	r1, r9
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fc90 	bl	8009e80 <_Bfree>
 8009560:	2300      	movs	r3, #0
 8009562:	7033      	strb	r3, [r6, #0]
 8009564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009566:	3701      	adds	r7, #1
 8009568:	601f      	str	r7, [r3, #0]
 800956a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 831d 	beq.w	8009bac <_dtoa_r+0xb34>
 8009572:	601e      	str	r6, [r3, #0]
 8009574:	e31a      	b.n	8009bac <_dtoa_r+0xb34>
 8009576:	07e2      	lsls	r2, r4, #31
 8009578:	d505      	bpl.n	8009586 <_dtoa_r+0x50e>
 800957a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800957e:	f7f7 f853 	bl	8000628 <__aeabi_dmul>
 8009582:	3601      	adds	r6, #1
 8009584:	2301      	movs	r3, #1
 8009586:	1064      	asrs	r4, r4, #1
 8009588:	3508      	adds	r5, #8
 800958a:	e73f      	b.n	800940c <_dtoa_r+0x394>
 800958c:	2602      	movs	r6, #2
 800958e:	e742      	b.n	8009416 <_dtoa_r+0x39e>
 8009590:	9c07      	ldr	r4, [sp, #28]
 8009592:	9704      	str	r7, [sp, #16]
 8009594:	e761      	b.n	800945a <_dtoa_r+0x3e2>
 8009596:	4b27      	ldr	r3, [pc, #156]	@ (8009634 <_dtoa_r+0x5bc>)
 8009598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800959a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800959e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095a2:	4454      	add	r4, sl
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d053      	beq.n	8009650 <_dtoa_r+0x5d8>
 80095a8:	4928      	ldr	r1, [pc, #160]	@ (800964c <_dtoa_r+0x5d4>)
 80095aa:	2000      	movs	r0, #0
 80095ac:	f7f7 f966 	bl	800087c <__aeabi_ddiv>
 80095b0:	4633      	mov	r3, r6
 80095b2:	462a      	mov	r2, r5
 80095b4:	f7f6 fe80 	bl	80002b8 <__aeabi_dsub>
 80095b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095bc:	4656      	mov	r6, sl
 80095be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c2:	f7f7 fae1 	bl	8000b88 <__aeabi_d2iz>
 80095c6:	4605      	mov	r5, r0
 80095c8:	f7f6 ffc4 	bl	8000554 <__aeabi_i2d>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095d4:	f7f6 fe70 	bl	80002b8 <__aeabi_dsub>
 80095d8:	3530      	adds	r5, #48	@ 0x30
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095e2:	f806 5b01 	strb.w	r5, [r6], #1
 80095e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095ea:	f7f7 fa8f 	bl	8000b0c <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d171      	bne.n	80096d6 <_dtoa_r+0x65e>
 80095f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095f6:	4911      	ldr	r1, [pc, #68]	@ (800963c <_dtoa_r+0x5c4>)
 80095f8:	2000      	movs	r0, #0
 80095fa:	f7f6 fe5d 	bl	80002b8 <__aeabi_dsub>
 80095fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009602:	f7f7 fa83 	bl	8000b0c <__aeabi_dcmplt>
 8009606:	2800      	cmp	r0, #0
 8009608:	f040 8095 	bne.w	8009736 <_dtoa_r+0x6be>
 800960c:	42a6      	cmp	r6, r4
 800960e:	f43f af50 	beq.w	80094b2 <_dtoa_r+0x43a>
 8009612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009616:	4b0a      	ldr	r3, [pc, #40]	@ (8009640 <_dtoa_r+0x5c8>)
 8009618:	2200      	movs	r2, #0
 800961a:	f7f7 f805 	bl	8000628 <__aeabi_dmul>
 800961e:	4b08      	ldr	r3, [pc, #32]	@ (8009640 <_dtoa_r+0x5c8>)
 8009620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009624:	2200      	movs	r2, #0
 8009626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800962a:	f7f6 fffd 	bl	8000628 <__aeabi_dmul>
 800962e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009632:	e7c4      	b.n	80095be <_dtoa_r+0x546>
 8009634:	0800b2d0 	.word	0x0800b2d0
 8009638:	0800b2a8 	.word	0x0800b2a8
 800963c:	3ff00000 	.word	0x3ff00000
 8009640:	40240000 	.word	0x40240000
 8009644:	401c0000 	.word	0x401c0000
 8009648:	40140000 	.word	0x40140000
 800964c:	3fe00000 	.word	0x3fe00000
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	f7f6 ffe8 	bl	8000628 <__aeabi_dmul>
 8009658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800965c:	9415      	str	r4, [sp, #84]	@ 0x54
 800965e:	4656      	mov	r6, sl
 8009660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009664:	f7f7 fa90 	bl	8000b88 <__aeabi_d2iz>
 8009668:	4605      	mov	r5, r0
 800966a:	f7f6 ff73 	bl	8000554 <__aeabi_i2d>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009676:	f7f6 fe1f 	bl	80002b8 <__aeabi_dsub>
 800967a:	3530      	adds	r5, #48	@ 0x30
 800967c:	f806 5b01 	strb.w	r5, [r6], #1
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	42a6      	cmp	r6, r4
 8009686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800968a:	f04f 0200 	mov.w	r2, #0
 800968e:	d124      	bne.n	80096da <_dtoa_r+0x662>
 8009690:	4bac      	ldr	r3, [pc, #688]	@ (8009944 <_dtoa_r+0x8cc>)
 8009692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009696:	f7f6 fe11 	bl	80002bc <__adddf3>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a2:	f7f7 fa51 	bl	8000b48 <__aeabi_dcmpgt>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d145      	bne.n	8009736 <_dtoa_r+0x6be>
 80096aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ae:	49a5      	ldr	r1, [pc, #660]	@ (8009944 <_dtoa_r+0x8cc>)
 80096b0:	2000      	movs	r0, #0
 80096b2:	f7f6 fe01 	bl	80002b8 <__aeabi_dsub>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096be:	f7f7 fa25 	bl	8000b0c <__aeabi_dcmplt>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f43f aef5 	beq.w	80094b2 <_dtoa_r+0x43a>
 80096c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80096ca:	1e73      	subs	r3, r6, #1
 80096cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80096ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096d2:	2b30      	cmp	r3, #48	@ 0x30
 80096d4:	d0f8      	beq.n	80096c8 <_dtoa_r+0x650>
 80096d6:	9f04      	ldr	r7, [sp, #16]
 80096d8:	e73e      	b.n	8009558 <_dtoa_r+0x4e0>
 80096da:	4b9b      	ldr	r3, [pc, #620]	@ (8009948 <_dtoa_r+0x8d0>)
 80096dc:	f7f6 ffa4 	bl	8000628 <__aeabi_dmul>
 80096e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096e4:	e7bc      	b.n	8009660 <_dtoa_r+0x5e8>
 80096e6:	d10c      	bne.n	8009702 <_dtoa_r+0x68a>
 80096e8:	4b98      	ldr	r3, [pc, #608]	@ (800994c <_dtoa_r+0x8d4>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096f0:	f7f6 ff9a 	bl	8000628 <__aeabi_dmul>
 80096f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096f8:	f7f7 fa1c 	bl	8000b34 <__aeabi_dcmpge>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f000 8157 	beq.w	80099b0 <_dtoa_r+0x938>
 8009702:	2400      	movs	r4, #0
 8009704:	4625      	mov	r5, r4
 8009706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009708:	43db      	mvns	r3, r3
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	4656      	mov	r6, sl
 800970e:	2700      	movs	r7, #0
 8009710:	4621      	mov	r1, r4
 8009712:	4658      	mov	r0, fp
 8009714:	f000 fbb4 	bl	8009e80 <_Bfree>
 8009718:	2d00      	cmp	r5, #0
 800971a:	d0dc      	beq.n	80096d6 <_dtoa_r+0x65e>
 800971c:	b12f      	cbz	r7, 800972a <_dtoa_r+0x6b2>
 800971e:	42af      	cmp	r7, r5
 8009720:	d003      	beq.n	800972a <_dtoa_r+0x6b2>
 8009722:	4639      	mov	r1, r7
 8009724:	4658      	mov	r0, fp
 8009726:	f000 fbab 	bl	8009e80 <_Bfree>
 800972a:	4629      	mov	r1, r5
 800972c:	4658      	mov	r0, fp
 800972e:	f000 fba7 	bl	8009e80 <_Bfree>
 8009732:	e7d0      	b.n	80096d6 <_dtoa_r+0x65e>
 8009734:	9704      	str	r7, [sp, #16]
 8009736:	4633      	mov	r3, r6
 8009738:	461e      	mov	r6, r3
 800973a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800973e:	2a39      	cmp	r2, #57	@ 0x39
 8009740:	d107      	bne.n	8009752 <_dtoa_r+0x6da>
 8009742:	459a      	cmp	sl, r3
 8009744:	d1f8      	bne.n	8009738 <_dtoa_r+0x6c0>
 8009746:	9a04      	ldr	r2, [sp, #16]
 8009748:	3201      	adds	r2, #1
 800974a:	9204      	str	r2, [sp, #16]
 800974c:	2230      	movs	r2, #48	@ 0x30
 800974e:	f88a 2000 	strb.w	r2, [sl]
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	3201      	adds	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	e7bd      	b.n	80096d6 <_dtoa_r+0x65e>
 800975a:	4b7b      	ldr	r3, [pc, #492]	@ (8009948 <_dtoa_r+0x8d0>)
 800975c:	2200      	movs	r2, #0
 800975e:	f7f6 ff63 	bl	8000628 <__aeabi_dmul>
 8009762:	2200      	movs	r2, #0
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	f7f7 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f aebb 	beq.w	80094ea <_dtoa_r+0x472>
 8009774:	e6f0      	b.n	8009558 <_dtoa_r+0x4e0>
 8009776:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009778:	2a00      	cmp	r2, #0
 800977a:	f000 80db 	beq.w	8009934 <_dtoa_r+0x8bc>
 800977e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009780:	2a01      	cmp	r2, #1
 8009782:	f300 80bf 	bgt.w	8009904 <_dtoa_r+0x88c>
 8009786:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009788:	2a00      	cmp	r2, #0
 800978a:	f000 80b7 	beq.w	80098fc <_dtoa_r+0x884>
 800978e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009792:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009794:	4646      	mov	r6, r8
 8009796:	9a08      	ldr	r2, [sp, #32]
 8009798:	2101      	movs	r1, #1
 800979a:	441a      	add	r2, r3
 800979c:	4658      	mov	r0, fp
 800979e:	4498      	add	r8, r3
 80097a0:	9208      	str	r2, [sp, #32]
 80097a2:	f000 fc21 	bl	8009fe8 <__i2b>
 80097a6:	4605      	mov	r5, r0
 80097a8:	b15e      	cbz	r6, 80097c2 <_dtoa_r+0x74a>
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd08      	ble.n	80097c2 <_dtoa_r+0x74a>
 80097b0:	42b3      	cmp	r3, r6
 80097b2:	9a08      	ldr	r2, [sp, #32]
 80097b4:	bfa8      	it	ge
 80097b6:	4633      	movge	r3, r6
 80097b8:	eba8 0803 	sub.w	r8, r8, r3
 80097bc:	1af6      	subs	r6, r6, r3
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	9308      	str	r3, [sp, #32]
 80097c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c4:	b1f3      	cbz	r3, 8009804 <_dtoa_r+0x78c>
 80097c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 80b7 	beq.w	800993c <_dtoa_r+0x8c4>
 80097ce:	b18c      	cbz	r4, 80097f4 <_dtoa_r+0x77c>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4622      	mov	r2, r4
 80097d4:	4658      	mov	r0, fp
 80097d6:	f000 fcc7 	bl	800a168 <__pow5mult>
 80097da:	464a      	mov	r2, r9
 80097dc:	4601      	mov	r1, r0
 80097de:	4605      	mov	r5, r0
 80097e0:	4658      	mov	r0, fp
 80097e2:	f000 fc17 	bl	800a014 <__multiply>
 80097e6:	4649      	mov	r1, r9
 80097e8:	9004      	str	r0, [sp, #16]
 80097ea:	4658      	mov	r0, fp
 80097ec:	f000 fb48 	bl	8009e80 <_Bfree>
 80097f0:	9b04      	ldr	r3, [sp, #16]
 80097f2:	4699      	mov	r9, r3
 80097f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f6:	1b1a      	subs	r2, r3, r4
 80097f8:	d004      	beq.n	8009804 <_dtoa_r+0x78c>
 80097fa:	4649      	mov	r1, r9
 80097fc:	4658      	mov	r0, fp
 80097fe:	f000 fcb3 	bl	800a168 <__pow5mult>
 8009802:	4681      	mov	r9, r0
 8009804:	2101      	movs	r1, #1
 8009806:	4658      	mov	r0, fp
 8009808:	f000 fbee 	bl	8009fe8 <__i2b>
 800980c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800980e:	4604      	mov	r4, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 81cf 	beq.w	8009bb4 <_dtoa_r+0xb3c>
 8009816:	461a      	mov	r2, r3
 8009818:	4601      	mov	r1, r0
 800981a:	4658      	mov	r0, fp
 800981c:	f000 fca4 	bl	800a168 <__pow5mult>
 8009820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009822:	2b01      	cmp	r3, #1
 8009824:	4604      	mov	r4, r0
 8009826:	f300 8095 	bgt.w	8009954 <_dtoa_r+0x8dc>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f040 8087 	bne.w	8009940 <_dtoa_r+0x8c8>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 8089 	bne.w	8009950 <_dtoa_r+0x8d8>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009844:	0d1b      	lsrs	r3, r3, #20
 8009846:	051b      	lsls	r3, r3, #20
 8009848:	b12b      	cbz	r3, 8009856 <_dtoa_r+0x7de>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	3301      	adds	r3, #1
 800984e:	9308      	str	r3, [sp, #32]
 8009850:	f108 0801 	add.w	r8, r8, #1
 8009854:	2301      	movs	r3, #1
 8009856:	930a      	str	r3, [sp, #40]	@ 0x28
 8009858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 81b0 	beq.w	8009bc0 <_dtoa_r+0xb48>
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009866:	6918      	ldr	r0, [r3, #16]
 8009868:	f000 fb72 	bl	8009f50 <__hi0bits>
 800986c:	f1c0 0020 	rsb	r0, r0, #32
 8009870:	9b08      	ldr	r3, [sp, #32]
 8009872:	4418      	add	r0, r3
 8009874:	f010 001f 	ands.w	r0, r0, #31
 8009878:	d077      	beq.n	800996a <_dtoa_r+0x8f2>
 800987a:	f1c0 0320 	rsb	r3, r0, #32
 800987e:	2b04      	cmp	r3, #4
 8009880:	dd6b      	ble.n	800995a <_dtoa_r+0x8e2>
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	f1c0 001c 	rsb	r0, r0, #28
 8009888:	4403      	add	r3, r0
 800988a:	4480      	add	r8, r0
 800988c:	4406      	add	r6, r0
 800988e:	9308      	str	r3, [sp, #32]
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	dd05      	ble.n	80098a2 <_dtoa_r+0x82a>
 8009896:	4649      	mov	r1, r9
 8009898:	4642      	mov	r2, r8
 800989a:	4658      	mov	r0, fp
 800989c:	f000 fcbe 	bl	800a21c <__lshift>
 80098a0:	4681      	mov	r9, r0
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dd05      	ble.n	80098b4 <_dtoa_r+0x83c>
 80098a8:	4621      	mov	r1, r4
 80098aa:	461a      	mov	r2, r3
 80098ac:	4658      	mov	r0, fp
 80098ae:	f000 fcb5 	bl	800a21c <__lshift>
 80098b2:	4604      	mov	r4, r0
 80098b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d059      	beq.n	800996e <_dtoa_r+0x8f6>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4648      	mov	r0, r9
 80098be:	f000 fd19 	bl	800a2f4 <__mcmp>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	da53      	bge.n	800996e <_dtoa_r+0x8f6>
 80098c6:	1e7b      	subs	r3, r7, #1
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	4649      	mov	r1, r9
 80098cc:	2300      	movs	r3, #0
 80098ce:	220a      	movs	r2, #10
 80098d0:	4658      	mov	r0, fp
 80098d2:	f000 faf7 	bl	8009ec4 <__multadd>
 80098d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098d8:	4681      	mov	r9, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8172 	beq.w	8009bc4 <_dtoa_r+0xb4c>
 80098e0:	2300      	movs	r3, #0
 80098e2:	4629      	mov	r1, r5
 80098e4:	220a      	movs	r2, #10
 80098e6:	4658      	mov	r0, fp
 80098e8:	f000 faec 	bl	8009ec4 <__multadd>
 80098ec:	9b00      	ldr	r3, [sp, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	4605      	mov	r5, r0
 80098f2:	dc67      	bgt.n	80099c4 <_dtoa_r+0x94c>
 80098f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	dc41      	bgt.n	800997e <_dtoa_r+0x906>
 80098fa:	e063      	b.n	80099c4 <_dtoa_r+0x94c>
 80098fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009902:	e746      	b.n	8009792 <_dtoa_r+0x71a>
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	1e5c      	subs	r4, r3, #1
 8009908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990a:	42a3      	cmp	r3, r4
 800990c:	bfbf      	itttt	lt
 800990e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009910:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009912:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009914:	1ae3      	sublt	r3, r4, r3
 8009916:	bfb4      	ite	lt
 8009918:	18d2      	addlt	r2, r2, r3
 800991a:	1b1c      	subge	r4, r3, r4
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	bfbc      	itt	lt
 8009920:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009922:	2400      	movlt	r4, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb5      	itete	lt
 8009928:	eba8 0603 	sublt.w	r6, r8, r3
 800992c:	9b07      	ldrge	r3, [sp, #28]
 800992e:	2300      	movlt	r3, #0
 8009930:	4646      	movge	r6, r8
 8009932:	e730      	b.n	8009796 <_dtoa_r+0x71e>
 8009934:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009936:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009938:	4646      	mov	r6, r8
 800993a:	e735      	b.n	80097a8 <_dtoa_r+0x730>
 800993c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800993e:	e75c      	b.n	80097fa <_dtoa_r+0x782>
 8009940:	2300      	movs	r3, #0
 8009942:	e788      	b.n	8009856 <_dtoa_r+0x7de>
 8009944:	3fe00000 	.word	0x3fe00000
 8009948:	40240000 	.word	0x40240000
 800994c:	40140000 	.word	0x40140000
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	e780      	b.n	8009856 <_dtoa_r+0x7de>
 8009954:	2300      	movs	r3, #0
 8009956:	930a      	str	r3, [sp, #40]	@ 0x28
 8009958:	e782      	b.n	8009860 <_dtoa_r+0x7e8>
 800995a:	d099      	beq.n	8009890 <_dtoa_r+0x818>
 800995c:	9a08      	ldr	r2, [sp, #32]
 800995e:	331c      	adds	r3, #28
 8009960:	441a      	add	r2, r3
 8009962:	4498      	add	r8, r3
 8009964:	441e      	add	r6, r3
 8009966:	9208      	str	r2, [sp, #32]
 8009968:	e792      	b.n	8009890 <_dtoa_r+0x818>
 800996a:	4603      	mov	r3, r0
 800996c:	e7f6      	b.n	800995c <_dtoa_r+0x8e4>
 800996e:	9b07      	ldr	r3, [sp, #28]
 8009970:	9704      	str	r7, [sp, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc20      	bgt.n	80099b8 <_dtoa_r+0x940>
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997a:	2b02      	cmp	r3, #2
 800997c:	dd1e      	ble.n	80099bc <_dtoa_r+0x944>
 800997e:	9b00      	ldr	r3, [sp, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f47f aec0 	bne.w	8009706 <_dtoa_r+0x68e>
 8009986:	4621      	mov	r1, r4
 8009988:	2205      	movs	r2, #5
 800998a:	4658      	mov	r0, fp
 800998c:	f000 fa9a 	bl	8009ec4 <__multadd>
 8009990:	4601      	mov	r1, r0
 8009992:	4604      	mov	r4, r0
 8009994:	4648      	mov	r0, r9
 8009996:	f000 fcad 	bl	800a2f4 <__mcmp>
 800999a:	2800      	cmp	r0, #0
 800999c:	f77f aeb3 	ble.w	8009706 <_dtoa_r+0x68e>
 80099a0:	4656      	mov	r6, sl
 80099a2:	2331      	movs	r3, #49	@ 0x31
 80099a4:	f806 3b01 	strb.w	r3, [r6], #1
 80099a8:	9b04      	ldr	r3, [sp, #16]
 80099aa:	3301      	adds	r3, #1
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	e6ae      	b.n	800970e <_dtoa_r+0x696>
 80099b0:	9c07      	ldr	r4, [sp, #28]
 80099b2:	9704      	str	r7, [sp, #16]
 80099b4:	4625      	mov	r5, r4
 80099b6:	e7f3      	b.n	80099a0 <_dtoa_r+0x928>
 80099b8:	9b07      	ldr	r3, [sp, #28]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8104 	beq.w	8009bcc <_dtoa_r+0xb54>
 80099c4:	2e00      	cmp	r6, #0
 80099c6:	dd05      	ble.n	80099d4 <_dtoa_r+0x95c>
 80099c8:	4629      	mov	r1, r5
 80099ca:	4632      	mov	r2, r6
 80099cc:	4658      	mov	r0, fp
 80099ce:	f000 fc25 	bl	800a21c <__lshift>
 80099d2:	4605      	mov	r5, r0
 80099d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d05a      	beq.n	8009a90 <_dtoa_r+0xa18>
 80099da:	6869      	ldr	r1, [r5, #4]
 80099dc:	4658      	mov	r0, fp
 80099de:	f000 fa0f 	bl	8009e00 <_Balloc>
 80099e2:	4606      	mov	r6, r0
 80099e4:	b928      	cbnz	r0, 80099f2 <_dtoa_r+0x97a>
 80099e6:	4b84      	ldr	r3, [pc, #528]	@ (8009bf8 <_dtoa_r+0xb80>)
 80099e8:	4602      	mov	r2, r0
 80099ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80099ee:	f7ff bb5a 	b.w	80090a6 <_dtoa_r+0x2e>
 80099f2:	692a      	ldr	r2, [r5, #16]
 80099f4:	3202      	adds	r2, #2
 80099f6:	0092      	lsls	r2, r2, #2
 80099f8:	f105 010c 	add.w	r1, r5, #12
 80099fc:	300c      	adds	r0, #12
 80099fe:	f000 ffaf 	bl	800a960 <memcpy>
 8009a02:	2201      	movs	r2, #1
 8009a04:	4631      	mov	r1, r6
 8009a06:	4658      	mov	r0, fp
 8009a08:	f000 fc08 	bl	800a21c <__lshift>
 8009a0c:	f10a 0301 	add.w	r3, sl, #1
 8009a10:	9307      	str	r3, [sp, #28]
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	4453      	add	r3, sl
 8009a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a18:	9b02      	ldr	r3, [sp, #8]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	462f      	mov	r7, r5
 8009a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a22:	4605      	mov	r5, r0
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	4621      	mov	r1, r4
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4648      	mov	r0, r9
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	f7ff fa9a 	bl	8008f66 <quorem>
 8009a32:	4639      	mov	r1, r7
 8009a34:	9002      	str	r0, [sp, #8]
 8009a36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a3a:	4648      	mov	r0, r9
 8009a3c:	f000 fc5a 	bl	800a2f4 <__mcmp>
 8009a40:	462a      	mov	r2, r5
 8009a42:	9008      	str	r0, [sp, #32]
 8009a44:	4621      	mov	r1, r4
 8009a46:	4658      	mov	r0, fp
 8009a48:	f000 fc70 	bl	800a32c <__mdiff>
 8009a4c:	68c2      	ldr	r2, [r0, #12]
 8009a4e:	4606      	mov	r6, r0
 8009a50:	bb02      	cbnz	r2, 8009a94 <_dtoa_r+0xa1c>
 8009a52:	4601      	mov	r1, r0
 8009a54:	4648      	mov	r0, r9
 8009a56:	f000 fc4d 	bl	800a2f4 <__mcmp>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4658      	mov	r0, fp
 8009a60:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a62:	f000 fa0d 	bl	8009e80 <_Bfree>
 8009a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a6a:	9e07      	ldr	r6, [sp, #28]
 8009a6c:	ea43 0102 	orr.w	r1, r3, r2
 8009a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a72:	4319      	orrs	r1, r3
 8009a74:	d110      	bne.n	8009a98 <_dtoa_r+0xa20>
 8009a76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a7a:	d029      	beq.n	8009ad0 <_dtoa_r+0xa58>
 8009a7c:	9b08      	ldr	r3, [sp, #32]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dd02      	ble.n	8009a88 <_dtoa_r+0xa10>
 8009a82:	9b02      	ldr	r3, [sp, #8]
 8009a84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	f883 8000 	strb.w	r8, [r3]
 8009a8e:	e63f      	b.n	8009710 <_dtoa_r+0x698>
 8009a90:	4628      	mov	r0, r5
 8009a92:	e7bb      	b.n	8009a0c <_dtoa_r+0x994>
 8009a94:	2201      	movs	r2, #1
 8009a96:	e7e1      	b.n	8009a5c <_dtoa_r+0x9e4>
 8009a98:	9b08      	ldr	r3, [sp, #32]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	db04      	blt.n	8009aa8 <_dtoa_r+0xa30>
 8009a9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	d120      	bne.n	8009aea <_dtoa_r+0xa72>
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	dded      	ble.n	8009a88 <_dtoa_r+0xa10>
 8009aac:	4649      	mov	r1, r9
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	f000 fbb3 	bl	800a21c <__lshift>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4681      	mov	r9, r0
 8009aba:	f000 fc1b 	bl	800a2f4 <__mcmp>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	dc03      	bgt.n	8009aca <_dtoa_r+0xa52>
 8009ac2:	d1e1      	bne.n	8009a88 <_dtoa_r+0xa10>
 8009ac4:	f018 0f01 	tst.w	r8, #1
 8009ac8:	d0de      	beq.n	8009a88 <_dtoa_r+0xa10>
 8009aca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ace:	d1d8      	bne.n	8009a82 <_dtoa_r+0xa0a>
 8009ad0:	9a00      	ldr	r2, [sp, #0]
 8009ad2:	2339      	movs	r3, #57	@ 0x39
 8009ad4:	7013      	strb	r3, [r2, #0]
 8009ad6:	4633      	mov	r3, r6
 8009ad8:	461e      	mov	r6, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ae0:	2a39      	cmp	r2, #57	@ 0x39
 8009ae2:	d052      	beq.n	8009b8a <_dtoa_r+0xb12>
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	e612      	b.n	8009710 <_dtoa_r+0x698>
 8009aea:	2a00      	cmp	r2, #0
 8009aec:	dd07      	ble.n	8009afe <_dtoa_r+0xa86>
 8009aee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009af2:	d0ed      	beq.n	8009ad0 <_dtoa_r+0xa58>
 8009af4:	9a00      	ldr	r2, [sp, #0]
 8009af6:	f108 0301 	add.w	r3, r8, #1
 8009afa:	7013      	strb	r3, [r2, #0]
 8009afc:	e608      	b.n	8009710 <_dtoa_r+0x698>
 8009afe:	9b07      	ldr	r3, [sp, #28]
 8009b00:	9a07      	ldr	r2, [sp, #28]
 8009b02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d028      	beq.n	8009b5e <_dtoa_r+0xae6>
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	2300      	movs	r3, #0
 8009b10:	220a      	movs	r2, #10
 8009b12:	4658      	mov	r0, fp
 8009b14:	f000 f9d6 	bl	8009ec4 <__multadd>
 8009b18:	42af      	cmp	r7, r5
 8009b1a:	4681      	mov	r9, r0
 8009b1c:	f04f 0300 	mov.w	r3, #0
 8009b20:	f04f 020a 	mov.w	r2, #10
 8009b24:	4639      	mov	r1, r7
 8009b26:	4658      	mov	r0, fp
 8009b28:	d107      	bne.n	8009b3a <_dtoa_r+0xac2>
 8009b2a:	f000 f9cb 	bl	8009ec4 <__multadd>
 8009b2e:	4607      	mov	r7, r0
 8009b30:	4605      	mov	r5, r0
 8009b32:	9b07      	ldr	r3, [sp, #28]
 8009b34:	3301      	adds	r3, #1
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	e774      	b.n	8009a24 <_dtoa_r+0x9ac>
 8009b3a:	f000 f9c3 	bl	8009ec4 <__multadd>
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4607      	mov	r7, r0
 8009b42:	2300      	movs	r3, #0
 8009b44:	220a      	movs	r2, #10
 8009b46:	4658      	mov	r0, fp
 8009b48:	f000 f9bc 	bl	8009ec4 <__multadd>
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	e7f0      	b.n	8009b32 <_dtoa_r+0xaba>
 8009b50:	9b00      	ldr	r3, [sp, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bfcc      	ite	gt
 8009b56:	461e      	movgt	r6, r3
 8009b58:	2601      	movle	r6, #1
 8009b5a:	4456      	add	r6, sl
 8009b5c:	2700      	movs	r7, #0
 8009b5e:	4649      	mov	r1, r9
 8009b60:	2201      	movs	r2, #1
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fb5a 	bl	800a21c <__lshift>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4681      	mov	r9, r0
 8009b6c:	f000 fbc2 	bl	800a2f4 <__mcmp>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	dcb0      	bgt.n	8009ad6 <_dtoa_r+0xa5e>
 8009b74:	d102      	bne.n	8009b7c <_dtoa_r+0xb04>
 8009b76:	f018 0f01 	tst.w	r8, #1
 8009b7a:	d1ac      	bne.n	8009ad6 <_dtoa_r+0xa5e>
 8009b7c:	4633      	mov	r3, r6
 8009b7e:	461e      	mov	r6, r3
 8009b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b84:	2a30      	cmp	r2, #48	@ 0x30
 8009b86:	d0fa      	beq.n	8009b7e <_dtoa_r+0xb06>
 8009b88:	e5c2      	b.n	8009710 <_dtoa_r+0x698>
 8009b8a:	459a      	cmp	sl, r3
 8009b8c:	d1a4      	bne.n	8009ad8 <_dtoa_r+0xa60>
 8009b8e:	9b04      	ldr	r3, [sp, #16]
 8009b90:	3301      	adds	r3, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	2331      	movs	r3, #49	@ 0x31
 8009b96:	f88a 3000 	strb.w	r3, [sl]
 8009b9a:	e5b9      	b.n	8009710 <_dtoa_r+0x698>
 8009b9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009bfc <_dtoa_r+0xb84>
 8009ba2:	b11b      	cbz	r3, 8009bac <_dtoa_r+0xb34>
 8009ba4:	f10a 0308 	add.w	r3, sl, #8
 8009ba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	4650      	mov	r0, sl
 8009bae:	b019      	add	sp, #100	@ 0x64
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	f77f ae37 	ble.w	800982a <_dtoa_r+0x7b2>
 8009bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	e655      	b.n	8009870 <_dtoa_r+0x7f8>
 8009bc4:	9b00      	ldr	r3, [sp, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f77f aed6 	ble.w	8009978 <_dtoa_r+0x900>
 8009bcc:	4656      	mov	r6, sl
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4648      	mov	r0, r9
 8009bd2:	f7ff f9c8 	bl	8008f66 <quorem>
 8009bd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009bda:	f806 8b01 	strb.w	r8, [r6], #1
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	eba6 020a 	sub.w	r2, r6, sl
 8009be4:	4293      	cmp	r3, r2
 8009be6:	ddb3      	ble.n	8009b50 <_dtoa_r+0xad8>
 8009be8:	4649      	mov	r1, r9
 8009bea:	2300      	movs	r3, #0
 8009bec:	220a      	movs	r2, #10
 8009bee:	4658      	mov	r0, fp
 8009bf0:	f000 f968 	bl	8009ec4 <__multadd>
 8009bf4:	4681      	mov	r9, r0
 8009bf6:	e7ea      	b.n	8009bce <_dtoa_r+0xb56>
 8009bf8:	0800b22c 	.word	0x0800b22c
 8009bfc:	0800b1b0 	.word	0x0800b1b0

08009c00 <_free_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4605      	mov	r5, r0
 8009c04:	2900      	cmp	r1, #0
 8009c06:	d041      	beq.n	8009c8c <_free_r+0x8c>
 8009c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c0c:	1f0c      	subs	r4, r1, #4
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bfb8      	it	lt
 8009c12:	18e4      	addlt	r4, r4, r3
 8009c14:	f000 f8e8 	bl	8009de8 <__malloc_lock>
 8009c18:	4a1d      	ldr	r2, [pc, #116]	@ (8009c90 <_free_r+0x90>)
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	b933      	cbnz	r3, 8009c2c <_free_r+0x2c>
 8009c1e:	6063      	str	r3, [r4, #4]
 8009c20:	6014      	str	r4, [r2, #0]
 8009c22:	4628      	mov	r0, r5
 8009c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c28:	f000 b8e4 	b.w	8009df4 <__malloc_unlock>
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	d908      	bls.n	8009c42 <_free_r+0x42>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	1821      	adds	r1, r4, r0
 8009c34:	428b      	cmp	r3, r1
 8009c36:	bf01      	itttt	eq
 8009c38:	6819      	ldreq	r1, [r3, #0]
 8009c3a:	685b      	ldreq	r3, [r3, #4]
 8009c3c:	1809      	addeq	r1, r1, r0
 8009c3e:	6021      	streq	r1, [r4, #0]
 8009c40:	e7ed      	b.n	8009c1e <_free_r+0x1e>
 8009c42:	461a      	mov	r2, r3
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	b10b      	cbz	r3, 8009c4c <_free_r+0x4c>
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	d9fa      	bls.n	8009c42 <_free_r+0x42>
 8009c4c:	6811      	ldr	r1, [r2, #0]
 8009c4e:	1850      	adds	r0, r2, r1
 8009c50:	42a0      	cmp	r0, r4
 8009c52:	d10b      	bne.n	8009c6c <_free_r+0x6c>
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	4401      	add	r1, r0
 8009c58:	1850      	adds	r0, r2, r1
 8009c5a:	4283      	cmp	r3, r0
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	d1e0      	bne.n	8009c22 <_free_r+0x22>
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	6053      	str	r3, [r2, #4]
 8009c66:	4408      	add	r0, r1
 8009c68:	6010      	str	r0, [r2, #0]
 8009c6a:	e7da      	b.n	8009c22 <_free_r+0x22>
 8009c6c:	d902      	bls.n	8009c74 <_free_r+0x74>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	e7d6      	b.n	8009c22 <_free_r+0x22>
 8009c74:	6820      	ldr	r0, [r4, #0]
 8009c76:	1821      	adds	r1, r4, r0
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf04      	itt	eq
 8009c7c:	6819      	ldreq	r1, [r3, #0]
 8009c7e:	685b      	ldreq	r3, [r3, #4]
 8009c80:	6063      	str	r3, [r4, #4]
 8009c82:	bf04      	itt	eq
 8009c84:	1809      	addeq	r1, r1, r0
 8009c86:	6021      	streq	r1, [r4, #0]
 8009c88:	6054      	str	r4, [r2, #4]
 8009c8a:	e7ca      	b.n	8009c22 <_free_r+0x22>
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
 8009c8e:	bf00      	nop
 8009c90:	20004aa4 	.word	0x20004aa4

08009c94 <malloc>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	@ (8009ca0 <malloc+0xc>)
 8009c96:	4601      	mov	r1, r0
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	f000 b825 	b.w	8009ce8 <_malloc_r>
 8009c9e:	bf00      	nop
 8009ca0:	20000020 	.word	0x20000020

08009ca4 <sbrk_aligned>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8009ce4 <sbrk_aligned+0x40>)
 8009ca8:	460c      	mov	r4, r1
 8009caa:	6831      	ldr	r1, [r6, #0]
 8009cac:	4605      	mov	r5, r0
 8009cae:	b911      	cbnz	r1, 8009cb6 <sbrk_aligned+0x12>
 8009cb0:	f000 fe46 	bl	800a940 <_sbrk_r>
 8009cb4:	6030      	str	r0, [r6, #0]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f000 fe41 	bl	800a940 <_sbrk_r>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	d103      	bne.n	8009cca <sbrk_aligned+0x26>
 8009cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	bd70      	pop	{r4, r5, r6, pc}
 8009cca:	1cc4      	adds	r4, r0, #3
 8009ccc:	f024 0403 	bic.w	r4, r4, #3
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d0f8      	beq.n	8009cc6 <sbrk_aligned+0x22>
 8009cd4:	1a21      	subs	r1, r4, r0
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 fe32 	bl	800a940 <_sbrk_r>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d1f2      	bne.n	8009cc6 <sbrk_aligned+0x22>
 8009ce0:	e7ef      	b.n	8009cc2 <sbrk_aligned+0x1e>
 8009ce2:	bf00      	nop
 8009ce4:	20004aa0 	.word	0x20004aa0

08009ce8 <_malloc_r>:
 8009ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cec:	1ccd      	adds	r5, r1, #3
 8009cee:	f025 0503 	bic.w	r5, r5, #3
 8009cf2:	3508      	adds	r5, #8
 8009cf4:	2d0c      	cmp	r5, #12
 8009cf6:	bf38      	it	cc
 8009cf8:	250c      	movcc	r5, #12
 8009cfa:	2d00      	cmp	r5, #0
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	db01      	blt.n	8009d04 <_malloc_r+0x1c>
 8009d00:	42a9      	cmp	r1, r5
 8009d02:	d904      	bls.n	8009d0e <_malloc_r+0x26>
 8009d04:	230c      	movs	r3, #12
 8009d06:	6033      	str	r3, [r6, #0]
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009de4 <_malloc_r+0xfc>
 8009d12:	f000 f869 	bl	8009de8 <__malloc_lock>
 8009d16:	f8d8 3000 	ldr.w	r3, [r8]
 8009d1a:	461c      	mov	r4, r3
 8009d1c:	bb44      	cbnz	r4, 8009d70 <_malloc_r+0x88>
 8009d1e:	4629      	mov	r1, r5
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff ffbf 	bl	8009ca4 <sbrk_aligned>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	4604      	mov	r4, r0
 8009d2a:	d158      	bne.n	8009dde <_malloc_r+0xf6>
 8009d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8009d30:	4627      	mov	r7, r4
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	d143      	bne.n	8009dbe <_malloc_r+0xd6>
 8009d36:	2c00      	cmp	r4, #0
 8009d38:	d04b      	beq.n	8009dd2 <_malloc_r+0xea>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	4630      	mov	r0, r6
 8009d40:	eb04 0903 	add.w	r9, r4, r3
 8009d44:	f000 fdfc 	bl	800a940 <_sbrk_r>
 8009d48:	4581      	cmp	r9, r0
 8009d4a:	d142      	bne.n	8009dd2 <_malloc_r+0xea>
 8009d4c:	6821      	ldr	r1, [r4, #0]
 8009d4e:	1a6d      	subs	r5, r5, r1
 8009d50:	4629      	mov	r1, r5
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7ff ffa6 	bl	8009ca4 <sbrk_aligned>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d03a      	beq.n	8009dd2 <_malloc_r+0xea>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	442b      	add	r3, r5
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	f8d8 3000 	ldr.w	r3, [r8]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	bb62      	cbnz	r2, 8009dc4 <_malloc_r+0xdc>
 8009d6a:	f8c8 7000 	str.w	r7, [r8]
 8009d6e:	e00f      	b.n	8009d90 <_malloc_r+0xa8>
 8009d70:	6822      	ldr	r2, [r4, #0]
 8009d72:	1b52      	subs	r2, r2, r5
 8009d74:	d420      	bmi.n	8009db8 <_malloc_r+0xd0>
 8009d76:	2a0b      	cmp	r2, #11
 8009d78:	d917      	bls.n	8009daa <_malloc_r+0xc2>
 8009d7a:	1961      	adds	r1, r4, r5
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	6025      	str	r5, [r4, #0]
 8009d80:	bf18      	it	ne
 8009d82:	6059      	strne	r1, [r3, #4]
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	bf08      	it	eq
 8009d88:	f8c8 1000 	streq.w	r1, [r8]
 8009d8c:	5162      	str	r2, [r4, r5]
 8009d8e:	604b      	str	r3, [r1, #4]
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 f82f 	bl	8009df4 <__malloc_unlock>
 8009d96:	f104 000b 	add.w	r0, r4, #11
 8009d9a:	1d23      	adds	r3, r4, #4
 8009d9c:	f020 0007 	bic.w	r0, r0, #7
 8009da0:	1ac2      	subs	r2, r0, r3
 8009da2:	bf1c      	itt	ne
 8009da4:	1a1b      	subne	r3, r3, r0
 8009da6:	50a3      	strne	r3, [r4, r2]
 8009da8:	e7af      	b.n	8009d0a <_malloc_r+0x22>
 8009daa:	6862      	ldr	r2, [r4, #4]
 8009dac:	42a3      	cmp	r3, r4
 8009dae:	bf0c      	ite	eq
 8009db0:	f8c8 2000 	streq.w	r2, [r8]
 8009db4:	605a      	strne	r2, [r3, #4]
 8009db6:	e7eb      	b.n	8009d90 <_malloc_r+0xa8>
 8009db8:	4623      	mov	r3, r4
 8009dba:	6864      	ldr	r4, [r4, #4]
 8009dbc:	e7ae      	b.n	8009d1c <_malloc_r+0x34>
 8009dbe:	463c      	mov	r4, r7
 8009dc0:	687f      	ldr	r7, [r7, #4]
 8009dc2:	e7b6      	b.n	8009d32 <_malloc_r+0x4a>
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d1fb      	bne.n	8009dc4 <_malloc_r+0xdc>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6053      	str	r3, [r2, #4]
 8009dd0:	e7de      	b.n	8009d90 <_malloc_r+0xa8>
 8009dd2:	230c      	movs	r3, #12
 8009dd4:	6033      	str	r3, [r6, #0]
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f000 f80c 	bl	8009df4 <__malloc_unlock>
 8009ddc:	e794      	b.n	8009d08 <_malloc_r+0x20>
 8009dde:	6005      	str	r5, [r0, #0]
 8009de0:	e7d6      	b.n	8009d90 <_malloc_r+0xa8>
 8009de2:	bf00      	nop
 8009de4:	20004aa4 	.word	0x20004aa4

08009de8 <__malloc_lock>:
 8009de8:	4801      	ldr	r0, [pc, #4]	@ (8009df0 <__malloc_lock+0x8>)
 8009dea:	f7ff b8ba 	b.w	8008f62 <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	20004a9c 	.word	0x20004a9c

08009df4 <__malloc_unlock>:
 8009df4:	4801      	ldr	r0, [pc, #4]	@ (8009dfc <__malloc_unlock+0x8>)
 8009df6:	f7ff b8b5 	b.w	8008f64 <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	20004a9c 	.word	0x20004a9c

08009e00 <_Balloc>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	69c6      	ldr	r6, [r0, #28]
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	b976      	cbnz	r6, 8009e28 <_Balloc+0x28>
 8009e0a:	2010      	movs	r0, #16
 8009e0c:	f7ff ff42 	bl	8009c94 <malloc>
 8009e10:	4602      	mov	r2, r0
 8009e12:	61e0      	str	r0, [r4, #28]
 8009e14:	b920      	cbnz	r0, 8009e20 <_Balloc+0x20>
 8009e16:	4b18      	ldr	r3, [pc, #96]	@ (8009e78 <_Balloc+0x78>)
 8009e18:	4818      	ldr	r0, [pc, #96]	@ (8009e7c <_Balloc+0x7c>)
 8009e1a:	216b      	movs	r1, #107	@ 0x6b
 8009e1c:	f000 fdae 	bl	800a97c <__assert_func>
 8009e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e24:	6006      	str	r6, [r0, #0]
 8009e26:	60c6      	str	r6, [r0, #12]
 8009e28:	69e6      	ldr	r6, [r4, #28]
 8009e2a:	68f3      	ldr	r3, [r6, #12]
 8009e2c:	b183      	cbz	r3, 8009e50 <_Balloc+0x50>
 8009e2e:	69e3      	ldr	r3, [r4, #28]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e36:	b9b8      	cbnz	r0, 8009e68 <_Balloc+0x68>
 8009e38:	2101      	movs	r1, #1
 8009e3a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e3e:	1d72      	adds	r2, r6, #5
 8009e40:	0092      	lsls	r2, r2, #2
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 fdb8 	bl	800a9b8 <_calloc_r>
 8009e48:	b160      	cbz	r0, 8009e64 <_Balloc+0x64>
 8009e4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e4e:	e00e      	b.n	8009e6e <_Balloc+0x6e>
 8009e50:	2221      	movs	r2, #33	@ 0x21
 8009e52:	2104      	movs	r1, #4
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 fdaf 	bl	800a9b8 <_calloc_r>
 8009e5a:	69e3      	ldr	r3, [r4, #28]
 8009e5c:	60f0      	str	r0, [r6, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e4      	bne.n	8009e2e <_Balloc+0x2e>
 8009e64:	2000      	movs	r0, #0
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	6802      	ldr	r2, [r0, #0]
 8009e6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e74:	e7f7      	b.n	8009e66 <_Balloc+0x66>
 8009e76:	bf00      	nop
 8009e78:	0800b1bd 	.word	0x0800b1bd
 8009e7c:	0800b23d 	.word	0x0800b23d

08009e80 <_Bfree>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	69c6      	ldr	r6, [r0, #28]
 8009e84:	4605      	mov	r5, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	b976      	cbnz	r6, 8009ea8 <_Bfree+0x28>
 8009e8a:	2010      	movs	r0, #16
 8009e8c:	f7ff ff02 	bl	8009c94 <malloc>
 8009e90:	4602      	mov	r2, r0
 8009e92:	61e8      	str	r0, [r5, #28]
 8009e94:	b920      	cbnz	r0, 8009ea0 <_Bfree+0x20>
 8009e96:	4b09      	ldr	r3, [pc, #36]	@ (8009ebc <_Bfree+0x3c>)
 8009e98:	4809      	ldr	r0, [pc, #36]	@ (8009ec0 <_Bfree+0x40>)
 8009e9a:	218f      	movs	r1, #143	@ 0x8f
 8009e9c:	f000 fd6e 	bl	800a97c <__assert_func>
 8009ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ea4:	6006      	str	r6, [r0, #0]
 8009ea6:	60c6      	str	r6, [r0, #12]
 8009ea8:	b13c      	cbz	r4, 8009eba <_Bfree+0x3a>
 8009eaa:	69eb      	ldr	r3, [r5, #28]
 8009eac:	6862      	ldr	r2, [r4, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009eb4:	6021      	str	r1, [r4, #0]
 8009eb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	0800b1bd 	.word	0x0800b1bd
 8009ec0:	0800b23d 	.word	0x0800b23d

08009ec4 <__multadd>:
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	690d      	ldr	r5, [r1, #16]
 8009eca:	4607      	mov	r7, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	461e      	mov	r6, r3
 8009ed0:	f101 0c14 	add.w	ip, r1, #20
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	f8dc 3000 	ldr.w	r3, [ip]
 8009eda:	b299      	uxth	r1, r3
 8009edc:	fb02 6101 	mla	r1, r2, r1, r6
 8009ee0:	0c1e      	lsrs	r6, r3, #16
 8009ee2:	0c0b      	lsrs	r3, r1, #16
 8009ee4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ee8:	b289      	uxth	r1, r1
 8009eea:	3001      	adds	r0, #1
 8009eec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ef0:	4285      	cmp	r5, r0
 8009ef2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009efa:	dcec      	bgt.n	8009ed6 <__multadd+0x12>
 8009efc:	b30e      	cbz	r6, 8009f42 <__multadd+0x7e>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	42ab      	cmp	r3, r5
 8009f02:	dc19      	bgt.n	8009f38 <__multadd+0x74>
 8009f04:	6861      	ldr	r1, [r4, #4]
 8009f06:	4638      	mov	r0, r7
 8009f08:	3101      	adds	r1, #1
 8009f0a:	f7ff ff79 	bl	8009e00 <_Balloc>
 8009f0e:	4680      	mov	r8, r0
 8009f10:	b928      	cbnz	r0, 8009f1e <__multadd+0x5a>
 8009f12:	4602      	mov	r2, r0
 8009f14:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <__multadd+0x84>)
 8009f16:	480d      	ldr	r0, [pc, #52]	@ (8009f4c <__multadd+0x88>)
 8009f18:	21ba      	movs	r1, #186	@ 0xba
 8009f1a:	f000 fd2f 	bl	800a97c <__assert_func>
 8009f1e:	6922      	ldr	r2, [r4, #16]
 8009f20:	3202      	adds	r2, #2
 8009f22:	f104 010c 	add.w	r1, r4, #12
 8009f26:	0092      	lsls	r2, r2, #2
 8009f28:	300c      	adds	r0, #12
 8009f2a:	f000 fd19 	bl	800a960 <memcpy>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff ffa5 	bl	8009e80 <_Bfree>
 8009f36:	4644      	mov	r4, r8
 8009f38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	615e      	str	r6, [r3, #20]
 8009f40:	6125      	str	r5, [r4, #16]
 8009f42:	4620      	mov	r0, r4
 8009f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f48:	0800b22c 	.word	0x0800b22c
 8009f4c:	0800b23d 	.word	0x0800b23d

08009f50 <__hi0bits>:
 8009f50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f54:	4603      	mov	r3, r0
 8009f56:	bf36      	itet	cc
 8009f58:	0403      	lslcc	r3, r0, #16
 8009f5a:	2000      	movcs	r0, #0
 8009f5c:	2010      	movcc	r0, #16
 8009f5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f62:	bf3c      	itt	cc
 8009f64:	021b      	lslcc	r3, r3, #8
 8009f66:	3008      	addcc	r0, #8
 8009f68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f6c:	bf3c      	itt	cc
 8009f6e:	011b      	lslcc	r3, r3, #4
 8009f70:	3004      	addcc	r0, #4
 8009f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f76:	bf3c      	itt	cc
 8009f78:	009b      	lslcc	r3, r3, #2
 8009f7a:	3002      	addcc	r0, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	db05      	blt.n	8009f8c <__hi0bits+0x3c>
 8009f80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f84:	f100 0001 	add.w	r0, r0, #1
 8009f88:	bf08      	it	eq
 8009f8a:	2020      	moveq	r0, #32
 8009f8c:	4770      	bx	lr

08009f8e <__lo0bits>:
 8009f8e:	6803      	ldr	r3, [r0, #0]
 8009f90:	4602      	mov	r2, r0
 8009f92:	f013 0007 	ands.w	r0, r3, #7
 8009f96:	d00b      	beq.n	8009fb0 <__lo0bits+0x22>
 8009f98:	07d9      	lsls	r1, r3, #31
 8009f9a:	d421      	bmi.n	8009fe0 <__lo0bits+0x52>
 8009f9c:	0798      	lsls	r0, r3, #30
 8009f9e:	bf49      	itett	mi
 8009fa0:	085b      	lsrmi	r3, r3, #1
 8009fa2:	089b      	lsrpl	r3, r3, #2
 8009fa4:	2001      	movmi	r0, #1
 8009fa6:	6013      	strmi	r3, [r2, #0]
 8009fa8:	bf5c      	itt	pl
 8009faa:	6013      	strpl	r3, [r2, #0]
 8009fac:	2002      	movpl	r0, #2
 8009fae:	4770      	bx	lr
 8009fb0:	b299      	uxth	r1, r3
 8009fb2:	b909      	cbnz	r1, 8009fb8 <__lo0bits+0x2a>
 8009fb4:	0c1b      	lsrs	r3, r3, #16
 8009fb6:	2010      	movs	r0, #16
 8009fb8:	b2d9      	uxtb	r1, r3
 8009fba:	b909      	cbnz	r1, 8009fc0 <__lo0bits+0x32>
 8009fbc:	3008      	adds	r0, #8
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	0719      	lsls	r1, r3, #28
 8009fc2:	bf04      	itt	eq
 8009fc4:	091b      	lsreq	r3, r3, #4
 8009fc6:	3004      	addeq	r0, #4
 8009fc8:	0799      	lsls	r1, r3, #30
 8009fca:	bf04      	itt	eq
 8009fcc:	089b      	lsreq	r3, r3, #2
 8009fce:	3002      	addeq	r0, #2
 8009fd0:	07d9      	lsls	r1, r3, #31
 8009fd2:	d403      	bmi.n	8009fdc <__lo0bits+0x4e>
 8009fd4:	085b      	lsrs	r3, r3, #1
 8009fd6:	f100 0001 	add.w	r0, r0, #1
 8009fda:	d003      	beq.n	8009fe4 <__lo0bits+0x56>
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	4770      	bx	lr
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	4770      	bx	lr
 8009fe4:	2020      	movs	r0, #32
 8009fe6:	4770      	bx	lr

08009fe8 <__i2b>:
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	460c      	mov	r4, r1
 8009fec:	2101      	movs	r1, #1
 8009fee:	f7ff ff07 	bl	8009e00 <_Balloc>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	b928      	cbnz	r0, 800a002 <__i2b+0x1a>
 8009ff6:	4b05      	ldr	r3, [pc, #20]	@ (800a00c <__i2b+0x24>)
 8009ff8:	4805      	ldr	r0, [pc, #20]	@ (800a010 <__i2b+0x28>)
 8009ffa:	f240 1145 	movw	r1, #325	@ 0x145
 8009ffe:	f000 fcbd 	bl	800a97c <__assert_func>
 800a002:	2301      	movs	r3, #1
 800a004:	6144      	str	r4, [r0, #20]
 800a006:	6103      	str	r3, [r0, #16]
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	bf00      	nop
 800a00c:	0800b22c 	.word	0x0800b22c
 800a010:	0800b23d 	.word	0x0800b23d

0800a014 <__multiply>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	4614      	mov	r4, r2
 800a01a:	690a      	ldr	r2, [r1, #16]
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	429a      	cmp	r2, r3
 800a020:	bfa8      	it	ge
 800a022:	4623      	movge	r3, r4
 800a024:	460f      	mov	r7, r1
 800a026:	bfa4      	itt	ge
 800a028:	460c      	movge	r4, r1
 800a02a:	461f      	movge	r7, r3
 800a02c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a030:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a034:	68a3      	ldr	r3, [r4, #8]
 800a036:	6861      	ldr	r1, [r4, #4]
 800a038:	eb0a 0609 	add.w	r6, sl, r9
 800a03c:	42b3      	cmp	r3, r6
 800a03e:	b085      	sub	sp, #20
 800a040:	bfb8      	it	lt
 800a042:	3101      	addlt	r1, #1
 800a044:	f7ff fedc 	bl	8009e00 <_Balloc>
 800a048:	b930      	cbnz	r0, 800a058 <__multiply+0x44>
 800a04a:	4602      	mov	r2, r0
 800a04c:	4b44      	ldr	r3, [pc, #272]	@ (800a160 <__multiply+0x14c>)
 800a04e:	4845      	ldr	r0, [pc, #276]	@ (800a164 <__multiply+0x150>)
 800a050:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a054:	f000 fc92 	bl	800a97c <__assert_func>
 800a058:	f100 0514 	add.w	r5, r0, #20
 800a05c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a060:	462b      	mov	r3, r5
 800a062:	2200      	movs	r2, #0
 800a064:	4543      	cmp	r3, r8
 800a066:	d321      	bcc.n	800a0ac <__multiply+0x98>
 800a068:	f107 0114 	add.w	r1, r7, #20
 800a06c:	f104 0214 	add.w	r2, r4, #20
 800a070:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a074:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a078:	9302      	str	r3, [sp, #8]
 800a07a:	1b13      	subs	r3, r2, r4
 800a07c:	3b15      	subs	r3, #21
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	3304      	adds	r3, #4
 800a084:	f104 0715 	add.w	r7, r4, #21
 800a088:	42ba      	cmp	r2, r7
 800a08a:	bf38      	it	cc
 800a08c:	2304      	movcc	r3, #4
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	9103      	str	r1, [sp, #12]
 800a094:	428b      	cmp	r3, r1
 800a096:	d80c      	bhi.n	800a0b2 <__multiply+0x9e>
 800a098:	2e00      	cmp	r6, #0
 800a09a:	dd03      	ble.n	800a0a4 <__multiply+0x90>
 800a09c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d05b      	beq.n	800a15c <__multiply+0x148>
 800a0a4:	6106      	str	r6, [r0, #16]
 800a0a6:	b005      	add	sp, #20
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	f843 2b04 	str.w	r2, [r3], #4
 800a0b0:	e7d8      	b.n	800a064 <__multiply+0x50>
 800a0b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a0b6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ba:	d024      	beq.n	800a106 <__multiply+0xf2>
 800a0bc:	f104 0e14 	add.w	lr, r4, #20
 800a0c0:	46a9      	mov	r9, r5
 800a0c2:	f04f 0c00 	mov.w	ip, #0
 800a0c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0ca:	f8d9 3000 	ldr.w	r3, [r9]
 800a0ce:	fa1f fb87 	uxth.w	fp, r7
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a0dc:	f8d9 7000 	ldr.w	r7, [r9]
 800a0e0:	4463      	add	r3, ip
 800a0e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a0ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0f4:	4572      	cmp	r2, lr
 800a0f6:	f849 3b04 	str.w	r3, [r9], #4
 800a0fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0fe:	d8e2      	bhi.n	800a0c6 <__multiply+0xb2>
 800a100:	9b01      	ldr	r3, [sp, #4]
 800a102:	f845 c003 	str.w	ip, [r5, r3]
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a10c:	3104      	adds	r1, #4
 800a10e:	f1b9 0f00 	cmp.w	r9, #0
 800a112:	d021      	beq.n	800a158 <__multiply+0x144>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	f104 0c14 	add.w	ip, r4, #20
 800a11a:	46ae      	mov	lr, r5
 800a11c:	f04f 0a00 	mov.w	sl, #0
 800a120:	f8bc b000 	ldrh.w	fp, [ip]
 800a124:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a128:	fb09 770b 	mla	r7, r9, fp, r7
 800a12c:	4457      	add	r7, sl
 800a12e:	b29b      	uxth	r3, r3
 800a130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a134:	f84e 3b04 	str.w	r3, [lr], #4
 800a138:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a13c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a140:	f8be 3000 	ldrh.w	r3, [lr]
 800a144:	fb09 330a 	mla	r3, r9, sl, r3
 800a148:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a14c:	4562      	cmp	r2, ip
 800a14e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a152:	d8e5      	bhi.n	800a120 <__multiply+0x10c>
 800a154:	9f01      	ldr	r7, [sp, #4]
 800a156:	51eb      	str	r3, [r5, r7]
 800a158:	3504      	adds	r5, #4
 800a15a:	e799      	b.n	800a090 <__multiply+0x7c>
 800a15c:	3e01      	subs	r6, #1
 800a15e:	e79b      	b.n	800a098 <__multiply+0x84>
 800a160:	0800b22c 	.word	0x0800b22c
 800a164:	0800b23d 	.word	0x0800b23d

0800a168 <__pow5mult>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	4615      	mov	r5, r2
 800a16e:	f012 0203 	ands.w	r2, r2, #3
 800a172:	4607      	mov	r7, r0
 800a174:	460e      	mov	r6, r1
 800a176:	d007      	beq.n	800a188 <__pow5mult+0x20>
 800a178:	4c25      	ldr	r4, [pc, #148]	@ (800a210 <__pow5mult+0xa8>)
 800a17a:	3a01      	subs	r2, #1
 800a17c:	2300      	movs	r3, #0
 800a17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a182:	f7ff fe9f 	bl	8009ec4 <__multadd>
 800a186:	4606      	mov	r6, r0
 800a188:	10ad      	asrs	r5, r5, #2
 800a18a:	d03d      	beq.n	800a208 <__pow5mult+0xa0>
 800a18c:	69fc      	ldr	r4, [r7, #28]
 800a18e:	b97c      	cbnz	r4, 800a1b0 <__pow5mult+0x48>
 800a190:	2010      	movs	r0, #16
 800a192:	f7ff fd7f 	bl	8009c94 <malloc>
 800a196:	4602      	mov	r2, r0
 800a198:	61f8      	str	r0, [r7, #28]
 800a19a:	b928      	cbnz	r0, 800a1a8 <__pow5mult+0x40>
 800a19c:	4b1d      	ldr	r3, [pc, #116]	@ (800a214 <__pow5mult+0xac>)
 800a19e:	481e      	ldr	r0, [pc, #120]	@ (800a218 <__pow5mult+0xb0>)
 800a1a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a1a4:	f000 fbea 	bl	800a97c <__assert_func>
 800a1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1ac:	6004      	str	r4, [r0, #0]
 800a1ae:	60c4      	str	r4, [r0, #12]
 800a1b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1b8:	b94c      	cbnz	r4, 800a1ce <__pow5mult+0x66>
 800a1ba:	f240 2171 	movw	r1, #625	@ 0x271
 800a1be:	4638      	mov	r0, r7
 800a1c0:	f7ff ff12 	bl	8009fe8 <__i2b>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	6003      	str	r3, [r0, #0]
 800a1ce:	f04f 0900 	mov.w	r9, #0
 800a1d2:	07eb      	lsls	r3, r5, #31
 800a1d4:	d50a      	bpl.n	800a1ec <__pow5mult+0x84>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4622      	mov	r2, r4
 800a1da:	4638      	mov	r0, r7
 800a1dc:	f7ff ff1a 	bl	800a014 <__multiply>
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff fe4b 	bl	8009e80 <_Bfree>
 800a1ea:	4646      	mov	r6, r8
 800a1ec:	106d      	asrs	r5, r5, #1
 800a1ee:	d00b      	beq.n	800a208 <__pow5mult+0xa0>
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	b938      	cbnz	r0, 800a204 <__pow5mult+0x9c>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff ff0b 	bl	800a014 <__multiply>
 800a1fe:	6020      	str	r0, [r4, #0]
 800a200:	f8c0 9000 	str.w	r9, [r0]
 800a204:	4604      	mov	r4, r0
 800a206:	e7e4      	b.n	800a1d2 <__pow5mult+0x6a>
 800a208:	4630      	mov	r0, r6
 800a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20e:	bf00      	nop
 800a210:	0800b298 	.word	0x0800b298
 800a214:	0800b1bd 	.word	0x0800b1bd
 800a218:	0800b23d 	.word	0x0800b23d

0800a21c <__lshift>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	6849      	ldr	r1, [r1, #4]
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	4607      	mov	r7, r0
 800a22e:	4691      	mov	r9, r2
 800a230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a234:	f108 0601 	add.w	r6, r8, #1
 800a238:	42b3      	cmp	r3, r6
 800a23a:	db0b      	blt.n	800a254 <__lshift+0x38>
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff fddf 	bl	8009e00 <_Balloc>
 800a242:	4605      	mov	r5, r0
 800a244:	b948      	cbnz	r0, 800a25a <__lshift+0x3e>
 800a246:	4602      	mov	r2, r0
 800a248:	4b28      	ldr	r3, [pc, #160]	@ (800a2ec <__lshift+0xd0>)
 800a24a:	4829      	ldr	r0, [pc, #164]	@ (800a2f0 <__lshift+0xd4>)
 800a24c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a250:	f000 fb94 	bl	800a97c <__assert_func>
 800a254:	3101      	adds	r1, #1
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	e7ee      	b.n	800a238 <__lshift+0x1c>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f100 0114 	add.w	r1, r0, #20
 800a260:	f100 0210 	add.w	r2, r0, #16
 800a264:	4618      	mov	r0, r3
 800a266:	4553      	cmp	r3, sl
 800a268:	db33      	blt.n	800a2d2 <__lshift+0xb6>
 800a26a:	6920      	ldr	r0, [r4, #16]
 800a26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a270:	f104 0314 	add.w	r3, r4, #20
 800a274:	f019 091f 	ands.w	r9, r9, #31
 800a278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a27c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a280:	d02b      	beq.n	800a2da <__lshift+0xbe>
 800a282:	f1c9 0e20 	rsb	lr, r9, #32
 800a286:	468a      	mov	sl, r1
 800a288:	2200      	movs	r2, #0
 800a28a:	6818      	ldr	r0, [r3, #0]
 800a28c:	fa00 f009 	lsl.w	r0, r0, r9
 800a290:	4310      	orrs	r0, r2
 800a292:	f84a 0b04 	str.w	r0, [sl], #4
 800a296:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29a:	459c      	cmp	ip, r3
 800a29c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2a0:	d8f3      	bhi.n	800a28a <__lshift+0x6e>
 800a2a2:	ebac 0304 	sub.w	r3, ip, r4
 800a2a6:	3b15      	subs	r3, #21
 800a2a8:	f023 0303 	bic.w	r3, r3, #3
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	f104 0015 	add.w	r0, r4, #21
 800a2b2:	4584      	cmp	ip, r0
 800a2b4:	bf38      	it	cc
 800a2b6:	2304      	movcc	r3, #4
 800a2b8:	50ca      	str	r2, [r1, r3]
 800a2ba:	b10a      	cbz	r2, 800a2c0 <__lshift+0xa4>
 800a2bc:	f108 0602 	add.w	r6, r8, #2
 800a2c0:	3e01      	subs	r6, #1
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	612e      	str	r6, [r5, #16]
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	f7ff fdda 	bl	8009e80 <_Bfree>
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	e7c5      	b.n	800a266 <__lshift+0x4a>
 800a2da:	3904      	subs	r1, #4
 800a2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2e4:	459c      	cmp	ip, r3
 800a2e6:	d8f9      	bhi.n	800a2dc <__lshift+0xc0>
 800a2e8:	e7ea      	b.n	800a2c0 <__lshift+0xa4>
 800a2ea:	bf00      	nop
 800a2ec:	0800b22c 	.word	0x0800b22c
 800a2f0:	0800b23d 	.word	0x0800b23d

0800a2f4 <__mcmp>:
 800a2f4:	690a      	ldr	r2, [r1, #16]
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	6900      	ldr	r0, [r0, #16]
 800a2fa:	1a80      	subs	r0, r0, r2
 800a2fc:	b530      	push	{r4, r5, lr}
 800a2fe:	d10e      	bne.n	800a31e <__mcmp+0x2a>
 800a300:	3314      	adds	r3, #20
 800a302:	3114      	adds	r1, #20
 800a304:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a308:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a30c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a314:	4295      	cmp	r5, r2
 800a316:	d003      	beq.n	800a320 <__mcmp+0x2c>
 800a318:	d205      	bcs.n	800a326 <__mcmp+0x32>
 800a31a:	f04f 30ff 	mov.w	r0, #4294967295
 800a31e:	bd30      	pop	{r4, r5, pc}
 800a320:	42a3      	cmp	r3, r4
 800a322:	d3f3      	bcc.n	800a30c <__mcmp+0x18>
 800a324:	e7fb      	b.n	800a31e <__mcmp+0x2a>
 800a326:	2001      	movs	r0, #1
 800a328:	e7f9      	b.n	800a31e <__mcmp+0x2a>
	...

0800a32c <__mdiff>:
 800a32c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a330:	4689      	mov	r9, r1
 800a332:	4606      	mov	r6, r0
 800a334:	4611      	mov	r1, r2
 800a336:	4648      	mov	r0, r9
 800a338:	4614      	mov	r4, r2
 800a33a:	f7ff ffdb 	bl	800a2f4 <__mcmp>
 800a33e:	1e05      	subs	r5, r0, #0
 800a340:	d112      	bne.n	800a368 <__mdiff+0x3c>
 800a342:	4629      	mov	r1, r5
 800a344:	4630      	mov	r0, r6
 800a346:	f7ff fd5b 	bl	8009e00 <_Balloc>
 800a34a:	4602      	mov	r2, r0
 800a34c:	b928      	cbnz	r0, 800a35a <__mdiff+0x2e>
 800a34e:	4b3f      	ldr	r3, [pc, #252]	@ (800a44c <__mdiff+0x120>)
 800a350:	f240 2137 	movw	r1, #567	@ 0x237
 800a354:	483e      	ldr	r0, [pc, #248]	@ (800a450 <__mdiff+0x124>)
 800a356:	f000 fb11 	bl	800a97c <__assert_func>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a360:	4610      	mov	r0, r2
 800a362:	b003      	add	sp, #12
 800a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a368:	bfbc      	itt	lt
 800a36a:	464b      	movlt	r3, r9
 800a36c:	46a1      	movlt	r9, r4
 800a36e:	4630      	mov	r0, r6
 800a370:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a374:	bfba      	itte	lt
 800a376:	461c      	movlt	r4, r3
 800a378:	2501      	movlt	r5, #1
 800a37a:	2500      	movge	r5, #0
 800a37c:	f7ff fd40 	bl	8009e00 <_Balloc>
 800a380:	4602      	mov	r2, r0
 800a382:	b918      	cbnz	r0, 800a38c <__mdiff+0x60>
 800a384:	4b31      	ldr	r3, [pc, #196]	@ (800a44c <__mdiff+0x120>)
 800a386:	f240 2145 	movw	r1, #581	@ 0x245
 800a38a:	e7e3      	b.n	800a354 <__mdiff+0x28>
 800a38c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a390:	6926      	ldr	r6, [r4, #16]
 800a392:	60c5      	str	r5, [r0, #12]
 800a394:	f109 0310 	add.w	r3, r9, #16
 800a398:	f109 0514 	add.w	r5, r9, #20
 800a39c:	f104 0e14 	add.w	lr, r4, #20
 800a3a0:	f100 0b14 	add.w	fp, r0, #20
 800a3a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a3a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	46d9      	mov	r9, fp
 800a3b0:	f04f 0c00 	mov.w	ip, #0
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a3ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	fa1f f38a 	uxth.w	r3, sl
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	b283      	uxth	r3, r0
 800a3c8:	1acb      	subs	r3, r1, r3
 800a3ca:	0c00      	lsrs	r0, r0, #16
 800a3cc:	4463      	add	r3, ip
 800a3ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3dc:	4576      	cmp	r6, lr
 800a3de:	f849 3b04 	str.w	r3, [r9], #4
 800a3e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3e6:	d8e5      	bhi.n	800a3b4 <__mdiff+0x88>
 800a3e8:	1b33      	subs	r3, r6, r4
 800a3ea:	3b15      	subs	r3, #21
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	3415      	adds	r4, #21
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	42a6      	cmp	r6, r4
 800a3f6:	bf38      	it	cc
 800a3f8:	2304      	movcc	r3, #4
 800a3fa:	441d      	add	r5, r3
 800a3fc:	445b      	add	r3, fp
 800a3fe:	461e      	mov	r6, r3
 800a400:	462c      	mov	r4, r5
 800a402:	4544      	cmp	r4, r8
 800a404:	d30e      	bcc.n	800a424 <__mdiff+0xf8>
 800a406:	f108 0103 	add.w	r1, r8, #3
 800a40a:	1b49      	subs	r1, r1, r5
 800a40c:	f021 0103 	bic.w	r1, r1, #3
 800a410:	3d03      	subs	r5, #3
 800a412:	45a8      	cmp	r8, r5
 800a414:	bf38      	it	cc
 800a416:	2100      	movcc	r1, #0
 800a418:	440b      	add	r3, r1
 800a41a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a41e:	b191      	cbz	r1, 800a446 <__mdiff+0x11a>
 800a420:	6117      	str	r7, [r2, #16]
 800a422:	e79d      	b.n	800a360 <__mdiff+0x34>
 800a424:	f854 1b04 	ldr.w	r1, [r4], #4
 800a428:	46e6      	mov	lr, ip
 800a42a:	0c08      	lsrs	r0, r1, #16
 800a42c:	fa1c fc81 	uxtah	ip, ip, r1
 800a430:	4471      	add	r1, lr
 800a432:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a436:	b289      	uxth	r1, r1
 800a438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a43c:	f846 1b04 	str.w	r1, [r6], #4
 800a440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a444:	e7dd      	b.n	800a402 <__mdiff+0xd6>
 800a446:	3f01      	subs	r7, #1
 800a448:	e7e7      	b.n	800a41a <__mdiff+0xee>
 800a44a:	bf00      	nop
 800a44c:	0800b22c 	.word	0x0800b22c
 800a450:	0800b23d 	.word	0x0800b23d

0800a454 <__d2b>:
 800a454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a458:	460f      	mov	r7, r1
 800a45a:	2101      	movs	r1, #1
 800a45c:	ec59 8b10 	vmov	r8, r9, d0
 800a460:	4616      	mov	r6, r2
 800a462:	f7ff fccd 	bl	8009e00 <_Balloc>
 800a466:	4604      	mov	r4, r0
 800a468:	b930      	cbnz	r0, 800a478 <__d2b+0x24>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4b23      	ldr	r3, [pc, #140]	@ (800a4fc <__d2b+0xa8>)
 800a46e:	4824      	ldr	r0, [pc, #144]	@ (800a500 <__d2b+0xac>)
 800a470:	f240 310f 	movw	r1, #783	@ 0x30f
 800a474:	f000 fa82 	bl	800a97c <__assert_func>
 800a478:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a47c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a480:	b10d      	cbz	r5, 800a486 <__d2b+0x32>
 800a482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	f1b8 0300 	subs.w	r3, r8, #0
 800a48c:	d023      	beq.n	800a4d6 <__d2b+0x82>
 800a48e:	4668      	mov	r0, sp
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	f7ff fd7c 	bl	8009f8e <__lo0bits>
 800a496:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a49a:	b1d0      	cbz	r0, 800a4d2 <__d2b+0x7e>
 800a49c:	f1c0 0320 	rsb	r3, r0, #32
 800a4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	40c2      	lsrs	r2, r0
 800a4a8:	6163      	str	r3, [r4, #20]
 800a4aa:	9201      	str	r2, [sp, #4]
 800a4ac:	9b01      	ldr	r3, [sp, #4]
 800a4ae:	61a3      	str	r3, [r4, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bf0c      	ite	eq
 800a4b4:	2201      	moveq	r2, #1
 800a4b6:	2202      	movne	r2, #2
 800a4b8:	6122      	str	r2, [r4, #16]
 800a4ba:	b1a5      	cbz	r5, 800a4e6 <__d2b+0x92>
 800a4bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a4c0:	4405      	add	r5, r0
 800a4c2:	603d      	str	r5, [r7, #0]
 800a4c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a4c8:	6030      	str	r0, [r6, #0]
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	b003      	add	sp, #12
 800a4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4d2:	6161      	str	r1, [r4, #20]
 800a4d4:	e7ea      	b.n	800a4ac <__d2b+0x58>
 800a4d6:	a801      	add	r0, sp, #4
 800a4d8:	f7ff fd59 	bl	8009f8e <__lo0bits>
 800a4dc:	9b01      	ldr	r3, [sp, #4]
 800a4de:	6163      	str	r3, [r4, #20]
 800a4e0:	3020      	adds	r0, #32
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	e7e8      	b.n	800a4b8 <__d2b+0x64>
 800a4e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4ee:	6038      	str	r0, [r7, #0]
 800a4f0:	6918      	ldr	r0, [r3, #16]
 800a4f2:	f7ff fd2d 	bl	8009f50 <__hi0bits>
 800a4f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4fa:	e7e5      	b.n	800a4c8 <__d2b+0x74>
 800a4fc:	0800b22c 	.word	0x0800b22c
 800a500:	0800b23d 	.word	0x0800b23d

0800a504 <__ssputs_r>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	688e      	ldr	r6, [r1, #8]
 800a50a:	461f      	mov	r7, r3
 800a50c:	42be      	cmp	r6, r7
 800a50e:	680b      	ldr	r3, [r1, #0]
 800a510:	4682      	mov	sl, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4690      	mov	r8, r2
 800a516:	d82d      	bhi.n	800a574 <__ssputs_r+0x70>
 800a518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a520:	d026      	beq.n	800a570 <__ssputs_r+0x6c>
 800a522:	6965      	ldr	r5, [r4, #20]
 800a524:	6909      	ldr	r1, [r1, #16]
 800a526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a52a:	eba3 0901 	sub.w	r9, r3, r1
 800a52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a532:	1c7b      	adds	r3, r7, #1
 800a534:	444b      	add	r3, r9
 800a536:	106d      	asrs	r5, r5, #1
 800a538:	429d      	cmp	r5, r3
 800a53a:	bf38      	it	cc
 800a53c:	461d      	movcc	r5, r3
 800a53e:	0553      	lsls	r3, r2, #21
 800a540:	d527      	bpl.n	800a592 <__ssputs_r+0x8e>
 800a542:	4629      	mov	r1, r5
 800a544:	f7ff fbd0 	bl	8009ce8 <_malloc_r>
 800a548:	4606      	mov	r6, r0
 800a54a:	b360      	cbz	r0, 800a5a6 <__ssputs_r+0xa2>
 800a54c:	6921      	ldr	r1, [r4, #16]
 800a54e:	464a      	mov	r2, r9
 800a550:	f000 fa06 	bl	800a960 <memcpy>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	6126      	str	r6, [r4, #16]
 800a562:	6165      	str	r5, [r4, #20]
 800a564:	444e      	add	r6, r9
 800a566:	eba5 0509 	sub.w	r5, r5, r9
 800a56a:	6026      	str	r6, [r4, #0]
 800a56c:	60a5      	str	r5, [r4, #8]
 800a56e:	463e      	mov	r6, r7
 800a570:	42be      	cmp	r6, r7
 800a572:	d900      	bls.n	800a576 <__ssputs_r+0x72>
 800a574:	463e      	mov	r6, r7
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	4632      	mov	r2, r6
 800a57a:	4641      	mov	r1, r8
 800a57c:	f000 f9c6 	bl	800a90c <memmove>
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	1b9b      	subs	r3, r3, r6
 800a584:	60a3      	str	r3, [r4, #8]
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	4433      	add	r3, r6
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	2000      	movs	r0, #0
 800a58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a592:	462a      	mov	r2, r5
 800a594:	f000 fa36 	bl	800aa04 <_realloc_r>
 800a598:	4606      	mov	r6, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d1e0      	bne.n	800a560 <__ssputs_r+0x5c>
 800a59e:	6921      	ldr	r1, [r4, #16]
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	f7ff fb2d 	bl	8009c00 <_free_r>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	f8ca 3000 	str.w	r3, [sl]
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e7e9      	b.n	800a58e <__ssputs_r+0x8a>
	...

0800a5bc <_svfiprintf_r>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	4698      	mov	r8, r3
 800a5c2:	898b      	ldrh	r3, [r1, #12]
 800a5c4:	061b      	lsls	r3, r3, #24
 800a5c6:	b09d      	sub	sp, #116	@ 0x74
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	d510      	bpl.n	800a5f2 <_svfiprintf_r+0x36>
 800a5d0:	690b      	ldr	r3, [r1, #16]
 800a5d2:	b973      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x36>
 800a5d4:	2140      	movs	r1, #64	@ 0x40
 800a5d6:	f7ff fb87 	bl	8009ce8 <_malloc_r>
 800a5da:	6028      	str	r0, [r5, #0]
 800a5dc:	6128      	str	r0, [r5, #16]
 800a5de:	b930      	cbnz	r0, 800a5ee <_svfiprintf_r+0x32>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	b01d      	add	sp, #116	@ 0x74
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	2340      	movs	r3, #64	@ 0x40
 800a5f0:	616b      	str	r3, [r5, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a600:	2330      	movs	r3, #48	@ 0x30
 800a602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7a0 <_svfiprintf_r+0x1e4>
 800a606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a60a:	f04f 0901 	mov.w	r9, #1
 800a60e:	4623      	mov	r3, r4
 800a610:	469a      	mov	sl, r3
 800a612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a616:	b10a      	cbz	r2, 800a61c <_svfiprintf_r+0x60>
 800a618:	2a25      	cmp	r2, #37	@ 0x25
 800a61a:	d1f9      	bne.n	800a610 <_svfiprintf_r+0x54>
 800a61c:	ebba 0b04 	subs.w	fp, sl, r4
 800a620:	d00b      	beq.n	800a63a <_svfiprintf_r+0x7e>
 800a622:	465b      	mov	r3, fp
 800a624:	4622      	mov	r2, r4
 800a626:	4629      	mov	r1, r5
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ff6b 	bl	800a504 <__ssputs_r>
 800a62e:	3001      	adds	r0, #1
 800a630:	f000 80a7 	beq.w	800a782 <_svfiprintf_r+0x1c6>
 800a634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a636:	445a      	add	r2, fp
 800a638:	9209      	str	r2, [sp, #36]	@ 0x24
 800a63a:	f89a 3000 	ldrb.w	r3, [sl]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 809f 	beq.w	800a782 <_svfiprintf_r+0x1c6>
 800a644:	2300      	movs	r3, #0
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a64e:	f10a 0a01 	add.w	sl, sl, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a65c:	4654      	mov	r4, sl
 800a65e:	2205      	movs	r2, #5
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	484e      	ldr	r0, [pc, #312]	@ (800a7a0 <_svfiprintf_r+0x1e4>)
 800a666:	f7f5 fdcb 	bl	8000200 <memchr>
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	b9d8      	cbnz	r0, 800a6a6 <_svfiprintf_r+0xea>
 800a66e:	06d0      	lsls	r0, r2, #27
 800a670:	bf44      	itt	mi
 800a672:	2320      	movmi	r3, #32
 800a674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a678:	0711      	lsls	r1, r2, #28
 800a67a:	bf44      	itt	mi
 800a67c:	232b      	movmi	r3, #43	@ 0x2b
 800a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b2a      	cmp	r3, #42	@ 0x2a
 800a688:	d015      	beq.n	800a6b6 <_svfiprintf_r+0xfa>
 800a68a:	9a07      	ldr	r2, [sp, #28]
 800a68c:	4654      	mov	r4, sl
 800a68e:	2000      	movs	r0, #0
 800a690:	f04f 0c0a 	mov.w	ip, #10
 800a694:	4621      	mov	r1, r4
 800a696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a69a:	3b30      	subs	r3, #48	@ 0x30
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	d94b      	bls.n	800a738 <_svfiprintf_r+0x17c>
 800a6a0:	b1b0      	cbz	r0, 800a6d0 <_svfiprintf_r+0x114>
 800a6a2:	9207      	str	r2, [sp, #28]
 800a6a4:	e014      	b.n	800a6d0 <_svfiprintf_r+0x114>
 800a6a6:	eba0 0308 	sub.w	r3, r0, r8
 800a6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	46a2      	mov	sl, r4
 800a6b4:	e7d2      	b.n	800a65c <_svfiprintf_r+0xa0>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	1d19      	adds	r1, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	9103      	str	r1, [sp, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfbb      	ittet	lt
 800a6c2:	425b      	neglt	r3, r3
 800a6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c8:	9307      	strge	r3, [sp, #28]
 800a6ca:	9307      	strlt	r3, [sp, #28]
 800a6cc:	bfb8      	it	lt
 800a6ce:	9204      	strlt	r2, [sp, #16]
 800a6d0:	7823      	ldrb	r3, [r4, #0]
 800a6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6d4:	d10a      	bne.n	800a6ec <_svfiprintf_r+0x130>
 800a6d6:	7863      	ldrb	r3, [r4, #1]
 800a6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6da:	d132      	bne.n	800a742 <_svfiprintf_r+0x186>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9203      	str	r2, [sp, #12]
 800a6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6e8:	3402      	adds	r4, #2
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7b0 <_svfiprintf_r+0x1f4>
 800a6f0:	7821      	ldrb	r1, [r4, #0]
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	f7f5 fd83 	bl	8000200 <memchr>
 800a6fa:	b138      	cbz	r0, 800a70c <_svfiprintf_r+0x150>
 800a6fc:	9b04      	ldr	r3, [sp, #16]
 800a6fe:	eba0 000a 	sub.w	r0, r0, sl
 800a702:	2240      	movs	r2, #64	@ 0x40
 800a704:	4082      	lsls	r2, r0
 800a706:	4313      	orrs	r3, r2
 800a708:	3401      	adds	r4, #1
 800a70a:	9304      	str	r3, [sp, #16]
 800a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a710:	4824      	ldr	r0, [pc, #144]	@ (800a7a4 <_svfiprintf_r+0x1e8>)
 800a712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a716:	2206      	movs	r2, #6
 800a718:	f7f5 fd72 	bl	8000200 <memchr>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d036      	beq.n	800a78e <_svfiprintf_r+0x1d2>
 800a720:	4b21      	ldr	r3, [pc, #132]	@ (800a7a8 <_svfiprintf_r+0x1ec>)
 800a722:	bb1b      	cbnz	r3, 800a76c <_svfiprintf_r+0x1b0>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	3307      	adds	r3, #7
 800a728:	f023 0307 	bic.w	r3, r3, #7
 800a72c:	3308      	adds	r3, #8
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a732:	4433      	add	r3, r6
 800a734:	9309      	str	r3, [sp, #36]	@ 0x24
 800a736:	e76a      	b.n	800a60e <_svfiprintf_r+0x52>
 800a738:	fb0c 3202 	mla	r2, ip, r2, r3
 800a73c:	460c      	mov	r4, r1
 800a73e:	2001      	movs	r0, #1
 800a740:	e7a8      	b.n	800a694 <_svfiprintf_r+0xd8>
 800a742:	2300      	movs	r3, #0
 800a744:	3401      	adds	r4, #1
 800a746:	9305      	str	r3, [sp, #20]
 800a748:	4619      	mov	r1, r3
 800a74a:	f04f 0c0a 	mov.w	ip, #10
 800a74e:	4620      	mov	r0, r4
 800a750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a754:	3a30      	subs	r2, #48	@ 0x30
 800a756:	2a09      	cmp	r2, #9
 800a758:	d903      	bls.n	800a762 <_svfiprintf_r+0x1a6>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0c6      	beq.n	800a6ec <_svfiprintf_r+0x130>
 800a75e:	9105      	str	r1, [sp, #20]
 800a760:	e7c4      	b.n	800a6ec <_svfiprintf_r+0x130>
 800a762:	fb0c 2101 	mla	r1, ip, r1, r2
 800a766:	4604      	mov	r4, r0
 800a768:	2301      	movs	r3, #1
 800a76a:	e7f0      	b.n	800a74e <_svfiprintf_r+0x192>
 800a76c:	ab03      	add	r3, sp, #12
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	462a      	mov	r2, r5
 800a772:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ac <_svfiprintf_r+0x1f0>)
 800a774:	a904      	add	r1, sp, #16
 800a776:	4638      	mov	r0, r7
 800a778:	f7fd fe98 	bl	80084ac <_printf_float>
 800a77c:	1c42      	adds	r2, r0, #1
 800a77e:	4606      	mov	r6, r0
 800a780:	d1d6      	bne.n	800a730 <_svfiprintf_r+0x174>
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	065b      	lsls	r3, r3, #25
 800a786:	f53f af2d 	bmi.w	800a5e4 <_svfiprintf_r+0x28>
 800a78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a78c:	e72c      	b.n	800a5e8 <_svfiprintf_r+0x2c>
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	462a      	mov	r2, r5
 800a794:	4b05      	ldr	r3, [pc, #20]	@ (800a7ac <_svfiprintf_r+0x1f0>)
 800a796:	a904      	add	r1, sp, #16
 800a798:	4638      	mov	r0, r7
 800a79a:	f7fe f91f 	bl	80089dc <_printf_i>
 800a79e:	e7ed      	b.n	800a77c <_svfiprintf_r+0x1c0>
 800a7a0:	0800b398 	.word	0x0800b398
 800a7a4:	0800b3a2 	.word	0x0800b3a2
 800a7a8:	080084ad 	.word	0x080084ad
 800a7ac:	0800a505 	.word	0x0800a505
 800a7b0:	0800b39e 	.word	0x0800b39e

0800a7b4 <__sflush_r>:
 800a7b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7bc:	0716      	lsls	r6, r2, #28
 800a7be:	4605      	mov	r5, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	d454      	bmi.n	800a86e <__sflush_r+0xba>
 800a7c4:	684b      	ldr	r3, [r1, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	dc02      	bgt.n	800a7d0 <__sflush_r+0x1c>
 800a7ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dd48      	ble.n	800a862 <__sflush_r+0xae>
 800a7d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7d2:	2e00      	cmp	r6, #0
 800a7d4:	d045      	beq.n	800a862 <__sflush_r+0xae>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7dc:	682f      	ldr	r7, [r5, #0]
 800a7de:	6a21      	ldr	r1, [r4, #32]
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	d030      	beq.n	800a846 <__sflush_r+0x92>
 800a7e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	0759      	lsls	r1, r3, #29
 800a7ea:	d505      	bpl.n	800a7f8 <__sflush_r+0x44>
 800a7ec:	6863      	ldr	r3, [r4, #4]
 800a7ee:	1ad2      	subs	r2, r2, r3
 800a7f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7f2:	b10b      	cbz	r3, 800a7f8 <__sflush_r+0x44>
 800a7f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7f6:	1ad2      	subs	r2, r2, r3
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b0      	blx	r6
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	d106      	bne.n	800a816 <__sflush_r+0x62>
 800a808:	6829      	ldr	r1, [r5, #0]
 800a80a:	291d      	cmp	r1, #29
 800a80c:	d82b      	bhi.n	800a866 <__sflush_r+0xb2>
 800a80e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8b8 <__sflush_r+0x104>)
 800a810:	410a      	asrs	r2, r1
 800a812:	07d6      	lsls	r6, r2, #31
 800a814:	d427      	bmi.n	800a866 <__sflush_r+0xb2>
 800a816:	2200      	movs	r2, #0
 800a818:	6062      	str	r2, [r4, #4]
 800a81a:	04d9      	lsls	r1, r3, #19
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	d504      	bpl.n	800a82c <__sflush_r+0x78>
 800a822:	1c42      	adds	r2, r0, #1
 800a824:	d101      	bne.n	800a82a <__sflush_r+0x76>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	b903      	cbnz	r3, 800a82c <__sflush_r+0x78>
 800a82a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a82e:	602f      	str	r7, [r5, #0]
 800a830:	b1b9      	cbz	r1, 800a862 <__sflush_r+0xae>
 800a832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a836:	4299      	cmp	r1, r3
 800a838:	d002      	beq.n	800a840 <__sflush_r+0x8c>
 800a83a:	4628      	mov	r0, r5
 800a83c:	f7ff f9e0 	bl	8009c00 <_free_r>
 800a840:	2300      	movs	r3, #0
 800a842:	6363      	str	r3, [r4, #52]	@ 0x34
 800a844:	e00d      	b.n	800a862 <__sflush_r+0xae>
 800a846:	2301      	movs	r3, #1
 800a848:	4628      	mov	r0, r5
 800a84a:	47b0      	blx	r6
 800a84c:	4602      	mov	r2, r0
 800a84e:	1c50      	adds	r0, r2, #1
 800a850:	d1c9      	bne.n	800a7e6 <__sflush_r+0x32>
 800a852:	682b      	ldr	r3, [r5, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d0c6      	beq.n	800a7e6 <__sflush_r+0x32>
 800a858:	2b1d      	cmp	r3, #29
 800a85a:	d001      	beq.n	800a860 <__sflush_r+0xac>
 800a85c:	2b16      	cmp	r3, #22
 800a85e:	d11e      	bne.n	800a89e <__sflush_r+0xea>
 800a860:	602f      	str	r7, [r5, #0]
 800a862:	2000      	movs	r0, #0
 800a864:	e022      	b.n	800a8ac <__sflush_r+0xf8>
 800a866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a86a:	b21b      	sxth	r3, r3
 800a86c:	e01b      	b.n	800a8a6 <__sflush_r+0xf2>
 800a86e:	690f      	ldr	r7, [r1, #16]
 800a870:	2f00      	cmp	r7, #0
 800a872:	d0f6      	beq.n	800a862 <__sflush_r+0xae>
 800a874:	0793      	lsls	r3, r2, #30
 800a876:	680e      	ldr	r6, [r1, #0]
 800a878:	bf08      	it	eq
 800a87a:	694b      	ldreq	r3, [r1, #20]
 800a87c:	600f      	str	r7, [r1, #0]
 800a87e:	bf18      	it	ne
 800a880:	2300      	movne	r3, #0
 800a882:	eba6 0807 	sub.w	r8, r6, r7
 800a886:	608b      	str	r3, [r1, #8]
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	dde9      	ble.n	800a862 <__sflush_r+0xae>
 800a88e:	6a21      	ldr	r1, [r4, #32]
 800a890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a892:	4643      	mov	r3, r8
 800a894:	463a      	mov	r2, r7
 800a896:	4628      	mov	r0, r5
 800a898:	47b0      	blx	r6
 800a89a:	2800      	cmp	r0, #0
 800a89c:	dc08      	bgt.n	800a8b0 <__sflush_r+0xfc>
 800a89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	4407      	add	r7, r0
 800a8b2:	eba8 0800 	sub.w	r8, r8, r0
 800a8b6:	e7e7      	b.n	800a888 <__sflush_r+0xd4>
 800a8b8:	dfbffffe 	.word	0xdfbffffe

0800a8bc <_fflush_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b913      	cbnz	r3, 800a8cc <_fflush_r+0x10>
 800a8c6:	2500      	movs	r5, #0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	b118      	cbz	r0, 800a8d6 <_fflush_r+0x1a>
 800a8ce:	6a03      	ldr	r3, [r0, #32]
 800a8d0:	b90b      	cbnz	r3, 800a8d6 <_fflush_r+0x1a>
 800a8d2:	f7fe fa2f 	bl	8008d34 <__sinit>
 800a8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0f3      	beq.n	800a8c6 <_fflush_r+0xa>
 800a8de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8e0:	07d0      	lsls	r0, r2, #31
 800a8e2:	d404      	bmi.n	800a8ee <_fflush_r+0x32>
 800a8e4:	0599      	lsls	r1, r3, #22
 800a8e6:	d402      	bmi.n	800a8ee <_fflush_r+0x32>
 800a8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ea:	f7fe fb3a 	bl	8008f62 <__retarget_lock_acquire_recursive>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f7ff ff5f 	bl	800a7b4 <__sflush_r>
 800a8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8f8:	07da      	lsls	r2, r3, #31
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	d4e4      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	059b      	lsls	r3, r3, #22
 800a902:	d4e1      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a906:	f7fe fb2d 	bl	8008f64 <__retarget_lock_release_recursive>
 800a90a:	e7dd      	b.n	800a8c8 <_fflush_r+0xc>

0800a90c <memmove>:
 800a90c:	4288      	cmp	r0, r1
 800a90e:	b510      	push	{r4, lr}
 800a910:	eb01 0402 	add.w	r4, r1, r2
 800a914:	d902      	bls.n	800a91c <memmove+0x10>
 800a916:	4284      	cmp	r4, r0
 800a918:	4623      	mov	r3, r4
 800a91a:	d807      	bhi.n	800a92c <memmove+0x20>
 800a91c:	1e43      	subs	r3, r0, #1
 800a91e:	42a1      	cmp	r1, r4
 800a920:	d008      	beq.n	800a934 <memmove+0x28>
 800a922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a92a:	e7f8      	b.n	800a91e <memmove+0x12>
 800a92c:	4402      	add	r2, r0
 800a92e:	4601      	mov	r1, r0
 800a930:	428a      	cmp	r2, r1
 800a932:	d100      	bne.n	800a936 <memmove+0x2a>
 800a934:	bd10      	pop	{r4, pc}
 800a936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a93e:	e7f7      	b.n	800a930 <memmove+0x24>

0800a940 <_sbrk_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	@ (800a95c <_sbrk_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f7 fdd6 	bl	80024fc <_sbrk>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_sbrk_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_sbrk_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	20004a98 	.word	0x20004a98

0800a960 <memcpy>:
 800a960:	440a      	add	r2, r1
 800a962:	4291      	cmp	r1, r2
 800a964:	f100 33ff 	add.w	r3, r0, #4294967295
 800a968:	d100      	bne.n	800a96c <memcpy+0xc>
 800a96a:	4770      	bx	lr
 800a96c:	b510      	push	{r4, lr}
 800a96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a972:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a976:	4291      	cmp	r1, r2
 800a978:	d1f9      	bne.n	800a96e <memcpy+0xe>
 800a97a:	bd10      	pop	{r4, pc}

0800a97c <__assert_func>:
 800a97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97e:	4614      	mov	r4, r2
 800a980:	461a      	mov	r2, r3
 800a982:	4b09      	ldr	r3, [pc, #36]	@ (800a9a8 <__assert_func+0x2c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4605      	mov	r5, r0
 800a988:	68d8      	ldr	r0, [r3, #12]
 800a98a:	b954      	cbnz	r4, 800a9a2 <__assert_func+0x26>
 800a98c:	4b07      	ldr	r3, [pc, #28]	@ (800a9ac <__assert_func+0x30>)
 800a98e:	461c      	mov	r4, r3
 800a990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a994:	9100      	str	r1, [sp, #0]
 800a996:	462b      	mov	r3, r5
 800a998:	4905      	ldr	r1, [pc, #20]	@ (800a9b0 <__assert_func+0x34>)
 800a99a:	f000 f86f 	bl	800aa7c <fiprintf>
 800a99e:	f000 f87f 	bl	800aaa0 <abort>
 800a9a2:	4b04      	ldr	r3, [pc, #16]	@ (800a9b4 <__assert_func+0x38>)
 800a9a4:	e7f4      	b.n	800a990 <__assert_func+0x14>
 800a9a6:	bf00      	nop
 800a9a8:	20000020 	.word	0x20000020
 800a9ac:	0800b3ee 	.word	0x0800b3ee
 800a9b0:	0800b3c0 	.word	0x0800b3c0
 800a9b4:	0800b3b3 	.word	0x0800b3b3

0800a9b8 <_calloc_r>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	fba1 5402 	umull	r5, r4, r1, r2
 800a9be:	b93c      	cbnz	r4, 800a9d0 <_calloc_r+0x18>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	f7ff f991 	bl	8009ce8 <_malloc_r>
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	b928      	cbnz	r0, 800a9d6 <_calloc_r+0x1e>
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	220c      	movs	r2, #12
 800a9d2:	6002      	str	r2, [r0, #0]
 800a9d4:	e7f9      	b.n	800a9ca <_calloc_r+0x12>
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4621      	mov	r1, r4
 800a9da:	f7fe fa44 	bl	8008e66 <memset>
 800a9de:	e7f5      	b.n	800a9cc <_calloc_r+0x14>

0800a9e0 <__ascii_mbtowc>:
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	b901      	cbnz	r1, 800a9e6 <__ascii_mbtowc+0x6>
 800a9e4:	a901      	add	r1, sp, #4
 800a9e6:	b142      	cbz	r2, 800a9fa <__ascii_mbtowc+0x1a>
 800a9e8:	b14b      	cbz	r3, 800a9fe <__ascii_mbtowc+0x1e>
 800a9ea:	7813      	ldrb	r3, [r2, #0]
 800a9ec:	600b      	str	r3, [r1, #0]
 800a9ee:	7812      	ldrb	r2, [r2, #0]
 800a9f0:	1e10      	subs	r0, r2, #0
 800a9f2:	bf18      	it	ne
 800a9f4:	2001      	movne	r0, #1
 800a9f6:	b002      	add	sp, #8
 800a9f8:	4770      	bx	lr
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	e7fb      	b.n	800a9f6 <__ascii_mbtowc+0x16>
 800a9fe:	f06f 0001 	mvn.w	r0, #1
 800aa02:	e7f8      	b.n	800a9f6 <__ascii_mbtowc+0x16>

0800aa04 <_realloc_r>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4615      	mov	r5, r2
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	b921      	cbnz	r1, 800aa1a <_realloc_r+0x16>
 800aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	4611      	mov	r1, r2
 800aa16:	f7ff b967 	b.w	8009ce8 <_malloc_r>
 800aa1a:	b92a      	cbnz	r2, 800aa28 <_realloc_r+0x24>
 800aa1c:	f7ff f8f0 	bl	8009c00 <_free_r>
 800aa20:	2400      	movs	r4, #0
 800aa22:	4620      	mov	r0, r4
 800aa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa28:	f000 f841 	bl	800aaae <_malloc_usable_size_r>
 800aa2c:	4285      	cmp	r5, r0
 800aa2e:	4606      	mov	r6, r0
 800aa30:	d802      	bhi.n	800aa38 <_realloc_r+0x34>
 800aa32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa36:	d8f4      	bhi.n	800aa22 <_realloc_r+0x1e>
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff f954 	bl	8009ce8 <_malloc_r>
 800aa40:	4607      	mov	r7, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d0ec      	beq.n	800aa20 <_realloc_r+0x1c>
 800aa46:	42b5      	cmp	r5, r6
 800aa48:	462a      	mov	r2, r5
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	bf28      	it	cs
 800aa4e:	4632      	movcs	r2, r6
 800aa50:	f7ff ff86 	bl	800a960 <memcpy>
 800aa54:	4621      	mov	r1, r4
 800aa56:	4640      	mov	r0, r8
 800aa58:	f7ff f8d2 	bl	8009c00 <_free_r>
 800aa5c:	463c      	mov	r4, r7
 800aa5e:	e7e0      	b.n	800aa22 <_realloc_r+0x1e>

0800aa60 <__ascii_wctomb>:
 800aa60:	4603      	mov	r3, r0
 800aa62:	4608      	mov	r0, r1
 800aa64:	b141      	cbz	r1, 800aa78 <__ascii_wctomb+0x18>
 800aa66:	2aff      	cmp	r2, #255	@ 0xff
 800aa68:	d904      	bls.n	800aa74 <__ascii_wctomb+0x14>
 800aa6a:	228a      	movs	r2, #138	@ 0x8a
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa72:	4770      	bx	lr
 800aa74:	700a      	strb	r2, [r1, #0]
 800aa76:	2001      	movs	r0, #1
 800aa78:	4770      	bx	lr
	...

0800aa7c <fiprintf>:
 800aa7c:	b40e      	push	{r1, r2, r3}
 800aa7e:	b503      	push	{r0, r1, lr}
 800aa80:	4601      	mov	r1, r0
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	4805      	ldr	r0, [pc, #20]	@ (800aa9c <fiprintf+0x20>)
 800aa86:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	f000 f83f 	bl	800ab10 <_vfiprintf_r>
 800aa92:	b002      	add	sp, #8
 800aa94:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa98:	b003      	add	sp, #12
 800aa9a:	4770      	bx	lr
 800aa9c:	20000020 	.word	0x20000020

0800aaa0 <abort>:
 800aaa0:	b508      	push	{r3, lr}
 800aaa2:	2006      	movs	r0, #6
 800aaa4:	f000 fa08 	bl	800aeb8 <raise>
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f7f7 fcae 	bl	800240a <_exit>

0800aaae <_malloc_usable_size_r>:
 800aaae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab2:	1f18      	subs	r0, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bfbc      	itt	lt
 800aab8:	580b      	ldrlt	r3, [r1, r0]
 800aaba:	18c0      	addlt	r0, r0, r3
 800aabc:	4770      	bx	lr

0800aabe <__sfputc_r>:
 800aabe:	6893      	ldr	r3, [r2, #8]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	b410      	push	{r4}
 800aac6:	6093      	str	r3, [r2, #8]
 800aac8:	da08      	bge.n	800aadc <__sfputc_r+0x1e>
 800aaca:	6994      	ldr	r4, [r2, #24]
 800aacc:	42a3      	cmp	r3, r4
 800aace:	db01      	blt.n	800aad4 <__sfputc_r+0x16>
 800aad0:	290a      	cmp	r1, #10
 800aad2:	d103      	bne.n	800aadc <__sfputc_r+0x1e>
 800aad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad8:	f000 b932 	b.w	800ad40 <__swbuf_r>
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	1c58      	adds	r0, r3, #1
 800aae0:	6010      	str	r0, [r2, #0]
 800aae2:	7019      	strb	r1, [r3, #0]
 800aae4:	4608      	mov	r0, r1
 800aae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <__sfputs_r>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	18d5      	adds	r5, r2, r3
 800aaf6:	42ac      	cmp	r4, r5
 800aaf8:	d101      	bne.n	800aafe <__sfputs_r+0x12>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e007      	b.n	800ab0e <__sfputs_r+0x22>
 800aafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab02:	463a      	mov	r2, r7
 800ab04:	4630      	mov	r0, r6
 800ab06:	f7ff ffda 	bl	800aabe <__sfputc_r>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d1f3      	bne.n	800aaf6 <__sfputs_r+0xa>
 800ab0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab10 <_vfiprintf_r>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	460d      	mov	r5, r1
 800ab16:	b09d      	sub	sp, #116	@ 0x74
 800ab18:	4614      	mov	r4, r2
 800ab1a:	4698      	mov	r8, r3
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	b118      	cbz	r0, 800ab28 <_vfiprintf_r+0x18>
 800ab20:	6a03      	ldr	r3, [r0, #32]
 800ab22:	b90b      	cbnz	r3, 800ab28 <_vfiprintf_r+0x18>
 800ab24:	f7fe f906 	bl	8008d34 <__sinit>
 800ab28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab2a:	07d9      	lsls	r1, r3, #31
 800ab2c:	d405      	bmi.n	800ab3a <_vfiprintf_r+0x2a>
 800ab2e:	89ab      	ldrh	r3, [r5, #12]
 800ab30:	059a      	lsls	r2, r3, #22
 800ab32:	d402      	bmi.n	800ab3a <_vfiprintf_r+0x2a>
 800ab34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab36:	f7fe fa14 	bl	8008f62 <__retarget_lock_acquire_recursive>
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	071b      	lsls	r3, r3, #28
 800ab3e:	d501      	bpl.n	800ab44 <_vfiprintf_r+0x34>
 800ab40:	692b      	ldr	r3, [r5, #16]
 800ab42:	b99b      	cbnz	r3, 800ab6c <_vfiprintf_r+0x5c>
 800ab44:	4629      	mov	r1, r5
 800ab46:	4630      	mov	r0, r6
 800ab48:	f000 f938 	bl	800adbc <__swsetup_r>
 800ab4c:	b170      	cbz	r0, 800ab6c <_vfiprintf_r+0x5c>
 800ab4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab50:	07dc      	lsls	r4, r3, #31
 800ab52:	d504      	bpl.n	800ab5e <_vfiprintf_r+0x4e>
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	b01d      	add	sp, #116	@ 0x74
 800ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5e:	89ab      	ldrh	r3, [r5, #12]
 800ab60:	0598      	lsls	r0, r3, #22
 800ab62:	d4f7      	bmi.n	800ab54 <_vfiprintf_r+0x44>
 800ab64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab66:	f7fe f9fd 	bl	8008f64 <__retarget_lock_release_recursive>
 800ab6a:	e7f3      	b.n	800ab54 <_vfiprintf_r+0x44>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab70:	2320      	movs	r3, #32
 800ab72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab7a:	2330      	movs	r3, #48	@ 0x30
 800ab7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad2c <_vfiprintf_r+0x21c>
 800ab80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab84:	f04f 0901 	mov.w	r9, #1
 800ab88:	4623      	mov	r3, r4
 800ab8a:	469a      	mov	sl, r3
 800ab8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab90:	b10a      	cbz	r2, 800ab96 <_vfiprintf_r+0x86>
 800ab92:	2a25      	cmp	r2, #37	@ 0x25
 800ab94:	d1f9      	bne.n	800ab8a <_vfiprintf_r+0x7a>
 800ab96:	ebba 0b04 	subs.w	fp, sl, r4
 800ab9a:	d00b      	beq.n	800abb4 <_vfiprintf_r+0xa4>
 800ab9c:	465b      	mov	r3, fp
 800ab9e:	4622      	mov	r2, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	4630      	mov	r0, r6
 800aba4:	f7ff ffa2 	bl	800aaec <__sfputs_r>
 800aba8:	3001      	adds	r0, #1
 800abaa:	f000 80a7 	beq.w	800acfc <_vfiprintf_r+0x1ec>
 800abae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abb0:	445a      	add	r2, fp
 800abb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800abb4:	f89a 3000 	ldrb.w	r3, [sl]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 809f 	beq.w	800acfc <_vfiprintf_r+0x1ec>
 800abbe:	2300      	movs	r3, #0
 800abc0:	f04f 32ff 	mov.w	r2, #4294967295
 800abc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc8:	f10a 0a01 	add.w	sl, sl, #1
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	9307      	str	r3, [sp, #28]
 800abd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800abd6:	4654      	mov	r4, sl
 800abd8:	2205      	movs	r2, #5
 800abda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abde:	4853      	ldr	r0, [pc, #332]	@ (800ad2c <_vfiprintf_r+0x21c>)
 800abe0:	f7f5 fb0e 	bl	8000200 <memchr>
 800abe4:	9a04      	ldr	r2, [sp, #16]
 800abe6:	b9d8      	cbnz	r0, 800ac20 <_vfiprintf_r+0x110>
 800abe8:	06d1      	lsls	r1, r2, #27
 800abea:	bf44      	itt	mi
 800abec:	2320      	movmi	r3, #32
 800abee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf2:	0713      	lsls	r3, r2, #28
 800abf4:	bf44      	itt	mi
 800abf6:	232b      	movmi	r3, #43	@ 0x2b
 800abf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ac00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac02:	d015      	beq.n	800ac30 <_vfiprintf_r+0x120>
 800ac04:	9a07      	ldr	r2, [sp, #28]
 800ac06:	4654      	mov	r4, sl
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f04f 0c0a 	mov.w	ip, #10
 800ac0e:	4621      	mov	r1, r4
 800ac10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac14:	3b30      	subs	r3, #48	@ 0x30
 800ac16:	2b09      	cmp	r3, #9
 800ac18:	d94b      	bls.n	800acb2 <_vfiprintf_r+0x1a2>
 800ac1a:	b1b0      	cbz	r0, 800ac4a <_vfiprintf_r+0x13a>
 800ac1c:	9207      	str	r2, [sp, #28]
 800ac1e:	e014      	b.n	800ac4a <_vfiprintf_r+0x13a>
 800ac20:	eba0 0308 	sub.w	r3, r0, r8
 800ac24:	fa09 f303 	lsl.w	r3, r9, r3
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	46a2      	mov	sl, r4
 800ac2e:	e7d2      	b.n	800abd6 <_vfiprintf_r+0xc6>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	1d19      	adds	r1, r3, #4
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	9103      	str	r1, [sp, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bfbb      	ittet	lt
 800ac3c:	425b      	neglt	r3, r3
 800ac3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac42:	9307      	strge	r3, [sp, #28]
 800ac44:	9307      	strlt	r3, [sp, #28]
 800ac46:	bfb8      	it	lt
 800ac48:	9204      	strlt	r2, [sp, #16]
 800ac4a:	7823      	ldrb	r3, [r4, #0]
 800ac4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac4e:	d10a      	bne.n	800ac66 <_vfiprintf_r+0x156>
 800ac50:	7863      	ldrb	r3, [r4, #1]
 800ac52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac54:	d132      	bne.n	800acbc <_vfiprintf_r+0x1ac>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	9203      	str	r2, [sp, #12]
 800ac5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac62:	3402      	adds	r4, #2
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad3c <_vfiprintf_r+0x22c>
 800ac6a:	7821      	ldrb	r1, [r4, #0]
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	4650      	mov	r0, sl
 800ac70:	f7f5 fac6 	bl	8000200 <memchr>
 800ac74:	b138      	cbz	r0, 800ac86 <_vfiprintf_r+0x176>
 800ac76:	9b04      	ldr	r3, [sp, #16]
 800ac78:	eba0 000a 	sub.w	r0, r0, sl
 800ac7c:	2240      	movs	r2, #64	@ 0x40
 800ac7e:	4082      	lsls	r2, r0
 800ac80:	4313      	orrs	r3, r2
 800ac82:	3401      	adds	r4, #1
 800ac84:	9304      	str	r3, [sp, #16]
 800ac86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8a:	4829      	ldr	r0, [pc, #164]	@ (800ad30 <_vfiprintf_r+0x220>)
 800ac8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac90:	2206      	movs	r2, #6
 800ac92:	f7f5 fab5 	bl	8000200 <memchr>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d03f      	beq.n	800ad1a <_vfiprintf_r+0x20a>
 800ac9a:	4b26      	ldr	r3, [pc, #152]	@ (800ad34 <_vfiprintf_r+0x224>)
 800ac9c:	bb1b      	cbnz	r3, 800ace6 <_vfiprintf_r+0x1d6>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	3307      	adds	r3, #7
 800aca2:	f023 0307 	bic.w	r3, r3, #7
 800aca6:	3308      	adds	r3, #8
 800aca8:	9303      	str	r3, [sp, #12]
 800acaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acac:	443b      	add	r3, r7
 800acae:	9309      	str	r3, [sp, #36]	@ 0x24
 800acb0:	e76a      	b.n	800ab88 <_vfiprintf_r+0x78>
 800acb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb6:	460c      	mov	r4, r1
 800acb8:	2001      	movs	r0, #1
 800acba:	e7a8      	b.n	800ac0e <_vfiprintf_r+0xfe>
 800acbc:	2300      	movs	r3, #0
 800acbe:	3401      	adds	r4, #1
 800acc0:	9305      	str	r3, [sp, #20]
 800acc2:	4619      	mov	r1, r3
 800acc4:	f04f 0c0a 	mov.w	ip, #10
 800acc8:	4620      	mov	r0, r4
 800acca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acce:	3a30      	subs	r2, #48	@ 0x30
 800acd0:	2a09      	cmp	r2, #9
 800acd2:	d903      	bls.n	800acdc <_vfiprintf_r+0x1cc>
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0c6      	beq.n	800ac66 <_vfiprintf_r+0x156>
 800acd8:	9105      	str	r1, [sp, #20]
 800acda:	e7c4      	b.n	800ac66 <_vfiprintf_r+0x156>
 800acdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace0:	4604      	mov	r4, r0
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7f0      	b.n	800acc8 <_vfiprintf_r+0x1b8>
 800ace6:	ab03      	add	r3, sp, #12
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	462a      	mov	r2, r5
 800acec:	4b12      	ldr	r3, [pc, #72]	@ (800ad38 <_vfiprintf_r+0x228>)
 800acee:	a904      	add	r1, sp, #16
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7fd fbdb 	bl	80084ac <_printf_float>
 800acf6:	4607      	mov	r7, r0
 800acf8:	1c78      	adds	r0, r7, #1
 800acfa:	d1d6      	bne.n	800acaa <_vfiprintf_r+0x19a>
 800acfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acfe:	07d9      	lsls	r1, r3, #31
 800ad00:	d405      	bmi.n	800ad0e <_vfiprintf_r+0x1fe>
 800ad02:	89ab      	ldrh	r3, [r5, #12]
 800ad04:	059a      	lsls	r2, r3, #22
 800ad06:	d402      	bmi.n	800ad0e <_vfiprintf_r+0x1fe>
 800ad08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad0a:	f7fe f92b 	bl	8008f64 <__retarget_lock_release_recursive>
 800ad0e:	89ab      	ldrh	r3, [r5, #12]
 800ad10:	065b      	lsls	r3, r3, #25
 800ad12:	f53f af1f 	bmi.w	800ab54 <_vfiprintf_r+0x44>
 800ad16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad18:	e71e      	b.n	800ab58 <_vfiprintf_r+0x48>
 800ad1a:	ab03      	add	r3, sp, #12
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	462a      	mov	r2, r5
 800ad20:	4b05      	ldr	r3, [pc, #20]	@ (800ad38 <_vfiprintf_r+0x228>)
 800ad22:	a904      	add	r1, sp, #16
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7fd fe59 	bl	80089dc <_printf_i>
 800ad2a:	e7e4      	b.n	800acf6 <_vfiprintf_r+0x1e6>
 800ad2c:	0800b398 	.word	0x0800b398
 800ad30:	0800b3a2 	.word	0x0800b3a2
 800ad34:	080084ad 	.word	0x080084ad
 800ad38:	0800aaed 	.word	0x0800aaed
 800ad3c:	0800b39e 	.word	0x0800b39e

0800ad40 <__swbuf_r>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	460e      	mov	r6, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	4605      	mov	r5, r0
 800ad48:	b118      	cbz	r0, 800ad52 <__swbuf_r+0x12>
 800ad4a:	6a03      	ldr	r3, [r0, #32]
 800ad4c:	b90b      	cbnz	r3, 800ad52 <__swbuf_r+0x12>
 800ad4e:	f7fd fff1 	bl	8008d34 <__sinit>
 800ad52:	69a3      	ldr	r3, [r4, #24]
 800ad54:	60a3      	str	r3, [r4, #8]
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	071a      	lsls	r2, r3, #28
 800ad5a:	d501      	bpl.n	800ad60 <__swbuf_r+0x20>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	b943      	cbnz	r3, 800ad72 <__swbuf_r+0x32>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 f82a 	bl	800adbc <__swsetup_r>
 800ad68:	b118      	cbz	r0, 800ad72 <__swbuf_r+0x32>
 800ad6a:	f04f 37ff 	mov.w	r7, #4294967295
 800ad6e:	4638      	mov	r0, r7
 800ad70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	6922      	ldr	r2, [r4, #16]
 800ad76:	1a98      	subs	r0, r3, r2
 800ad78:	6963      	ldr	r3, [r4, #20]
 800ad7a:	b2f6      	uxtb	r6, r6
 800ad7c:	4283      	cmp	r3, r0
 800ad7e:	4637      	mov	r7, r6
 800ad80:	dc05      	bgt.n	800ad8e <__swbuf_r+0x4e>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f7ff fd99 	bl	800a8bc <_fflush_r>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d1ed      	bne.n	800ad6a <__swbuf_r+0x2a>
 800ad8e:	68a3      	ldr	r3, [r4, #8]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	60a3      	str	r3, [r4, #8]
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	6022      	str	r2, [r4, #0]
 800ad9a:	701e      	strb	r6, [r3, #0]
 800ad9c:	6962      	ldr	r2, [r4, #20]
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d004      	beq.n	800adae <__swbuf_r+0x6e>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	07db      	lsls	r3, r3, #31
 800ada8:	d5e1      	bpl.n	800ad6e <__swbuf_r+0x2e>
 800adaa:	2e0a      	cmp	r6, #10
 800adac:	d1df      	bne.n	800ad6e <__swbuf_r+0x2e>
 800adae:	4621      	mov	r1, r4
 800adb0:	4628      	mov	r0, r5
 800adb2:	f7ff fd83 	bl	800a8bc <_fflush_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d0d9      	beq.n	800ad6e <__swbuf_r+0x2e>
 800adba:	e7d6      	b.n	800ad6a <__swbuf_r+0x2a>

0800adbc <__swsetup_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4b29      	ldr	r3, [pc, #164]	@ (800ae64 <__swsetup_r+0xa8>)
 800adc0:	4605      	mov	r5, r0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	460c      	mov	r4, r1
 800adc6:	b118      	cbz	r0, 800add0 <__swsetup_r+0x14>
 800adc8:	6a03      	ldr	r3, [r0, #32]
 800adca:	b90b      	cbnz	r3, 800add0 <__swsetup_r+0x14>
 800adcc:	f7fd ffb2 	bl	8008d34 <__sinit>
 800add0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add4:	0719      	lsls	r1, r3, #28
 800add6:	d422      	bmi.n	800ae1e <__swsetup_r+0x62>
 800add8:	06da      	lsls	r2, r3, #27
 800adda:	d407      	bmi.n	800adec <__swsetup_r+0x30>
 800addc:	2209      	movs	r2, #9
 800adde:	602a      	str	r2, [r5, #0]
 800ade0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	f04f 30ff 	mov.w	r0, #4294967295
 800adea:	e033      	b.n	800ae54 <__swsetup_r+0x98>
 800adec:	0758      	lsls	r0, r3, #29
 800adee:	d512      	bpl.n	800ae16 <__swsetup_r+0x5a>
 800adf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adf2:	b141      	cbz	r1, 800ae06 <__swsetup_r+0x4a>
 800adf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adf8:	4299      	cmp	r1, r3
 800adfa:	d002      	beq.n	800ae02 <__swsetup_r+0x46>
 800adfc:	4628      	mov	r0, r5
 800adfe:	f7fe feff 	bl	8009c00 <_free_r>
 800ae02:	2300      	movs	r3, #0
 800ae04:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6063      	str	r3, [r4, #4]
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	f043 0308 	orr.w	r3, r3, #8
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	b94b      	cbnz	r3, 800ae36 <__swsetup_r+0x7a>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae2c:	d003      	beq.n	800ae36 <__swsetup_r+0x7a>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f000 f883 	bl	800af3c <__smakebuf_r>
 800ae36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae3a:	f013 0201 	ands.w	r2, r3, #1
 800ae3e:	d00a      	beq.n	800ae56 <__swsetup_r+0x9a>
 800ae40:	2200      	movs	r2, #0
 800ae42:	60a2      	str	r2, [r4, #8]
 800ae44:	6962      	ldr	r2, [r4, #20]
 800ae46:	4252      	negs	r2, r2
 800ae48:	61a2      	str	r2, [r4, #24]
 800ae4a:	6922      	ldr	r2, [r4, #16]
 800ae4c:	b942      	cbnz	r2, 800ae60 <__swsetup_r+0xa4>
 800ae4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae52:	d1c5      	bne.n	800ade0 <__swsetup_r+0x24>
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	0799      	lsls	r1, r3, #30
 800ae58:	bf58      	it	pl
 800ae5a:	6962      	ldrpl	r2, [r4, #20]
 800ae5c:	60a2      	str	r2, [r4, #8]
 800ae5e:	e7f4      	b.n	800ae4a <__swsetup_r+0x8e>
 800ae60:	2000      	movs	r0, #0
 800ae62:	e7f7      	b.n	800ae54 <__swsetup_r+0x98>
 800ae64:	20000020 	.word	0x20000020

0800ae68 <_raise_r>:
 800ae68:	291f      	cmp	r1, #31
 800ae6a:	b538      	push	{r3, r4, r5, lr}
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	d904      	bls.n	800ae7c <_raise_r+0x14>
 800ae72:	2316      	movs	r3, #22
 800ae74:	6003      	str	r3, [r0, #0]
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae7e:	b112      	cbz	r2, 800ae86 <_raise_r+0x1e>
 800ae80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae84:	b94b      	cbnz	r3, 800ae9a <_raise_r+0x32>
 800ae86:	4628      	mov	r0, r5
 800ae88:	f000 f830 	bl	800aeec <_getpid_r>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4601      	mov	r1, r0
 800ae90:	4628      	mov	r0, r5
 800ae92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae96:	f000 b817 	b.w	800aec8 <_kill_r>
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d00a      	beq.n	800aeb4 <_raise_r+0x4c>
 800ae9e:	1c59      	adds	r1, r3, #1
 800aea0:	d103      	bne.n	800aeaa <_raise_r+0x42>
 800aea2:	2316      	movs	r3, #22
 800aea4:	6003      	str	r3, [r0, #0]
 800aea6:	2001      	movs	r0, #1
 800aea8:	e7e7      	b.n	800ae7a <_raise_r+0x12>
 800aeaa:	2100      	movs	r1, #0
 800aeac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4798      	blx	r3
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e7e0      	b.n	800ae7a <_raise_r+0x12>

0800aeb8 <raise>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	@ (800aec4 <raise+0xc>)
 800aeba:	4601      	mov	r1, r0
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	f7ff bfd3 	b.w	800ae68 <_raise_r>
 800aec2:	bf00      	nop
 800aec4:	20000020 	.word	0x20000020

0800aec8 <_kill_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d07      	ldr	r5, [pc, #28]	@ (800aee8 <_kill_r+0x20>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	4611      	mov	r1, r2
 800aed4:	602b      	str	r3, [r5, #0]
 800aed6:	f7f7 fa88 	bl	80023ea <_kill>
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	d102      	bne.n	800aee4 <_kill_r+0x1c>
 800aede:	682b      	ldr	r3, [r5, #0]
 800aee0:	b103      	cbz	r3, 800aee4 <_kill_r+0x1c>
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	bd38      	pop	{r3, r4, r5, pc}
 800aee6:	bf00      	nop
 800aee8:	20004a98 	.word	0x20004a98

0800aeec <_getpid_r>:
 800aeec:	f7f7 ba75 	b.w	80023da <_getpid>

0800aef0 <__swhatbuf_r>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	460c      	mov	r4, r1
 800aef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	b096      	sub	sp, #88	@ 0x58
 800aefc:	4615      	mov	r5, r2
 800aefe:	461e      	mov	r6, r3
 800af00:	da0d      	bge.n	800af1e <__swhatbuf_r+0x2e>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af08:	f04f 0100 	mov.w	r1, #0
 800af0c:	bf14      	ite	ne
 800af0e:	2340      	movne	r3, #64	@ 0x40
 800af10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af14:	2000      	movs	r0, #0
 800af16:	6031      	str	r1, [r6, #0]
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	b016      	add	sp, #88	@ 0x58
 800af1c:	bd70      	pop	{r4, r5, r6, pc}
 800af1e:	466a      	mov	r2, sp
 800af20:	f000 f848 	bl	800afb4 <_fstat_r>
 800af24:	2800      	cmp	r0, #0
 800af26:	dbec      	blt.n	800af02 <__swhatbuf_r+0x12>
 800af28:	9901      	ldr	r1, [sp, #4]
 800af2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af32:	4259      	negs	r1, r3
 800af34:	4159      	adcs	r1, r3
 800af36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af3a:	e7eb      	b.n	800af14 <__swhatbuf_r+0x24>

0800af3c <__smakebuf_r>:
 800af3c:	898b      	ldrh	r3, [r1, #12]
 800af3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af40:	079d      	lsls	r5, r3, #30
 800af42:	4606      	mov	r6, r0
 800af44:	460c      	mov	r4, r1
 800af46:	d507      	bpl.n	800af58 <__smakebuf_r+0x1c>
 800af48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	6123      	str	r3, [r4, #16]
 800af50:	2301      	movs	r3, #1
 800af52:	6163      	str	r3, [r4, #20]
 800af54:	b003      	add	sp, #12
 800af56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af58:	ab01      	add	r3, sp, #4
 800af5a:	466a      	mov	r2, sp
 800af5c:	f7ff ffc8 	bl	800aef0 <__swhatbuf_r>
 800af60:	9f00      	ldr	r7, [sp, #0]
 800af62:	4605      	mov	r5, r0
 800af64:	4639      	mov	r1, r7
 800af66:	4630      	mov	r0, r6
 800af68:	f7fe febe 	bl	8009ce8 <_malloc_r>
 800af6c:	b948      	cbnz	r0, 800af82 <__smakebuf_r+0x46>
 800af6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af72:	059a      	lsls	r2, r3, #22
 800af74:	d4ee      	bmi.n	800af54 <__smakebuf_r+0x18>
 800af76:	f023 0303 	bic.w	r3, r3, #3
 800af7a:	f043 0302 	orr.w	r3, r3, #2
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	e7e2      	b.n	800af48 <__smakebuf_r+0xc>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	6020      	str	r0, [r4, #0]
 800af86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af92:	b15b      	cbz	r3, 800afac <__smakebuf_r+0x70>
 800af94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af98:	4630      	mov	r0, r6
 800af9a:	f000 f81d 	bl	800afd8 <_isatty_r>
 800af9e:	b128      	cbz	r0, 800afac <__smakebuf_r+0x70>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	f043 0301 	orr.w	r3, r3, #1
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	431d      	orrs	r5, r3
 800afb0:	81a5      	strh	r5, [r4, #12]
 800afb2:	e7cf      	b.n	800af54 <__smakebuf_r+0x18>

0800afb4 <_fstat_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d07      	ldr	r5, [pc, #28]	@ (800afd4 <_fstat_r+0x20>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	4611      	mov	r1, r2
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	f7f7 fa72 	bl	80024aa <_fstat>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d102      	bne.n	800afd0 <_fstat_r+0x1c>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	b103      	cbz	r3, 800afd0 <_fstat_r+0x1c>
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	bd38      	pop	{r3, r4, r5, pc}
 800afd2:	bf00      	nop
 800afd4:	20004a98 	.word	0x20004a98

0800afd8 <_isatty_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d06      	ldr	r5, [pc, #24]	@ (800aff4 <_isatty_r+0x1c>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	f7f7 fa71 	bl	80024ca <_isatty>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_isatty_r+0x1a>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_isatty_r+0x1a>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	20004a98 	.word	0x20004a98

0800aff8 <_init>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr

0800b004 <_fini>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	bf00      	nop
 800b008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00a:	bc08      	pop	{r3}
 800b00c:	469e      	mov	lr, r3
 800b00e:	4770      	bx	lr
