
Guitar_Tuner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a910  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800aad0  0800aad0  0000bad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aee0  0800aee0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aee0  0800aee0  0000bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aee8  0800aee8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aee8  0800aee8  0000bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aeec  0800aeec  0000beec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800aef0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047fc  200001d4  0800b0c4  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  0800b0c4  0000c9d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c748  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346c  00000000  00000000  0002894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001322  00000000  00000000  0002d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046aa  00000000  00000000  0002e982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d73c  00000000  00000000  0003302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123bd6  00000000  00000000  00050768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017433e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b38  00000000  00000000  00174384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0017bebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800aab8 	.word	0x0800aab8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800aab8 	.word	0x0800aab8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	@ 0x40
 8000f6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f001 f95c 	bl	800222a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f885 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 fadd 	bl	8001534 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f000 faa1 	bl	80014c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f7e:	f000 f8d1 	bl	8001124 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f82:	f000 f947 	bl	8001214 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000f86:	f000 fa01 	bl	800138c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f8a:	f000 fa4d 	bl	8001428 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8000f8e:	f000 f975 	bl	800127c <MX_DFSDM1_Init>
  MX_OPAMP1_Init();
 8000f92:	f000 f9d9 	bl	8001348 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */

  HAL_OPAMP_Start(&hopamp1);
 8000f96:	4831      	ldr	r0, [pc, #196]	@ (800105c <main+0xf4>)
 8000f98:	f003 ff24 	bl	8004de4 <HAL_OPAMP_Start>

	hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <main+0xf8>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	61da      	str	r2, [r3, #28]
	//inputJack_Init(&hadc1, &htim2);
	//inputJack_DMASampleBuffer(&hadc1, adc_buffer, BUFFER_SIZE);

	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, mic_rec, MIC_REC_SIZE);
 8000fa2:	f640 02c8 	movw	r2, #2248	@ 0x8c8
 8000fa6:	492f      	ldr	r1, [pc, #188]	@ (8001064 <main+0xfc>)
 8000fa8:	482f      	ldr	r0, [pc, #188]	@ (8001068 <main+0x100>)
 8000faa:	f002 ff57 	bl	8003e5c <HAL_DFSDM_FilterRegularStart_DMA>
	HAL_Delay(50);
 8000fae:	2032      	movs	r0, #50	@ 0x32
 8000fb0:	f001 f9b0 	bl	8002314 <HAL_Delay>
	mic_hiPassSignal(mic_rec, mic_out, BUFFER_SIZE);
 8000fb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fb8:	492c      	ldr	r1, [pc, #176]	@ (800106c <main+0x104>)
 8000fba:	482a      	ldr	r0, [pc, #168]	@ (8001064 <main+0xfc>)
 8000fbc:	f000 fb48 	bl	8001650 <mic_hiPassSignal>
	HAL_Delay(50);
 8000fc0:	2032      	movs	r0, #50	@ 0x32
 8000fc2:	f001 f9a7 	bl	8002314 <HAL_Delay>

	char msg[50];
	pred_freq = yin_detect_frequency(mic_out, BUFFER_SIZE, SAMPLE_RATE);
 8000fc6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000fca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fce:	4827      	ldr	r0, [pc, #156]	@ (800106c <main+0x104>)
 8000fd0:	f000 fbce 	bl	8001770 <yin_detect_frequency>
 8000fd4:	eef0 7a40 	vmov.f32	s15, s0
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <main+0x108>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]
	sprintf(msg, "Predicted frequency : %f  Hz\r\n", pred_freq);
 8000fde:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <main+0x108>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fac8 	bl	8000578 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4638      	mov	r0, r7
 8000fee:	4921      	ldr	r1, [pc, #132]	@ (8001074 <main+0x10c>)
 8000ff0:	f007 fc34 	bl	800885c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f952 	bl	80002a0 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4639      	mov	r1, r7
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	481c      	ldr	r0, [pc, #112]	@ (8001078 <main+0x110>)
 8001008:	f006 f862 	bl	80070d0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		for (int i = 0; i < BUFFER_SIZE; i++) {
 800100c:	2300      	movs	r3, #0
 800100e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001010:	e01f      	b.n	8001052 <main+0xea>
			// Format the message with the current ADC value
			sprintf(msg, "mic[%d],%f\r\n", i, mic_out[i]);
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <main+0x104>)
 8001014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff faab 	bl	8000578 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4638      	mov	r0, r7
 8001028:	e9cd 2300 	strd	r2, r3, [sp]
 800102c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800102e:	4913      	ldr	r1, [pc, #76]	@ (800107c <main+0x114>)
 8001030:	f007 fc14 	bl	800885c <siprintf>

			// Send the message over UART
			HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001034:	463b      	mov	r3, r7
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f932 	bl	80002a0 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	4639      	mov	r1, r7
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	480c      	ldr	r0, [pc, #48]	@ (8001078 <main+0x110>)
 8001048:	f006 f842 	bl	80070d0 <HAL_UART_Transmit>
		for (int i = 0; i < BUFFER_SIZE; i++) {
 800104c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104e:	3301      	adds	r3, #1
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
 8001052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001058:	dbdb      	blt.n	8001012 <main+0xaa>
 800105a:	e7d7      	b.n	800100c <main+0xa4>
 800105c:	20000418 	.word	0x20000418
 8001060:	20000258 	.word	0x20000258
 8001064:	2000052c 	.word	0x2000052c
 8001068:	2000032c 	.word	0x2000032c
 800106c:	2000284c 	.word	0x2000284c
 8001070:	2000484c 	.word	0x2000484c
 8001074:	0800aad0 	.word	0x0800aad0
 8001078:	20000498 	.word	0x20000498
 800107c:	0800aaf0 	.word	0x0800aaf0

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	@ 0x58
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2244      	movs	r2, #68	@ 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f007 fcdc 	bl	8008a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f003 fef0 	bl	8004e88 <HAL_PWREx_ControlVoltageScaling>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010ae:	f000 fa93 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010b2:	2310      	movs	r3, #16
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80010be:	23a0      	movs	r3, #160	@ 0xa0
 80010c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 80010ce:	230f      	movs	r3, #15
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 ff74 	bl	8004fd0 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ee:	f000 fa73 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2105      	movs	r1, #5
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fb7a 	bl	8005804 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001116:	f000 fa5f 	bl	80015d8 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	@ 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
	__HAL_RCC_ADC_CLK_ENABLE();
 800113c:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_ADC1_Init+0xe0>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_ADC1_Init+0xe0>)
 8001142:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001148:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_ADC1_Init+0xe0>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001156:	4a2d      	ldr	r2, [pc, #180]	@ (800120c <MX_ADC1_Init+0xe8>)
 8001158:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC1_Init+0xe4>)
 800115c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001160:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001162:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC1_Init+0xe4>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001176:	2204      	movs	r2, #4
 8001178:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC1_Init+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001182:	2201      	movs	r2, #1
 8001184:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001188:	2201      	movs	r2, #1
 800118a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC1_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_ADC1_Init+0xe4>)
 8001196:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_ADC1_Init+0xe4>)
 800119e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC1_Init+0xe4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC1_Init+0xe4>)
 80011ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC1_Init+0xe4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011bc:	4812      	ldr	r0, [pc, #72]	@ (8001208 <MX_ADC1_Init+0xe4>)
 80011be:	f001 fa93 	bl	80026e8 <HAL_ADC_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80011c8:	f000 fa06 	bl	80015d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <MX_ADC1_Init+0xec>)
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d0:	2306      	movs	r3, #6
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d8:	237f      	movs	r3, #127	@ 0x7f
 80011da:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011dc:	2304      	movs	r3, #4
 80011de:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <MX_ADC1_Init+0xe4>)
 80011ec:	f001 fd94 	bl	8002d18 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80011f6:	f000 f9ef 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	200001f0 	.word	0x200001f0
 800120c:	50040000 	.word	0x50040000
 8001210:	08600004 	.word	0x08600004

08001214 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2228      	movs	r2, #40	@ 0x28
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f007 fc13 	bl	8008a4c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_DAC1_Init+0x60>)
 8001228:	4a13      	ldr	r2, [pc, #76]	@ (8001278 <MX_DAC1_Init+0x64>)
 800122a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	@ (8001274 <MX_DAC1_Init+0x60>)
 800122e:	f002 fab2 	bl	8003796 <HAL_DAC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001238:	f000 f9ce 	bl	80015d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001240:	230a      	movs	r3, #10
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_DAC1_Init+0x60>)
 800125e:	f002 fabd 	bl	80037dc <HAL_DAC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 f9b6 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	@ 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002b8 	.word	0x200002b8
 8001278:	40007400 	.word	0x40007400

0800127c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 8001282:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <MX_DFSDM1_Init+0xbc>)
 8001284:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001286:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 800128e:	2201      	movs	r2, #1
 8001290:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 8001294:	2201      	movs	r2, #1
 8001296:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8001298:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 800129a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800129e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter2.Init.FilterParam.Oversampling = 64;
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 80012a2:	2240      	movs	r2, #64	@ 0x40
 80012a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK)
 80012ac:	4821      	ldr	r0, [pc, #132]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 80012ae:	f002 fcb5 	bl	8003c1c <HAL_DFSDM_FilterInit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80012b8:	f000 f98e 	bl	80015d8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012be:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <MX_DFSDM1_Init+0xc4>)
 80012c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ce:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 20;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012d2:	2214      	movs	r2, #20
 80012d4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 8001302:	2200      	movs	r2, #0
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 8;
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 8001308:	2208      	movs	r2, #8
 800130a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800130c:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_DFSDM1_Init+0xc0>)
 800130e:	f002 fbb1 	bl	8003a74 <HAL_DFSDM_ChannelInit>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8001318:	f000 f95e 	bl	80015d8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800131c:	2201      	movs	r2, #1
 800131e:	4909      	ldr	r1, [pc, #36]	@ (8001344 <MX_DFSDM1_Init+0xc8>)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_DFSDM1_Init+0xb8>)
 8001322:	f002 fd55 	bl	8003dd0 <HAL_DFSDM_FilterConfigRegChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 800132c:	f000 f954 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000032c 	.word	0x2000032c
 8001338:	40016200 	.word	0x40016200
 800133c:	20000380 	.word	0x20000380
 8001340:	40016040 	.word	0x40016040
 8001344:	00020004 	.word	0x00020004

08001348 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 800134e:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <MX_OPAMP1_Init+0x40>)
 8001350:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 8001352:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 800135a:	220c      	movs	r2, #12
 800135c:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_LOWPOWER;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 8001366:	2202      	movs	r2, #2
 8001368:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_OPAMP1_Init+0x3c>)
 8001372:	f003 fc61 	bl	8004c38 <HAL_OPAMP_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_OPAMP1_Init+0x38>
  {
    Error_Handler();
 800137c:	f000 f92c 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000418 	.word	0x20000418
 8001388:	40007800 	.word	0x40007800

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013c0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80013c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d2:	4814      	ldr	r0, [pc, #80]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013d4:	f005 f9ec 	bl	80067b0 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013de:	f000 f8fb 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_TIM2_Init+0x98>)
 80013f0:	f005 fb3c 	bl	8006a6c <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fa:	f000 f8ed 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013fe:	2320      	movs	r3, #32
 8001400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <MX_TIM2_Init+0x98>)
 800140c:	f005 fd6a 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001416:	f000 f8df 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000044c 	.word	0x2000044c

08001428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800142c:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 800142e:	4a23      	ldr	r2, [pc, #140]	@ (80014bc <MX_USART1_UART_Init+0x94>)
 8001430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001470:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001472:	f005 fddd 	bl	8007030 <HAL_UART_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800147c:	f000 f8ac 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001484:	f006 fc06 	bl	8007c94 <HAL_UARTEx_SetTxFifoThreshold>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800148e:	f000 f8a3 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4808      	ldr	r0, [pc, #32]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 8001496:	f006 fc3b 	bl	8007d10 <HAL_UARTEx_SetRxFifoThreshold>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014a0:	f000 f89a 	bl	80015d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <MX_USART1_UART_Init+0x90>)
 80014a6:	f006 fbbc 	bl	8007c22 <HAL_UARTEx_DisableFifoMode>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f000 f892 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000498 	.word	0x20000498
 80014bc:	40013800 	.word	0x40013800

080014c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_DMA_Init+0x70>)
 80014c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ca:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <MX_DMA_Init+0x70>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_DMA_Init+0x70>)
 80014d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_DMA_Init+0x70>)
 80014e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e2:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <MX_DMA_Init+0x70>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_DMA_Init+0x70>)
 80014ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	200b      	movs	r0, #11
 80014fc:	f002 f915 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001500:	200b      	movs	r0, #11
 8001502:	f002 f92e 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200c      	movs	r0, #12
 800150c:	f002 f90d 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001510:	200c      	movs	r0, #12
 8001512:	f002 f926 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	200d      	movs	r0, #13
 800151c:	f002 f905 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001520:	200d      	movs	r0, #13
 8001522:	f002 f91e 	bl	8003762 <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_GPIO_Init+0x9c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_GPIO_Init+0xa0>)
 80015c2:	f003 f9a7 	bl	8004914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000800 	.word	0x48000800

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <limit_val>:

void mic_DMASampleBuffer(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, int32_t *pData, uint32_t Length){
	HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, pData, Length);
}

float limit_val(float input) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	ed87 0a01 	vstr	s0, [r7, #4]
    if (input > 0) {
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	dd0c      	ble.n	8001616 <limit_val+0x32>
        return (input < 200.0f) ? input : 200.0f; // Minimum of 200 and input
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001640 <limit_val+0x5c>
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d501      	bpl.n	8001612 <limit_val+0x2e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	e00d      	b.n	800162e <limit_val+0x4a>
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <limit_val+0x60>)
 8001614:	e00b      	b.n	800162e <limit_val+0x4a>
    } else {
        return (input > -200.0f) ? input : -200.0f; // Maximum of -200 and input
 8001616:	edd7 7a01 	vldr	s15, [r7, #4]
 800161a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001648 <limit_val+0x64>
 800161e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	dd01      	ble.n	800162c <limit_val+0x48>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e000      	b.n	800162e <limit_val+0x4a>
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <limit_val+0x68>)
    }
}
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	43480000 	.word	0x43480000
 8001644:	43480000 	.word	0x43480000
 8001648:	c3480000 	.word	0xc3480000
 800164c:	c3480000 	.word	0xc3480000

08001650 <mic_hiPassSignal>:


//needed to remove low freq information thats messing everything up
void mic_hiPassSignal(int32_t *interim_buffer, float32_t *good_buffer, int good_buffer_length) {
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b08f      	sub	sp, #60	@ 0x3c
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
    // Filter coefficients for a 50 Hz high-pass filter with a 48 kHz sample rate
    float alpha = (2 * M_PI * 50) / (48000 + 2 * M_PI * 50);
 800165c:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <mic_hiPassSignal+0x114>)
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    float alphinv = 1.0f / (1.0f + (48000 / (2 * M_PI * 2000)));
 8001660:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <mic_hiPassSignal+0x118>)
 8001662:	623b      	str	r3, [r7, #32]

    // Initialize the previous output (y[n-1]) and previous input (x[n-1])
    float prev_output = 0.0f;
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
    float prev_input = 0.0f;
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	@ 0x30

    //high pass
    for (int i = 0; i < good_buffer_length; i++) {
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001674:	e028      	b.n	80016c8 <mic_hiPassSignal+0x78>
        // Get the current input
        float current_input = (float32_t)interim_buffer[i + 200];
 8001676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001678:	33c8      	adds	r3, #200	@ 0xc8
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	edc7 7a05 	vstr	s15, [r7, #20]

        // Apply the high-pass filter equation
        float current_output = alpha * (prev_output + current_input - prev_input);
 800168e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001692:	edd7 7a05 	vldr	s15, [r7, #20]
 8001696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	edc7 7a04 	vstr	s15, [r7, #16]

        // Store the filtered output
        good_buffer[i] = current_output;
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	601a      	str	r2, [r3, #0]

        // Update previous input and output for the next iteration
        prev_input = current_input;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
        prev_output = current_output;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < good_buffer_length; i++) {
 80016c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c4:	3301      	adds	r3, #1
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbd2      	blt.n	8001676 <mic_hiPassSignal+0x26>
    }

    //lowpass
    prev_output = 0.0f;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	@ 0x34

    for (int i = 0; i < good_buffer_length; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016da:	e03a      	b.n	8001752 <mic_hiPassSignal+0x102>
    	float current_input = good_buffer[i];
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	61fb      	str	r3, [r7, #28]
    	float current_output = alphinv * current_input + (1 - alphinv) * prev_output;
 80016e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001700:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	edc7 7a06 	vstr	s15, [r7, #24]

        // Store the filtered output
        good_buffer[i] = (float)limit_val(current_output) / 200.0;
 8001710:	ed97 0a06 	vldr	s0, [r7, #24]
 8001714:	f7ff ff66 	bl	80015e4 <limit_val>
 8001718:	ee10 3a10 	vmov	r3, s0
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff2b 	bl	8000578 <__aeabi_f2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <mic_hiPassSignal+0x11c>)
 8001728:	f7ff f8a8 	bl	800087c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	18d4      	adds	r4, r2, r3
 800173c:	f7ff fa4c 	bl	8000bd8 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	6023      	str	r3, [r4, #0]

        // Update previous input and output for the next iteration
        prev_input = current_input;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
        prev_output = current_output;
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < good_buffer_length; i++) {
 800174c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174e:	3301      	adds	r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbc0      	blt.n	80016dc <mic_hiPassSignal+0x8c>

    }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	373c      	adds	r7, #60	@ 0x3c
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	3bd5124e 	.word	0x3bd5124e
 8001768:	3e5475e6 	.word	0x3e5475e6
 800176c:	40690000 	.word	0x40690000

08001770 <yin_detect_frequency>:

#define THRESHOLD 0.05f          // Threshold for the YIN algorithm
#define HIGH_PASS_FREQ 50       // High-pass filter frequency
#define LOW_PASS_FREQ 2000      // Low-pass filter frequency

float32_t yin_detect_frequency(float32_t *buffer, uint32_t length, uint32_t sample_rate) {
 8001770:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001774:	b08f      	sub	sp, #60	@ 0x3c
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	466b      	mov	r3, sp
 8001780:	4618      	mov	r0, r3
	float32_t min_value = 1.0f;
 8001782:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t min_index = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	@ 0x30
	float32_t cumulative_diff[length];
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	460b      	mov	r3, r1
 8001790:	3b01      	subs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
 8001794:	2300      	movs	r3, #0
 8001796:	4688      	mov	r8, r1
 8001798:	4699      	mov	r9, r3
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80017a6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80017aa:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80017ae:	2300      	movs	r3, #0
 80017b0:	460c      	mov	r4, r1
 80017b2:	461d      	mov	r5, r3
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	016b      	lsls	r3, r5, #5
 80017be:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80017c2:	0162      	lsls	r2, r4, #5
 80017c4:	008b      	lsls	r3, r1, #2
 80017c6:	3307      	adds	r3, #7
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	ebad 0d03 	sub.w	sp, sp, r3
 80017d0:	466b      	mov	r3, sp
 80017d2:	3303      	adds	r3, #3
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	61fb      	str	r3, [r7, #28]
	float32_t threshold = THRESHOLD;
 80017da:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <yin_detect_frequency+0x174>)
 80017dc:	61bb      	str	r3, [r7, #24]

	// Step 1: Calculate difference function
	for (uint32_t lag = 12; lag < length / 2; lag++) {
 80017de:	230c      	movs	r3, #12
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e2:	e063      	b.n	80018ac <yin_detect_frequency+0x13c>
		float32_t sum = 0.0f;
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (uint32_t i = 0; i < length - lag; i++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ee:	e01e      	b.n	800182e <yin_detect_frequency+0xbe>
			float32_t diff = buffer[i] - buffer[i + lag];
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	edc7 7a05 	vstr	s15, [r7, #20]
			sum += diff * diff;
 8001814:	edd7 7a05 	vldr	s15, [r7, #20]
 8001818:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800181c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		for (uint32_t i = 0; i < length - lag; i++) {
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	3301      	adds	r3, #1
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001836:	429a      	cmp	r2, r3
 8001838:	d3da      	bcc.n	80017f0 <yin_detect_frequency+0x80>
		}
		cumulative_diff[lag] = sum / (float32_t)(length - lag);
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001848:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800184c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	edc3 7a00 	vstr	s15, [r3]

		// Step 2: Check if cumulative difference crosses the threshold
		if (cumulative_diff[lag] < threshold && lag > 1) {
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ed97 7a06 	vldr	s14, [r7, #24]
 800186c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	dd17      	ble.n	80018a6 <yin_detect_frequency+0x136>
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	2b01      	cmp	r3, #1
 800187a:	d914      	bls.n	80018a6 <yin_detect_frequency+0x136>
			if (cumulative_diff[lag] < min_value) {
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	dd07      	ble.n	80018a6 <yin_detect_frequency+0x136>
				min_value = cumulative_diff[lag];
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
				min_index = lag;
 80018a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
	for (uint32_t lag = 12; lag < length / 2; lag++) {
 80018a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a8:	3301      	adds	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d396      	bcc.n	80017e4 <yin_detect_frequency+0x74>
			}
		}
	}

	if (min_index > 0) {
 80018b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <yin_detect_frequency+0x15e>
		return  (float32_t)(sample_rate / min_index);
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	e001      	b.n	80018d2 <yin_detect_frequency+0x162>
	} else {
		return 0.0f;  // No valid frequency found
 80018ce:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80018e8 <yin_detect_frequency+0x178>
 80018d2:	4685      	mov	sp, r0
	}
}
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	373c      	adds	r7, #60	@ 0x3c
 80018da:	46bd      	mov	sp, r7
 80018dc:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	3d4ccccd 	.word	0x3d4ccccd
 80018e8:	00000000 	.word	0x00000000

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x44>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001930 <HAL_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_MspInit+0x44>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_MspInit+0x44>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	4a08      	ldr	r2, [pc, #32]	@ (8001930 <HAL_MspInit+0x44>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	6593      	str	r3, [r2, #88]	@ 0x58
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_MspInit+0x44>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ae      	sub	sp, #184	@ 0xb8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	2294      	movs	r2, #148	@ 0x94
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f007 f879 	bl	8008a4c <memset>
  if(hadc->Instance==ADC1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a39      	ldr	r2, [pc, #228]	@ (8001a44 <HAL_ADC_MspInit+0x110>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d16a      	bne.n	8001a3a <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001968:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800196a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800196e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fa02 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001982:	f7ff fe29 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001986:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <HAL_ADC_MspInit+0x114>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <HAL_ADC_MspInit+0x114>)
 800198c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_ADC_MspInit+0x114>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <HAL_ADC_MspInit+0x114>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a29      	ldr	r2, [pc, #164]	@ (8001a48 <HAL_ADC_MspInit+0x114>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_ADC_MspInit+0x114>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019bc:	230b      	movs	r3, #11
 80019be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019cc:	4619      	mov	r1, r3
 80019ce:	481f      	ldr	r0, [pc, #124]	@ (8001a4c <HAL_ADC_MspInit+0x118>)
 80019d0:	f002 ffa0 	bl	8004914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80019d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <HAL_ADC_MspInit+0x120>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019da:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019dc:	2205      	movs	r2, #5
 80019de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 80019fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a0e:	4810      	ldr	r0, [pc, #64]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 8001a10:	f002 fd0e 	bl	8004430 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_ADC_MspInit+0xea>
    {
      Error_Handler();
 8001a1a:	f7ff fddd 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 8001a22:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_ADC_MspInit+0x11c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2012      	movs	r0, #18
 8001a30:	f001 fe7b 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f001 fe94 	bl	8003762 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a3a:	bf00      	nop
 8001a3c:	37b8      	adds	r7, #184	@ 0xb8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	50040000 	.word	0x50040000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	20000258 	.word	0x20000258
 8001a54:	4002001c 	.word	0x4002001c

08001a58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_DAC_MspInit+0xcc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d14f      	bne.n	8001b1a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aaa:	2310      	movs	r3, #16
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac0:	f002 ff28 	bl	8004914 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b30 <HAL_DAC_MspInit+0xd8>)
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001acc:	2206      	movs	r2, #6
 8001ace:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001af4:	2220      	movs	r2, #32
 8001af6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001afe:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001b00:	f002 fc96 	bl	8004430 <HAL_DMA_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001b0a:	f7ff fd65 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	@ 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40007400 	.word	0x40007400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	200002cc 	.word	0x200002cc
 8001b30:	40020008 	.word	0x40020008

08001b34 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ae      	sub	sp, #184	@ 0xb8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2294      	movs	r2, #148	@ 0x94
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f006 ff79 	bl	8008a4c <memset>
  if(DFSDM1_Init == 0)
 8001b5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HAL_DFSDM_FilterMspInit+0x174>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d166      	bne.n	8001c30 <HAL_DFSDM_FilterMspInit+0xfc>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001b62:	4b52      	ldr	r3, [pc, #328]	@ (8001cac <HAL_DFSDM_FilterMspInit+0x178>)
 8001b64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 8001b66:	2320      	movs	r3, #32
 8001b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 8001b76:	2301      	movs	r3, #1
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 5;
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 48;
 8001b7e:	2330      	movs	r3, #48	@ 0x30
 8001b80:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV5;
 8001b82:	2305      	movs	r3, #5
 8001b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8001b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 f8f1 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_DFSDM_FilterMspInit+0x74>
    {
      Error_Handler();
 8001ba4:	f7ff fd18 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001ba8:	4b41      	ldr	r3, [pc, #260]	@ (8001cb0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a40      	ldr	r2, [pc, #256]	@ (8001cb0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001bb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_DFSDM_FilterMspInit+0x9e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bba:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001cb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001bc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	4a37      	ldr	r2, [pc, #220]	@ (8001cb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bde:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001bea:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c04:	2306      	movs	r3, #6
 8001c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4829      	ldr	r0, [pc, #164]	@ (8001cb8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001c12:	f002 fe7f 	bl	8004914 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	203f      	movs	r0, #63	@ 0x3f
 8001c1c:	f001 fd85 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT2_IRQn);
 8001c20:	203f      	movs	r0, #63	@ 0x3f
 8001c22:	f001 fd9e 	bl	8003762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_DFSDM_FilterMspInit+0x174>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_DFSDM_FilterMspInit+0x174>)
 8001c2e:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_DFSDM_FilterMspInit+0x188>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d131      	bne.n	8001c9e <HAL_DFSDM_FilterMspInit+0x16a>
    hdma_dfsdm1_flt2.Instance = DMA1_Channel3;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c3c:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <HAL_DFSDM_FilterMspInit+0x190>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c42:	2258      	movs	r2, #88	@ 0x58
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c60:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c66:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt2.Init.Mode = DMA_NORMAL;
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_HIGH;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 8001c76:	4812      	ldr	r0, [pc, #72]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c78:	f002 fbda 	bl	8004430 <HAL_DMA_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_DFSDM_FilterMspInit+0x152>
    {
      Error_Handler();
 8001c82:	f7ff fca9 	bl	80015d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	37b8      	adds	r7, #184	@ 0xb8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20004854 	.word	0x20004854
 8001cac:	00210800 	.word	0x00210800
 8001cb0:	20004850 	.word	0x20004850
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	40016200 	.word	0x40016200
 8001cc0:	200003b8 	.word	0x200003b8
 8001cc4:	40020030 	.word	0x40020030

08001cc8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0ae      	sub	sp, #184	@ 0xb8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2294      	movs	r2, #148	@ 0x94
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f006 feaf 	bl	8008a4c <memset>
  if(DFSDM1_Init == 0)
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d15e      	bne.n	8001db4 <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1AUDIO|RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 8001cf6:	4b32      	ldr	r3, [pc, #200]	@ (8001dc0 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001cf8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI2;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 5;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 48;
 8001d12:	2330      	movs	r3, #48	@ 0x30
 8001d14:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV5;
 8001d16:	2305      	movs	r3, #5
 8001d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_SAI2CLK;
 8001d22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d26:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 f827 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_DFSDM_ChannelMspInit+0x74>
    {
      Error_Handler();
 8001d38:	f7ff fc4e 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d3c:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	4a20      	ldr	r2, [pc, #128]	@ (8001dc4 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001d44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001d46:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10b      	bne.n	8001d66 <HAL_DFSDM_ChannelMspInit+0x9e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d66:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_DFSDM_ChannelMspInit+0x100>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001d7e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <HAL_DFSDM_ChannelMspInit+0x104>)
 8001da6:	f002 fdb5 	bl	8004914 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a02      	ldr	r2, [pc, #8]	@ (8001dbc <HAL_DFSDM_ChannelMspInit+0xf4>)
 8001db2:	6013      	str	r3, [r2, #0]
  }

}
 8001db4:	bf00      	nop
 8001db6:	37b8      	adds	r7, #184	@ 0xb8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20004854 	.word	0x20004854
 8001dc0:	00210800 	.word	0x00210800
 8001dc4:	20004850 	.word	0x20004850
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	48001000 	.word	0x48001000

08001dd0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a15      	ldr	r2, [pc, #84]	@ (8001e44 <HAL_OPAMP_MspInit+0x74>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d124      	bne.n	8001e3c <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_OPAMP_MspInit+0x78>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <HAL_OPAMP_MspInit+0x78>)
 8001df8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfe:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <HAL_OPAMP_MspInit+0x78>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_OPAMP_MspInit+0x78>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e48 <HAL_OPAMP_MspInit+0x78>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <HAL_OPAMP_MspInit+0x78>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001e22:	2309      	movs	r3, #9
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e26:	2303      	movs	r3, #3
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e38:	f002 fd6c 	bl	8004914 <HAL_GPIO_Init>

  /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	@ 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40007800 	.word	0x40007800
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5c:	d113      	bne.n	8001e86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_TIM_Base_MspInit+0x44>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_TIM_Base_MspInit+0x44>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_TIM_Base_MspInit+0x44>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f001 fc55 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f001 fc6e 	bl	8003762 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0ae      	sub	sp, #184	@ 0xb8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2294      	movs	r2, #148	@ 0x94
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 fdc9 	bl	8008a4c <memset>
  if(huart->Instance==USART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	@ (8001f44 <HAL_UART_MspInit+0xb0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d13a      	bne.n	8001f3a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 ff55 	bl	8005d80 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001edc:	f7ff fb7c 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee4:	4a18      	ldr	r2, [pc, #96]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efc:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f04:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_UART_MspInit+0xb4>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f10:	23c0      	movs	r3, #192	@ 0xc0
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <HAL_UART_MspInit+0xb8>)
 8001f36:	f002 fced 	bl	8004914 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f3a:	bf00      	nop
 8001f3c:	37b8      	adds	r7, #184	@ 0xb8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x4>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 f995 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fb6:	f002 fb5e 	bl	8004676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002cc 	.word	0x200002cc

08001fc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <DMA1_Channel2_IRQHandler+0x10>)
 8001fca:	f002 fb54 	bl	8004676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000258 	.word	0x20000258

08001fd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Channel3_IRQHandler+0x10>)
 8001fde:	f002 fb4a 	bl	8004676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200003b8 	.word	0x200003b8

08001fec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <ADC1_IRQHandler+0x10>)
 8001ff2:	f000 fcbf 	bl	8002974 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200001f0 	.word	0x200001f0

08002000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f004 fc2a 	bl	800685e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000044c 	.word	0x2000044c

08002014 <DFSDM1_FLT2_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter2 global interrupt.
  */
void DFSDM1_FLT2_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 0 */

  /* USER CODE END DFSDM1_FLT2_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter2);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <DFSDM1_FLT2_IRQHandler+0x10>)
 800201a:	f001 ffa1 	bl	8003f60 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 1 */

  /* USER CODE END DFSDM1_FLT2_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000032c 	.word	0x2000032c

08002028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_kill>:

int _kill(int pid, int sig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002042:	f006 fd55 	bl	8008af0 <__errno>
 8002046:	4603      	mov	r3, r0
 8002048:	2216      	movs	r2, #22
 800204a:	601a      	str	r2, [r3, #0]
  return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_exit>:

void _exit (int status)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe7 	bl	8002038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800206a:	bf00      	nop
 800206c:	e7fd      	b.n	800206a <_exit+0x12>

0800206e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e00a      	b.n	8002096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002080:	f3af 8000 	nop.w
 8002084:	4601      	mov	r1, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	b2ca      	uxtb	r2, r1
 800208e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	dbf0      	blt.n	8002080 <_read+0x12>
  }

  return len;
 800209e:	687b      	ldr	r3, [r7, #4]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e009      	b.n	80020ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	60ba      	str	r2, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf1      	blt.n	80020ba <_write+0x12>
  }
  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_close>:

int _close(int file)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002108:	605a      	str	r2, [r3, #4]
  return 0;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_isatty>:

int _isatty(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002120:	2301      	movs	r3, #1
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <_sbrk+0x5c>)
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <_sbrk+0x60>)
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800215c:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <_sbrk+0x64>)
 8002166:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <_sbrk+0x68>)
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d207      	bcs.n	8002188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002178:	f006 fcba 	bl	8008af0 <__errno>
 800217c:	4603      	mov	r3, r0
 800217e:	220c      	movs	r2, #12
 8002180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295
 8002186:	e009      	b.n	800219c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <_sbrk+0x64>)
 8002198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200a0000 	.word	0x200a0000
 80021a8:	00000400 	.word	0x00000400
 80021ac:	20004858 	.word	0x20004858
 80021b0:	200049d0 	.word	0x200049d0

080021b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <SystemInit+0x20>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <SystemInit+0x20>)
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002210 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021dc:	f7ff ffea 	bl	80021b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	@ (8002214 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	@ (8002218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <LoopForever+0xe>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002224 <LoopForever+0x16>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f006 fc79 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220a:	f7fe fead 	bl	8000f68 <main>

0800220e <LoopForever>:

LoopForever:
    b LoopForever
 800220e:	e7fe      	b.n	800220e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002210:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800221c:	0800aef0 	.word	0x0800aef0
  ldr r2, =_sbss
 8002220:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002224:	200049d0 	.word	0x200049d0

08002228 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <AES_IRQHandler>

0800222a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f001 fa6d 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f80e 	bl	800225c <HAL_InitTick>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	71fb      	strb	r3, [r7, #7]
 800224a:	e001      	b.n	8002250 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800224c:	f7ff fb4e 	bl	80018ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002250:	79fb      	ldrb	r3, [r7, #7]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_InitTick+0x6c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002270:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_InitTick+0x70>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_InitTick+0x6c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800227e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f001 fa79 	bl	800377e <HAL_SYSTICK_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d809      	bhi.n	80022ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f001 fa43 	bl	800372a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <HAL_InitTick+0x74>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e007      	b.n	80022bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e004      	b.n	80022bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e001      	b.n	80022bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008
 80022f8:	2000485c 	.word	0x2000485c

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	2000485c 	.word	0x2000485c

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008

0800235c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3360      	adds	r3, #96	@ 0x60
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <LL_ADC_SetOffset+0x44>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	03fff000 	.word	0x03fff000

0800240c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3360      	adds	r3, #96	@ 0x60
 800241a:	461a      	mov	r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3360      	adds	r3, #96	@ 0x60
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	615a      	str	r2, [r3, #20]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3330      	adds	r3, #48	@ 0x30
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	4413      	add	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	211f      	movs	r1, #31
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	401a      	ands	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 011f 	and.w	r1, r3, #31
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3314      	adds	r3, #20
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	0e5b      	lsrs	r3, r3, #25
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	0d1b      	lsrs	r3, r3, #20
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2107      	movs	r1, #7
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	0d1b      	lsrs	r3, r3, #20
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0318 	and.w	r3, r3, #24
 80025b2:	4908      	ldr	r1, [pc, #32]	@ (80025d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b4:	40d9      	lsrs	r1, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	400b      	ands	r3, r1
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	431a      	orrs	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	0007ffff 	.word	0x0007ffff

080025d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6093      	str	r3, [r2, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800260c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002638:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002660:	d101      	bne.n	8002666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <LL_ADC_IsEnabled+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_IsEnabled+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d101      	bne.n	80026b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d101      	bne.n	80026d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e129      	b.n	8002956 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff f90f 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff67 	bl	80025fc <LL_ADC_IsDeepPowerDownEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff4d 	bl	80025d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff82 	bl	800264c <LL_ADC_IsInternalRegulatorEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d115      	bne.n	800277a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff66 	bl	8002624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002758:	4b81      	ldr	r3, [pc, #516]	@ (8002960 <HAL_ADC_Init+0x278>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	4a81      	ldr	r2, [pc, #516]	@ (8002964 <HAL_ADC_Init+0x27c>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800276c:	e002      	b.n	8002774 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3b01      	subs	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f9      	bne.n	800276e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff64 	bl	800264c <LL_ADC_IsInternalRegulatorEnabled>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff75 	bl	800269a <LL_ADC_REG_IsConversionOngoing>
 80027b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 80c2 	bne.w	8002944 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 80be 	bne.w	8002944 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027d0:	f043 0202 	orr.w	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff49 	bl	8002674 <LL_ADC_IsEnabled>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027e8:	485f      	ldr	r0, [pc, #380]	@ (8002968 <HAL_ADC_Init+0x280>)
 80027ea:	f7ff ff43 	bl	8002674 <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4619      	mov	r1, r3
 80027fa:	485c      	ldr	r0, [pc, #368]	@ (800296c <HAL_ADC_Init+0x284>)
 80027fc:	f7ff fdae 	bl	800235c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7e5b      	ldrb	r3, [r3, #25]
 8002804:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800280a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002810:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002816:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d106      	bne.n	800283c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	3b01      	subs	r3, #1
 8002834:	045b      	lsls	r3, r3, #17
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <HAL_ADC_Init+0x288>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	430b      	orrs	r3, r1
 800286a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff25 	bl	80026c0 <LL_ADC_INJ_IsConversionOngoing>
 8002876:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d140      	bne.n	8002900 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d13d      	bne.n	8002900 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7e1b      	ldrb	r3, [r3, #24]
 800288c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800288e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002896:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028a6:	f023 0306 	bic.w	r3, r3, #6
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d118      	bne.n	80028f0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028e0:	430a      	orrs	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	e007      	b.n	8002900 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10c      	bne.n	8002922 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f023 010f 	bic.w	r1, r3, #15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002920:	e007      	b.n	8002932 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 020f 	bic.w	r2, r2, #15
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	659a      	str	r2, [r3, #88]	@ 0x58
 8002942:	e007      	b.n	8002954 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	f043 0210 	orr.w	r2, r3, #16
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002954:	7ffb      	ldrb	r3, [r7, #31]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000
 8002964:	053e2d63 	.word	0x053e2d63
 8002968:	50040000 	.word	0x50040000
 800296c:	50040300 	.word	0x50040300
 8002970:	fff0c007 	.word	0xfff0c007

08002974 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d017      	beq.n	80029ca <HAL_ADC_IRQHandler+0x56>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fdcf 	bl	8003560 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_ADC_IRQHandler+0x6a>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05e      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d059      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fd40 	bl	8002494 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03e      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d135      	bne.n	8002a98 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d12e      	bne.n	8002a98 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fe2b 	bl	800269a <LL_ADC_REG_IsConversionOngoing>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11a      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020c 	bic.w	r2, r2, #12
 8002a58:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d112      	bne.n	8002a98 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a7e:	e00b      	b.n	8002a98 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f043 0210 	orr.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f91f 	bl	8002cdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_ADC_IRQHandler+0x146>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d072      	beq.n	8002baa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06d      	beq.n	8002baa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd11 	bl	8002512 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002af0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fccc 	bl	8002494 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002afc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d047      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_ADC_IRQHandler+0x1b2>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d03f      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d13a      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d133      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12e      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fdbc 	bl	80026c0 <LL_ADC_INJ_IsConversionOngoing>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11a      	bne.n	8002b84 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d112      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b82:	e00b      	b.n	8002b9c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	f043 0210 	orr.w	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fcb7 	bl	8003510 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2260      	movs	r2, #96	@ 0x60
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d011      	beq.n	8002bd8 <HAL_ADC_IRQHandler+0x264>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f890 	bl	8002cf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x294>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fc9d 	bl	8003538 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d012      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x2c4>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fc8f 	bl	800354c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02a      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x324>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d025      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e008      	b.n	8002c6c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10e      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f83a 	bl	8002d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <HAL_ADC_IRQHandler+0x360>
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	f043 0208 	orr.w	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fc28 	bl	8003524 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0b6      	sub	sp, #216	@ 0xd8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x22>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e3d5      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x7ce>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fca7 	bl	800269a <LL_ADC_REG_IsConversionOngoing>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 83ba 	bne.w	80034c8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d824      	bhi.n	8002dae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	3b02      	subs	r3, #2
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d81b      	bhi.n	8002da6 <HAL_ADC_ConfigChannel+0x8e>
 8002d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <HAL_ADC_ConfigChannel+0x5c>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d8d 	.word	0x08002d8d
 8002d7c:	08002d95 	.word	0x08002d95
 8002d80:	08002d9d 	.word	0x08002d9d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d84:	230c      	movs	r3, #12
 8002d86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d8a:	e010      	b.n	8002dae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d8c:	2312      	movs	r3, #18
 8002d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d92:	e00c      	b.n	8002dae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d94:	2318      	movs	r3, #24
 8002d96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d9a:	e008      	b.n	8002dae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002da4:	e003      	b.n	8002dae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002da6:	2306      	movs	r3, #6
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dbc:	f7ff fb7d 	bl	80024ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fc68 	bl	800269a <LL_ADC_REG_IsConversionOngoing>
 8002dca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc74 	bl	80026c0 <LL_ADC_INJ_IsConversionOngoing>
 8002dd8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 81bf 	bne.w	8003164 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 81ba 	bne.w	8003164 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002df8:	d10f      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7ff fb97 	bl	8002538 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fb2b 	bl	800246e <LL_ADC_SetSamplingTimeCommonConfig>
 8002e18:	e00e      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f7ff fb86 	bl	8002538 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fb1b 	bl	800246e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d00a      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e6a:	f7ff faab 	bl	80023c4 <LL_ADC_SetOffset>
 8002e6e:	e179      	b.n	8003164 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fac8 	bl	800240c <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x184>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fabd 	bl	800240c <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	e01e      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1c2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fab2 	bl	800240c <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e004      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002ece:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x1da>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	e018      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x20c>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e004      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002f1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fa81 	bl	8002438 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fa65 	bl	800240c <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x24a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fa5a 	bl	800240c <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	e01e      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x288>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fa4f 	bl	800240c <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e004      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x2a0>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	e018      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2d2>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e004      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fa1e 	bl	8002438 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fa02 	bl	800240c <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x310>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f9f7 	bl	800240c <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	f003 021f 	and.w	r2, r3, #31
 8003026:	e01e      	b.n	8003066 <HAL_ADC_ConfigChannel+0x34e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f9ec 	bl	800240c <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800304a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800304e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e004      	b.n	8003064 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800305a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <HAL_ADC_ConfigChannel+0x366>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	e014      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x390>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800308c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800308e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003092:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e004      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800309e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f9bf 	bl	8002438 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2103      	movs	r1, #3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff f9a3 	bl	800240c <LL_ADC_GetOffsetChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x3ce>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2103      	movs	r1, #3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f998 	bl	800240c <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	e017      	b.n	8003116 <HAL_ADC_ConfigChannel+0x3fe>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2103      	movs	r1, #3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f98d 	bl	800240c <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003100:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e003      	b.n	8003114 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800310c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_ADC_ConfigChannel+0x416>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	e011      	b.n	8003152 <HAL_ADC_ConfigChannel+0x43a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800313c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800313e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e003      	b.n	8003152 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800314a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003152:	429a      	cmp	r2, r3
 8003154:	d106      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	2103      	movs	r1, #3
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f96a 	bl	8002438 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fa83 	bl	8002674 <LL_ADC_IsEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 813f 	bne.w	80033f4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	f7ff fa04 	bl	8002590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a8e      	ldr	r2, [pc, #568]	@ (80033c8 <HAL_ADC_ConfigChannel+0x6b0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	f040 8130 	bne.w	80033f4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x4a4>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	3301      	adds	r3, #1
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2b09      	cmp	r3, #9
 80031b2:	bf94      	ite	ls
 80031b4:	2301      	movls	r3, #1
 80031b6:	2300      	movhi	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e019      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x4d8>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80031d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2b09      	cmp	r3, #9
 80031e8:	bf94      	ite	ls
 80031ea:	2301      	movls	r3, #1
 80031ec:	2300      	movhi	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d079      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x4f8>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	069b      	lsls	r3, r3, #26
 800320a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800320e:	e015      	b.n	800323c <HAL_ADC_ConfigChannel+0x524>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800321e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003220:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800322c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	069b      	lsls	r3, r3, #26
 8003238:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_ConfigChannel+0x544>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	3301      	adds	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	e017      	b.n	800328c <HAL_ADC_ConfigChannel+0x574>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800326e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003274:	2320      	movs	r3, #32
 8003276:	e003      	b.n	8003280 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	ea42 0103 	orr.w	r1, r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x59a>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	051b      	lsls	r3, r3, #20
 80032b0:	e018      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x5cc>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80032ca:	2320      	movs	r3, #32
 80032cc:	e003      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80032ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e4:	430b      	orrs	r3, r1
 80032e6:	e080      	b.n	80033ea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x5ec>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	3301      	adds	r3, #1
 80032fc:	069b      	lsls	r3, r3, #26
 80032fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003302:	e015      	b.n	8003330 <HAL_ADC_ConfigChannel+0x618>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	069b      	lsls	r3, r3, #26
 800332c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x638>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	e017      	b.n	8003380 <HAL_ADC_ConfigChannel+0x668>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	61bb      	str	r3, [r7, #24]
  return result;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e003      	b.n	8003374 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2101      	movs	r1, #1
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	ea42 0103 	orr.w	r1, r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x694>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	3301      	adds	r3, #1
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	3b1e      	subs	r3, #30
 80033a4:	051b      	lsls	r3, r3, #20
 80033a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033aa:	e01d      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x6d0>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	60fb      	str	r3, [r7, #12]
  return result;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e005      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x6bc>
 80033c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	051b      	lsls	r3, r3, #20
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ee:	4619      	mov	r1, r3
 80033f0:	f7ff f8a2 	bl	8002538 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b3d      	ldr	r3, [pc, #244]	@ (80034f0 <HAL_ADC_ConfigChannel+0x7d8>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d06c      	beq.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003400:	483c      	ldr	r0, [pc, #240]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003402:	f7fe ffd1 	bl	80023a8 <LL_ADC_GetCommonPathInternalCh>
 8003406:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3a      	ldr	r2, [pc, #232]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d127      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003418:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d121      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a35      	ldr	r2, [pc, #212]	@ (80034fc <HAL_ADC_ConfigChannel+0x7e4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d157      	bne.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800342a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800342e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003432:	4619      	mov	r1, r3
 8003434:	482f      	ldr	r0, [pc, #188]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003436:	f7fe ffa4 	bl	8002382 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_ADC_ConfigChannel+0x7e8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	4a30      	ldr	r2, [pc, #192]	@ (8003504 <HAL_ADC_ConfigChannel+0x7ec>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003454:	e002      	b.n	800345c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3b01      	subs	r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f9      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003462:	e03a      	b.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a27      	ldr	r2, [pc, #156]	@ (8003508 <HAL_ADC_ConfigChannel+0x7f0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d113      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800346e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1f      	ldr	r2, [pc, #124]	@ (80034fc <HAL_ADC_ConfigChannel+0x7e4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d12a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800348c:	4619      	mov	r1, r3
 800348e:	4819      	ldr	r0, [pc, #100]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003490:	f7fe ff77 	bl	8002382 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003494:	e021      	b.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	@ (800350c <HAL_ADC_ConfigChannel+0x7f4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d11c      	bne.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d116      	bne.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <HAL_ADC_ConfigChannel+0x7e4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d111      	bne.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034be:	4619      	mov	r1, r3
 80034c0:	480c      	ldr	r0, [pc, #48]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034c2:	f7fe ff5e 	bl	8002382 <LL_ADC_SetCommonPathInternalCh>
 80034c6:	e008      	b.n	80034da <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80034e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	37d8      	adds	r7, #216	@ 0xd8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	80080000 	.word	0x80080000
 80034f4:	50040300 	.word	0x50040300
 80034f8:	c7520000 	.word	0xc7520000
 80034fc:	50040000 	.word	0x50040000
 8003500:	20000000 	.word	0x20000000
 8003504:	053e2d63 	.word	0x053e2d63
 8003508:	cb840000 	.word	0xcb840000
 800350c:	80000001 	.word	0x80000001

08003510 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	@ (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	@ (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	@ (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	@ 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	@ 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800373c:	f7ff ff3e 	bl	80035bc <__NVIC_GetPriorityGrouping>
 8003740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff8e 	bl	8003668 <NVIC_EncodePriority>
 800374c:	4602      	mov	r2, r0
 800374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff5d 	bl	8003614 <__NVIC_SetPriority>
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff31 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ffa2 	bl	80036d0 <SysTick_Config>
 800378c:	4603      	mov	r3, r0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e014      	b.n	80037d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d105      	bne.n	80037be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fe f94d 	bl	8001a58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	795b      	ldrb	r3, [r3, #5]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_DAC_ConfigChannel+0x1c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e137      	b.n	8003a68 <HAL_DAC_ConfigChannel+0x28c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2202      	movs	r2, #2
 8003802:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b04      	cmp	r3, #4
 800380a:	f040 8081 	bne.w	8003910 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800380e:	f7fe fd75 	bl	80022fc <HAL_GetTick>
 8003812:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d140      	bne.n	800389c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800381a:	e018      	b.n	800384e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800381c:	f7fe fd6e 	bl	80022fc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d911      	bls.n	800384e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f043 0208 	orr.w	r2, r3, #8
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2203      	movs	r2, #3
 8003848:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e10c      	b.n	8003a68 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1df      	bne.n	800381c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800385c:	2001      	movs	r0, #1
 800385e:	f7fe fd59 	bl	8002314 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	69d2      	ldr	r2, [r2, #28]
 800386a:	641a      	str	r2, [r3, #64]	@ 0x40
 800386c:	e023      	b.n	80038b6 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800386e:	f7fe fd45 	bl	80022fc <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d90f      	bls.n	800389c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003882:	2b00      	cmp	r3, #0
 8003884:	da0a      	bge.n	800389c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2203      	movs	r2, #3
 8003896:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0e5      	b.n	8003a68 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	dbe3      	blt.n	800386e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80038a6:	2001      	movs	r0, #1
 80038a8:	f7fe fd34 	bl	8002314 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	69d2      	ldr	r2, [r2, #28]
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	ea02 0103 	and.w	r1, r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	21ff      	movs	r1, #255	@ 0xff
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	ea02 0103 	and.w	r1, r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d11d      	bne.n	8003954 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	221f      	movs	r2, #31
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	4013      	ands	r3, r2
 8003932:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	4313      	orrs	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2207      	movs	r2, #7
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	4013      	ands	r3, r2
 800396e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	431a      	orrs	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	400a      	ands	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f8:	d104      	bne.n	8003a04 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e018      	b.n	8003a36 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e00f      	b.n	8003a36 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003a16:	f002 f8bb 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8003a1a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4a14      	ldr	r2, [pc, #80]	@ (8003a70 <HAL_DAC_ConfigChannel+0x294>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d904      	bls.n	8003a2e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e003      	b.n	8003a36 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a34:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	22c0      	movs	r2, #192	@ 0xc0
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	400a      	ands	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	04c4b400 	.word	0x04c4b400

08003a74 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0ac      	b.n	8003be0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fc2e 	bl	80042ec <DFSDM_GetChannelFromInstance>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a55      	ldr	r2, [pc, #340]	@ (8003be8 <HAL_DFSDM_ChannelInit+0x174>)
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e09f      	b.n	8003be0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fe f911 	bl	8001cc8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003aa6:	4b51      	ldr	r3, [pc, #324]	@ (8003bec <HAL_DFSDM_ChannelInit+0x178>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a4f      	ldr	r2, [pc, #316]	@ (8003bec <HAL_DFSDM_ChannelInit+0x178>)
 8003aae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8003bec <HAL_DFSDM_ChannelInit+0x178>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d125      	bne.n	8003b04 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4c      	ldr	r2, [pc, #304]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003abe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ac2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4948      	ldr	r1, [pc, #288]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003ad2:	4b47      	ldr	r3, [pc, #284]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a46      	ldr	r2, [pc, #280]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ad8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003adc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	791b      	ldrb	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003ae6:	4b42      	ldr	r3, [pc, #264]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	493f      	ldr	r1, [pc, #252]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003af8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003afe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b02:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003b12:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b22:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b28:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020f 	bic.w	r2, r2, #15
 8003b40:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003b68:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 0207 	and.w	r2, r2, #7
 8003b94:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fb8c 	bl	80042ec <DFSDM_GetChannelFromInstance>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4904      	ldr	r1, [pc, #16]	@ (8003be8 <HAL_DFSDM_ChannelInit+0x174>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20004864 	.word	0x20004864
 8003bec:	20004860 	.word	0x20004860
 8003bf0:	40016000 	.word	0x40016000

08003bf4 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0ca      	b.n	8003dc4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a66      	ldr	r2, [pc, #408]	@ (8003dcc <HAL_DFSDM_FilterInit+0x1b0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d109      	bne.n	8003c4c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d003      	beq.n	8003c48 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0bb      	b.n	8003dc4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fd ff65 	bl	8001b34 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8003c78:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	7a1b      	ldrb	r3, [r3, #8]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e007      	b.n	8003ca4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7a5b      	ldrb	r3, [r3, #9]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d108      	bne.n	8003cbe <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cdc:	f023 0308 	bic.w	r3, r3, #8
 8003ce0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d108      	bne.n	8003cfc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6819      	ldr	r1, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7c1b      	ldrb	r3, [r3, #16]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d108      	bne.n	8003d16 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0210 	orr.w	r2, r2, #16
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e007      	b.n	8003d26 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0210 	bic.w	r2, r2, #16
 8003d24:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7c5b      	ldrb	r3, [r3, #17]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d108      	bne.n	8003d40 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0220 	orr.w	r2, r2, #32
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e007      	b.n	8003d50 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0220 	bic.w	r2, r2, #32
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8003d5e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8003d62:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6959      	ldr	r1, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003d76:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003d7e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7c1a      	ldrb	r2, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40016100 	.word	0x40016100

08003dd0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02e      	beq.n	8003e48 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003df0:	2bff      	cmp	r3, #255	@ 0xff
 8003df2:	d029      	beq.n	8003e48 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e06:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10d      	bne.n	8003e2a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e00a      	b.n	8003e40 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e46:	e001      	b.n	8003e4c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
 8003e7c:	e064      	b.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e8c:	d002      	beq.n	8003e94 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
 8003e92:	e059      	b.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10e      	bne.n	8003eba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
 8003eb8:	e046      	b.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d102      	bne.n	8003eda <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
 8003ed8:	e036      	b.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d004      	beq.n	8003eee <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d12a      	bne.n	8003f44 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	4a17      	ldr	r2, [pc, #92]	@ (8003f58 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003efc:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d101      	bne.n	8003f0c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003f08:	4a14      	ldr	r2, [pc, #80]	@ (8003f5c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003f0a:	e000      	b.n	8003f0e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003f0c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	331c      	adds	r3, #28
 8003f1e:	4619      	mov	r1, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f000 fb2c 	bl	8004580 <HAL_DMA_Start_IT>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d006      	beq.n	8003f3c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	22ff      	movs	r2, #255	@ 0xff
 8003f32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003f3a:	e005      	b.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fa21 	bl	8004384 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003f42:	e001      	b.n	8003f48 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	080042ad 	.word	0x080042ad
 8003f58:	080042c9 	.word	0x080042c9
 8003f5c:	08004291 	.word	0x08004291

08003f60 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08c      	sub	sp, #48	@ 0x30
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00f      	beq.n	8003fa2 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2208      	movs	r2, #8
 8003f92:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f96e 	bl	800427c <HAL_DFSDM_FilterErrorCallback>
 8003fa0:	e13a      	b.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00f      	beq.n	8003fcc <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f959 	bl	800427c <HAL_DFSDM_FilterErrorCallback>
 8003fca:	e125      	b.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d025      	beq.n	8004022 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f921 	bl	8004228 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 8113 	bne.w	8004216 <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 810e 	bne.w	8004216 <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0202 	bic.w	r2, r2, #2
 8004008:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004010:	2b02      	cmp	r3, #2
 8004012:	d101      	bne.n	8004018 <HAL_DFSDM_IRQHandler+0xb8>
 8004014:	2201      	movs	r2, #1
 8004016:	e000      	b.n	800401a <HAL_DFSDM_IRQHandler+0xba>
 8004018:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004020:	e0f9      	b.n	8004216 <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d034      	beq.n	8004096 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02f      	beq.n	8004096 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f90a 	bl	8004250 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 80e4 	bne.w	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004054:	2b00      	cmp	r3, #0
 8004056:	d112      	bne.n	800407e <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 800406e:	2b03      	cmp	r3, #3
 8004070:	d101      	bne.n	8004076 <HAL_DFSDM_IRQHandler+0x116>
 8004072:	2201      	movs	r2, #1
 8004074:	e000      	b.n	8004078 <HAL_DFSDM_IRQHandler+0x118>
 8004076:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_DFSDM_IRQHandler+0x12e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	e000      	b.n	8004090 <HAL_DFSDM_IRQHandler+0x130>
 800408e:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004094:	e0c0      	b.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03d      	beq.n	800411c <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d038      	beq.n	800411c <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80040b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_DFSDM_IRQHandler+0x162>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_DFSDM_IRQHandler+0x164>
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 80040cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80040d2:	e005      	b.n	80040e0 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	3301      	adds	r3, #1
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 80040da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80040e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_DFSDM_IRQHandler+0x190>
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d9f1      	bls.n	80040d4 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_DFSDM_IRQHandler+0x1a2>
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	3308      	adds	r3, #8
 80040fa:	2201      	movs	r2, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	e003      	b.n	800410a <HAL_DFSDM_IRQHandler+0x1aa>
 8004102:	2201      	movs	r2, #1
 8004104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8a5 	bl	8004264 <HAL_DFSDM_FilterAwdCallback>
  {
 800411a:	e07d      	b.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a3f      	ldr	r2, [pc, #252]	@ (8004220 <HAL_DFSDM_IRQHandler+0x2c0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d141      	bne.n	80041aa <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800412c:	2b00      	cmp	r3, #0
 800412e:	d03c      	beq.n	80041aa <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004136:	2b00      	cmp	r3, #0
 8004138:	d037      	beq.n	80041aa <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	b2db      	uxtb	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800414a:	e02a      	b.n	80041a2 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01f      	beq.n	8004196 <HAL_DFSDM_IRQHandler+0x236>
 8004156:	4a33      	ldr	r2, [pc, #204]	@ (8004224 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8004162:	4a30      	ldr	r2, [pc, #192]	@ (8004224 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00f      	beq.n	8004196 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f103 0210 	add.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2101      	movs	r1, #1
 8004182:	fa01 f202 	lsl.w	r2, r1, r2
 8004186:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8004188:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_DFSDM_IRQHandler+0x2c4>)
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fd2f 	bl	8003bf4 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	3301      	adds	r3, #1
 800419a:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	2b07      	cmp	r3, #7
 80041a6:	d9d1      	bls.n	800414c <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80041a8:	e036      	b.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <HAL_DFSDM_IRQHandler+0x2c0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d131      	bne.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041ba:	d32d      	bcc.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d028      	beq.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80041d6:	e005      	b.n	80041e4 <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3301      	adds	r3, #1
 80041dc:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_DFSDM_IRQHandler+0x294>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b06      	cmp	r3, #6
 80041f2:	d9f1      	bls.n	80041d8 <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f103 0218 	add.w	r2, r3, #24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8004206:	4a07      	ldr	r2, [pc, #28]	@ (8004224 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fcfa 	bl	8003c08 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8004214:	e000      	b.n	8004218 <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004216:	bf00      	nop
}
 8004218:	bf00      	nop
 800421a:	3730      	adds	r7, #48	@ 0x30
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40016100 	.word	0x40016100
 8004224:	20004864 	.word	0x20004864

08004228 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ffcc 	bl	800423c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ffb4 	bl	8004228 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2203      	movs	r2, #3
 80042da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7ff ffcd 	bl	800427c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004368 <DFSDM_GetChannelFromInstance+0x7c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d102      	bne.n	8004302 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e02b      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a19      	ldr	r2, [pc, #100]	@ (800436c <DFSDM_GetChannelFromInstance+0x80>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d102      	bne.n	8004310 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e024      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <DFSDM_GetChannelFromInstance+0x84>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d102      	bne.n	800431e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004318:	2302      	movs	r3, #2
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e01d      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a14      	ldr	r2, [pc, #80]	@ (8004374 <DFSDM_GetChannelFromInstance+0x88>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d102      	bne.n	800432c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004326:	2304      	movs	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e016      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <DFSDM_GetChannelFromInstance+0x8c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d102      	bne.n	800433a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004334:	2305      	movs	r3, #5
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e00f      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a0f      	ldr	r2, [pc, #60]	@ (800437c <DFSDM_GetChannelFromInstance+0x90>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d102      	bne.n	8004348 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004342:	2306      	movs	r3, #6
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e008      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0d      	ldr	r2, [pc, #52]	@ (8004380 <DFSDM_GetChannelFromInstance+0x94>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d102      	bne.n	8004356 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004350:	2307      	movs	r3, #7
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e001      	b.n	800435a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004356:	2303      	movs	r3, #3
 8004358:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40016000 	.word	0x40016000
 800436c:	40016020 	.word	0x40016020
 8004370:	40016040 	.word	0x40016040
 8004374:	40016080 	.word	0x40016080
 8004378:	400160a0 	.word	0x400160a0
 800437c:	400160c0 	.word	0x400160c0
 8004380:	400160e0 	.word	0x400160e0

08004384 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004390:	2b00      	cmp	r3, #0
 8004392:	d108      	bne.n	80043a6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e033      	b.n	800440e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80043c4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d116      	bne.n	800440e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0202 	orr.w	r2, r2, #2
 80043f6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <DFSDM_RegConvStart+0x84>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	e000      	b.n	800440a <DFSDM_RegConvStart+0x86>
 8004408:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <DFSDM_RegConvStart+0x98>
 8004418:	2202      	movs	r2, #2
 800441a:	e000      	b.n	800441e <DFSDM_RegConvStart+0x9a>
 800441c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e08d      	b.n	800455e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	4b47      	ldr	r3, [pc, #284]	@ (8004568 <HAL_DMA_Init+0x138>)
 800444a:	429a      	cmp	r2, r3
 800444c:	d80f      	bhi.n	800446e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	4b45      	ldr	r3, [pc, #276]	@ (800456c <HAL_DMA_Init+0x13c>)
 8004456:	4413      	add	r3, r2
 8004458:	4a45      	ldr	r2, [pc, #276]	@ (8004570 <HAL_DMA_Init+0x140>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	009a      	lsls	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a42      	ldr	r2, [pc, #264]	@ (8004574 <HAL_DMA_Init+0x144>)
 800446a:	641a      	str	r2, [r3, #64]	@ 0x40
 800446c:	e00e      	b.n	800448c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	4b40      	ldr	r3, [pc, #256]	@ (8004578 <HAL_DMA_Init+0x148>)
 8004476:	4413      	add	r3, r2
 8004478:	4a3d      	ldr	r2, [pc, #244]	@ (8004570 <HAL_DMA_Init+0x140>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	009a      	lsls	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a3c      	ldr	r2, [pc, #240]	@ (800457c <HAL_DMA_Init+0x14c>)
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9b6 	bl	8004850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ec:	d102      	bne.n	80044f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004508:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_DMA_Init+0x104>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d80c      	bhi.n	8004534 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f9d6 	bl	80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e008      	b.n	8004546 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40020407 	.word	0x40020407
 800456c:	bffdfff8 	.word	0xbffdfff8
 8004570:	cccccccd 	.word	0xcccccccd
 8004574:	40020000 	.word	0x40020000
 8004578:	bffdfbf8 	.word	0xbffdfbf8
 800457c:	40020400 	.word	0x40020400

08004580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_DMA_Start_IT+0x20>
 800459c:	2302      	movs	r3, #2
 800459e:	e066      	b.n	800466e <HAL_DMA_Start_IT+0xee>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d155      	bne.n	8004660 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8fb 	bl	80047d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 020e 	orr.w	r2, r2, #14
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e00f      	b.n	8004618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 020a 	orr.w	r2, r2, #10
 8004616:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004634:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800464c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e005      	b.n	800466c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	f003 031c 	and.w	r3, r3, #28
 8004696:	2204      	movs	r2, #4
 8004698:	409a      	lsls	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d026      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7a>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d021      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0204 	bic.w	r2, r2, #4
 80046c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f003 021c 	and.w	r2, r3, #28
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	2104      	movs	r1, #4
 80046d8:	fa01 f202 	lsl.w	r2, r1, r2
 80046dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d071      	beq.n	80047ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046ee:	e06c      	b.n	80047ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f4:	f003 031c 	and.w	r3, r3, #28
 80046f8:	2202      	movs	r2, #2
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02e      	beq.n	8004762 <HAL_DMA_IRQHandler+0xec>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d029      	beq.n	8004762 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 020a 	bic.w	r2, r2, #10
 800472a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004738:	f003 021c 	and.w	r2, r3, #28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	2102      	movs	r1, #2
 8004742:	fa01 f202 	lsl.w	r2, r1, r2
 8004746:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d038      	beq.n	80047ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004760:	e033      	b.n	80047ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	f003 031c 	and.w	r3, r3, #28
 800476a:	2208      	movs	r2, #8
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02a      	beq.n	80047cc <HAL_DMA_IRQHandler+0x156>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d025      	beq.n	80047cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 020e 	bic.w	r2, r2, #14
 800478e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	f003 021c 	and.w	r2, r3, #28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f202 	lsl.w	r2, r1, r2
 80047a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
}
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047fc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f003 021c 	and.w	r2, r3, #28
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b10      	cmp	r3, #16
 8004820:	d108      	bne.n	8004834 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004832:	e007      	b.n	8004844 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d80a      	bhi.n	800487a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004870:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6493      	str	r3, [r2, #72]	@ 0x48
 8004878:	e007      	b.n	800488a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	009a      	lsls	r2, r3, #2
 8004882:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004884:	4413      	add	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	3b08      	subs	r3, #8
 8004892:	4a0c      	ldr	r2, [pc, #48]	@ (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40020407 	.word	0x40020407
 80048c0:	4002081c 	.word	0x4002081c
 80048c4:	cccccccd 	.word	0xcccccccd
 80048c8:	40020880 	.word	0x40020880

080048cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	1000823f 	.word	0x1000823f
 8004910:	40020940 	.word	0x40020940

08004914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004922:	e166      	b.n	8004bf2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	2101      	movs	r1, #1
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8158 	beq.w	8004bec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d005      	beq.n	8004954 <HAL_GPIO_Init+0x40>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d130      	bne.n	80049b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800498a:	2201      	movs	r2, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 0201 	and.w	r2, r3, #1
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d017      	beq.n	80049f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d123      	bne.n	8004a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	08da      	lsrs	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3208      	adds	r2, #8
 8004a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	08da      	lsrs	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3208      	adds	r2, #8
 8004a40:	6939      	ldr	r1, [r7, #16]
 8004a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0203 	and.w	r2, r3, #3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80b2 	beq.w	8004bec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a88:	4b61      	ldr	r3, [pc, #388]	@ (8004c10 <HAL_GPIO_Init+0x2fc>)
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8c:	4a60      	ldr	r2, [pc, #384]	@ (8004c10 <HAL_GPIO_Init+0x2fc>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a94:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <HAL_GPIO_Init+0x2fc>)
 8004a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8004c14 <HAL_GPIO_Init+0x300>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	089b      	lsrs	r3, r3, #2
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004aca:	d02b      	beq.n	8004b24 <HAL_GPIO_Init+0x210>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a52      	ldr	r2, [pc, #328]	@ (8004c18 <HAL_GPIO_Init+0x304>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d025      	beq.n	8004b20 <HAL_GPIO_Init+0x20c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a51      	ldr	r2, [pc, #324]	@ (8004c1c <HAL_GPIO_Init+0x308>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01f      	beq.n	8004b1c <HAL_GPIO_Init+0x208>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a50      	ldr	r2, [pc, #320]	@ (8004c20 <HAL_GPIO_Init+0x30c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d019      	beq.n	8004b18 <HAL_GPIO_Init+0x204>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8004c24 <HAL_GPIO_Init+0x310>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_GPIO_Init+0x200>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a4e      	ldr	r2, [pc, #312]	@ (8004c28 <HAL_GPIO_Init+0x314>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00d      	beq.n	8004b10 <HAL_GPIO_Init+0x1fc>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a4d      	ldr	r2, [pc, #308]	@ (8004c2c <HAL_GPIO_Init+0x318>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <HAL_GPIO_Init+0x1f8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a4c      	ldr	r2, [pc, #304]	@ (8004c30 <HAL_GPIO_Init+0x31c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <HAL_GPIO_Init+0x1f4>
 8004b04:	2307      	movs	r3, #7
 8004b06:	e00e      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	e00c      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	e00a      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b10:	2305      	movs	r3, #5
 8004b12:	e008      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e006      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e004      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e002      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_GPIO_Init+0x212>
 8004b24:	2300      	movs	r3, #0
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	f002 0203 	and.w	r2, r2, #3
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	4093      	lsls	r3, r2
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b36:	4937      	ldr	r1, [pc, #220]	@ (8004c14 <HAL_GPIO_Init+0x300>)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b44:	4b3b      	ldr	r3, [pc, #236]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b68:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b6e:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	43db      	mvns	r3, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b92:	4a28      	ldr	r2, [pc, #160]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b98:	4b26      	ldr	r3, [pc, #152]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004be6:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <HAL_GPIO_Init+0x320>)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f47f ae91 	bne.w	8004924 <HAL_GPIO_Init+0x10>
  }
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40010000 	.word	0x40010000
 8004c18:	48000400 	.word	0x48000400
 8004c1c:	48000800 	.word	0x48000800
 8004c20:	48000c00 	.word	0x48000c00
 8004c24:	48001000 	.word	0x48001000
 8004c28:	48001400 	.word	0x48001400
 8004c2c:	48001800 	.word	0x48001800
 8004c30:	48001c00 	.word	0x48001c00
 8004c34:	40010400 	.word	0x40010400

08004c38 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0c3      	b.n	8004dd6 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d101      	bne.n	8004c5e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0bb      	b.n	8004dd6 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d101      	bne.n	8004c6e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0b3      	b.n	8004dd6 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fd f8a0 	bl	8001dd0 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c9e:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 8004cb2:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6891      	ldr	r1, [r2, #8]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68d2      	ldr	r2, [r2, #12]
 8004cbe:	4311      	orrs	r1, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6992      	ldr	r2, [r2, #24]
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6912      	ldr	r2, [r2, #16]
 8004cca:	4311      	orrs	r1, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6952      	ldr	r2, [r2, #20]
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	69d2      	ldr	r2, [r2, #28]
 8004cd6:	4311      	orrs	r1, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d115      	bne.n	8004d14 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8004cf2:	f023 030e 	bic.w	r3, r3, #14
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6891      	ldr	r1, [r2, #8]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	4311      	orrs	r1, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6952      	ldr	r2, [r2, #20]
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	69d2      	ldr	r2, [r2, #28]
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d118      	bne.n	8004d4e <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 8004d26:	f023 030e 	bic.w	r3, r3, #14
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6891      	ldr	r1, [r2, #8]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6912      	ldr	r2, [r2, #16]
 8004d38:	4311      	orrs	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6952      	ldr	r2, [r2, #20]
 8004d3e:	4311      	orrs	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	69d2      	ldr	r2, [r2, #28]
 8004d44:	4311      	orrs	r1, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d56:	d12a      	bne.n	8004dae <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d013      	beq.n	8004d88 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004d78:	f023 031f 	bic.w	r3, r3, #31
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	430b      	orrs	r3, r1
 8004d84:	6053      	str	r3, [r2, #4]
 8004d86:	e012      	b.n	8004dae <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004da0:	f023 031f 	bic.w	r3, r3, #31
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8004dae:	4b0c      	ldr	r3, [pc, #48]	@ (8004de0 <HAL_OPAMP_Init+0x1a8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4909      	ldr	r1, [pc, #36]	@ (8004de0 <HAL_OPAMP_Init+0x1a8>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40007800 	.word	0x40007800

08004de4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e01d      	b.n	8004e38 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	d102      	bne.n	8004e0e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e014      	b.n	8004e38 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10c      	bne.n	8004e34 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004e32:	e001      	b.n	8004e38 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e58:	d102      	bne.n	8004e60 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e5e:	e00b      	b.n	8004e78 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e60:	4b08      	ldr	r3, [pc, #32]	@ (8004e84 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6e:	d102      	bne.n	8004e76 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e74:	e000      	b.n	8004e78 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004e76:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40007000 	.word	0x40007000

08004e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d141      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e96:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea2:	d131      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea4:	4b47      	ldr	r3, [pc, #284]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eaa:	4a46      	ldr	r2, [pc, #280]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb4:	4b43      	ldr	r3, [pc, #268]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ebc:	4a41      	ldr	r2, [pc, #260]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ec4:	4b40      	ldr	r3, [pc, #256]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2232      	movs	r2, #50	@ 0x32
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	4a3f      	ldr	r2, [pc, #252]	@ (8004fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	0c9b      	lsrs	r3, r3, #18
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eda:	e002      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee2:	4b38      	ldr	r3, [pc, #224]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eee:	d102      	bne.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f2      	bne.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ef6:	4b33      	ldr	r3, [pc, #204]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f02:	d158      	bne.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e057      	b.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f08:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f18:	e04d      	b.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f20:	d141      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f22:	4b28      	ldr	r3, [pc, #160]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d131      	bne.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f30:	4b24      	ldr	r3, [pc, #144]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f36:	4a23      	ldr	r2, [pc, #140]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f40:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f48:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2232      	movs	r2, #50	@ 0x32
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	0c9b      	lsrs	r3, r3, #18
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f66:	e002      	b.n	8004f6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6e:	4b15      	ldr	r3, [pc, #84]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7a:	d102      	bne.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f2      	bne.n	8004f68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f82:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8e:	d112      	bne.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e011      	b.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fa4:	e007      	b.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fa6:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fae:	4a05      	ldr	r2, [pc, #20]	@ (8004fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fb4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	431bde83 	.word	0x431bde83

08004fd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f000 bc08 	b.w	80057f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe4:	4b96      	ldr	r3, [pc, #600]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fee:	4b94      	ldr	r3, [pc, #592]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80e4 	beq.w	80051ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <HAL_RCC_OscConfig+0x4c>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2b0c      	cmp	r3, #12
 8005010:	f040 808b 	bne.w	800512a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b01      	cmp	r3, #1
 8005018:	f040 8087 	bne.w	800512a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800501c:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_OscConfig+0x64>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e3df      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	4b81      	ldr	r3, [pc, #516]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <HAL_RCC_OscConfig+0x7e>
 8005044:	4b7e      	ldr	r3, [pc, #504]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800504c:	e005      	b.n	800505a <HAL_RCC_OscConfig+0x8a>
 800504e:	4b7c      	ldr	r3, [pc, #496]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800505a:	4293      	cmp	r3, r2
 800505c:	d223      	bcs.n	80050a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fdcc 	bl	8005c00 <RCC_SetFlashLatencyFromMSIRange>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e3c0      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005072:	4b73      	ldr	r3, [pc, #460]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a72      	ldr	r2, [pc, #456]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005078:	f043 0308 	orr.w	r3, r3, #8
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b70      	ldr	r3, [pc, #448]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	496d      	ldr	r1, [pc, #436]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005090:	4b6b      	ldr	r3, [pc, #428]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	4968      	ldr	r1, [pc, #416]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
 80050a4:	e025      	b.n	80050f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a6:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a65      	ldr	r2, [pc, #404]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050ac:	f043 0308 	orr.w	r3, r3, #8
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b63      	ldr	r3, [pc, #396]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	4960      	ldr	r1, [pc, #384]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	495b      	ldr	r1, [pc, #364]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fd8c 	bl	8005c00 <RCC_SetFlashLatencyFromMSIRange>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e380      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050f2:	f000 fcc1 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b51      	ldr	r3, [pc, #324]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	4950      	ldr	r1, [pc, #320]	@ (8005244 <HAL_RCC_OscConfig+0x274>)
 8005104:	5ccb      	ldrb	r3, [r1, r3]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	4a4e      	ldr	r2, [pc, #312]	@ (8005248 <HAL_RCC_OscConfig+0x278>)
 8005110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005112:	4b4e      	ldr	r3, [pc, #312]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd f8a0 	bl	800225c <HAL_InitTick>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d052      	beq.n	80051cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	e364      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d032      	beq.n	8005198 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005132:	4b43      	ldr	r3, [pc, #268]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a42      	ldr	r2, [pc, #264]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800513e:	f7fd f8dd 	bl	80022fc <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005146:	f7fd f8d9 	bl	80022fc <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e34d      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005158:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005164:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a35      	ldr	r2, [pc, #212]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800516a:	f043 0308 	orr.w	r3, r3, #8
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b33      	ldr	r3, [pc, #204]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	4930      	ldr	r1, [pc, #192]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005182:	4b2f      	ldr	r3, [pc, #188]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	492b      	ldr	r1, [pc, #172]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
 8005196:	e01a      	b.n	80051ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005198:	4b29      	ldr	r3, [pc, #164]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a28      	ldr	r2, [pc, #160]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051a4:	f7fd f8aa 	bl	80022fc <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ac:	f7fd f8a6 	bl	80022fc <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e31a      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051be:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x1dc>
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d073      	beq.n	80052c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d005      	beq.n	80051ec <HAL_RCC_OscConfig+0x21c>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d10e      	bne.n	8005204 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b14      	ldr	r3, [pc, #80]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d063      	beq.n	80052c0 <HAL_RCC_OscConfig+0x2f0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d15f      	bne.n	80052c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e2f7      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x24c>
 800520e:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a0b      	ldr	r2, [pc, #44]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e025      	b.n	8005268 <HAL_RCC_OscConfig+0x298>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005224:	d114      	bne.n	8005250 <HAL_RCC_OscConfig+0x280>
 8005226:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b03      	ldr	r3, [pc, #12]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a02      	ldr	r2, [pc, #8]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e013      	b.n	8005268 <HAL_RCC_OscConfig+0x298>
 8005240:	40021000 	.word	0x40021000
 8005244:	0800ab00 	.word	0x0800ab00
 8005248:	20000000 	.word	0x20000000
 800524c:	20000004 	.word	0x20000004
 8005250:	4ba0      	ldr	r3, [pc, #640]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a9f      	ldr	r2, [pc, #636]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	4b9d      	ldr	r3, [pc, #628]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a9c      	ldr	r2, [pc, #624]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d013      	beq.n	8005298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd f844 	bl	80022fc <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005278:	f7fd f840 	bl	80022fc <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	@ 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e2b4      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800528a:	4b92      	ldr	r3, [pc, #584]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x2a8>
 8005296:	e014      	b.n	80052c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd f830 	bl	80022fc <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a0:	f7fd f82c 	bl	80022fc <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	@ 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e2a0      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052b2:	4b88      	ldr	r3, [pc, #544]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x2d0>
 80052be:	e000      	b.n	80052c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d060      	beq.n	8005390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d005      	beq.n	80052e0 <HAL_RCC_OscConfig+0x310>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b0c      	cmp	r3, #12
 80052d8:	d119      	bne.n	800530e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d116      	bne.n	800530e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e0:	4b7c      	ldr	r3, [pc, #496]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_OscConfig+0x328>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e27d      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f8:	4b76      	ldr	r3, [pc, #472]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	4973      	ldr	r1, [pc, #460]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530c:	e040      	b.n	8005390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d023      	beq.n	800535e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005316:	4b6f      	ldr	r3, [pc, #444]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6e      	ldr	r2, [pc, #440]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc ffeb 	bl	80022fc <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532a:	f7fc ffe7 	bl	80022fc <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e25b      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533c:	4b65      	ldr	r3, [pc, #404]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	4b62      	ldr	r3, [pc, #392]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	495f      	ldr	r1, [pc, #380]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
 800535c:	e018      	b.n	8005390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535e:	4b5d      	ldr	r3, [pc, #372]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a5c      	ldr	r2, [pc, #368]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fc ffc7 	bl	80022fc <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005372:	f7fc ffc3 	bl	80022fc <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e237      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005384:	4b53      	ldr	r3, [pc, #332]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d03c      	beq.n	8005416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01c      	beq.n	80053de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a4:	4b4b      	ldr	r3, [pc, #300]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80053a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053aa:	4a4a      	ldr	r2, [pc, #296]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fc ffa2 	bl	80022fc <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053bc:	f7fc ff9e 	bl	80022fc <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e212      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053ce:	4b41      	ldr	r3, [pc, #260]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80053d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <HAL_RCC_OscConfig+0x3ec>
 80053dc:	e01b      	b.n	8005416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053de:	4b3d      	ldr	r3, [pc, #244]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e4:	4a3b      	ldr	r2, [pc, #236]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fc ff85 	bl	80022fc <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fc ff81 	bl	80022fc <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1f5      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005408:	4b32      	ldr	r3, [pc, #200]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ef      	bne.n	80053f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a6 	beq.w	8005570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005428:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005434:	4b27      	ldr	r3, [pc, #156]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005438:	4a26      	ldr	r2, [pc, #152]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800543a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005440:	4b24      	ldr	r3, [pc, #144]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800544c:	2301      	movs	r3, #1
 800544e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005450:	4b21      	ldr	r3, [pc, #132]	@ (80054d8 <HAL_RCC_OscConfig+0x508>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d118      	bne.n	800548e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545c:	4b1e      	ldr	r3, [pc, #120]	@ (80054d8 <HAL_RCC_OscConfig+0x508>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <HAL_RCC_OscConfig+0x508>)
 8005462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005468:	f7fc ff48 	bl	80022fc <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005470:	f7fc ff44 	bl	80022fc <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e1b8      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005482:	4b15      	ldr	r3, [pc, #84]	@ (80054d8 <HAL_RCC_OscConfig+0x508>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d108      	bne.n	80054a8 <HAL_RCC_OscConfig+0x4d8>
 8005496:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549c:	4a0d      	ldr	r2, [pc, #52]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a6:	e029      	b.n	80054fc <HAL_RCC_OscConfig+0x52c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b05      	cmp	r3, #5
 80054ae:	d115      	bne.n	80054dc <HAL_RCC_OscConfig+0x50c>
 80054b0:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	4a07      	ldr	r2, [pc, #28]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054c0:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	4a03      	ldr	r2, [pc, #12]	@ (80054d4 <HAL_RCC_OscConfig+0x504>)
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054d0:	e014      	b.n	80054fc <HAL_RCC_OscConfig+0x52c>
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40007000 	.word	0x40007000
 80054dc:	4b9d      	ldr	r3, [pc, #628]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	4a9c      	ldr	r2, [pc, #624]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ec:	4b99      	ldr	r3, [pc, #612]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	4a98      	ldr	r2, [pc, #608]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fc fefa 	bl	80022fc <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fc fef6 	bl	80022fc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e168      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005522:	4b8c      	ldr	r3, [pc, #560]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ed      	beq.n	800550c <HAL_RCC_OscConfig+0x53c>
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005532:	f7fc fee3 	bl	80022fc <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005538:	e00a      	b.n	8005550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fc fedf 	bl	80022fc <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e151      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005550:	4b80      	ldr	r3, [pc, #512]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ed      	bne.n	800553a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800555e:	7ffb      	ldrb	r3, [r7, #31]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b7b      	ldr	r3, [pc, #492]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	4a7a      	ldr	r2, [pc, #488]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800556e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d03c      	beq.n	80055f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01c      	beq.n	80055be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005584:	4b73      	ldr	r3, [pc, #460]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558a:	4a72      	ldr	r2, [pc, #456]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fc feb2 	bl	80022fc <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559c:	f7fc feae 	bl	80022fc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e122      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ae:	4b69      	ldr	r3, [pc, #420]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80055b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0ef      	beq.n	800559c <HAL_RCC_OscConfig+0x5cc>
 80055bc:	e01b      	b.n	80055f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055be:	4b65      	ldr	r3, [pc, #404]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80055c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c4:	4a63      	ldr	r2, [pc, #396]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ce:	f7fc fe95 	bl	80022fc <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d6:	f7fc fe91 	bl	80022fc <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e105      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80055ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ef      	bne.n	80055d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80f9 	beq.w	80057f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	2b02      	cmp	r3, #2
 8005606:	f040 80cf 	bne.w	80057a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800560a:	4b52      	ldr	r3, [pc, #328]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 0203 	and.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	429a      	cmp	r2, r3
 800561c:	d12c      	bne.n	8005678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	3b01      	subs	r3, #1
 800562a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d123      	bne.n	8005678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800563c:	429a      	cmp	r2, r3
 800563e:	d11b      	bne.n	8005678 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d113      	bne.n	8005678 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	3b01      	subs	r3, #1
 800565e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005660:	429a      	cmp	r2, r3
 8005662:	d109      	bne.n	8005678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	3b01      	subs	r3, #1
 8005672:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d071      	beq.n	800575c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b0c      	cmp	r3, #12
 800567c:	d068      	beq.n	8005750 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800567e:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d105      	bne.n	8005696 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800568a:	4b32      	ldr	r3, [pc, #200]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0ac      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800569a:	4b2e      	ldr	r3, [pc, #184]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2d      	ldr	r2, [pc, #180]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80056a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056a6:	f7fc fe29 	bl	80022fc <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fc fe25 	bl	80022fc <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e099      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c0:	4b24      	ldr	r3, [pc, #144]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	4b21      	ldr	r3, [pc, #132]	@ (8005758 <HAL_RCC_OscConfig+0x788>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056dc:	3a01      	subs	r2, #1
 80056de:	0112      	lsls	r2, r2, #4
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056e6:	0212      	lsls	r2, r2, #8
 80056e8:	4311      	orrs	r1, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056ee:	0852      	lsrs	r2, r2, #1
 80056f0:	3a01      	subs	r2, #1
 80056f2:	0552      	lsls	r2, r2, #21
 80056f4:	4311      	orrs	r1, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056fa:	0852      	lsrs	r2, r2, #1
 80056fc:	3a01      	subs	r2, #1
 80056fe:	0652      	lsls	r2, r2, #25
 8005700:	4311      	orrs	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005706:	06d2      	lsls	r2, r2, #27
 8005708:	430a      	orrs	r2, r1
 800570a:	4912      	ldr	r1, [pc, #72]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800570c:	4313      	orrs	r3, r2
 800570e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005710:	4b10      	ldr	r3, [pc, #64]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0f      	ldr	r2, [pc, #60]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800571a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800571c:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4a0c      	ldr	r2, [pc, #48]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005728:	f7fc fde8 	bl	80022fc <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005730:	f7fc fde4 	bl	80022fc <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e058      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005742:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <HAL_RCC_OscConfig+0x784>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800574e:	e050      	b.n	80057f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e04f      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
 8005754:	40021000 	.word	0x40021000
 8005758:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575c:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d144      	bne.n	80057f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005768:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a23      	ldr	r2, [pc, #140]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 800576e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005772:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005774:	4b21      	ldr	r3, [pc, #132]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4a20      	ldr	r2, [pc, #128]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 800577a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800577e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005780:	f7fc fdbc 	bl	80022fc <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005788:	f7fc fdb8 	bl	80022fc <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e02c      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579a:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0x7b8>
 80057a6:	e024      	b.n	80057f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d01f      	beq.n	80057ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ae:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a12      	ldr	r2, [pc, #72]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 80057b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7fc fd9f 	bl	80022fc <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c2:	f7fc fd9b 	bl	80022fc <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e00f      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d4:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f0      	bne.n	80057c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057e0:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	4905      	ldr	r1, [pc, #20]	@ (80057fc <HAL_RCC_OscConfig+0x82c>)
 80057e6:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <HAL_RCC_OscConfig+0x830>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60cb      	str	r3, [r1, #12]
 80057ec:	e001      	b.n	80057f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40021000 	.word	0x40021000
 8005800:	feeefffc 	.word	0xfeeefffc

08005804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e11d      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800581c:	4b90      	ldr	r3, [pc, #576]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d910      	bls.n	800584c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 020f 	bic.w	r2, r3, #15
 8005832:	498b      	ldr	r1, [pc, #556]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	4313      	orrs	r3, r2
 8005838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b89      	ldr	r3, [pc, #548]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e105      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d010      	beq.n	800587a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	4b81      	ldr	r3, [pc, #516]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005864:	429a      	cmp	r2, r3
 8005866:	d908      	bls.n	800587a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005868:	4b7e      	ldr	r3, [pc, #504]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	497b      	ldr	r1, [pc, #492]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d079      	beq.n	800597a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d11e      	bne.n	80058cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588e:	4b75      	ldr	r3, [pc, #468]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0dc      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800589e:	f000 fa09 	bl	8005cb4 <RCC_GetSysClockFreqFromPLLSource>
 80058a2:	4603      	mov	r3, r0
 80058a4:	4a70      	ldr	r2, [pc, #448]	@ (8005a68 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d946      	bls.n	8005938 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058aa:	4b6e      	ldr	r3, [pc, #440]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d140      	bne.n	8005938 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058b6:	4b6b      	ldr	r3, [pc, #428]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058be:	4a69      	ldr	r2, [pc, #420]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80058c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058c6:	2380      	movs	r3, #128	@ 0x80
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e035      	b.n	8005938 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d107      	bne.n	80058e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058d4:	4b63      	ldr	r3, [pc, #396]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d115      	bne.n	800590c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0b9      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d107      	bne.n	80058fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058ec:	4b5d      	ldr	r3, [pc, #372]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0ad      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fc:	4b59      	ldr	r3, [pc, #356]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0a5      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800590c:	f000 f8b4 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005910:	4603      	mov	r3, r0
 8005912:	4a55      	ldr	r2, [pc, #340]	@ (8005a68 <HAL_RCC_ClockConfig+0x264>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d90f      	bls.n	8005938 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005918:	4b52      	ldr	r3, [pc, #328]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005924:	4b4f      	ldr	r3, [pc, #316]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800592c:	4a4d      	ldr	r2, [pc, #308]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800592e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005932:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005938:	4b4a      	ldr	r3, [pc, #296]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 0203 	bic.w	r2, r3, #3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4947      	ldr	r1, [pc, #284]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fc fcd7 	bl	80022fc <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005950:	e00a      	b.n	8005968 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005952:	f7fc fcd3 	bl	80022fc <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e077      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005968:	4b3e      	ldr	r3, [pc, #248]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 020c 	and.w	r2, r3, #12
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	429a      	cmp	r2, r3
 8005978:	d1eb      	bne.n	8005952 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b80      	cmp	r3, #128	@ 0x80
 800597e:	d105      	bne.n	800598c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005980:	4b38      	ldr	r3, [pc, #224]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4a37      	ldr	r2, [pc, #220]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800598a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d010      	beq.n	80059ba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	4b31      	ldr	r3, [pc, #196]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d208      	bcs.n	80059ba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	492b      	ldr	r1, [pc, #172]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ba:	4b29      	ldr	r3, [pc, #164]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d210      	bcs.n	80059ea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c8:	4b25      	ldr	r3, [pc, #148]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f023 020f 	bic.w	r2, r3, #15
 80059d0:	4923      	ldr	r1, [pc, #140]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d8:	4b21      	ldr	r3, [pc, #132]	@ (8005a60 <HAL_RCC_ClockConfig+0x25c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d001      	beq.n	80059ea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e036      	b.n	8005a58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4918      	ldr	r1, [pc, #96]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4910      	ldr	r1, [pc, #64]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a28:	f000 f826 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <HAL_RCC_ClockConfig+0x260>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	490c      	ldr	r1, [pc, #48]	@ (8005a6c <HAL_RCC_ClockConfig+0x268>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
 8005a44:	4a0a      	ldr	r2, [pc, #40]	@ (8005a70 <HAL_RCC_ClockConfig+0x26c>)
 8005a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a48:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <HAL_RCC_ClockConfig+0x270>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fc fc05 	bl	800225c <HAL_InitTick>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40022000 	.word	0x40022000
 8005a64:	40021000 	.word	0x40021000
 8005a68:	04c4b400 	.word	0x04c4b400
 8005a6c:	0800ab00 	.word	0x0800ab00
 8005a70:	20000000 	.word	0x20000000
 8005a74:	20000004 	.word	0x20000004

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a86:	4b3e      	ldr	r3, [pc, #248]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a90:	4b3b      	ldr	r3, [pc, #236]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x34>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d121      	bne.n	8005aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d11e      	bne.n	8005aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005aac:	4b34      	ldr	r3, [pc, #208]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ab8:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d102      	bne.n	8005af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005af0:	4b25      	ldr	r3, [pc, #148]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e004      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d101      	bne.n	8005b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005afc:	4b23      	ldr	r3, [pc, #140]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8005afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d134      	bne.n	8005b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b06:	4b1e      	ldr	r3, [pc, #120]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d003      	beq.n	8005b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d003      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0xac>
 8005b1c:	e005      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b20:	617b      	str	r3, [r7, #20]
      break;
 8005b22:	e005      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b24:	4b19      	ldr	r3, [pc, #100]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8005b26:	617b      	str	r3, [r7, #20]
      break;
 8005b28:	e002      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	617b      	str	r3, [r7, #20]
      break;
 8005b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b30:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	fb03 f202 	mul.w	r2, r3, r2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b56:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	0e5b      	lsrs	r3, r3, #25
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	3301      	adds	r3, #1
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b70:	69bb      	ldr	r3, [r7, #24]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3724      	adds	r7, #36	@ 0x24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000
 8005b84:	0800ab18 	.word	0x0800ab18
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	007a1200 	.word	0x007a1200

08005b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b94:	4b03      	ldr	r3, [pc, #12]	@ (8005ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b96:	681b      	ldr	r3, [r3, #0]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000000 	.word	0x20000000

08005ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bac:	f7ff fff0 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	4904      	ldr	r1, [pc, #16]	@ (8005bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	0800ab10 	.word	0x0800ab10

08005bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bd8:	f7ff ffda 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0adb      	lsrs	r3, r3, #11
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4904      	ldr	r1, [pc, #16]	@ (8005bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	0800ab10 	.word	0x0800ab10

08005c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c0c:	4b27      	ldr	r3, [pc, #156]	@ (8005cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c18:	f7ff f916 	bl	8004e48 <HAL_PWREx_GetVoltageRange>
 8005c1c:	6178      	str	r0, [r7, #20]
 8005c1e:	e014      	b.n	8005c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c20:	4b22      	ldr	r3, [pc, #136]	@ (8005cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	4a21      	ldr	r2, [pc, #132]	@ (8005cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c38:	f7ff f906 	bl	8004e48 <HAL_PWREx_GetVoltageRange>
 8005c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4a1a      	ldr	r2, [pc, #104]	@ (8005cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c50:	d10b      	bne.n	8005c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b80      	cmp	r3, #128	@ 0x80
 8005c56:	d913      	bls.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c5c:	d902      	bls.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c5e:	2302      	movs	r3, #2
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	e00d      	b.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c64:	2301      	movs	r3, #1
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	e00a      	b.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c6e:	d902      	bls.n	8005c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c70:	2302      	movs	r3, #2
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e004      	b.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b70      	cmp	r3, #112	@ 0x70
 8005c7a:	d101      	bne.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f023 020f 	bic.w	r2, r3, #15
 8005c88:	4909      	ldr	r1, [pc, #36]	@ (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c90:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d001      	beq.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40022000 	.word	0x40022000

08005cb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cba:	4b2d      	ldr	r3, [pc, #180]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d00b      	beq.n	8005ce2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d825      	bhi.n	8005d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d008      	beq.n	8005ce8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d11f      	bne.n	8005d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005cdc:	4b25      	ldr	r3, [pc, #148]	@ (8005d74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cde:	613b      	str	r3, [r7, #16]
    break;
 8005ce0:	e01f      	b.n	8005d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005ce2:	4b25      	ldr	r3, [pc, #148]	@ (8005d78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005ce4:	613b      	str	r3, [r7, #16]
    break;
 8005ce6:	e01c      	b.n	8005d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ce8:	4b21      	ldr	r3, [pc, #132]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d107      	bne.n	8005d04 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	e005      	b.n	8005d10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d04:	4b1a      	ldr	r3, [pc, #104]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005d10:	4a1a      	ldr	r2, [pc, #104]	@ (8005d7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d18:	613b      	str	r3, [r7, #16]
    break;
 8005d1a:	e002      	b.n	8005d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
    break;
 8005d20:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d22:	4b13      	ldr	r3, [pc, #76]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d30:	4b0f      	ldr	r3, [pc, #60]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	fb03 f202 	mul.w	r2, r3, r2
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d48:	4b09      	ldr	r3, [pc, #36]	@ (8005d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	0e5b      	lsrs	r3, r3, #25
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	3301      	adds	r3, #1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d62:	683b      	ldr	r3, [r7, #0]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40021000 	.word	0x40021000
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	007a1200 	.word	0x007a1200
 8005d7c:	0800ab18 	.word	0x0800ab18

08005d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d88:	2300      	movs	r3, #0
 8005d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d040      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da0:	2b80      	cmp	r3, #128	@ 0x80
 8005da2:	d02a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005da4:	2b80      	cmp	r3, #128	@ 0x80
 8005da6:	d825      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005da8:	2b60      	cmp	r3, #96	@ 0x60
 8005daa:	d026      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005dac:	2b60      	cmp	r3, #96	@ 0x60
 8005dae:	d821      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d006      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005db4:	2b40      	cmp	r3, #64	@ 0x40
 8005db6:	d81d      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d009      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d010      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005dc0:	e018      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dc2:	4b89      	ldr	r3, [pc, #548]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4a88      	ldr	r2, [pc, #544]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dcc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dce:	e015      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fb02 	bl	80063e0 <RCCEx_PLLSAI1_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005de0:	e00c      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3320      	adds	r3, #32
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fbed 	bl	80065c8 <RCCEx_PLLSAI2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	74fb      	strb	r3, [r7, #19]
      break;
 8005df8:	e000      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e02:	4b79      	ldr	r3, [pc, #484]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e08:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e10:	4975      	ldr	r1, [pc, #468]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005e18:	e001      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	7cfb      	ldrb	r3, [r7, #19]
 8005e1c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d047      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e32:	d030      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e38:	d82a      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3e:	d02a      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e44:	d824      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e50:	d81e      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e5a:	d010      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e5c:	e018      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e5e:	4b62      	ldr	r3, [pc, #392]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a61      	ldr	r2, [pc, #388]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e68:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e6a:	e015      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fab4 	bl	80063e0 <RCCEx_PLLSAI1_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e7c:	e00c      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3320      	adds	r3, #32
 8005e82:	2100      	movs	r1, #0
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fb9f 	bl	80065c8 <RCCEx_PLLSAI2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	74fb      	strb	r3, [r7, #19]
      break;
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10b      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e9e:	4b52      	ldr	r3, [pc, #328]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	494e      	ldr	r1, [pc, #312]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005eb4:	e001      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb6:	7cfb      	ldrb	r3, [r7, #19]
 8005eb8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 809f 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ecc:	4b46      	ldr	r3, [pc, #280]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee2:	4b41      	ldr	r3, [pc, #260]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee6:	4a40      	ldr	r2, [pc, #256]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eee:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efa:	2301      	movs	r3, #1
 8005efc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005efe:	4b3b      	ldr	r3, [pc, #236]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3a      	ldr	r2, [pc, #232]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f0a:	f7fc f9f7 	bl	80022fc <HAL_GetTick>
 8005f0e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f10:	e009      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f12:	f7fc f9f3 	bl	80022fc <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d902      	bls.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	74fb      	strb	r3, [r7, #19]
        break;
 8005f24:	e005      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f26:	4b31      	ldr	r3, [pc, #196]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ef      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005f32:	7cfb      	ldrb	r3, [r7, #19]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d15b      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f38:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f42:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01f      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d019      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f56:	4b24      	ldr	r3, [pc, #144]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f62:	4b21      	ldr	r3, [pc, #132]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f68:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f72:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f78:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f82:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d016      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fc f9b2 	bl	80022fc <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9c:	f7fc f9ae 	bl	80022fc <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d902      	bls.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8005fb2:	e006      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0ec      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10c      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc8:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd8:	4903      	ldr	r1, [pc, #12]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe2:	7cfb      	ldrb	r3, [r7, #19]
 8005fe4:	74bb      	strb	r3, [r7, #18]
 8005fe6:	e005      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff4:	7c7b      	ldrb	r3, [r7, #17]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d105      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffa:	4ba0      	ldr	r3, [pc, #640]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffe:	4a9f      	ldr	r2, [pc, #636]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006004:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006012:	4b9a      	ldr	r3, [pc, #616]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006018:	f023 0203 	bic.w	r2, r3, #3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	4996      	ldr	r1, [pc, #600]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006034:	4b91      	ldr	r3, [pc, #580]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603a:	f023 020c 	bic.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	498e      	ldr	r1, [pc, #568]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006056:	4b89      	ldr	r3, [pc, #548]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006064:	4985      	ldr	r1, [pc, #532]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006078:	4b80      	ldr	r3, [pc, #512]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006086:	497d      	ldr	r1, [pc, #500]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800609a:	4b78      	ldr	r3, [pc, #480]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a8:	4974      	ldr	r1, [pc, #464]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060bc:	4b6f      	ldr	r3, [pc, #444]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ca:	496c      	ldr	r1, [pc, #432]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060de:	4b67      	ldr	r3, [pc, #412]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ec:	4963      	ldr	r1, [pc, #396]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006100:	4b5e      	ldr	r3, [pc, #376]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800610e:	495b      	ldr	r1, [pc, #364]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006122:	4b56      	ldr	r3, [pc, #344]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006128:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006130:	4952      	ldr	r1, [pc, #328]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006144:	4b4d      	ldr	r3, [pc, #308]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006152:	494a      	ldr	r1, [pc, #296]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006166:	4b45      	ldr	r3, [pc, #276]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006174:	4941      	ldr	r1, [pc, #260]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006188:	4b3c      	ldr	r3, [pc, #240]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800618e:	f023 0203 	bic.w	r2, r3, #3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006196:	4939      	ldr	r1, [pc, #228]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d028      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061aa:	4b34      	ldr	r3, [pc, #208]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b8:	4930      	ldr	r1, [pc, #192]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061c8:	d106      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ca:	4b2c      	ldr	r3, [pc, #176]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	4a2b      	ldr	r2, [pc, #172]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061d4:	60d3      	str	r3, [r2, #12]
 80061d6:	e011      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061e0:	d10c      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2101      	movs	r1, #1
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f8f9 	bl	80063e0 <RCCEx_PLLSAI1_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d04d      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800620c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006210:	d108      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006212:	4b1a      	ldr	r3, [pc, #104]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006218:	4a18      	ldr	r2, [pc, #96]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800621e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006222:	e012      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006224:	4b15      	ldr	r3, [pc, #84]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800622a:	4a14      	ldr	r2, [pc, #80]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006230:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006234:	4b11      	ldr	r3, [pc, #68]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006242:	490e      	ldr	r1, [pc, #56]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800624e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006252:	d106      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006254:	4b09      	ldr	r3, [pc, #36]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625e:	60d3      	str	r3, [r2, #12]
 8006260:	e020      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800626a:	d109      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800626c:	4b03      	ldr	r3, [pc, #12]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a02      	ldr	r2, [pc, #8]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006276:	60d3      	str	r3, [r2, #12]
 8006278:	e014      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006288:	d10c      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	2101      	movs	r1, #1
 8006290:	4618      	mov	r0, r3
 8006292:	f000 f8a5 	bl	80063e0 <RCCEx_PLLSAI1_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d028      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062b0:	4b4a      	ldr	r3, [pc, #296]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062be:	4947      	ldr	r1, [pc, #284]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ce:	d106      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d0:	4b42      	ldr	r3, [pc, #264]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4a41      	ldr	r2, [pc, #260]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062da:	60d3      	str	r3, [r2, #12]
 80062dc:	e011      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062e6:	d10c      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2101      	movs	r1, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 f876 	bl	80063e0 <RCCEx_PLLSAI1_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062f8:	7cfb      	ldrb	r3, [r7, #19]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80062fe:	7cfb      	ldrb	r3, [r7, #19]
 8006300:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01e      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800630e:	4b33      	ldr	r3, [pc, #204]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006314:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800631e:	492f      	ldr	r1, [pc, #188]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006330:	d10c      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	2102      	movs	r1, #2
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f851 	bl	80063e0 <RCCEx_PLLSAI1_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006342:	7cfb      	ldrb	r3, [r7, #19]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006358:	4b20      	ldr	r3, [pc, #128]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800635e:	f023 0204 	bic.w	r2, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006368:	491c      	ldr	r1, [pc, #112]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800637c:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800637e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006382:	f023 0218 	bic.w	r2, r3, #24
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638c:	4913      	ldr	r1, [pc, #76]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d017      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063a0:	4b0e      	ldr	r3, [pc, #56]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063b0:	490a      	ldr	r1, [pc, #40]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063c2:	d105      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c4:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4a04      	ldr	r2, [pc, #16]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000

080063e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063ee:	4b72      	ldr	r3, [pc, #456]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063fa:	4b6f      	ldr	r3, [pc, #444]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0203 	and.w	r2, r3, #3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d103      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
       ||
 800640e:	2b00      	cmp	r3, #0
 8006410:	d142      	bne.n	8006498 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	e03f      	b.n	8006498 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d018      	beq.n	8006452 <RCCEx_PLLSAI1_Config+0x72>
 8006420:	2b03      	cmp	r3, #3
 8006422:	d825      	bhi.n	8006470 <RCCEx_PLLSAI1_Config+0x90>
 8006424:	2b01      	cmp	r3, #1
 8006426:	d002      	beq.n	800642e <RCCEx_PLLSAI1_Config+0x4e>
 8006428:	2b02      	cmp	r3, #2
 800642a:	d009      	beq.n	8006440 <RCCEx_PLLSAI1_Config+0x60>
 800642c:	e020      	b.n	8006470 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800642e:	4b62      	ldr	r3, [pc, #392]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643e:	e01a      	b.n	8006476 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006440:	4b5d      	ldr	r3, [pc, #372]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006450:	e013      	b.n	800647a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006452:	4b59      	ldr	r3, [pc, #356]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10f      	bne.n	800647e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800645e:	4b56      	ldr	r3, [pc, #344]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800646e:	e006      	b.n	800647e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e004      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006476:	bf00      	nop
 8006478:	e002      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800647e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d108      	bne.n	8006498 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006486:	4b4c      	ldr	r3, [pc, #304]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4949      	ldr	r1, [pc, #292]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006494:	4313      	orrs	r3, r2
 8006496:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f040 8086 	bne.w	80065ac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064a0:	4b45      	ldr	r3, [pc, #276]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a44      	ldr	r2, [pc, #272]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ac:	f7fb ff26 	bl	80022fc <HAL_GetTick>
 80064b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064b2:	e009      	b.n	80064c8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064b4:	f7fb ff22 	bl	80022fc <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d902      	bls.n	80064c8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]
        break;
 80064c6:	e005      	b.n	80064d4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c8:	4b3b      	ldr	r3, [pc, #236]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ef      	bne.n	80064b4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d168      	bne.n	80065ac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d113      	bne.n	8006508 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064e0:	4b35      	ldr	r3, [pc, #212]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	4b35      	ldr	r3, [pc, #212]	@ (80065bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6892      	ldr	r2, [r2, #8]
 80064ec:	0211      	lsls	r1, r2, #8
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68d2      	ldr	r2, [r2, #12]
 80064f2:	06d2      	lsls	r2, r2, #27
 80064f4:	4311      	orrs	r1, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6852      	ldr	r2, [r2, #4]
 80064fa:	3a01      	subs	r2, #1
 80064fc:	0112      	lsls	r2, r2, #4
 80064fe:	430a      	orrs	r2, r1
 8006500:	492d      	ldr	r1, [pc, #180]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006502:	4313      	orrs	r3, r2
 8006504:	610b      	str	r3, [r1, #16]
 8006506:	e02d      	b.n	8006564 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d115      	bne.n	800653a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800650e:	4b2a      	ldr	r3, [pc, #168]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	4b2b      	ldr	r3, [pc, #172]	@ (80065c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6892      	ldr	r2, [r2, #8]
 800651a:	0211      	lsls	r1, r2, #8
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6912      	ldr	r2, [r2, #16]
 8006520:	0852      	lsrs	r2, r2, #1
 8006522:	3a01      	subs	r2, #1
 8006524:	0552      	lsls	r2, r2, #21
 8006526:	4311      	orrs	r1, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6852      	ldr	r2, [r2, #4]
 800652c:	3a01      	subs	r2, #1
 800652e:	0112      	lsls	r2, r2, #4
 8006530:	430a      	orrs	r2, r1
 8006532:	4921      	ldr	r1, [pc, #132]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
 8006538:	e014      	b.n	8006564 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800653a:	4b1f      	ldr	r3, [pc, #124]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	4b21      	ldr	r3, [pc, #132]	@ (80065c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006540:	4013      	ands	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6892      	ldr	r2, [r2, #8]
 8006546:	0211      	lsls	r1, r2, #8
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6952      	ldr	r2, [r2, #20]
 800654c:	0852      	lsrs	r2, r2, #1
 800654e:	3a01      	subs	r2, #1
 8006550:	0652      	lsls	r2, r2, #25
 8006552:	4311      	orrs	r1, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6852      	ldr	r2, [r2, #4]
 8006558:	3a01      	subs	r2, #1
 800655a:	0112      	lsls	r2, r2, #4
 800655c:	430a      	orrs	r2, r1
 800655e:	4916      	ldr	r1, [pc, #88]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006560:	4313      	orrs	r3, r2
 8006562:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006564:	4b14      	ldr	r3, [pc, #80]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a13      	ldr	r2, [pc, #76]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800656a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800656e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fb fec4 	bl	80022fc <HAL_GetTick>
 8006574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006576:	e009      	b.n	800658c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006578:	f7fb fec0 	bl	80022fc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d902      	bls.n	800658c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	73fb      	strb	r3, [r7, #15]
          break;
 800658a:	e005      	b.n	8006598 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ef      	beq.n	8006578 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800659e:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	4904      	ldr	r1, [pc, #16]	@ (80065b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	07ff800f 	.word	0x07ff800f
 80065c0:	ff9f800f 	.word	0xff9f800f
 80065c4:	f9ff800f 	.word	0xf9ff800f

080065c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065d6:	4b72      	ldr	r3, [pc, #456]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00e      	beq.n	8006600 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065e2:	4b6f      	ldr	r3, [pc, #444]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0203 	and.w	r2, r3, #3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d103      	bne.n	80065fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
       ||
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d142      	bne.n	8006680 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
 80065fe:	e03f      	b.n	8006680 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b03      	cmp	r3, #3
 8006606:	d018      	beq.n	800663a <RCCEx_PLLSAI2_Config+0x72>
 8006608:	2b03      	cmp	r3, #3
 800660a:	d825      	bhi.n	8006658 <RCCEx_PLLSAI2_Config+0x90>
 800660c:	2b01      	cmp	r3, #1
 800660e:	d002      	beq.n	8006616 <RCCEx_PLLSAI2_Config+0x4e>
 8006610:	2b02      	cmp	r3, #2
 8006612:	d009      	beq.n	8006628 <RCCEx_PLLSAI2_Config+0x60>
 8006614:	e020      	b.n	8006658 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006616:	4b62      	ldr	r3, [pc, #392]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11d      	bne.n	800665e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006626:	e01a      	b.n	800665e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006628:	4b5d      	ldr	r3, [pc, #372]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006630:	2b00      	cmp	r3, #0
 8006632:	d116      	bne.n	8006662 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006638:	e013      	b.n	8006662 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800663a:	4b59      	ldr	r3, [pc, #356]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10f      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006646:	4b56      	ldr	r3, [pc, #344]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006656:	e006      	b.n	8006666 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
      break;
 800665c:	e004      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800665e:	bf00      	nop
 8006660:	e002      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006662:	bf00      	nop
 8006664:	e000      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006666:	bf00      	nop
    }

    if(status == HAL_OK)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d108      	bne.n	8006680 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800666e:	4b4c      	ldr	r3, [pc, #304]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f023 0203 	bic.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4949      	ldr	r1, [pc, #292]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f040 8086 	bne.w	8006794 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006688:	4b45      	ldr	r3, [pc, #276]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a44      	ldr	r2, [pc, #272]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800668e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006694:	f7fb fe32 	bl	80022fc <HAL_GetTick>
 8006698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800669a:	e009      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800669c:	f7fb fe2e 	bl	80022fc <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d902      	bls.n	80066b0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        break;
 80066ae:	e005      	b.n	80066bc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b0:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1ef      	bne.n	800669c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d168      	bne.n	8006794 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d113      	bne.n	80066f0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066c8:	4b35      	ldr	r3, [pc, #212]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ca:	695a      	ldr	r2, [r3, #20]
 80066cc:	4b35      	ldr	r3, [pc, #212]	@ (80067a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6892      	ldr	r2, [r2, #8]
 80066d4:	0211      	lsls	r1, r2, #8
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68d2      	ldr	r2, [r2, #12]
 80066da:	06d2      	lsls	r2, r2, #27
 80066dc:	4311      	orrs	r1, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6852      	ldr	r2, [r2, #4]
 80066e2:	3a01      	subs	r2, #1
 80066e4:	0112      	lsls	r2, r2, #4
 80066e6:	430a      	orrs	r2, r1
 80066e8:	492d      	ldr	r1, [pc, #180]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	614b      	str	r3, [r1, #20]
 80066ee:	e02d      	b.n	800674c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d115      	bne.n	8006722 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066f6:	4b2a      	ldr	r3, [pc, #168]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	4b2b      	ldr	r3, [pc, #172]	@ (80067a8 <RCCEx_PLLSAI2_Config+0x1e0>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6892      	ldr	r2, [r2, #8]
 8006702:	0211      	lsls	r1, r2, #8
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6912      	ldr	r2, [r2, #16]
 8006708:	0852      	lsrs	r2, r2, #1
 800670a:	3a01      	subs	r2, #1
 800670c:	0552      	lsls	r2, r2, #21
 800670e:	4311      	orrs	r1, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	3a01      	subs	r2, #1
 8006716:	0112      	lsls	r2, r2, #4
 8006718:	430a      	orrs	r2, r1
 800671a:	4921      	ldr	r1, [pc, #132]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800671c:	4313      	orrs	r3, r2
 800671e:	614b      	str	r3, [r1, #20]
 8006720:	e014      	b.n	800674c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006722:	4b1f      	ldr	r3, [pc, #124]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	4b21      	ldr	r3, [pc, #132]	@ (80067ac <RCCEx_PLLSAI2_Config+0x1e4>)
 8006728:	4013      	ands	r3, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6892      	ldr	r2, [r2, #8]
 800672e:	0211      	lsls	r1, r2, #8
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6952      	ldr	r2, [r2, #20]
 8006734:	0852      	lsrs	r2, r2, #1
 8006736:	3a01      	subs	r2, #1
 8006738:	0652      	lsls	r2, r2, #25
 800673a:	4311      	orrs	r1, r2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6852      	ldr	r2, [r2, #4]
 8006740:	3a01      	subs	r2, #1
 8006742:	0112      	lsls	r2, r2, #4
 8006744:	430a      	orrs	r2, r1
 8006746:	4916      	ldr	r1, [pc, #88]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006748:	4313      	orrs	r3, r2
 800674a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800674c:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a13      	ldr	r2, [pc, #76]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fb fdd0 	bl	80022fc <HAL_GetTick>
 800675c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800675e:	e009      	b.n	8006774 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006760:	f7fb fdcc 	bl	80022fc <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d902      	bls.n	8006774 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	73fb      	strb	r3, [r7, #15]
          break;
 8006772:	e005      	b.n	8006780 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006774:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0ef      	beq.n	8006760 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006786:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006788:	695a      	ldr	r2, [r3, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	4904      	ldr	r1, [pc, #16]	@ (80067a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006790:	4313      	orrs	r3, r2
 8006792:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000
 80067a4:	07ff800f 	.word	0x07ff800f
 80067a8:	ff9f800f 	.word	0xff9f800f
 80067ac:	f9ff800f 	.word	0xf9ff800f

080067b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e049      	b.n	8006856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fb fb38 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f000 fa38 	bl	8006c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01b      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f06f 0202 	mvn.w	r2, #2
 8006892:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f9bc 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 80068ae:	e005      	b.n	80068bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9ae 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9bf 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01b      	beq.n	800690e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f06f 0204 	mvn.w	r2, #4
 80068de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f996 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 80068fa:	e005      	b.n	8006908 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f988 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f999 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d020      	beq.n	800695a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01b      	beq.n	800695a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f06f 0208 	mvn.w	r2, #8
 800692a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2204      	movs	r2, #4
 8006930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f970 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006946:	e005      	b.n	8006954 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f962 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f973 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d020      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01b      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f06f 0210 	mvn.w	r2, #16
 8006976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2208      	movs	r2, #8
 800697c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f94a 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006992:	e005      	b.n	80069a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f93c 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f94d 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0201 	mvn.w	r2, #1
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f91a 	bl	8006bfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00c      	beq.n	80069f8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fb08 	bl	8007008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00c      	beq.n	8006a1c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb00 	bl	800701c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00c      	beq.n	8006a40 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f907 	bl	8006c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0220 	mvn.w	r2, #32
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fac8 	bl	8006ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e0b6      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x18a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac4:	d03e      	beq.n	8006b44 <HAL_TIM_ConfigClockSource+0xd8>
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aca:	f200 8087 	bhi.w	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad2:	f000 8086 	beq.w	8006be2 <HAL_TIM_ConfigClockSource+0x176>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ada:	d87f      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006adc:	2b70      	cmp	r3, #112	@ 0x70
 8006ade:	d01a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0xaa>
 8006ae0:	2b70      	cmp	r3, #112	@ 0x70
 8006ae2:	d87b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006ae4:	2b60      	cmp	r3, #96	@ 0x60
 8006ae6:	d050      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x11e>
 8006ae8:	2b60      	cmp	r3, #96	@ 0x60
 8006aea:	d877      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006aec:	2b50      	cmp	r3, #80	@ 0x50
 8006aee:	d03c      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0xfe>
 8006af0:	2b50      	cmp	r3, #80	@ 0x50
 8006af2:	d873      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	d058      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x13e>
 8006af8:	2b40      	cmp	r3, #64	@ 0x40
 8006afa:	d86f      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006afc:	2b30      	cmp	r3, #48	@ 0x30
 8006afe:	d064      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15e>
 8006b00:	2b30      	cmp	r3, #48	@ 0x30
 8006b02:	d86b      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d060      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15e>
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d867      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d05c      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15e>
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d05a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x15e>
 8006b14:	e062      	b.n	8006bdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b26:	f000 f9bd 	bl	8006ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	609a      	str	r2, [r3, #8]
      break;
 8006b42:	e04f      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b54:	f000 f9a6 	bl	8006ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b66:	609a      	str	r2, [r3, #8]
      break;
 8006b68:	e03c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 f91a 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2150      	movs	r1, #80	@ 0x50
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f973 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006b88:	e02c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 f939 	bl	8006e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2160      	movs	r1, #96	@ 0x60
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f963 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e01c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 f8fa 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2140      	movs	r1, #64	@ 0x40
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f953 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e00c      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f000 f94a 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006bda:	e003      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	e000      	b.n	8006be4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a46      	ldr	r2, [pc, #280]	@ (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d013      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c82:	d00f      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a43      	ldr	r2, [pc, #268]	@ (8006d94 <TIM_Base_SetConfig+0x130>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a42      	ldr	r2, [pc, #264]	@ (8006d98 <TIM_Base_SetConfig+0x134>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a41      	ldr	r2, [pc, #260]	@ (8006d9c <TIM_Base_SetConfig+0x138>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a40      	ldr	r2, [pc, #256]	@ (8006da0 <TIM_Base_SetConfig+0x13c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a35      	ldr	r2, [pc, #212]	@ (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01f      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc4:	d01b      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a32      	ldr	r2, [pc, #200]	@ (8006d94 <TIM_Base_SetConfig+0x130>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d017      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a31      	ldr	r2, [pc, #196]	@ (8006d98 <TIM_Base_SetConfig+0x134>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a30      	ldr	r2, [pc, #192]	@ (8006d9c <TIM_Base_SetConfig+0x138>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8006da0 <TIM_Base_SetConfig+0x13c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8006da4 <TIM_Base_SetConfig+0x140>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8006da8 <TIM_Base_SetConfig+0x144>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8006dac <TIM_Base_SetConfig+0x148>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d108      	bne.n	8006d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a16      	ldr	r2, [pc, #88]	@ (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00f      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	@ (8006da0 <TIM_Base_SetConfig+0x13c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a17      	ldr	r2, [pc, #92]	@ (8006da4 <TIM_Base_SetConfig+0x140>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a16      	ldr	r2, [pc, #88]	@ (8006da8 <TIM_Base_SetConfig+0x144>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a15      	ldr	r2, [pc, #84]	@ (8006dac <TIM_Base_SetConfig+0x148>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d103      	bne.n	8006d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d105      	bne.n	8006d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f023 0201 	bic.w	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	611a      	str	r2, [r3, #16]
  }
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40013400 	.word	0x40013400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800

08006db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 030a 	bic.w	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f023 0210 	bic.w	r2, r3, #16
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e068      	b.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2e      	ldr	r2, [pc, #184]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d108      	bne.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1e      	ldr	r2, [pc, #120]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6e:	d018      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a18      	ldr	r2, [pc, #96]	@ (8006fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a13      	ldr	r2, [pc, #76]	@ (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	@ (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10c      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40012c00 	.word	0x40012c00
 8006fe0:	40013400 	.word	0x40013400
 8006fe4:	40000400 	.word	0x40000400
 8006fe8:	40000800 	.word	0x40000800
 8006fec:	40000c00 	.word	0x40000c00
 8006ff0:	40014000 	.word	0x40014000

08006ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e042      	b.n	80070c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fa ff1d 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	@ 0x24
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fbb2 	bl	80077e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8b3 	bl	80071ec <UART_SetConfig>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e01b      	b.n	80070c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800709e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0201 	orr.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fc31 	bl	8007928 <UART_CheckIdleState>
 80070c6:	4603      	mov	r3, r0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	@ 0x28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d17b      	bne.n	80071e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_UART_Transmit+0x26>
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e074      	b.n	80071e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2221      	movs	r2, #33	@ 0x21
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800710a:	f7fb f8f7 	bl	80022fc <HAL_GetTick>
 800710e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007128:	d108      	bne.n	800713c <HAL_UART_Transmit+0x6c>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e003      	b.n	8007144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007144:	e030      	b.n	80071a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2200      	movs	r2, #0
 800714e:	2180      	movs	r1, #128	@ 0x80
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fc93 	bl	8007a7c <UART_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e03d      	b.n	80071e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	881a      	ldrh	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717a:	b292      	uxth	r2, r2
 800717c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3302      	adds	r3, #2
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e007      	b.n	8007196 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	3301      	adds	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1c8      	bne.n	8007146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2140      	movs	r1, #64	@ 0x40
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fc5c 	bl	8007a7c <UART_WaitOnFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e006      	b.n	80071e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f0:	b08c      	sub	sp, #48	@ 0x30
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	431a      	orrs	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	431a      	orrs	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	4313      	orrs	r3, r2
 8007212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4baa      	ldr	r3, [pc, #680]	@ (80074c4 <UART_SetConfig+0x2d8>)
 800721c:	4013      	ands	r3, r2
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007224:	430b      	orrs	r3, r1
 8007226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a9f      	ldr	r2, [pc, #636]	@ (80074c8 <UART_SetConfig+0x2dc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007254:	4313      	orrs	r3, r2
 8007256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007262:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800726c:	430b      	orrs	r3, r1
 800726e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	f023 010f 	bic.w	r1, r3, #15
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a90      	ldr	r2, [pc, #576]	@ (80074cc <UART_SetConfig+0x2e0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d125      	bne.n	80072dc <UART_SetConfig+0xf0>
 8007290:	4b8f      	ldr	r3, [pc, #572]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d81a      	bhi.n	80072d4 <UART_SetConfig+0xe8>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <UART_SetConfig+0xb8>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072b5 	.word	0x080072b5
 80072a8:	080072c5 	.word	0x080072c5
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	080072cd 	.word	0x080072cd
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e116      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072bc:	2302      	movs	r3, #2
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c2:	e112      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072c4:	2304      	movs	r3, #4
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ca:	e10e      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072cc:	2308      	movs	r3, #8
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d2:	e10a      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072da:	e106      	b.n	80074ea <UART_SetConfig+0x2fe>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a7c      	ldr	r2, [pc, #496]	@ (80074d4 <UART_SetConfig+0x2e8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d138      	bne.n	8007358 <UART_SetConfig+0x16c>
 80072e6:	4b7a      	ldr	r3, [pc, #488]	@ (80074d0 <UART_SetConfig+0x2e4>)
 80072e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ec:	f003 030c 	and.w	r3, r3, #12
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	d82d      	bhi.n	8007350 <UART_SetConfig+0x164>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0x110>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007331 	.word	0x08007331
 8007300:	08007351 	.word	0x08007351
 8007304:	08007351 	.word	0x08007351
 8007308:	08007351 	.word	0x08007351
 800730c:	08007341 	.word	0x08007341
 8007310:	08007351 	.word	0x08007351
 8007314:	08007351 	.word	0x08007351
 8007318:	08007351 	.word	0x08007351
 800731c:	08007339 	.word	0x08007339
 8007320:	08007351 	.word	0x08007351
 8007324:	08007351 	.word	0x08007351
 8007328:	08007351 	.word	0x08007351
 800732c:	08007349 	.word	0x08007349
 8007330:	2300      	movs	r3, #0
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007336:	e0d8      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007338:	2302      	movs	r3, #2
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800733e:	e0d4      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007346:	e0d0      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734e:	e0cc      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007356:	e0c8      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a5e      	ldr	r2, [pc, #376]	@ (80074d8 <UART_SetConfig+0x2ec>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d125      	bne.n	80073ae <UART_SetConfig+0x1c2>
 8007362:	4b5b      	ldr	r3, [pc, #364]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800736c:	2b30      	cmp	r3, #48	@ 0x30
 800736e:	d016      	beq.n	800739e <UART_SetConfig+0x1b2>
 8007370:	2b30      	cmp	r3, #48	@ 0x30
 8007372:	d818      	bhi.n	80073a6 <UART_SetConfig+0x1ba>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d00a      	beq.n	800738e <UART_SetConfig+0x1a2>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d814      	bhi.n	80073a6 <UART_SetConfig+0x1ba>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <UART_SetConfig+0x19a>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d008      	beq.n	8007396 <UART_SetConfig+0x1aa>
 8007384:	e00f      	b.n	80073a6 <UART_SetConfig+0x1ba>
 8007386:	2300      	movs	r3, #0
 8007388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738c:	e0ad      	b.n	80074ea <UART_SetConfig+0x2fe>
 800738e:	2302      	movs	r3, #2
 8007390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007394:	e0a9      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007396:	2304      	movs	r3, #4
 8007398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739c:	e0a5      	b.n	80074ea <UART_SetConfig+0x2fe>
 800739e:	2308      	movs	r3, #8
 80073a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a4:	e0a1      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073a6:	2310      	movs	r3, #16
 80073a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ac:	e09d      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a4a      	ldr	r2, [pc, #296]	@ (80074dc <UART_SetConfig+0x2f0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d125      	bne.n	8007404 <UART_SetConfig+0x218>
 80073b8:	4b45      	ldr	r3, [pc, #276]	@ (80074d0 <UART_SetConfig+0x2e4>)
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c4:	d016      	beq.n	80073f4 <UART_SetConfig+0x208>
 80073c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c8:	d818      	bhi.n	80073fc <UART_SetConfig+0x210>
 80073ca:	2b80      	cmp	r3, #128	@ 0x80
 80073cc:	d00a      	beq.n	80073e4 <UART_SetConfig+0x1f8>
 80073ce:	2b80      	cmp	r3, #128	@ 0x80
 80073d0:	d814      	bhi.n	80073fc <UART_SetConfig+0x210>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <UART_SetConfig+0x1f0>
 80073d6:	2b40      	cmp	r3, #64	@ 0x40
 80073d8:	d008      	beq.n	80073ec <UART_SetConfig+0x200>
 80073da:	e00f      	b.n	80073fc <UART_SetConfig+0x210>
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e2:	e082      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073e4:	2302      	movs	r3, #2
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ea:	e07e      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073ec:	2304      	movs	r3, #4
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f2:	e07a      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073f4:	2308      	movs	r3, #8
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fa:	e076      	b.n	80074ea <UART_SetConfig+0x2fe>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007402:	e072      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a35      	ldr	r2, [pc, #212]	@ (80074e0 <UART_SetConfig+0x2f4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d12a      	bne.n	8007464 <UART_SetConfig+0x278>
 800740e:	4b30      	ldr	r3, [pc, #192]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800741c:	d01a      	beq.n	8007454 <UART_SetConfig+0x268>
 800741e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007422:	d81b      	bhi.n	800745c <UART_SetConfig+0x270>
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	d00c      	beq.n	8007444 <UART_SetConfig+0x258>
 800742a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742e:	d815      	bhi.n	800745c <UART_SetConfig+0x270>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <UART_SetConfig+0x250>
 8007434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007438:	d008      	beq.n	800744c <UART_SetConfig+0x260>
 800743a:	e00f      	b.n	800745c <UART_SetConfig+0x270>
 800743c:	2300      	movs	r3, #0
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007442:	e052      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007444:	2302      	movs	r3, #2
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744a:	e04e      	b.n	80074ea <UART_SetConfig+0x2fe>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007452:	e04a      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745a:	e046      	b.n	80074ea <UART_SetConfig+0x2fe>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007462:	e042      	b.n	80074ea <UART_SetConfig+0x2fe>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a17      	ldr	r2, [pc, #92]	@ (80074c8 <UART_SetConfig+0x2dc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d13a      	bne.n	80074e4 <UART_SetConfig+0x2f8>
 800746e:	4b18      	ldr	r3, [pc, #96]	@ (80074d0 <UART_SetConfig+0x2e4>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800747c:	d01a      	beq.n	80074b4 <UART_SetConfig+0x2c8>
 800747e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007482:	d81b      	bhi.n	80074bc <UART_SetConfig+0x2d0>
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007488:	d00c      	beq.n	80074a4 <UART_SetConfig+0x2b8>
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748e:	d815      	bhi.n	80074bc <UART_SetConfig+0x2d0>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <UART_SetConfig+0x2b0>
 8007494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007498:	d008      	beq.n	80074ac <UART_SetConfig+0x2c0>
 800749a:	e00f      	b.n	80074bc <UART_SetConfig+0x2d0>
 800749c:	2300      	movs	r3, #0
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a2:	e022      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074a4:	2302      	movs	r3, #2
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074aa:	e01e      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b2:	e01a      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e016      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e012      	b.n	80074ea <UART_SetConfig+0x2fe>
 80074c4:	cfff69f3 	.word	0xcfff69f3
 80074c8:	40008000 	.word	0x40008000
 80074cc:	40013800 	.word	0x40013800
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40004400 	.word	0x40004400
 80074d8:	40004800 	.word	0x40004800
 80074dc:	40004c00 	.word	0x40004c00
 80074e0:	40005000 	.word	0x40005000
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4aae      	ldr	r2, [pc, #696]	@ (80077a8 <UART_SetConfig+0x5bc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	f040 8097 	bne.w	8007624 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d823      	bhi.n	8007546 <UART_SetConfig+0x35a>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <UART_SetConfig+0x318>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007529 	.word	0x08007529
 8007508:	08007547 	.word	0x08007547
 800750c:	08007531 	.word	0x08007531
 8007510:	08007547 	.word	0x08007547
 8007514:	08007537 	.word	0x08007537
 8007518:	08007547 	.word	0x08007547
 800751c:	08007547 	.word	0x08007547
 8007520:	08007547 	.word	0x08007547
 8007524:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fe fb3e 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 800752c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800752e:	e010      	b.n	8007552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b9e      	ldr	r3, [pc, #632]	@ (80077ac <UART_SetConfig+0x5c0>)
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007534:	e00d      	b.n	8007552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fe fa9f 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 800753a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800753c:	e009      	b.n	8007552 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007544:	e005      	b.n	8007552 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8130 	beq.w	80077ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755e:	4a94      	ldr	r2, [pc, #592]	@ (80077b0 <UART_SetConfig+0x5c4>)
 8007560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007564:	461a      	mov	r2, r3
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	fbb3 f3f2 	udiv	r3, r3, r2
 800756c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4413      	add	r3, r2
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	429a      	cmp	r2, r3
 800757c:	d305      	bcc.n	800758a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	429a      	cmp	r2, r3
 8007588:	d903      	bls.n	8007592 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007590:	e113      	b.n	80077ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	2200      	movs	r2, #0
 8007596:	60bb      	str	r3, [r7, #8]
 8007598:	60fa      	str	r2, [r7, #12]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	4a84      	ldr	r2, [pc, #528]	@ (80077b0 <UART_SetConfig+0x5c4>)
 80075a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2200      	movs	r2, #0
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075b4:	f7f9 fb60 	bl	8000c78 <__aeabi_uldivmod>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4610      	mov	r0, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	020b      	lsls	r3, r1, #8
 80075ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075ce:	0202      	lsls	r2, r0, #8
 80075d0:	6979      	ldr	r1, [r7, #20]
 80075d2:	6849      	ldr	r1, [r1, #4]
 80075d4:	0849      	lsrs	r1, r1, #1
 80075d6:	2000      	movs	r0, #0
 80075d8:	460c      	mov	r4, r1
 80075da:	4605      	mov	r5, r0
 80075dc:	eb12 0804 	adds.w	r8, r2, r4
 80075e0:	eb43 0905 	adc.w	r9, r3, r5
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	469a      	mov	sl, r3
 80075ec:	4693      	mov	fp, r2
 80075ee:	4652      	mov	r2, sl
 80075f0:	465b      	mov	r3, fp
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	f7f9 fb3f 	bl	8000c78 <__aeabi_uldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4613      	mov	r3, r2
 8007600:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007608:	d308      	bcc.n	800761c <UART_SetConfig+0x430>
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007610:	d204      	bcs.n	800761c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a3a      	ldr	r2, [r7, #32]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e0ce      	b.n	80077ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007622:	e0ca      	b.n	80077ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800762c:	d166      	bne.n	80076fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800762e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007632:	2b08      	cmp	r3, #8
 8007634:	d827      	bhi.n	8007686 <UART_SetConfig+0x49a>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0x450>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007661 	.word	0x08007661
 8007640:	08007669 	.word	0x08007669
 8007644:	08007671 	.word	0x08007671
 8007648:	08007687 	.word	0x08007687
 800764c:	08007677 	.word	0x08007677
 8007650:	08007687 	.word	0x08007687
 8007654:	08007687 	.word	0x08007687
 8007658:	08007687 	.word	0x08007687
 800765c:	0800767f 	.word	0x0800767f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007660:	f7fe faa2 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 8007664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007666:	e014      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007668:	f7fe fab4 	bl	8005bd4 <HAL_RCC_GetPCLK2Freq>
 800766c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800766e:	e010      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007670:	4b4e      	ldr	r3, [pc, #312]	@ (80077ac <UART_SetConfig+0x5c0>)
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007674:	e00d      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007676:	f7fe f9ff 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 800767a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767c:	e009      	b.n	8007692 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007684:	e005      	b.n	8007692 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8090 	beq.w	80077ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	4a44      	ldr	r2, [pc, #272]	@ (80077b0 <UART_SetConfig+0x5c4>)
 80076a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	005a      	lsls	r2, r3, #1
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	441a      	add	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80076be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	d916      	bls.n	80076f4 <UART_SetConfig+0x508>
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076cc:	d212      	bcs.n	80076f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f023 030f 	bic.w	r3, r3, #15
 80076d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	8bfb      	ldrh	r3, [r7, #30]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	8bfa      	ldrh	r2, [r7, #30]
 80076f0:	60da      	str	r2, [r3, #12]
 80076f2:	e062      	b.n	80077ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076fa:	e05e      	b.n	80077ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007700:	2b08      	cmp	r3, #8
 8007702:	d828      	bhi.n	8007756 <UART_SetConfig+0x56a>
 8007704:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <UART_SetConfig+0x520>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007731 	.word	0x08007731
 8007710:	08007739 	.word	0x08007739
 8007714:	08007741 	.word	0x08007741
 8007718:	08007757 	.word	0x08007757
 800771c:	08007747 	.word	0x08007747
 8007720:	08007757 	.word	0x08007757
 8007724:	08007757 	.word	0x08007757
 8007728:	08007757 	.word	0x08007757
 800772c:	0800774f 	.word	0x0800774f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007730:	f7fe fa3a 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 8007734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007736:	e014      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007738:	f7fe fa4c 	bl	8005bd4 <HAL_RCC_GetPCLK2Freq>
 800773c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800773e:	e010      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007740:	4b1a      	ldr	r3, [pc, #104]	@ (80077ac <UART_SetConfig+0x5c0>)
 8007742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007744:	e00d      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007746:	f7fe f997 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 800774a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800774c:	e009      	b.n	8007762 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007754:	e005      	b.n	8007762 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007760:	bf00      	nop
    }

    if (pclk != 0U)
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d028      	beq.n	80077ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776c:	4a10      	ldr	r2, [pc, #64]	@ (80077b0 <UART_SetConfig+0x5c4>)
 800776e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007772:	461a      	mov	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	fbb3 f2f2 	udiv	r2, r3, r2
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	441a      	add	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	2b0f      	cmp	r3, #15
 8007790:	d910      	bls.n	80077b4 <UART_SetConfig+0x5c8>
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007798:	d20c      	bcs.n	80077b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	b29a      	uxth	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e009      	b.n	80077ba <UART_SetConfig+0x5ce>
 80077a6:	bf00      	nop
 80077a8:	40008000 	.word	0x40008000
 80077ac:	00f42400 	.word	0x00f42400
 80077b0:	0800ab48 	.word	0x0800ab48
      }
      else
      {
        ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2201      	movs	r2, #1
 80077be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2200      	movs	r2, #0
 80077ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2200      	movs	r2, #0
 80077d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3730      	adds	r7, #48	@ 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01a      	beq.n	80078fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e2:	d10a      	bne.n	80078fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b098      	sub	sp, #96	@ 0x60
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007938:	f7fa fce0 	bl	80022fc <HAL_GetTick>
 800793c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b08      	cmp	r3, #8
 800794a:	d12f      	bne.n	80079ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800794c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007954:	2200      	movs	r2, #0
 8007956:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f88e 	bl	8007a7c <UART_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d022      	beq.n	80079ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800797a:	653b      	str	r3, [r7, #80]	@ 0x50
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007984:	647b      	str	r3, [r7, #68]	@ 0x44
 8007986:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800798a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e063      	b.n	8007a74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d149      	bne.n	8007a4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c2:	2200      	movs	r2, #0
 80079c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f857 	bl	8007a7c <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d03c      	beq.n	8007a4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	623b      	str	r3, [r7, #32]
   return(result);
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e6      	bne.n	80079d4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	69b9      	ldr	r1, [r7, #24]
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	617b      	str	r3, [r7, #20]
   return(result);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e5      	bne.n	8007a06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e012      	b.n	8007a74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3758      	adds	r7, #88	@ 0x58
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a8c:	e04f      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d04b      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a96:	f7fa fc31 	bl	80022fc <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d302      	bcc.n	8007aac <UART_WaitOnFlagUntilTimeout+0x30>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e04e      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d037      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b80      	cmp	r3, #128	@ 0x80
 8007ac2:	d034      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b40      	cmp	r3, #64	@ 0x40
 8007ac8:	d031      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d110      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2208      	movs	r2, #8
 8007ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f838 	bl	8007b56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e029      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b08:	d111      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f81e 	bl	8007b56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e00f      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	bf0c      	ite	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	2300      	movne	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d0a0      	beq.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b095      	sub	sp, #84	@ 0x54
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e6      	bne.n	8007b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e3      	bne.n	8007b90 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d118      	bne.n	8007c02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f023 0310 	bic.w	r3, r3, #16
 8007be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6979      	ldr	r1, [r7, #20]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c16:	bf00      	nop
 8007c18:	3754      	adds	r7, #84	@ 0x54
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e027      	b.n	8007c88 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2224      	movs	r2, #36	@ 0x24
 8007c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0201 	bic.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e02d      	b.n	8007d08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2224      	movs	r2, #36	@ 0x24
 8007cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f84f 	bl	8007d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e02d      	b.n	8007d84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	@ 0x24
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0201 	bic.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f811 	bl	8007d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d108      	bne.n	8007dae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007dac:	e031      	b.n	8007e12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dae:	2308      	movs	r3, #8
 8007db0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007db2:	2308      	movs	r3, #8
 8007db4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	0e5b      	lsrs	r3, r3, #25
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	0f5b      	lsrs	r3, r3, #29
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	7b3a      	ldrb	r2, [r7, #12]
 8007dda:	4911      	ldr	r1, [pc, #68]	@ (8007e20 <UARTEx_SetNbDataToProcess+0x94>)
 8007ddc:	5c8a      	ldrb	r2, [r1, r2]
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007de2:	7b3a      	ldrb	r2, [r7, #12]
 8007de4:	490f      	ldr	r1, [pc, #60]	@ (8007e24 <UARTEx_SetNbDataToProcess+0x98>)
 8007de6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007de8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	7b7a      	ldrb	r2, [r7, #13]
 8007df8:	4909      	ldr	r1, [pc, #36]	@ (8007e20 <UARTEx_SetNbDataToProcess+0x94>)
 8007dfa:	5c8a      	ldrb	r2, [r1, r2]
 8007dfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e00:	7b7a      	ldrb	r2, [r7, #13]
 8007e02:	4908      	ldr	r1, [pc, #32]	@ (8007e24 <UARTEx_SetNbDataToProcess+0x98>)
 8007e04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	0800ab60 	.word	0x0800ab60
 8007e24:	0800ab68 	.word	0x0800ab68

08007e28 <__cvt>:
 8007e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	ec57 6b10 	vmov	r6, r7, d0
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	460c      	mov	r4, r1
 8007e34:	4619      	mov	r1, r3
 8007e36:	463b      	mov	r3, r7
 8007e38:	bfbb      	ittet	lt
 8007e3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e3e:	461f      	movlt	r7, r3
 8007e40:	2300      	movge	r3, #0
 8007e42:	232d      	movlt	r3, #45	@ 0x2d
 8007e44:	700b      	strb	r3, [r1, #0]
 8007e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e4c:	4691      	mov	r9, r2
 8007e4e:	f023 0820 	bic.w	r8, r3, #32
 8007e52:	bfbc      	itt	lt
 8007e54:	4632      	movlt	r2, r6
 8007e56:	4616      	movlt	r6, r2
 8007e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e5c:	d005      	beq.n	8007e6a <__cvt+0x42>
 8007e5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e62:	d100      	bne.n	8007e66 <__cvt+0x3e>
 8007e64:	3401      	adds	r4, #1
 8007e66:	2102      	movs	r1, #2
 8007e68:	e000      	b.n	8007e6c <__cvt+0x44>
 8007e6a:	2103      	movs	r1, #3
 8007e6c:	ab03      	add	r3, sp, #12
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	ab02      	add	r3, sp, #8
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	ec47 6b10 	vmov	d0, r6, r7
 8007e78:	4653      	mov	r3, sl
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	f000 fef0 	bl	8008c60 <_dtoa_r>
 8007e80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e84:	4605      	mov	r5, r0
 8007e86:	d119      	bne.n	8007ebc <__cvt+0x94>
 8007e88:	f019 0f01 	tst.w	r9, #1
 8007e8c:	d00e      	beq.n	8007eac <__cvt+0x84>
 8007e8e:	eb00 0904 	add.w	r9, r0, r4
 8007e92:	2200      	movs	r2, #0
 8007e94:	2300      	movs	r3, #0
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 fe2d 	bl	8000af8 <__aeabi_dcmpeq>
 8007e9e:	b108      	cbz	r0, 8007ea4 <__cvt+0x7c>
 8007ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ea4:	2230      	movs	r2, #48	@ 0x30
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	454b      	cmp	r3, r9
 8007eaa:	d31e      	bcc.n	8007eea <__cvt+0xc2>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eb0:	1b5b      	subs	r3, r3, r5
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	b004      	add	sp, #16
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ec0:	eb00 0904 	add.w	r9, r0, r4
 8007ec4:	d1e5      	bne.n	8007e92 <__cvt+0x6a>
 8007ec6:	7803      	ldrb	r3, [r0, #0]
 8007ec8:	2b30      	cmp	r3, #48	@ 0x30
 8007eca:	d10a      	bne.n	8007ee2 <__cvt+0xba>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 fe10 	bl	8000af8 <__aeabi_dcmpeq>
 8007ed8:	b918      	cbnz	r0, 8007ee2 <__cvt+0xba>
 8007eda:	f1c4 0401 	rsb	r4, r4, #1
 8007ede:	f8ca 4000 	str.w	r4, [sl]
 8007ee2:	f8da 3000 	ldr.w	r3, [sl]
 8007ee6:	4499      	add	r9, r3
 8007ee8:	e7d3      	b.n	8007e92 <__cvt+0x6a>
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	9103      	str	r1, [sp, #12]
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	e7d9      	b.n	8007ea6 <__cvt+0x7e>

08007ef2 <__exponent>:
 8007ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	bfba      	itte	lt
 8007ef8:	4249      	neglt	r1, r1
 8007efa:	232d      	movlt	r3, #45	@ 0x2d
 8007efc:	232b      	movge	r3, #43	@ 0x2b
 8007efe:	2909      	cmp	r1, #9
 8007f00:	7002      	strb	r2, [r0, #0]
 8007f02:	7043      	strb	r3, [r0, #1]
 8007f04:	dd29      	ble.n	8007f5a <__exponent+0x68>
 8007f06:	f10d 0307 	add.w	r3, sp, #7
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	270a      	movs	r7, #10
 8007f0e:	461a      	mov	r2, r3
 8007f10:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f14:	fb07 1416 	mls	r4, r7, r6, r1
 8007f18:	3430      	adds	r4, #48	@ 0x30
 8007f1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f1e:	460c      	mov	r4, r1
 8007f20:	2c63      	cmp	r4, #99	@ 0x63
 8007f22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f26:	4631      	mov	r1, r6
 8007f28:	dcf1      	bgt.n	8007f0e <__exponent+0x1c>
 8007f2a:	3130      	adds	r1, #48	@ 0x30
 8007f2c:	1e94      	subs	r4, r2, #2
 8007f2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f32:	1c41      	adds	r1, r0, #1
 8007f34:	4623      	mov	r3, r4
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	d30a      	bcc.n	8007f50 <__exponent+0x5e>
 8007f3a:	f10d 0309 	add.w	r3, sp, #9
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	42ac      	cmp	r4, r5
 8007f42:	bf88      	it	hi
 8007f44:	2300      	movhi	r3, #0
 8007f46:	3302      	adds	r3, #2
 8007f48:	4403      	add	r3, r0
 8007f4a:	1a18      	subs	r0, r3, r0
 8007f4c:	b003      	add	sp, #12
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f58:	e7ed      	b.n	8007f36 <__exponent+0x44>
 8007f5a:	2330      	movs	r3, #48	@ 0x30
 8007f5c:	3130      	adds	r1, #48	@ 0x30
 8007f5e:	7083      	strb	r3, [r0, #2]
 8007f60:	70c1      	strb	r1, [r0, #3]
 8007f62:	1d03      	adds	r3, r0, #4
 8007f64:	e7f1      	b.n	8007f4a <__exponent+0x58>
	...

08007f68 <_printf_float>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	b08d      	sub	sp, #52	@ 0x34
 8007f6e:	460c      	mov	r4, r1
 8007f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f74:	4616      	mov	r6, r2
 8007f76:	461f      	mov	r7, r3
 8007f78:	4605      	mov	r5, r0
 8007f7a:	f000 fd6f 	bl	8008a5c <_localeconv_r>
 8007f7e:	6803      	ldr	r3, [r0, #0]
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f8 f98c 	bl	80002a0 <strlen>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f90:	9005      	str	r0, [sp, #20]
 8007f92:	3307      	adds	r3, #7
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	f103 0208 	add.w	r2, r3, #8
 8007f9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fa0:	f8d4 b000 	ldr.w	fp, [r4]
 8007fa4:	f8c8 2000 	str.w	r2, [r8]
 8007fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fb0:	9307      	str	r3, [sp, #28]
 8007fb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fbe:	4b9c      	ldr	r3, [pc, #624]	@ (8008230 <_printf_float+0x2c8>)
 8007fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc4:	f7f8 fdca 	bl	8000b5c <__aeabi_dcmpun>
 8007fc8:	bb70      	cbnz	r0, 8008028 <_printf_float+0xc0>
 8007fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fce:	4b98      	ldr	r3, [pc, #608]	@ (8008230 <_printf_float+0x2c8>)
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	f7f8 fda4 	bl	8000b20 <__aeabi_dcmple>
 8007fd8:	bb30      	cbnz	r0, 8008028 <_printf_float+0xc0>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f7f8 fd93 	bl	8000b0c <__aeabi_dcmplt>
 8007fe6:	b110      	cbz	r0, 8007fee <_printf_float+0x86>
 8007fe8:	232d      	movs	r3, #45	@ 0x2d
 8007fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fee:	4a91      	ldr	r2, [pc, #580]	@ (8008234 <_printf_float+0x2cc>)
 8007ff0:	4b91      	ldr	r3, [pc, #580]	@ (8008238 <_printf_float+0x2d0>)
 8007ff2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ff6:	bf94      	ite	ls
 8007ff8:	4690      	movls	r8, r2
 8007ffa:	4698      	movhi	r8, r3
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	f02b 0304 	bic.w	r3, fp, #4
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	f04f 0900 	mov.w	r9, #0
 800800a:	9700      	str	r7, [sp, #0]
 800800c:	4633      	mov	r3, r6
 800800e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008010:	4621      	mov	r1, r4
 8008012:	4628      	mov	r0, r5
 8008014:	f000 f9d2 	bl	80083bc <_printf_common>
 8008018:	3001      	adds	r0, #1
 800801a:	f040 808d 	bne.w	8008138 <_printf_float+0x1d0>
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	b00d      	add	sp, #52	@ 0x34
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	4642      	mov	r2, r8
 800802a:	464b      	mov	r3, r9
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fd94 	bl	8000b5c <__aeabi_dcmpun>
 8008034:	b140      	cbz	r0, 8008048 <_printf_float+0xe0>
 8008036:	464b      	mov	r3, r9
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfbc      	itt	lt
 800803c:	232d      	movlt	r3, #45	@ 0x2d
 800803e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008042:	4a7e      	ldr	r2, [pc, #504]	@ (800823c <_printf_float+0x2d4>)
 8008044:	4b7e      	ldr	r3, [pc, #504]	@ (8008240 <_printf_float+0x2d8>)
 8008046:	e7d4      	b.n	8007ff2 <_printf_float+0x8a>
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800804e:	9206      	str	r2, [sp, #24]
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	d13b      	bne.n	80080cc <_printf_float+0x164>
 8008054:	2306      	movs	r3, #6
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800805c:	2300      	movs	r3, #0
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	ab0a      	add	r3, sp, #40	@ 0x28
 8008064:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008068:	ab09      	add	r3, sp, #36	@ 0x24
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	6861      	ldr	r1, [r4, #4]
 800806e:	ec49 8b10 	vmov	d0, r8, r9
 8008072:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008076:	4628      	mov	r0, r5
 8008078:	f7ff fed6 	bl	8007e28 <__cvt>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008080:	2b47      	cmp	r3, #71	@ 0x47
 8008082:	4680      	mov	r8, r0
 8008084:	d129      	bne.n	80080da <_printf_float+0x172>
 8008086:	1cc8      	adds	r0, r1, #3
 8008088:	db02      	blt.n	8008090 <_printf_float+0x128>
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	4299      	cmp	r1, r3
 800808e:	dd41      	ble.n	8008114 <_printf_float+0x1ac>
 8008090:	f1aa 0a02 	sub.w	sl, sl, #2
 8008094:	fa5f fa8a 	uxtb.w	sl, sl
 8008098:	3901      	subs	r1, #1
 800809a:	4652      	mov	r2, sl
 800809c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80080a2:	f7ff ff26 	bl	8007ef2 <__exponent>
 80080a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080a8:	1813      	adds	r3, r2, r0
 80080aa:	2a01      	cmp	r2, #1
 80080ac:	4681      	mov	r9, r0
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	dc02      	bgt.n	80080b8 <_printf_float+0x150>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d2      	lsls	r2, r2, #31
 80080b6:	d501      	bpl.n	80080bc <_printf_float+0x154>
 80080b8:	3301      	adds	r3, #1
 80080ba:	6123      	str	r3, [r4, #16]
 80080bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0a2      	beq.n	800800a <_printf_float+0xa2>
 80080c4:	232d      	movs	r3, #45	@ 0x2d
 80080c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ca:	e79e      	b.n	800800a <_printf_float+0xa2>
 80080cc:	9a06      	ldr	r2, [sp, #24]
 80080ce:	2a47      	cmp	r2, #71	@ 0x47
 80080d0:	d1c2      	bne.n	8008058 <_printf_float+0xf0>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1c0      	bne.n	8008058 <_printf_float+0xf0>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e7bd      	b.n	8008056 <_printf_float+0xee>
 80080da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080de:	d9db      	bls.n	8008098 <_printf_float+0x130>
 80080e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080e4:	d118      	bne.n	8008118 <_printf_float+0x1b0>
 80080e6:	2900      	cmp	r1, #0
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	dd0b      	ble.n	8008104 <_printf_float+0x19c>
 80080ec:	6121      	str	r1, [r4, #16]
 80080ee:	b913      	cbnz	r3, 80080f6 <_printf_float+0x18e>
 80080f0:	6822      	ldr	r2, [r4, #0]
 80080f2:	07d0      	lsls	r0, r2, #31
 80080f4:	d502      	bpl.n	80080fc <_printf_float+0x194>
 80080f6:	3301      	adds	r3, #1
 80080f8:	440b      	add	r3, r1
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080fe:	f04f 0900 	mov.w	r9, #0
 8008102:	e7db      	b.n	80080bc <_printf_float+0x154>
 8008104:	b913      	cbnz	r3, 800810c <_printf_float+0x1a4>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	07d2      	lsls	r2, r2, #31
 800810a:	d501      	bpl.n	8008110 <_printf_float+0x1a8>
 800810c:	3302      	adds	r3, #2
 800810e:	e7f4      	b.n	80080fa <_printf_float+0x192>
 8008110:	2301      	movs	r3, #1
 8008112:	e7f2      	b.n	80080fa <_printf_float+0x192>
 8008114:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800811a:	4299      	cmp	r1, r3
 800811c:	db05      	blt.n	800812a <_printf_float+0x1c2>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	6121      	str	r1, [r4, #16]
 8008122:	07d8      	lsls	r0, r3, #31
 8008124:	d5ea      	bpl.n	80080fc <_printf_float+0x194>
 8008126:	1c4b      	adds	r3, r1, #1
 8008128:	e7e7      	b.n	80080fa <_printf_float+0x192>
 800812a:	2900      	cmp	r1, #0
 800812c:	bfd4      	ite	le
 800812e:	f1c1 0202 	rsble	r2, r1, #2
 8008132:	2201      	movgt	r2, #1
 8008134:	4413      	add	r3, r2
 8008136:	e7e0      	b.n	80080fa <_printf_float+0x192>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	055a      	lsls	r2, r3, #21
 800813c:	d407      	bmi.n	800814e <_printf_float+0x1e6>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	4642      	mov	r2, r8
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	d12b      	bne.n	80081a4 <_printf_float+0x23c>
 800814c:	e767      	b.n	800801e <_printf_float+0xb6>
 800814e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008152:	f240 80dd 	bls.w	8008310 <_printf_float+0x3a8>
 8008156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	f7f8 fccb 	bl	8000af8 <__aeabi_dcmpeq>
 8008162:	2800      	cmp	r0, #0
 8008164:	d033      	beq.n	80081ce <_printf_float+0x266>
 8008166:	4a37      	ldr	r2, [pc, #220]	@ (8008244 <_printf_float+0x2dc>)
 8008168:	2301      	movs	r3, #1
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	f43f af54 	beq.w	800801e <_printf_float+0xb6>
 8008176:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800817a:	4543      	cmp	r3, r8
 800817c:	db02      	blt.n	8008184 <_printf_float+0x21c>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07d8      	lsls	r0, r3, #31
 8008182:	d50f      	bpl.n	80081a4 <_printf_float+0x23c>
 8008184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f af45 	beq.w	800801e <_printf_float+0xb6>
 8008194:	f04f 0900 	mov.w	r9, #0
 8008198:	f108 38ff 	add.w	r8, r8, #4294967295
 800819c:	f104 0a1a 	add.w	sl, r4, #26
 80081a0:	45c8      	cmp	r8, r9
 80081a2:	dc09      	bgt.n	80081b8 <_printf_float+0x250>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	079b      	lsls	r3, r3, #30
 80081a8:	f100 8103 	bmi.w	80083b2 <_printf_float+0x44a>
 80081ac:	68e0      	ldr	r0, [r4, #12]
 80081ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b0:	4298      	cmp	r0, r3
 80081b2:	bfb8      	it	lt
 80081b4:	4618      	movlt	r0, r3
 80081b6:	e734      	b.n	8008022 <_printf_float+0xba>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4652      	mov	r2, sl
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af2b 	beq.w	800801e <_printf_float+0xb6>
 80081c8:	f109 0901 	add.w	r9, r9, #1
 80081cc:	e7e8      	b.n	80081a0 <_printf_float+0x238>
 80081ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc39      	bgt.n	8008248 <_printf_float+0x2e0>
 80081d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <_printf_float+0x2dc>)
 80081d6:	2301      	movs	r3, #1
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f af1d 	beq.w	800801e <_printf_float+0xb6>
 80081e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081e8:	ea59 0303 	orrs.w	r3, r9, r3
 80081ec:	d102      	bne.n	80081f4 <_printf_float+0x28c>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d5d7      	bpl.n	80081a4 <_printf_float+0x23c>
 80081f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af0d 	beq.w	800801e <_printf_float+0xb6>
 8008204:	f04f 0a00 	mov.w	sl, #0
 8008208:	f104 0b1a 	add.w	fp, r4, #26
 800820c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820e:	425b      	negs	r3, r3
 8008210:	4553      	cmp	r3, sl
 8008212:	dc01      	bgt.n	8008218 <_printf_float+0x2b0>
 8008214:	464b      	mov	r3, r9
 8008216:	e793      	b.n	8008140 <_printf_float+0x1d8>
 8008218:	2301      	movs	r3, #1
 800821a:	465a      	mov	r2, fp
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f aefb 	beq.w	800801e <_printf_float+0xb6>
 8008228:	f10a 0a01 	add.w	sl, sl, #1
 800822c:	e7ee      	b.n	800820c <_printf_float+0x2a4>
 800822e:	bf00      	nop
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	0800ab70 	.word	0x0800ab70
 8008238:	0800ab74 	.word	0x0800ab74
 800823c:	0800ab78 	.word	0x0800ab78
 8008240:	0800ab7c 	.word	0x0800ab7c
 8008244:	0800ab80 	.word	0x0800ab80
 8008248:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800824a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800824e:	4553      	cmp	r3, sl
 8008250:	bfa8      	it	ge
 8008252:	4653      	movge	r3, sl
 8008254:	2b00      	cmp	r3, #0
 8008256:	4699      	mov	r9, r3
 8008258:	dc36      	bgt.n	80082c8 <_printf_float+0x360>
 800825a:	f04f 0b00 	mov.w	fp, #0
 800825e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008262:	f104 021a 	add.w	r2, r4, #26
 8008266:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	eba3 0309 	sub.w	r3, r3, r9
 800826e:	455b      	cmp	r3, fp
 8008270:	dc31      	bgt.n	80082d6 <_printf_float+0x36e>
 8008272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008274:	459a      	cmp	sl, r3
 8008276:	dc3a      	bgt.n	80082ee <_printf_float+0x386>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	07da      	lsls	r2, r3, #31
 800827c:	d437      	bmi.n	80082ee <_printf_float+0x386>
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	ebaa 0903 	sub.w	r9, sl, r3
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	ebaa 0303 	sub.w	r3, sl, r3
 800828a:	4599      	cmp	r9, r3
 800828c:	bfa8      	it	ge
 800828e:	4699      	movge	r9, r3
 8008290:	f1b9 0f00 	cmp.w	r9, #0
 8008294:	dc33      	bgt.n	80082fe <_printf_float+0x396>
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800829e:	f104 0b1a 	add.w	fp, r4, #26
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	ebaa 0303 	sub.w	r3, sl, r3
 80082a8:	eba3 0309 	sub.w	r3, r3, r9
 80082ac:	4543      	cmp	r3, r8
 80082ae:	f77f af79 	ble.w	80081a4 <_printf_float+0x23c>
 80082b2:	2301      	movs	r3, #1
 80082b4:	465a      	mov	r2, fp
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f aeae 	beq.w	800801e <_printf_float+0xb6>
 80082c2:	f108 0801 	add.w	r8, r8, #1
 80082c6:	e7ec      	b.n	80082a2 <_printf_float+0x33a>
 80082c8:	4642      	mov	r2, r8
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1c2      	bne.n	800825a <_printf_float+0x2f2>
 80082d4:	e6a3      	b.n	800801e <_printf_float+0xb6>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	9206      	str	r2, [sp, #24]
 80082de:	47b8      	blx	r7
 80082e0:	3001      	adds	r0, #1
 80082e2:	f43f ae9c 	beq.w	800801e <_printf_float+0xb6>
 80082e6:	9a06      	ldr	r2, [sp, #24]
 80082e8:	f10b 0b01 	add.w	fp, fp, #1
 80082ec:	e7bb      	b.n	8008266 <_printf_float+0x2fe>
 80082ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	d1c0      	bne.n	800827e <_printf_float+0x316>
 80082fc:	e68f      	b.n	800801e <_printf_float+0xb6>
 80082fe:	9a06      	ldr	r2, [sp, #24]
 8008300:	464b      	mov	r3, r9
 8008302:	4442      	add	r2, r8
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	d1c3      	bne.n	8008296 <_printf_float+0x32e>
 800830e:	e686      	b.n	800801e <_printf_float+0xb6>
 8008310:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008314:	f1ba 0f01 	cmp.w	sl, #1
 8008318:	dc01      	bgt.n	800831e <_printf_float+0x3b6>
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	d536      	bpl.n	800838c <_printf_float+0x424>
 800831e:	2301      	movs	r3, #1
 8008320:	4642      	mov	r2, r8
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f ae78 	beq.w	800801e <_printf_float+0xb6>
 800832e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	47b8      	blx	r7
 8008338:	3001      	adds	r0, #1
 800833a:	f43f ae70 	beq.w	800801e <_printf_float+0xb6>
 800833e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800834a:	f7f8 fbd5 	bl	8000af8 <__aeabi_dcmpeq>
 800834e:	b9c0      	cbnz	r0, 8008382 <_printf_float+0x41a>
 8008350:	4653      	mov	r3, sl
 8008352:	f108 0201 	add.w	r2, r8, #1
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	d10c      	bne.n	800837a <_printf_float+0x412>
 8008360:	e65d      	b.n	800801e <_printf_float+0xb6>
 8008362:	2301      	movs	r3, #1
 8008364:	465a      	mov	r2, fp
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f ae56 	beq.w	800801e <_printf_float+0xb6>
 8008372:	f108 0801 	add.w	r8, r8, #1
 8008376:	45d0      	cmp	r8, sl
 8008378:	dbf3      	blt.n	8008362 <_printf_float+0x3fa>
 800837a:	464b      	mov	r3, r9
 800837c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008380:	e6df      	b.n	8008142 <_printf_float+0x1da>
 8008382:	f04f 0800 	mov.w	r8, #0
 8008386:	f104 0b1a 	add.w	fp, r4, #26
 800838a:	e7f4      	b.n	8008376 <_printf_float+0x40e>
 800838c:	2301      	movs	r3, #1
 800838e:	4642      	mov	r2, r8
 8008390:	e7e1      	b.n	8008356 <_printf_float+0x3ee>
 8008392:	2301      	movs	r3, #1
 8008394:	464a      	mov	r2, r9
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	47b8      	blx	r7
 800839c:	3001      	adds	r0, #1
 800839e:	f43f ae3e 	beq.w	800801e <_printf_float+0xb6>
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083aa:	1a5b      	subs	r3, r3, r1
 80083ac:	4543      	cmp	r3, r8
 80083ae:	dcf0      	bgt.n	8008392 <_printf_float+0x42a>
 80083b0:	e6fc      	b.n	80081ac <_printf_float+0x244>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	f104 0919 	add.w	r9, r4, #25
 80083ba:	e7f4      	b.n	80083a6 <_printf_float+0x43e>

080083bc <_printf_common>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	4616      	mov	r6, r2
 80083c2:	4698      	mov	r8, r3
 80083c4:	688a      	ldr	r2, [r1, #8]
 80083c6:	690b      	ldr	r3, [r1, #16]
 80083c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	bfb8      	it	lt
 80083d0:	4613      	movlt	r3, r2
 80083d2:	6033      	str	r3, [r6, #0]
 80083d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083d8:	4607      	mov	r7, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	b10a      	cbz	r2, 80083e2 <_printf_common+0x26>
 80083de:	3301      	adds	r3, #1
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	0699      	lsls	r1, r3, #26
 80083e6:	bf42      	ittt	mi
 80083e8:	6833      	ldrmi	r3, [r6, #0]
 80083ea:	3302      	addmi	r3, #2
 80083ec:	6033      	strmi	r3, [r6, #0]
 80083ee:	6825      	ldr	r5, [r4, #0]
 80083f0:	f015 0506 	ands.w	r5, r5, #6
 80083f4:	d106      	bne.n	8008404 <_printf_common+0x48>
 80083f6:	f104 0a19 	add.w	sl, r4, #25
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	6832      	ldr	r2, [r6, #0]
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	42ab      	cmp	r3, r5
 8008402:	dc26      	bgt.n	8008452 <_printf_common+0x96>
 8008404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	3b00      	subs	r3, #0
 800840c:	bf18      	it	ne
 800840e:	2301      	movne	r3, #1
 8008410:	0692      	lsls	r2, r2, #26
 8008412:	d42b      	bmi.n	800846c <_printf_common+0xb0>
 8008414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008418:	4641      	mov	r1, r8
 800841a:	4638      	mov	r0, r7
 800841c:	47c8      	blx	r9
 800841e:	3001      	adds	r0, #1
 8008420:	d01e      	beq.n	8008460 <_printf_common+0xa4>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	f003 0306 	and.w	r3, r3, #6
 800842a:	2b04      	cmp	r3, #4
 800842c:	bf02      	ittt	eq
 800842e:	68e5      	ldreq	r5, [r4, #12]
 8008430:	6833      	ldreq	r3, [r6, #0]
 8008432:	1aed      	subeq	r5, r5, r3
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	bf0c      	ite	eq
 8008438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800843c:	2500      	movne	r5, #0
 800843e:	4293      	cmp	r3, r2
 8008440:	bfc4      	itt	gt
 8008442:	1a9b      	subgt	r3, r3, r2
 8008444:	18ed      	addgt	r5, r5, r3
 8008446:	2600      	movs	r6, #0
 8008448:	341a      	adds	r4, #26
 800844a:	42b5      	cmp	r5, r6
 800844c:	d11a      	bne.n	8008484 <_printf_common+0xc8>
 800844e:	2000      	movs	r0, #0
 8008450:	e008      	b.n	8008464 <_printf_common+0xa8>
 8008452:	2301      	movs	r3, #1
 8008454:	4652      	mov	r2, sl
 8008456:	4641      	mov	r1, r8
 8008458:	4638      	mov	r0, r7
 800845a:	47c8      	blx	r9
 800845c:	3001      	adds	r0, #1
 800845e:	d103      	bne.n	8008468 <_printf_common+0xac>
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	3501      	adds	r5, #1
 800846a:	e7c6      	b.n	80083fa <_printf_common+0x3e>
 800846c:	18e1      	adds	r1, r4, r3
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	2030      	movs	r0, #48	@ 0x30
 8008472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008476:	4422      	add	r2, r4
 8008478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800847c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008480:	3302      	adds	r3, #2
 8008482:	e7c7      	b.n	8008414 <_printf_common+0x58>
 8008484:	2301      	movs	r3, #1
 8008486:	4622      	mov	r2, r4
 8008488:	4641      	mov	r1, r8
 800848a:	4638      	mov	r0, r7
 800848c:	47c8      	blx	r9
 800848e:	3001      	adds	r0, #1
 8008490:	d0e6      	beq.n	8008460 <_printf_common+0xa4>
 8008492:	3601      	adds	r6, #1
 8008494:	e7d9      	b.n	800844a <_printf_common+0x8e>
	...

08008498 <_printf_i>:
 8008498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	7e0f      	ldrb	r7, [r1, #24]
 800849e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084a0:	2f78      	cmp	r7, #120	@ 0x78
 80084a2:	4691      	mov	r9, r2
 80084a4:	4680      	mov	r8, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	469a      	mov	sl, r3
 80084aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084ae:	d807      	bhi.n	80084c0 <_printf_i+0x28>
 80084b0:	2f62      	cmp	r7, #98	@ 0x62
 80084b2:	d80a      	bhi.n	80084ca <_printf_i+0x32>
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	f000 80d2 	beq.w	800865e <_printf_i+0x1c6>
 80084ba:	2f58      	cmp	r7, #88	@ 0x58
 80084bc:	f000 80b9 	beq.w	8008632 <_printf_i+0x19a>
 80084c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084c8:	e03a      	b.n	8008540 <_printf_i+0xa8>
 80084ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084ce:	2b15      	cmp	r3, #21
 80084d0:	d8f6      	bhi.n	80084c0 <_printf_i+0x28>
 80084d2:	a101      	add	r1, pc, #4	@ (adr r1, 80084d8 <_printf_i+0x40>)
 80084d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008545 	.word	0x08008545
 80084e0:	080084c1 	.word	0x080084c1
 80084e4:	080084c1 	.word	0x080084c1
 80084e8:	080084c1 	.word	0x080084c1
 80084ec:	080084c1 	.word	0x080084c1
 80084f0:	08008545 	.word	0x08008545
 80084f4:	080084c1 	.word	0x080084c1
 80084f8:	080084c1 	.word	0x080084c1
 80084fc:	080084c1 	.word	0x080084c1
 8008500:	080084c1 	.word	0x080084c1
 8008504:	08008645 	.word	0x08008645
 8008508:	0800856f 	.word	0x0800856f
 800850c:	080085ff 	.word	0x080085ff
 8008510:	080084c1 	.word	0x080084c1
 8008514:	080084c1 	.word	0x080084c1
 8008518:	08008667 	.word	0x08008667
 800851c:	080084c1 	.word	0x080084c1
 8008520:	0800856f 	.word	0x0800856f
 8008524:	080084c1 	.word	0x080084c1
 8008528:	080084c1 	.word	0x080084c1
 800852c:	08008607 	.word	0x08008607
 8008530:	6833      	ldr	r3, [r6, #0]
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6032      	str	r2, [r6, #0]
 8008538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800853c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008540:	2301      	movs	r3, #1
 8008542:	e09d      	b.n	8008680 <_printf_i+0x1e8>
 8008544:	6833      	ldr	r3, [r6, #0]
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	1d19      	adds	r1, r3, #4
 800854a:	6031      	str	r1, [r6, #0]
 800854c:	0606      	lsls	r6, r0, #24
 800854e:	d501      	bpl.n	8008554 <_printf_i+0xbc>
 8008550:	681d      	ldr	r5, [r3, #0]
 8008552:	e003      	b.n	800855c <_printf_i+0xc4>
 8008554:	0645      	lsls	r5, r0, #25
 8008556:	d5fb      	bpl.n	8008550 <_printf_i+0xb8>
 8008558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800855c:	2d00      	cmp	r5, #0
 800855e:	da03      	bge.n	8008568 <_printf_i+0xd0>
 8008560:	232d      	movs	r3, #45	@ 0x2d
 8008562:	426d      	negs	r5, r5
 8008564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008568:	4859      	ldr	r0, [pc, #356]	@ (80086d0 <_printf_i+0x238>)
 800856a:	230a      	movs	r3, #10
 800856c:	e011      	b.n	8008592 <_printf_i+0xfa>
 800856e:	6821      	ldr	r1, [r4, #0]
 8008570:	6833      	ldr	r3, [r6, #0]
 8008572:	0608      	lsls	r0, r1, #24
 8008574:	f853 5b04 	ldr.w	r5, [r3], #4
 8008578:	d402      	bmi.n	8008580 <_printf_i+0xe8>
 800857a:	0649      	lsls	r1, r1, #25
 800857c:	bf48      	it	mi
 800857e:	b2ad      	uxthmi	r5, r5
 8008580:	2f6f      	cmp	r7, #111	@ 0x6f
 8008582:	4853      	ldr	r0, [pc, #332]	@ (80086d0 <_printf_i+0x238>)
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	bf14      	ite	ne
 8008588:	230a      	movne	r3, #10
 800858a:	2308      	moveq	r3, #8
 800858c:	2100      	movs	r1, #0
 800858e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008592:	6866      	ldr	r6, [r4, #4]
 8008594:	60a6      	str	r6, [r4, #8]
 8008596:	2e00      	cmp	r6, #0
 8008598:	bfa2      	ittt	ge
 800859a:	6821      	ldrge	r1, [r4, #0]
 800859c:	f021 0104 	bicge.w	r1, r1, #4
 80085a0:	6021      	strge	r1, [r4, #0]
 80085a2:	b90d      	cbnz	r5, 80085a8 <_printf_i+0x110>
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	d04b      	beq.n	8008640 <_printf_i+0x1a8>
 80085a8:	4616      	mov	r6, r2
 80085aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80085ae:	fb03 5711 	mls	r7, r3, r1, r5
 80085b2:	5dc7      	ldrb	r7, [r0, r7]
 80085b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085b8:	462f      	mov	r7, r5
 80085ba:	42bb      	cmp	r3, r7
 80085bc:	460d      	mov	r5, r1
 80085be:	d9f4      	bls.n	80085aa <_printf_i+0x112>
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d10b      	bne.n	80085dc <_printf_i+0x144>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07df      	lsls	r7, r3, #31
 80085c8:	d508      	bpl.n	80085dc <_printf_i+0x144>
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	4299      	cmp	r1, r3
 80085d0:	bfde      	ittt	le
 80085d2:	2330      	movle	r3, #48	@ 0x30
 80085d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085dc:	1b92      	subs	r2, r2, r6
 80085de:	6122      	str	r2, [r4, #16]
 80085e0:	f8cd a000 	str.w	sl, [sp]
 80085e4:	464b      	mov	r3, r9
 80085e6:	aa03      	add	r2, sp, #12
 80085e8:	4621      	mov	r1, r4
 80085ea:	4640      	mov	r0, r8
 80085ec:	f7ff fee6 	bl	80083bc <_printf_common>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d14a      	bne.n	800868a <_printf_i+0x1f2>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b004      	add	sp, #16
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	f043 0320 	orr.w	r3, r3, #32
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	4833      	ldr	r0, [pc, #204]	@ (80086d4 <_printf_i+0x23c>)
 8008608:	2778      	movs	r7, #120	@ 0x78
 800860a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	6831      	ldr	r1, [r6, #0]
 8008612:	061f      	lsls	r7, r3, #24
 8008614:	f851 5b04 	ldr.w	r5, [r1], #4
 8008618:	d402      	bmi.n	8008620 <_printf_i+0x188>
 800861a:	065f      	lsls	r7, r3, #25
 800861c:	bf48      	it	mi
 800861e:	b2ad      	uxthmi	r5, r5
 8008620:	6031      	str	r1, [r6, #0]
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	bf44      	itt	mi
 8008626:	f043 0320 	orrmi.w	r3, r3, #32
 800862a:	6023      	strmi	r3, [r4, #0]
 800862c:	b11d      	cbz	r5, 8008636 <_printf_i+0x19e>
 800862e:	2310      	movs	r3, #16
 8008630:	e7ac      	b.n	800858c <_printf_i+0xf4>
 8008632:	4827      	ldr	r0, [pc, #156]	@ (80086d0 <_printf_i+0x238>)
 8008634:	e7e9      	b.n	800860a <_printf_i+0x172>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	f023 0320 	bic.w	r3, r3, #32
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	e7f6      	b.n	800862e <_printf_i+0x196>
 8008640:	4616      	mov	r6, r2
 8008642:	e7bd      	b.n	80085c0 <_printf_i+0x128>
 8008644:	6833      	ldr	r3, [r6, #0]
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	6961      	ldr	r1, [r4, #20]
 800864a:	1d18      	adds	r0, r3, #4
 800864c:	6030      	str	r0, [r6, #0]
 800864e:	062e      	lsls	r6, r5, #24
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	d501      	bpl.n	8008658 <_printf_i+0x1c0>
 8008654:	6019      	str	r1, [r3, #0]
 8008656:	e002      	b.n	800865e <_printf_i+0x1c6>
 8008658:	0668      	lsls	r0, r5, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0x1bc>
 800865c:	8019      	strh	r1, [r3, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	6123      	str	r3, [r4, #16]
 8008662:	4616      	mov	r6, r2
 8008664:	e7bc      	b.n	80085e0 <_printf_i+0x148>
 8008666:	6833      	ldr	r3, [r6, #0]
 8008668:	1d1a      	adds	r2, r3, #4
 800866a:	6032      	str	r2, [r6, #0]
 800866c:	681e      	ldr	r6, [r3, #0]
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	2100      	movs	r1, #0
 8008672:	4630      	mov	r0, r6
 8008674:	f7f7 fdc4 	bl	8000200 <memchr>
 8008678:	b108      	cbz	r0, 800867e <_printf_i+0x1e6>
 800867a:	1b80      	subs	r0, r0, r6
 800867c:	6060      	str	r0, [r4, #4]
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	2300      	movs	r3, #0
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008688:	e7aa      	b.n	80085e0 <_printf_i+0x148>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	4632      	mov	r2, r6
 800868e:	4649      	mov	r1, r9
 8008690:	4640      	mov	r0, r8
 8008692:	47d0      	blx	sl
 8008694:	3001      	adds	r0, #1
 8008696:	d0ad      	beq.n	80085f4 <_printf_i+0x15c>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	079b      	lsls	r3, r3, #30
 800869c:	d413      	bmi.n	80086c6 <_printf_i+0x22e>
 800869e:	68e0      	ldr	r0, [r4, #12]
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	4298      	cmp	r0, r3
 80086a4:	bfb8      	it	lt
 80086a6:	4618      	movlt	r0, r3
 80086a8:	e7a6      	b.n	80085f8 <_printf_i+0x160>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4632      	mov	r2, r6
 80086ae:	4649      	mov	r1, r9
 80086b0:	4640      	mov	r0, r8
 80086b2:	47d0      	blx	sl
 80086b4:	3001      	adds	r0, #1
 80086b6:	d09d      	beq.n	80085f4 <_printf_i+0x15c>
 80086b8:	3501      	adds	r5, #1
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	9903      	ldr	r1, [sp, #12]
 80086be:	1a5b      	subs	r3, r3, r1
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dcf2      	bgt.n	80086aa <_printf_i+0x212>
 80086c4:	e7eb      	b.n	800869e <_printf_i+0x206>
 80086c6:	2500      	movs	r5, #0
 80086c8:	f104 0619 	add.w	r6, r4, #25
 80086cc:	e7f5      	b.n	80086ba <_printf_i+0x222>
 80086ce:	bf00      	nop
 80086d0:	0800ab82 	.word	0x0800ab82
 80086d4:	0800ab93 	.word	0x0800ab93

080086d8 <std>:
 80086d8:	2300      	movs	r3, #0
 80086da:	b510      	push	{r4, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	e9c0 3300 	strd	r3, r3, [r0]
 80086e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086e6:	6083      	str	r3, [r0, #8]
 80086e8:	8181      	strh	r1, [r0, #12]
 80086ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80086ec:	81c2      	strh	r2, [r0, #14]
 80086ee:	6183      	str	r3, [r0, #24]
 80086f0:	4619      	mov	r1, r3
 80086f2:	2208      	movs	r2, #8
 80086f4:	305c      	adds	r0, #92	@ 0x5c
 80086f6:	f000 f9a9 	bl	8008a4c <memset>
 80086fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <std+0x58>)
 80086fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80086fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <std+0x5c>)
 8008700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008702:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <std+0x60>)
 8008704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008706:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <std+0x64>)
 8008708:	6323      	str	r3, [r4, #48]	@ 0x30
 800870a:	4b0d      	ldr	r3, [pc, #52]	@ (8008740 <std+0x68>)
 800870c:	6224      	str	r4, [r4, #32]
 800870e:	429c      	cmp	r4, r3
 8008710:	d006      	beq.n	8008720 <std+0x48>
 8008712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008716:	4294      	cmp	r4, r2
 8008718:	d002      	beq.n	8008720 <std+0x48>
 800871a:	33d0      	adds	r3, #208	@ 0xd0
 800871c:	429c      	cmp	r4, r3
 800871e:	d105      	bne.n	800872c <std+0x54>
 8008720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008728:	f000 ba0c 	b.w	8008b44 <__retarget_lock_init_recursive>
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	0800889d 	.word	0x0800889d
 8008734:	080088bf 	.word	0x080088bf
 8008738:	080088f7 	.word	0x080088f7
 800873c:	0800891b 	.word	0x0800891b
 8008740:	20004884 	.word	0x20004884

08008744 <stdio_exit_handler>:
 8008744:	4a02      	ldr	r2, [pc, #8]	@ (8008750 <stdio_exit_handler+0xc>)
 8008746:	4903      	ldr	r1, [pc, #12]	@ (8008754 <stdio_exit_handler+0x10>)
 8008748:	4803      	ldr	r0, [pc, #12]	@ (8008758 <stdio_exit_handler+0x14>)
 800874a:	f000 b869 	b.w	8008820 <_fwalk_sglue>
 800874e:	bf00      	nop
 8008750:	2000000c 	.word	0x2000000c
 8008754:	0800a4a5 	.word	0x0800a4a5
 8008758:	2000001c 	.word	0x2000001c

0800875c <cleanup_stdio>:
 800875c:	6841      	ldr	r1, [r0, #4]
 800875e:	4b0c      	ldr	r3, [pc, #48]	@ (8008790 <cleanup_stdio+0x34>)
 8008760:	4299      	cmp	r1, r3
 8008762:	b510      	push	{r4, lr}
 8008764:	4604      	mov	r4, r0
 8008766:	d001      	beq.n	800876c <cleanup_stdio+0x10>
 8008768:	f001 fe9c 	bl	800a4a4 <_fflush_r>
 800876c:	68a1      	ldr	r1, [r4, #8]
 800876e:	4b09      	ldr	r3, [pc, #36]	@ (8008794 <cleanup_stdio+0x38>)
 8008770:	4299      	cmp	r1, r3
 8008772:	d002      	beq.n	800877a <cleanup_stdio+0x1e>
 8008774:	4620      	mov	r0, r4
 8008776:	f001 fe95 	bl	800a4a4 <_fflush_r>
 800877a:	68e1      	ldr	r1, [r4, #12]
 800877c:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <cleanup_stdio+0x3c>)
 800877e:	4299      	cmp	r1, r3
 8008780:	d004      	beq.n	800878c <cleanup_stdio+0x30>
 8008782:	4620      	mov	r0, r4
 8008784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008788:	f001 be8c 	b.w	800a4a4 <_fflush_r>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	bf00      	nop
 8008790:	20004884 	.word	0x20004884
 8008794:	200048ec 	.word	0x200048ec
 8008798:	20004954 	.word	0x20004954

0800879c <global_stdio_init.part.0>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4b0b      	ldr	r3, [pc, #44]	@ (80087cc <global_stdio_init.part.0+0x30>)
 80087a0:	4c0b      	ldr	r4, [pc, #44]	@ (80087d0 <global_stdio_init.part.0+0x34>)
 80087a2:	4a0c      	ldr	r2, [pc, #48]	@ (80087d4 <global_stdio_init.part.0+0x38>)
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	4620      	mov	r0, r4
 80087a8:	2200      	movs	r2, #0
 80087aa:	2104      	movs	r1, #4
 80087ac:	f7ff ff94 	bl	80086d8 <std>
 80087b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087b4:	2201      	movs	r2, #1
 80087b6:	2109      	movs	r1, #9
 80087b8:	f7ff ff8e 	bl	80086d8 <std>
 80087bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087c0:	2202      	movs	r2, #2
 80087c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c6:	2112      	movs	r1, #18
 80087c8:	f7ff bf86 	b.w	80086d8 <std>
 80087cc:	200049bc 	.word	0x200049bc
 80087d0:	20004884 	.word	0x20004884
 80087d4:	08008745 	.word	0x08008745

080087d8 <__sfp_lock_acquire>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__sfp_lock_acquire+0x8>)
 80087da:	f000 b9b4 	b.w	8008b46 <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	200049c5 	.word	0x200049c5

080087e4 <__sfp_lock_release>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__sfp_lock_release+0x8>)
 80087e6:	f000 b9af 	b.w	8008b48 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	200049c5 	.word	0x200049c5

080087f0 <__sinit>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	f7ff fff0 	bl	80087d8 <__sfp_lock_acquire>
 80087f8:	6a23      	ldr	r3, [r4, #32]
 80087fa:	b11b      	cbz	r3, 8008804 <__sinit+0x14>
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008800:	f7ff bff0 	b.w	80087e4 <__sfp_lock_release>
 8008804:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <__sinit+0x28>)
 8008806:	6223      	str	r3, [r4, #32]
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <__sinit+0x2c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f5      	bne.n	80087fc <__sinit+0xc>
 8008810:	f7ff ffc4 	bl	800879c <global_stdio_init.part.0>
 8008814:	e7f2      	b.n	80087fc <__sinit+0xc>
 8008816:	bf00      	nop
 8008818:	0800875d 	.word	0x0800875d
 800881c:	200049bc 	.word	0x200049bc

08008820 <_fwalk_sglue>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	4607      	mov	r7, r0
 8008826:	4688      	mov	r8, r1
 8008828:	4614      	mov	r4, r2
 800882a:	2600      	movs	r6, #0
 800882c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008830:	f1b9 0901 	subs.w	r9, r9, #1
 8008834:	d505      	bpl.n	8008842 <_fwalk_sglue+0x22>
 8008836:	6824      	ldr	r4, [r4, #0]
 8008838:	2c00      	cmp	r4, #0
 800883a:	d1f7      	bne.n	800882c <_fwalk_sglue+0xc>
 800883c:	4630      	mov	r0, r6
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d907      	bls.n	8008858 <_fwalk_sglue+0x38>
 8008848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800884c:	3301      	adds	r3, #1
 800884e:	d003      	beq.n	8008858 <_fwalk_sglue+0x38>
 8008850:	4629      	mov	r1, r5
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	4306      	orrs	r6, r0
 8008858:	3568      	adds	r5, #104	@ 0x68
 800885a:	e7e9      	b.n	8008830 <_fwalk_sglue+0x10>

0800885c <siprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b500      	push	{lr}
 8008860:	b09c      	sub	sp, #112	@ 0x70
 8008862:	ab1d      	add	r3, sp, #116	@ 0x74
 8008864:	9002      	str	r0, [sp, #8]
 8008866:	9006      	str	r0, [sp, #24]
 8008868:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800886c:	4809      	ldr	r0, [pc, #36]	@ (8008894 <siprintf+0x38>)
 800886e:	9107      	str	r1, [sp, #28]
 8008870:	9104      	str	r1, [sp, #16]
 8008872:	4909      	ldr	r1, [pc, #36]	@ (8008898 <siprintf+0x3c>)
 8008874:	f853 2b04 	ldr.w	r2, [r3], #4
 8008878:	9105      	str	r1, [sp, #20]
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	a902      	add	r1, sp, #8
 8008880:	f001 fc90 	bl	800a1a4 <_svfiprintf_r>
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
 800888a:	b01c      	add	sp, #112	@ 0x70
 800888c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008890:	b003      	add	sp, #12
 8008892:	4770      	bx	lr
 8008894:	20000018 	.word	0x20000018
 8008898:	ffff0208 	.word	0xffff0208

0800889c <__sread>:
 800889c:	b510      	push	{r4, lr}
 800889e:	460c      	mov	r4, r1
 80088a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a4:	f000 f900 	bl	8008aa8 <_read_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	bfab      	itete	ge
 80088ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088ae:	89a3      	ldrhlt	r3, [r4, #12]
 80088b0:	181b      	addge	r3, r3, r0
 80088b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088b6:	bfac      	ite	ge
 80088b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088ba:	81a3      	strhlt	r3, [r4, #12]
 80088bc:	bd10      	pop	{r4, pc}

080088be <__swrite>:
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	461f      	mov	r7, r3
 80088c4:	898b      	ldrh	r3, [r1, #12]
 80088c6:	05db      	lsls	r3, r3, #23
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4616      	mov	r6, r2
 80088ce:	d505      	bpl.n	80088dc <__swrite+0x1e>
 80088d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d4:	2302      	movs	r3, #2
 80088d6:	2200      	movs	r2, #0
 80088d8:	f000 f8d4 	bl	8008a84 <_lseek_r>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	f000 b8eb 	b.w	8008acc <_write_r>

080088f6 <__sseek>:
 80088f6:	b510      	push	{r4, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fe:	f000 f8c1 	bl	8008a84 <_lseek_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	bf15      	itete	ne
 8008908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800890a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800890e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008912:	81a3      	strheq	r3, [r4, #12]
 8008914:	bf18      	it	ne
 8008916:	81a3      	strhne	r3, [r4, #12]
 8008918:	bd10      	pop	{r4, pc}

0800891a <__sclose>:
 800891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891e:	f000 b8a1 	b.w	8008a64 <_close_r>

08008922 <__swbuf_r>:
 8008922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008924:	460e      	mov	r6, r1
 8008926:	4614      	mov	r4, r2
 8008928:	4605      	mov	r5, r0
 800892a:	b118      	cbz	r0, 8008934 <__swbuf_r+0x12>
 800892c:	6a03      	ldr	r3, [r0, #32]
 800892e:	b90b      	cbnz	r3, 8008934 <__swbuf_r+0x12>
 8008930:	f7ff ff5e 	bl	80087f0 <__sinit>
 8008934:	69a3      	ldr	r3, [r4, #24]
 8008936:	60a3      	str	r3, [r4, #8]
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	071a      	lsls	r2, r3, #28
 800893c:	d501      	bpl.n	8008942 <__swbuf_r+0x20>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	b943      	cbnz	r3, 8008954 <__swbuf_r+0x32>
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f82b 	bl	80089a0 <__swsetup_r>
 800894a:	b118      	cbz	r0, 8008954 <__swbuf_r+0x32>
 800894c:	f04f 37ff 	mov.w	r7, #4294967295
 8008950:	4638      	mov	r0, r7
 8008952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	6922      	ldr	r2, [r4, #16]
 8008958:	1a98      	subs	r0, r3, r2
 800895a:	6963      	ldr	r3, [r4, #20]
 800895c:	b2f6      	uxtb	r6, r6
 800895e:	4283      	cmp	r3, r0
 8008960:	4637      	mov	r7, r6
 8008962:	dc05      	bgt.n	8008970 <__swbuf_r+0x4e>
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f001 fd9c 	bl	800a4a4 <_fflush_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	d1ed      	bne.n	800894c <__swbuf_r+0x2a>
 8008970:	68a3      	ldr	r3, [r4, #8]
 8008972:	3b01      	subs	r3, #1
 8008974:	60a3      	str	r3, [r4, #8]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	701e      	strb	r6, [r3, #0]
 800897e:	6962      	ldr	r2, [r4, #20]
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	429a      	cmp	r2, r3
 8008984:	d004      	beq.n	8008990 <__swbuf_r+0x6e>
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d5e1      	bpl.n	8008950 <__swbuf_r+0x2e>
 800898c:	2e0a      	cmp	r6, #10
 800898e:	d1df      	bne.n	8008950 <__swbuf_r+0x2e>
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f001 fd86 	bl	800a4a4 <_fflush_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	d0d9      	beq.n	8008950 <__swbuf_r+0x2e>
 800899c:	e7d6      	b.n	800894c <__swbuf_r+0x2a>
	...

080089a0 <__swsetup_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4b29      	ldr	r3, [pc, #164]	@ (8008a48 <__swsetup_r+0xa8>)
 80089a4:	4605      	mov	r5, r0
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	460c      	mov	r4, r1
 80089aa:	b118      	cbz	r0, 80089b4 <__swsetup_r+0x14>
 80089ac:	6a03      	ldr	r3, [r0, #32]
 80089ae:	b90b      	cbnz	r3, 80089b4 <__swsetup_r+0x14>
 80089b0:	f7ff ff1e 	bl	80087f0 <__sinit>
 80089b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b8:	0719      	lsls	r1, r3, #28
 80089ba:	d422      	bmi.n	8008a02 <__swsetup_r+0x62>
 80089bc:	06da      	lsls	r2, r3, #27
 80089be:	d407      	bmi.n	80089d0 <__swsetup_r+0x30>
 80089c0:	2209      	movs	r2, #9
 80089c2:	602a      	str	r2, [r5, #0]
 80089c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	f04f 30ff 	mov.w	r0, #4294967295
 80089ce:	e033      	b.n	8008a38 <__swsetup_r+0x98>
 80089d0:	0758      	lsls	r0, r3, #29
 80089d2:	d512      	bpl.n	80089fa <__swsetup_r+0x5a>
 80089d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089d6:	b141      	cbz	r1, 80089ea <__swsetup_r+0x4a>
 80089d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089dc:	4299      	cmp	r1, r3
 80089de:	d002      	beq.n	80089e6 <__swsetup_r+0x46>
 80089e0:	4628      	mov	r0, r5
 80089e2:	f000 ff01 	bl	80097e8 <_free_r>
 80089e6:	2300      	movs	r3, #0
 80089e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6063      	str	r3, [r4, #4]
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f043 0308 	orr.w	r3, r3, #8
 8008a00:	81a3      	strh	r3, [r4, #12]
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	b94b      	cbnz	r3, 8008a1a <__swsetup_r+0x7a>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a10:	d003      	beq.n	8008a1a <__swsetup_r+0x7a>
 8008a12:	4621      	mov	r1, r4
 8008a14:	4628      	mov	r0, r5
 8008a16:	f001 fd93 	bl	800a540 <__smakebuf_r>
 8008a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1e:	f013 0201 	ands.w	r2, r3, #1
 8008a22:	d00a      	beq.n	8008a3a <__swsetup_r+0x9a>
 8008a24:	2200      	movs	r2, #0
 8008a26:	60a2      	str	r2, [r4, #8]
 8008a28:	6962      	ldr	r2, [r4, #20]
 8008a2a:	4252      	negs	r2, r2
 8008a2c:	61a2      	str	r2, [r4, #24]
 8008a2e:	6922      	ldr	r2, [r4, #16]
 8008a30:	b942      	cbnz	r2, 8008a44 <__swsetup_r+0xa4>
 8008a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a36:	d1c5      	bne.n	80089c4 <__swsetup_r+0x24>
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
 8008a3a:	0799      	lsls	r1, r3, #30
 8008a3c:	bf58      	it	pl
 8008a3e:	6962      	ldrpl	r2, [r4, #20]
 8008a40:	60a2      	str	r2, [r4, #8]
 8008a42:	e7f4      	b.n	8008a2e <__swsetup_r+0x8e>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7f7      	b.n	8008a38 <__swsetup_r+0x98>
 8008a48:	20000018 	.word	0x20000018

08008a4c <memset>:
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d100      	bne.n	8008a56 <memset+0xa>
 8008a54:	4770      	bx	lr
 8008a56:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5a:	e7f9      	b.n	8008a50 <memset+0x4>

08008a5c <_localeconv_r>:
 8008a5c:	4800      	ldr	r0, [pc, #0]	@ (8008a60 <_localeconv_r+0x4>)
 8008a5e:	4770      	bx	lr
 8008a60:	20000158 	.word	0x20000158

08008a64 <_close_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d06      	ldr	r5, [pc, #24]	@ (8008a80 <_close_r+0x1c>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7f9 fb36 	bl	80020e0 <_close>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_close_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_close_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	200049c0 	.word	0x200049c0

08008a84 <_lseek_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	@ (8008aa4 <_lseek_r+0x20>)
 8008a88:	4604      	mov	r4, r0
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f7f9 fb4b 	bl	800212e <_lseek>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_lseek_r+0x1e>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_lseek_r+0x1e>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	200049c0 	.word	0x200049c0

08008aa8 <_read_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ac8 <_read_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f9 fad9 	bl	800206e <_read>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_read_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_read_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	200049c0 	.word	0x200049c0

08008acc <_write_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	@ (8008aec <_write_r+0x20>)
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	602a      	str	r2, [r5, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f7f9 fae4 	bl	80020a8 <_write>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_write_r+0x1e>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_write_r+0x1e>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	200049c0 	.word	0x200049c0

08008af0 <__errno>:
 8008af0:	4b01      	ldr	r3, [pc, #4]	@ (8008af8 <__errno+0x8>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000018 	.word	0x20000018

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4d0d      	ldr	r5, [pc, #52]	@ (8008b34 <__libc_init_array+0x38>)
 8008b00:	4c0d      	ldr	r4, [pc, #52]	@ (8008b38 <__libc_init_array+0x3c>)
 8008b02:	1b64      	subs	r4, r4, r5
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	2600      	movs	r6, #0
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b3c <__libc_init_array+0x40>)
 8008b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b40 <__libc_init_array+0x44>)
 8008b10:	f001 ffd2 	bl	800aab8 <_init>
 8008b14:	1b64      	subs	r4, r4, r5
 8008b16:	10a4      	asrs	r4, r4, #2
 8008b18:	2600      	movs	r6, #0
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b24:	4798      	blx	r3
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2e:	4798      	blx	r3
 8008b30:	3601      	adds	r6, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	0800aee8 	.word	0x0800aee8
 8008b38:	0800aee8 	.word	0x0800aee8
 8008b3c:	0800aee8 	.word	0x0800aee8
 8008b40:	0800aeec 	.word	0x0800aeec

08008b44 <__retarget_lock_init_recursive>:
 8008b44:	4770      	bx	lr

08008b46 <__retarget_lock_acquire_recursive>:
 8008b46:	4770      	bx	lr

08008b48 <__retarget_lock_release_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <quorem>:
 8008b4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4e:	6903      	ldr	r3, [r0, #16]
 8008b50:	690c      	ldr	r4, [r1, #16]
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	4607      	mov	r7, r0
 8008b56:	db7e      	blt.n	8008c56 <quorem+0x10c>
 8008b58:	3c01      	subs	r4, #1
 8008b5a:	f101 0814 	add.w	r8, r1, #20
 8008b5e:	00a3      	lsls	r3, r4, #2
 8008b60:	f100 0514 	add.w	r5, r0, #20
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b74:	3301      	adds	r3, #1
 8008b76:	429a      	cmp	r2, r3
 8008b78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b80:	d32e      	bcc.n	8008be0 <quorem+0x96>
 8008b82:	f04f 0a00 	mov.w	sl, #0
 8008b86:	46c4      	mov	ip, r8
 8008b88:	46ae      	mov	lr, r5
 8008b8a:	46d3      	mov	fp, sl
 8008b8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b90:	b298      	uxth	r0, r3
 8008b92:	fb06 a000 	mla	r0, r6, r0, sl
 8008b96:	0c02      	lsrs	r2, r0, #16
 8008b98:	0c1b      	lsrs	r3, r3, #16
 8008b9a:	fb06 2303 	mla	r3, r6, r3, r2
 8008b9e:	f8de 2000 	ldr.w	r2, [lr]
 8008ba2:	b280      	uxth	r0, r0
 8008ba4:	b292      	uxth	r2, r2
 8008ba6:	1a12      	subs	r2, r2, r0
 8008ba8:	445a      	add	r2, fp
 8008baa:	f8de 0000 	ldr.w	r0, [lr]
 8008bae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008bb8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008bc2:	45e1      	cmp	r9, ip
 8008bc4:	f84e 2b04 	str.w	r2, [lr], #4
 8008bc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008bcc:	d2de      	bcs.n	8008b8c <quorem+0x42>
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	58eb      	ldr	r3, [r5, r3]
 8008bd2:	b92b      	cbnz	r3, 8008be0 <quorem+0x96>
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	3b04      	subs	r3, #4
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	461a      	mov	r2, r3
 8008bdc:	d32f      	bcc.n	8008c3e <quorem+0xf4>
 8008bde:	613c      	str	r4, [r7, #16]
 8008be0:	4638      	mov	r0, r7
 8008be2:	f001 f97b 	bl	8009edc <__mcmp>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	db25      	blt.n	8008c36 <quorem+0xec>
 8008bea:	4629      	mov	r1, r5
 8008bec:	2000      	movs	r0, #0
 8008bee:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bf2:	f8d1 c000 	ldr.w	ip, [r1]
 8008bf6:	fa1f fe82 	uxth.w	lr, r2
 8008bfa:	fa1f f38c 	uxth.w	r3, ip
 8008bfe:	eba3 030e 	sub.w	r3, r3, lr
 8008c02:	4403      	add	r3, r0
 8008c04:	0c12      	lsrs	r2, r2, #16
 8008c06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c14:	45c1      	cmp	r9, r8
 8008c16:	f841 3b04 	str.w	r3, [r1], #4
 8008c1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c1e:	d2e6      	bcs.n	8008bee <quorem+0xa4>
 8008c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c28:	b922      	cbnz	r2, 8008c34 <quorem+0xea>
 8008c2a:	3b04      	subs	r3, #4
 8008c2c:	429d      	cmp	r5, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	d30b      	bcc.n	8008c4a <quorem+0x100>
 8008c32:	613c      	str	r4, [r7, #16]
 8008c34:	3601      	adds	r6, #1
 8008c36:	4630      	mov	r0, r6
 8008c38:	b003      	add	sp, #12
 8008c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	6812      	ldr	r2, [r2, #0]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	d1cb      	bne.n	8008bde <quorem+0x94>
 8008c46:	3c01      	subs	r4, #1
 8008c48:	e7c6      	b.n	8008bd8 <quorem+0x8e>
 8008c4a:	6812      	ldr	r2, [r2, #0]
 8008c4c:	3b04      	subs	r3, #4
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	d1ef      	bne.n	8008c32 <quorem+0xe8>
 8008c52:	3c01      	subs	r4, #1
 8008c54:	e7ea      	b.n	8008c2c <quorem+0xe2>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e7ee      	b.n	8008c38 <quorem+0xee>
 8008c5a:	0000      	movs	r0, r0
 8008c5c:	0000      	movs	r0, r0
	...

08008c60 <_dtoa_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	69c7      	ldr	r7, [r0, #28]
 8008c66:	b099      	sub	sp, #100	@ 0x64
 8008c68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c6c:	ec55 4b10 	vmov	r4, r5, d0
 8008c70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008c72:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c74:	4683      	mov	fp, r0
 8008c76:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c7a:	b97f      	cbnz	r7, 8008c9c <_dtoa_r+0x3c>
 8008c7c:	2010      	movs	r0, #16
 8008c7e:	f000 fdfd 	bl	800987c <malloc>
 8008c82:	4602      	mov	r2, r0
 8008c84:	f8cb 001c 	str.w	r0, [fp, #28]
 8008c88:	b920      	cbnz	r0, 8008c94 <_dtoa_r+0x34>
 8008c8a:	4ba7      	ldr	r3, [pc, #668]	@ (8008f28 <_dtoa_r+0x2c8>)
 8008c8c:	21ef      	movs	r1, #239	@ 0xef
 8008c8e:	48a7      	ldr	r0, [pc, #668]	@ (8008f2c <_dtoa_r+0x2cc>)
 8008c90:	f001 fcec 	bl	800a66c <__assert_func>
 8008c94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c98:	6007      	str	r7, [r0, #0]
 8008c9a:	60c7      	str	r7, [r0, #12]
 8008c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	b159      	cbz	r1, 8008cbc <_dtoa_r+0x5c>
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	604a      	str	r2, [r1, #4]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4093      	lsls	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f000 feda 	bl	8009a68 <_Bfree>
 8008cb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	1e2b      	subs	r3, r5, #0
 8008cbe:	bfb9      	ittee	lt
 8008cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008cc4:	9303      	strlt	r3, [sp, #12]
 8008cc6:	2300      	movge	r3, #0
 8008cc8:	6033      	strge	r3, [r6, #0]
 8008cca:	9f03      	ldr	r7, [sp, #12]
 8008ccc:	4b98      	ldr	r3, [pc, #608]	@ (8008f30 <_dtoa_r+0x2d0>)
 8008cce:	bfbc      	itt	lt
 8008cd0:	2201      	movlt	r2, #1
 8008cd2:	6032      	strlt	r2, [r6, #0]
 8008cd4:	43bb      	bics	r3, r7
 8008cd6:	d112      	bne.n	8008cfe <_dtoa_r+0x9e>
 8008cd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008cda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ce4:	4323      	orrs	r3, r4
 8008ce6:	f000 854d 	beq.w	8009784 <_dtoa_r+0xb24>
 8008cea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f44 <_dtoa_r+0x2e4>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 854f 	beq.w	8009794 <_dtoa_r+0xb34>
 8008cf6:	f10a 0303 	add.w	r3, sl, #3
 8008cfa:	f000 bd49 	b.w	8009790 <_dtoa_r+0xb30>
 8008cfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d02:	2200      	movs	r2, #0
 8008d04:	ec51 0b17 	vmov	r0, r1, d7
 8008d08:	2300      	movs	r3, #0
 8008d0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008d0e:	f7f7 fef3 	bl	8000af8 <__aeabi_dcmpeq>
 8008d12:	4680      	mov	r8, r0
 8008d14:	b158      	cbz	r0, 8008d2e <_dtoa_r+0xce>
 8008d16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d18:	2301      	movs	r3, #1
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d1e:	b113      	cbz	r3, 8008d26 <_dtoa_r+0xc6>
 8008d20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d22:	4b84      	ldr	r3, [pc, #528]	@ (8008f34 <_dtoa_r+0x2d4>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008f48 <_dtoa_r+0x2e8>
 8008d2a:	f000 bd33 	b.w	8009794 <_dtoa_r+0xb34>
 8008d2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d32:	aa16      	add	r2, sp, #88	@ 0x58
 8008d34:	a917      	add	r1, sp, #92	@ 0x5c
 8008d36:	4658      	mov	r0, fp
 8008d38:	f001 f980 	bl	800a03c <__d2b>
 8008d3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d40:	4681      	mov	r9, r0
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	d077      	beq.n	8008e36 <_dtoa_r+0x1d6>
 8008d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d60:	4619      	mov	r1, r3
 8008d62:	2200      	movs	r2, #0
 8008d64:	4b74      	ldr	r3, [pc, #464]	@ (8008f38 <_dtoa_r+0x2d8>)
 8008d66:	f7f7 faa7 	bl	80002b8 <__aeabi_dsub>
 8008d6a:	a369      	add	r3, pc, #420	@ (adr r3, 8008f10 <_dtoa_r+0x2b0>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fc5a 	bl	8000628 <__aeabi_dmul>
 8008d74:	a368      	add	r3, pc, #416	@ (adr r3, 8008f18 <_dtoa_r+0x2b8>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fa9f 	bl	80002bc <__adddf3>
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4630      	mov	r0, r6
 8008d82:	460d      	mov	r5, r1
 8008d84:	f7f7 fbe6 	bl	8000554 <__aeabi_i2d>
 8008d88:	a365      	add	r3, pc, #404	@ (adr r3, 8008f20 <_dtoa_r+0x2c0>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fc4b 	bl	8000628 <__aeabi_dmul>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7f7 fa8f 	bl	80002bc <__adddf3>
 8008d9e:	4604      	mov	r4, r0
 8008da0:	460d      	mov	r5, r1
 8008da2:	f7f7 fef1 	bl	8000b88 <__aeabi_d2iz>
 8008da6:	2200      	movs	r2, #0
 8008da8:	4607      	mov	r7, r0
 8008daa:	2300      	movs	r3, #0
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 feac 	bl	8000b0c <__aeabi_dcmplt>
 8008db4:	b140      	cbz	r0, 8008dc8 <_dtoa_r+0x168>
 8008db6:	4638      	mov	r0, r7
 8008db8:	f7f7 fbcc 	bl	8000554 <__aeabi_i2d>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f7f7 fe9a 	bl	8000af8 <__aeabi_dcmpeq>
 8008dc4:	b900      	cbnz	r0, 8008dc8 <_dtoa_r+0x168>
 8008dc6:	3f01      	subs	r7, #1
 8008dc8:	2f16      	cmp	r7, #22
 8008dca:	d851      	bhi.n	8008e70 <_dtoa_r+0x210>
 8008dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8008f3c <_dtoa_r+0x2dc>)
 8008dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dda:	f7f7 fe97 	bl	8000b0c <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d048      	beq.n	8008e74 <_dtoa_r+0x214>
 8008de2:	3f01      	subs	r7, #1
 8008de4:	2300      	movs	r3, #0
 8008de6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008de8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008dea:	1b9b      	subs	r3, r3, r6
 8008dec:	1e5a      	subs	r2, r3, #1
 8008dee:	bf44      	itt	mi
 8008df0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008df4:	2300      	movmi	r3, #0
 8008df6:	9208      	str	r2, [sp, #32]
 8008df8:	bf54      	ite	pl
 8008dfa:	f04f 0800 	movpl.w	r8, #0
 8008dfe:	9308      	strmi	r3, [sp, #32]
 8008e00:	2f00      	cmp	r7, #0
 8008e02:	db39      	blt.n	8008e78 <_dtoa_r+0x218>
 8008e04:	9b08      	ldr	r3, [sp, #32]
 8008e06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008e08:	443b      	add	r3, r7
 8008e0a:	9308      	str	r3, [sp, #32]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d864      	bhi.n	8008ee0 <_dtoa_r+0x280>
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	bfc4      	itt	gt
 8008e1a:	3b04      	subgt	r3, #4
 8008e1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e20:	f1a3 0302 	sub.w	r3, r3, #2
 8008e24:	bfcc      	ite	gt
 8008e26:	2400      	movgt	r4, #0
 8008e28:	2401      	movle	r4, #1
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d863      	bhi.n	8008ef6 <_dtoa_r+0x296>
 8008e2e:	e8df f003 	tbb	[pc, r3]
 8008e32:	372a      	.short	0x372a
 8008e34:	5535      	.short	0x5535
 8008e36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008e3a:	441e      	add	r6, r3
 8008e3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	bfc1      	itttt	gt
 8008e44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e48:	409f      	lslgt	r7, r3
 8008e4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e52:	bfd6      	itet	le
 8008e54:	f1c3 0320 	rsble	r3, r3, #32
 8008e58:	ea47 0003 	orrgt.w	r0, r7, r3
 8008e5c:	fa04 f003 	lslle.w	r0, r4, r3
 8008e60:	f7f7 fb68 	bl	8000534 <__aeabi_ui2d>
 8008e64:	2201      	movs	r2, #1
 8008e66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e6a:	3e01      	subs	r6, #1
 8008e6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e6e:	e777      	b.n	8008d60 <_dtoa_r+0x100>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7b8      	b.n	8008de6 <_dtoa_r+0x186>
 8008e74:	9012      	str	r0, [sp, #72]	@ 0x48
 8008e76:	e7b7      	b.n	8008de8 <_dtoa_r+0x188>
 8008e78:	427b      	negs	r3, r7
 8008e7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	eba8 0807 	sub.w	r8, r8, r7
 8008e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e84:	e7c4      	b.n	8008e10 <_dtoa_r+0x1b0>
 8008e86:	2300      	movs	r3, #0
 8008e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dc35      	bgt.n	8008efc <_dtoa_r+0x29c>
 8008e90:	2301      	movs	r3, #1
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	9307      	str	r3, [sp, #28]
 8008e96:	461a      	mov	r2, r3
 8008e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e9a:	e00b      	b.n	8008eb4 <_dtoa_r+0x254>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e7f3      	b.n	8008e88 <_dtoa_r+0x228>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ea6:	18fb      	adds	r3, r7, r3
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	bfb8      	it	lt
 8008eb2:	2301      	movlt	r3, #1
 8008eb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008eb8:	2100      	movs	r1, #0
 8008eba:	2204      	movs	r2, #4
 8008ebc:	f102 0514 	add.w	r5, r2, #20
 8008ec0:	429d      	cmp	r5, r3
 8008ec2:	d91f      	bls.n	8008f04 <_dtoa_r+0x2a4>
 8008ec4:	6041      	str	r1, [r0, #4]
 8008ec6:	4658      	mov	r0, fp
 8008ec8:	f000 fd8e 	bl	80099e8 <_Balloc>
 8008ecc:	4682      	mov	sl, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d13c      	bne.n	8008f4c <_dtoa_r+0x2ec>
 8008ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f40 <_dtoa_r+0x2e0>)
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008eda:	e6d8      	b.n	8008c8e <_dtoa_r+0x2e>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7e0      	b.n	8008ea2 <_dtoa_r+0x242>
 8008ee0:	2401      	movs	r4, #1
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	9307      	str	r3, [sp, #28]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2312      	movs	r3, #18
 8008ef4:	e7d0      	b.n	8008e98 <_dtoa_r+0x238>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008efa:	e7f5      	b.n	8008ee8 <_dtoa_r+0x288>
 8008efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	9307      	str	r3, [sp, #28]
 8008f02:	e7d7      	b.n	8008eb4 <_dtoa_r+0x254>
 8008f04:	3101      	adds	r1, #1
 8008f06:	0052      	lsls	r2, r2, #1
 8008f08:	e7d8      	b.n	8008ebc <_dtoa_r+0x25c>
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w
 8008f10:	636f4361 	.word	0x636f4361
 8008f14:	3fd287a7 	.word	0x3fd287a7
 8008f18:	8b60c8b3 	.word	0x8b60c8b3
 8008f1c:	3fc68a28 	.word	0x3fc68a28
 8008f20:	509f79fb 	.word	0x509f79fb
 8008f24:	3fd34413 	.word	0x3fd34413
 8008f28:	0800abb1 	.word	0x0800abb1
 8008f2c:	0800abc8 	.word	0x0800abc8
 8008f30:	7ff00000 	.word	0x7ff00000
 8008f34:	0800ab81 	.word	0x0800ab81
 8008f38:	3ff80000 	.word	0x3ff80000
 8008f3c:	0800acc0 	.word	0x0800acc0
 8008f40:	0800ac20 	.word	0x0800ac20
 8008f44:	0800abad 	.word	0x0800abad
 8008f48:	0800ab80 	.word	0x0800ab80
 8008f4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f50:	6018      	str	r0, [r3, #0]
 8008f52:	9b07      	ldr	r3, [sp, #28]
 8008f54:	2b0e      	cmp	r3, #14
 8008f56:	f200 80a4 	bhi.w	80090a2 <_dtoa_r+0x442>
 8008f5a:	2c00      	cmp	r4, #0
 8008f5c:	f000 80a1 	beq.w	80090a2 <_dtoa_r+0x442>
 8008f60:	2f00      	cmp	r7, #0
 8008f62:	dd33      	ble.n	8008fcc <_dtoa_r+0x36c>
 8008f64:	4bad      	ldr	r3, [pc, #692]	@ (800921c <_dtoa_r+0x5bc>)
 8008f66:	f007 020f 	and.w	r2, r7, #15
 8008f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6e:	ed93 7b00 	vldr	d7, [r3]
 8008f72:	05f8      	lsls	r0, r7, #23
 8008f74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008f78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f7c:	d516      	bpl.n	8008fac <_dtoa_r+0x34c>
 8008f7e:	4ba8      	ldr	r3, [pc, #672]	@ (8009220 <_dtoa_r+0x5c0>)
 8008f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f88:	f7f7 fc78 	bl	800087c <__aeabi_ddiv>
 8008f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f90:	f004 040f 	and.w	r4, r4, #15
 8008f94:	2603      	movs	r6, #3
 8008f96:	4da2      	ldr	r5, [pc, #648]	@ (8009220 <_dtoa_r+0x5c0>)
 8008f98:	b954      	cbnz	r4, 8008fb0 <_dtoa_r+0x350>
 8008f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa2:	f7f7 fc6b 	bl	800087c <__aeabi_ddiv>
 8008fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008faa:	e028      	b.n	8008ffe <_dtoa_r+0x39e>
 8008fac:	2602      	movs	r6, #2
 8008fae:	e7f2      	b.n	8008f96 <_dtoa_r+0x336>
 8008fb0:	07e1      	lsls	r1, r4, #31
 8008fb2:	d508      	bpl.n	8008fc6 <_dtoa_r+0x366>
 8008fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fbc:	f7f7 fb34 	bl	8000628 <__aeabi_dmul>
 8008fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	1064      	asrs	r4, r4, #1
 8008fc8:	3508      	adds	r5, #8
 8008fca:	e7e5      	b.n	8008f98 <_dtoa_r+0x338>
 8008fcc:	f000 80d2 	beq.w	8009174 <_dtoa_r+0x514>
 8008fd0:	427c      	negs	r4, r7
 8008fd2:	4b92      	ldr	r3, [pc, #584]	@ (800921c <_dtoa_r+0x5bc>)
 8008fd4:	4d92      	ldr	r5, [pc, #584]	@ (8009220 <_dtoa_r+0x5c0>)
 8008fd6:	f004 020f 	and.w	r2, r4, #15
 8008fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fe6:	f7f7 fb1f 	bl	8000628 <__aeabi_dmul>
 8008fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fee:	1124      	asrs	r4, r4, #4
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2602      	movs	r6, #2
 8008ff4:	2c00      	cmp	r4, #0
 8008ff6:	f040 80b2 	bne.w	800915e <_dtoa_r+0x4fe>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1d3      	bne.n	8008fa6 <_dtoa_r+0x346>
 8008ffe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009000:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 80b7 	beq.w	8009178 <_dtoa_r+0x518>
 800900a:	4b86      	ldr	r3, [pc, #536]	@ (8009224 <_dtoa_r+0x5c4>)
 800900c:	2200      	movs	r2, #0
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 fd7b 	bl	8000b0c <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f000 80ae 	beq.w	8009178 <_dtoa_r+0x518>
 800901c:	9b07      	ldr	r3, [sp, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80aa 	beq.w	8009178 <_dtoa_r+0x518>
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd37      	ble.n	800909a <_dtoa_r+0x43a>
 800902a:	1e7b      	subs	r3, r7, #1
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	4620      	mov	r0, r4
 8009030:	4b7d      	ldr	r3, [pc, #500]	@ (8009228 <_dtoa_r+0x5c8>)
 8009032:	2200      	movs	r2, #0
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 faf7 	bl	8000628 <__aeabi_dmul>
 800903a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800903e:	9c00      	ldr	r4, [sp, #0]
 8009040:	3601      	adds	r6, #1
 8009042:	4630      	mov	r0, r6
 8009044:	f7f7 fa86 	bl	8000554 <__aeabi_i2d>
 8009048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800904c:	f7f7 faec 	bl	8000628 <__aeabi_dmul>
 8009050:	4b76      	ldr	r3, [pc, #472]	@ (800922c <_dtoa_r+0x5cc>)
 8009052:	2200      	movs	r2, #0
 8009054:	f7f7 f932 	bl	80002bc <__adddf3>
 8009058:	4605      	mov	r5, r0
 800905a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800905e:	2c00      	cmp	r4, #0
 8009060:	f040 808d 	bne.w	800917e <_dtoa_r+0x51e>
 8009064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009068:	4b71      	ldr	r3, [pc, #452]	@ (8009230 <_dtoa_r+0x5d0>)
 800906a:	2200      	movs	r2, #0
 800906c:	f7f7 f924 	bl	80002b8 <__aeabi_dsub>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009078:	462a      	mov	r2, r5
 800907a:	4633      	mov	r3, r6
 800907c:	f7f7 fd64 	bl	8000b48 <__aeabi_dcmpgt>
 8009080:	2800      	cmp	r0, #0
 8009082:	f040 828b 	bne.w	800959c <_dtoa_r+0x93c>
 8009086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908a:	462a      	mov	r2, r5
 800908c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009090:	f7f7 fd3c 	bl	8000b0c <__aeabi_dcmplt>
 8009094:	2800      	cmp	r0, #0
 8009096:	f040 8128 	bne.w	80092ea <_dtoa_r+0x68a>
 800909a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800909e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80090a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f2c0 815a 	blt.w	800935e <_dtoa_r+0x6fe>
 80090aa:	2f0e      	cmp	r7, #14
 80090ac:	f300 8157 	bgt.w	800935e <_dtoa_r+0x6fe>
 80090b0:	4b5a      	ldr	r3, [pc, #360]	@ (800921c <_dtoa_r+0x5bc>)
 80090b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090b6:	ed93 7b00 	vldr	d7, [r3]
 80090ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090bc:	2b00      	cmp	r3, #0
 80090be:	ed8d 7b00 	vstr	d7, [sp]
 80090c2:	da03      	bge.n	80090cc <_dtoa_r+0x46c>
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f340 8101 	ble.w	80092ce <_dtoa_r+0x66e>
 80090cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090d0:	4656      	mov	r6, sl
 80090d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	f7f7 fbcf 	bl	800087c <__aeabi_ddiv>
 80090de:	f7f7 fd53 	bl	8000b88 <__aeabi_d2iz>
 80090e2:	4680      	mov	r8, r0
 80090e4:	f7f7 fa36 	bl	8000554 <__aeabi_i2d>
 80090e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ec:	f7f7 fa9c 	bl	8000628 <__aeabi_dmul>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090fc:	f7f7 f8dc 	bl	80002b8 <__aeabi_dsub>
 8009100:	f806 4b01 	strb.w	r4, [r6], #1
 8009104:	9d07      	ldr	r5, [sp, #28]
 8009106:	eba6 040a 	sub.w	r4, r6, sl
 800910a:	42a5      	cmp	r5, r4
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	f040 8117 	bne.w	8009342 <_dtoa_r+0x6e2>
 8009114:	f7f7 f8d2 	bl	80002bc <__adddf3>
 8009118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800911c:	4604      	mov	r4, r0
 800911e:	460d      	mov	r5, r1
 8009120:	f7f7 fd12 	bl	8000b48 <__aeabi_dcmpgt>
 8009124:	2800      	cmp	r0, #0
 8009126:	f040 80f9 	bne.w	800931c <_dtoa_r+0x6bc>
 800912a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800912e:	4620      	mov	r0, r4
 8009130:	4629      	mov	r1, r5
 8009132:	f7f7 fce1 	bl	8000af8 <__aeabi_dcmpeq>
 8009136:	b118      	cbz	r0, 8009140 <_dtoa_r+0x4e0>
 8009138:	f018 0f01 	tst.w	r8, #1
 800913c:	f040 80ee 	bne.w	800931c <_dtoa_r+0x6bc>
 8009140:	4649      	mov	r1, r9
 8009142:	4658      	mov	r0, fp
 8009144:	f000 fc90 	bl	8009a68 <_Bfree>
 8009148:	2300      	movs	r3, #0
 800914a:	7033      	strb	r3, [r6, #0]
 800914c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800914e:	3701      	adds	r7, #1
 8009150:	601f      	str	r7, [r3, #0]
 8009152:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 831d 	beq.w	8009794 <_dtoa_r+0xb34>
 800915a:	601e      	str	r6, [r3, #0]
 800915c:	e31a      	b.n	8009794 <_dtoa_r+0xb34>
 800915e:	07e2      	lsls	r2, r4, #31
 8009160:	d505      	bpl.n	800916e <_dtoa_r+0x50e>
 8009162:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009166:	f7f7 fa5f 	bl	8000628 <__aeabi_dmul>
 800916a:	3601      	adds	r6, #1
 800916c:	2301      	movs	r3, #1
 800916e:	1064      	asrs	r4, r4, #1
 8009170:	3508      	adds	r5, #8
 8009172:	e73f      	b.n	8008ff4 <_dtoa_r+0x394>
 8009174:	2602      	movs	r6, #2
 8009176:	e742      	b.n	8008ffe <_dtoa_r+0x39e>
 8009178:	9c07      	ldr	r4, [sp, #28]
 800917a:	9704      	str	r7, [sp, #16]
 800917c:	e761      	b.n	8009042 <_dtoa_r+0x3e2>
 800917e:	4b27      	ldr	r3, [pc, #156]	@ (800921c <_dtoa_r+0x5bc>)
 8009180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009186:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800918a:	4454      	add	r4, sl
 800918c:	2900      	cmp	r1, #0
 800918e:	d053      	beq.n	8009238 <_dtoa_r+0x5d8>
 8009190:	4928      	ldr	r1, [pc, #160]	@ (8009234 <_dtoa_r+0x5d4>)
 8009192:	2000      	movs	r0, #0
 8009194:	f7f7 fb72 	bl	800087c <__aeabi_ddiv>
 8009198:	4633      	mov	r3, r6
 800919a:	462a      	mov	r2, r5
 800919c:	f7f7 f88c 	bl	80002b8 <__aeabi_dsub>
 80091a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091a4:	4656      	mov	r6, sl
 80091a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091aa:	f7f7 fced 	bl	8000b88 <__aeabi_d2iz>
 80091ae:	4605      	mov	r5, r0
 80091b0:	f7f7 f9d0 	bl	8000554 <__aeabi_i2d>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091bc:	f7f7 f87c 	bl	80002b8 <__aeabi_dsub>
 80091c0:	3530      	adds	r5, #48	@ 0x30
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091ca:	f806 5b01 	strb.w	r5, [r6], #1
 80091ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091d2:	f7f7 fc9b 	bl	8000b0c <__aeabi_dcmplt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d171      	bne.n	80092be <_dtoa_r+0x65e>
 80091da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091de:	4911      	ldr	r1, [pc, #68]	@ (8009224 <_dtoa_r+0x5c4>)
 80091e0:	2000      	movs	r0, #0
 80091e2:	f7f7 f869 	bl	80002b8 <__aeabi_dsub>
 80091e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091ea:	f7f7 fc8f 	bl	8000b0c <__aeabi_dcmplt>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f040 8095 	bne.w	800931e <_dtoa_r+0x6be>
 80091f4:	42a6      	cmp	r6, r4
 80091f6:	f43f af50 	beq.w	800909a <_dtoa_r+0x43a>
 80091fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009228 <_dtoa_r+0x5c8>)
 8009200:	2200      	movs	r2, #0
 8009202:	f7f7 fa11 	bl	8000628 <__aeabi_dmul>
 8009206:	4b08      	ldr	r3, [pc, #32]	@ (8009228 <_dtoa_r+0x5c8>)
 8009208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800920c:	2200      	movs	r2, #0
 800920e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009212:	f7f7 fa09 	bl	8000628 <__aeabi_dmul>
 8009216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800921a:	e7c4      	b.n	80091a6 <_dtoa_r+0x546>
 800921c:	0800acc0 	.word	0x0800acc0
 8009220:	0800ac98 	.word	0x0800ac98
 8009224:	3ff00000 	.word	0x3ff00000
 8009228:	40240000 	.word	0x40240000
 800922c:	401c0000 	.word	0x401c0000
 8009230:	40140000 	.word	0x40140000
 8009234:	3fe00000 	.word	0x3fe00000
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	f7f7 f9f4 	bl	8000628 <__aeabi_dmul>
 8009240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009244:	9415      	str	r4, [sp, #84]	@ 0x54
 8009246:	4656      	mov	r6, sl
 8009248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800924c:	f7f7 fc9c 	bl	8000b88 <__aeabi_d2iz>
 8009250:	4605      	mov	r5, r0
 8009252:	f7f7 f97f 	bl	8000554 <__aeabi_i2d>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925e:	f7f7 f82b 	bl	80002b8 <__aeabi_dsub>
 8009262:	3530      	adds	r5, #48	@ 0x30
 8009264:	f806 5b01 	strb.w	r5, [r6], #1
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	42a6      	cmp	r6, r4
 800926e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	d124      	bne.n	80092c2 <_dtoa_r+0x662>
 8009278:	4bac      	ldr	r3, [pc, #688]	@ (800952c <_dtoa_r+0x8cc>)
 800927a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800927e:	f7f7 f81d 	bl	80002bc <__adddf3>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800928a:	f7f7 fc5d 	bl	8000b48 <__aeabi_dcmpgt>
 800928e:	2800      	cmp	r0, #0
 8009290:	d145      	bne.n	800931e <_dtoa_r+0x6be>
 8009292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009296:	49a5      	ldr	r1, [pc, #660]	@ (800952c <_dtoa_r+0x8cc>)
 8009298:	2000      	movs	r0, #0
 800929a:	f7f7 f80d 	bl	80002b8 <__aeabi_dsub>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a6:	f7f7 fc31 	bl	8000b0c <__aeabi_dcmplt>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f43f aef5 	beq.w	800909a <_dtoa_r+0x43a>
 80092b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80092b2:	1e73      	subs	r3, r6, #1
 80092b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80092b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092ba:	2b30      	cmp	r3, #48	@ 0x30
 80092bc:	d0f8      	beq.n	80092b0 <_dtoa_r+0x650>
 80092be:	9f04      	ldr	r7, [sp, #16]
 80092c0:	e73e      	b.n	8009140 <_dtoa_r+0x4e0>
 80092c2:	4b9b      	ldr	r3, [pc, #620]	@ (8009530 <_dtoa_r+0x8d0>)
 80092c4:	f7f7 f9b0 	bl	8000628 <__aeabi_dmul>
 80092c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092cc:	e7bc      	b.n	8009248 <_dtoa_r+0x5e8>
 80092ce:	d10c      	bne.n	80092ea <_dtoa_r+0x68a>
 80092d0:	4b98      	ldr	r3, [pc, #608]	@ (8009534 <_dtoa_r+0x8d4>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092d8:	f7f7 f9a6 	bl	8000628 <__aeabi_dmul>
 80092dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092e0:	f7f7 fc28 	bl	8000b34 <__aeabi_dcmpge>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	f000 8157 	beq.w	8009598 <_dtoa_r+0x938>
 80092ea:	2400      	movs	r4, #0
 80092ec:	4625      	mov	r5, r4
 80092ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092f0:	43db      	mvns	r3, r3
 80092f2:	9304      	str	r3, [sp, #16]
 80092f4:	4656      	mov	r6, sl
 80092f6:	2700      	movs	r7, #0
 80092f8:	4621      	mov	r1, r4
 80092fa:	4658      	mov	r0, fp
 80092fc:	f000 fbb4 	bl	8009a68 <_Bfree>
 8009300:	2d00      	cmp	r5, #0
 8009302:	d0dc      	beq.n	80092be <_dtoa_r+0x65e>
 8009304:	b12f      	cbz	r7, 8009312 <_dtoa_r+0x6b2>
 8009306:	42af      	cmp	r7, r5
 8009308:	d003      	beq.n	8009312 <_dtoa_r+0x6b2>
 800930a:	4639      	mov	r1, r7
 800930c:	4658      	mov	r0, fp
 800930e:	f000 fbab 	bl	8009a68 <_Bfree>
 8009312:	4629      	mov	r1, r5
 8009314:	4658      	mov	r0, fp
 8009316:	f000 fba7 	bl	8009a68 <_Bfree>
 800931a:	e7d0      	b.n	80092be <_dtoa_r+0x65e>
 800931c:	9704      	str	r7, [sp, #16]
 800931e:	4633      	mov	r3, r6
 8009320:	461e      	mov	r6, r3
 8009322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009326:	2a39      	cmp	r2, #57	@ 0x39
 8009328:	d107      	bne.n	800933a <_dtoa_r+0x6da>
 800932a:	459a      	cmp	sl, r3
 800932c:	d1f8      	bne.n	8009320 <_dtoa_r+0x6c0>
 800932e:	9a04      	ldr	r2, [sp, #16]
 8009330:	3201      	adds	r2, #1
 8009332:	9204      	str	r2, [sp, #16]
 8009334:	2230      	movs	r2, #48	@ 0x30
 8009336:	f88a 2000 	strb.w	r2, [sl]
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	3201      	adds	r2, #1
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e7bd      	b.n	80092be <_dtoa_r+0x65e>
 8009342:	4b7b      	ldr	r3, [pc, #492]	@ (8009530 <_dtoa_r+0x8d0>)
 8009344:	2200      	movs	r2, #0
 8009346:	f7f7 f96f 	bl	8000628 <__aeabi_dmul>
 800934a:	2200      	movs	r2, #0
 800934c:	2300      	movs	r3, #0
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	f7f7 fbd1 	bl	8000af8 <__aeabi_dcmpeq>
 8009356:	2800      	cmp	r0, #0
 8009358:	f43f aebb 	beq.w	80090d2 <_dtoa_r+0x472>
 800935c:	e6f0      	b.n	8009140 <_dtoa_r+0x4e0>
 800935e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009360:	2a00      	cmp	r2, #0
 8009362:	f000 80db 	beq.w	800951c <_dtoa_r+0x8bc>
 8009366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009368:	2a01      	cmp	r2, #1
 800936a:	f300 80bf 	bgt.w	80094ec <_dtoa_r+0x88c>
 800936e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009370:	2a00      	cmp	r2, #0
 8009372:	f000 80b7 	beq.w	80094e4 <_dtoa_r+0x884>
 8009376:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800937a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800937c:	4646      	mov	r6, r8
 800937e:	9a08      	ldr	r2, [sp, #32]
 8009380:	2101      	movs	r1, #1
 8009382:	441a      	add	r2, r3
 8009384:	4658      	mov	r0, fp
 8009386:	4498      	add	r8, r3
 8009388:	9208      	str	r2, [sp, #32]
 800938a:	f000 fc21 	bl	8009bd0 <__i2b>
 800938e:	4605      	mov	r5, r0
 8009390:	b15e      	cbz	r6, 80093aa <_dtoa_r+0x74a>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd08      	ble.n	80093aa <_dtoa_r+0x74a>
 8009398:	42b3      	cmp	r3, r6
 800939a:	9a08      	ldr	r2, [sp, #32]
 800939c:	bfa8      	it	ge
 800939e:	4633      	movge	r3, r6
 80093a0:	eba8 0803 	sub.w	r8, r8, r3
 80093a4:	1af6      	subs	r6, r6, r3
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	9308      	str	r3, [sp, #32]
 80093aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ac:	b1f3      	cbz	r3, 80093ec <_dtoa_r+0x78c>
 80093ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80b7 	beq.w	8009524 <_dtoa_r+0x8c4>
 80093b6:	b18c      	cbz	r4, 80093dc <_dtoa_r+0x77c>
 80093b8:	4629      	mov	r1, r5
 80093ba:	4622      	mov	r2, r4
 80093bc:	4658      	mov	r0, fp
 80093be:	f000 fcc7 	bl	8009d50 <__pow5mult>
 80093c2:	464a      	mov	r2, r9
 80093c4:	4601      	mov	r1, r0
 80093c6:	4605      	mov	r5, r0
 80093c8:	4658      	mov	r0, fp
 80093ca:	f000 fc17 	bl	8009bfc <__multiply>
 80093ce:	4649      	mov	r1, r9
 80093d0:	9004      	str	r0, [sp, #16]
 80093d2:	4658      	mov	r0, fp
 80093d4:	f000 fb48 	bl	8009a68 <_Bfree>
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	4699      	mov	r9, r3
 80093dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093de:	1b1a      	subs	r2, r3, r4
 80093e0:	d004      	beq.n	80093ec <_dtoa_r+0x78c>
 80093e2:	4649      	mov	r1, r9
 80093e4:	4658      	mov	r0, fp
 80093e6:	f000 fcb3 	bl	8009d50 <__pow5mult>
 80093ea:	4681      	mov	r9, r0
 80093ec:	2101      	movs	r1, #1
 80093ee:	4658      	mov	r0, fp
 80093f0:	f000 fbee 	bl	8009bd0 <__i2b>
 80093f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f6:	4604      	mov	r4, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 81cf 	beq.w	800979c <_dtoa_r+0xb3c>
 80093fe:	461a      	mov	r2, r3
 8009400:	4601      	mov	r1, r0
 8009402:	4658      	mov	r0, fp
 8009404:	f000 fca4 	bl	8009d50 <__pow5mult>
 8009408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800940a:	2b01      	cmp	r3, #1
 800940c:	4604      	mov	r4, r0
 800940e:	f300 8095 	bgt.w	800953c <_dtoa_r+0x8dc>
 8009412:	9b02      	ldr	r3, [sp, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f040 8087 	bne.w	8009528 <_dtoa_r+0x8c8>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 8089 	bne.w	8009538 <_dtoa_r+0x8d8>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800942c:	0d1b      	lsrs	r3, r3, #20
 800942e:	051b      	lsls	r3, r3, #20
 8009430:	b12b      	cbz	r3, 800943e <_dtoa_r+0x7de>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	3301      	adds	r3, #1
 8009436:	9308      	str	r3, [sp, #32]
 8009438:	f108 0801 	add.w	r8, r8, #1
 800943c:	2301      	movs	r3, #1
 800943e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 81b0 	beq.w	80097a8 <_dtoa_r+0xb48>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800944e:	6918      	ldr	r0, [r3, #16]
 8009450:	f000 fb72 	bl	8009b38 <__hi0bits>
 8009454:	f1c0 0020 	rsb	r0, r0, #32
 8009458:	9b08      	ldr	r3, [sp, #32]
 800945a:	4418      	add	r0, r3
 800945c:	f010 001f 	ands.w	r0, r0, #31
 8009460:	d077      	beq.n	8009552 <_dtoa_r+0x8f2>
 8009462:	f1c0 0320 	rsb	r3, r0, #32
 8009466:	2b04      	cmp	r3, #4
 8009468:	dd6b      	ble.n	8009542 <_dtoa_r+0x8e2>
 800946a:	9b08      	ldr	r3, [sp, #32]
 800946c:	f1c0 001c 	rsb	r0, r0, #28
 8009470:	4403      	add	r3, r0
 8009472:	4480      	add	r8, r0
 8009474:	4406      	add	r6, r0
 8009476:	9308      	str	r3, [sp, #32]
 8009478:	f1b8 0f00 	cmp.w	r8, #0
 800947c:	dd05      	ble.n	800948a <_dtoa_r+0x82a>
 800947e:	4649      	mov	r1, r9
 8009480:	4642      	mov	r2, r8
 8009482:	4658      	mov	r0, fp
 8009484:	f000 fcbe 	bl	8009e04 <__lshift>
 8009488:	4681      	mov	r9, r0
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd05      	ble.n	800949c <_dtoa_r+0x83c>
 8009490:	4621      	mov	r1, r4
 8009492:	461a      	mov	r2, r3
 8009494:	4658      	mov	r0, fp
 8009496:	f000 fcb5 	bl	8009e04 <__lshift>
 800949a:	4604      	mov	r4, r0
 800949c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d059      	beq.n	8009556 <_dtoa_r+0x8f6>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4648      	mov	r0, r9
 80094a6:	f000 fd19 	bl	8009edc <__mcmp>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	da53      	bge.n	8009556 <_dtoa_r+0x8f6>
 80094ae:	1e7b      	subs	r3, r7, #1
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	4649      	mov	r1, r9
 80094b4:	2300      	movs	r3, #0
 80094b6:	220a      	movs	r2, #10
 80094b8:	4658      	mov	r0, fp
 80094ba:	f000 faf7 	bl	8009aac <__multadd>
 80094be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094c0:	4681      	mov	r9, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 8172 	beq.w	80097ac <_dtoa_r+0xb4c>
 80094c8:	2300      	movs	r3, #0
 80094ca:	4629      	mov	r1, r5
 80094cc:	220a      	movs	r2, #10
 80094ce:	4658      	mov	r0, fp
 80094d0:	f000 faec 	bl	8009aac <__multadd>
 80094d4:	9b00      	ldr	r3, [sp, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	4605      	mov	r5, r0
 80094da:	dc67      	bgt.n	80095ac <_dtoa_r+0x94c>
 80094dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094de:	2b02      	cmp	r3, #2
 80094e0:	dc41      	bgt.n	8009566 <_dtoa_r+0x906>
 80094e2:	e063      	b.n	80095ac <_dtoa_r+0x94c>
 80094e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80094ea:	e746      	b.n	800937a <_dtoa_r+0x71a>
 80094ec:	9b07      	ldr	r3, [sp, #28]
 80094ee:	1e5c      	subs	r4, r3, #1
 80094f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	bfbf      	itttt	lt
 80094f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80094f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80094fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80094fc:	1ae3      	sublt	r3, r4, r3
 80094fe:	bfb4      	ite	lt
 8009500:	18d2      	addlt	r2, r2, r3
 8009502:	1b1c      	subge	r4, r3, r4
 8009504:	9b07      	ldr	r3, [sp, #28]
 8009506:	bfbc      	itt	lt
 8009508:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800950a:	2400      	movlt	r4, #0
 800950c:	2b00      	cmp	r3, #0
 800950e:	bfb5      	itete	lt
 8009510:	eba8 0603 	sublt.w	r6, r8, r3
 8009514:	9b07      	ldrge	r3, [sp, #28]
 8009516:	2300      	movlt	r3, #0
 8009518:	4646      	movge	r6, r8
 800951a:	e730      	b.n	800937e <_dtoa_r+0x71e>
 800951c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800951e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009520:	4646      	mov	r6, r8
 8009522:	e735      	b.n	8009390 <_dtoa_r+0x730>
 8009524:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009526:	e75c      	b.n	80093e2 <_dtoa_r+0x782>
 8009528:	2300      	movs	r3, #0
 800952a:	e788      	b.n	800943e <_dtoa_r+0x7de>
 800952c:	3fe00000 	.word	0x3fe00000
 8009530:	40240000 	.word	0x40240000
 8009534:	40140000 	.word	0x40140000
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	e780      	b.n	800943e <_dtoa_r+0x7de>
 800953c:	2300      	movs	r3, #0
 800953e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009540:	e782      	b.n	8009448 <_dtoa_r+0x7e8>
 8009542:	d099      	beq.n	8009478 <_dtoa_r+0x818>
 8009544:	9a08      	ldr	r2, [sp, #32]
 8009546:	331c      	adds	r3, #28
 8009548:	441a      	add	r2, r3
 800954a:	4498      	add	r8, r3
 800954c:	441e      	add	r6, r3
 800954e:	9208      	str	r2, [sp, #32]
 8009550:	e792      	b.n	8009478 <_dtoa_r+0x818>
 8009552:	4603      	mov	r3, r0
 8009554:	e7f6      	b.n	8009544 <_dtoa_r+0x8e4>
 8009556:	9b07      	ldr	r3, [sp, #28]
 8009558:	9704      	str	r7, [sp, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dc20      	bgt.n	80095a0 <_dtoa_r+0x940>
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009562:	2b02      	cmp	r3, #2
 8009564:	dd1e      	ble.n	80095a4 <_dtoa_r+0x944>
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f47f aec0 	bne.w	80092ee <_dtoa_r+0x68e>
 800956e:	4621      	mov	r1, r4
 8009570:	2205      	movs	r2, #5
 8009572:	4658      	mov	r0, fp
 8009574:	f000 fa9a 	bl	8009aac <__multadd>
 8009578:	4601      	mov	r1, r0
 800957a:	4604      	mov	r4, r0
 800957c:	4648      	mov	r0, r9
 800957e:	f000 fcad 	bl	8009edc <__mcmp>
 8009582:	2800      	cmp	r0, #0
 8009584:	f77f aeb3 	ble.w	80092ee <_dtoa_r+0x68e>
 8009588:	4656      	mov	r6, sl
 800958a:	2331      	movs	r3, #49	@ 0x31
 800958c:	f806 3b01 	strb.w	r3, [r6], #1
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	3301      	adds	r3, #1
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	e6ae      	b.n	80092f6 <_dtoa_r+0x696>
 8009598:	9c07      	ldr	r4, [sp, #28]
 800959a:	9704      	str	r7, [sp, #16]
 800959c:	4625      	mov	r5, r4
 800959e:	e7f3      	b.n	8009588 <_dtoa_r+0x928>
 80095a0:	9b07      	ldr	r3, [sp, #28]
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 8104 	beq.w	80097b4 <_dtoa_r+0xb54>
 80095ac:	2e00      	cmp	r6, #0
 80095ae:	dd05      	ble.n	80095bc <_dtoa_r+0x95c>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4632      	mov	r2, r6
 80095b4:	4658      	mov	r0, fp
 80095b6:	f000 fc25 	bl	8009e04 <__lshift>
 80095ba:	4605      	mov	r5, r0
 80095bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d05a      	beq.n	8009678 <_dtoa_r+0xa18>
 80095c2:	6869      	ldr	r1, [r5, #4]
 80095c4:	4658      	mov	r0, fp
 80095c6:	f000 fa0f 	bl	80099e8 <_Balloc>
 80095ca:	4606      	mov	r6, r0
 80095cc:	b928      	cbnz	r0, 80095da <_dtoa_r+0x97a>
 80095ce:	4b84      	ldr	r3, [pc, #528]	@ (80097e0 <_dtoa_r+0xb80>)
 80095d0:	4602      	mov	r2, r0
 80095d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095d6:	f7ff bb5a 	b.w	8008c8e <_dtoa_r+0x2e>
 80095da:	692a      	ldr	r2, [r5, #16]
 80095dc:	3202      	adds	r2, #2
 80095de:	0092      	lsls	r2, r2, #2
 80095e0:	f105 010c 	add.w	r1, r5, #12
 80095e4:	300c      	adds	r0, #12
 80095e6:	f001 f833 	bl	800a650 <memcpy>
 80095ea:	2201      	movs	r2, #1
 80095ec:	4631      	mov	r1, r6
 80095ee:	4658      	mov	r0, fp
 80095f0:	f000 fc08 	bl	8009e04 <__lshift>
 80095f4:	f10a 0301 	add.w	r3, sl, #1
 80095f8:	9307      	str	r3, [sp, #28]
 80095fa:	9b00      	ldr	r3, [sp, #0]
 80095fc:	4453      	add	r3, sl
 80095fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009600:	9b02      	ldr	r3, [sp, #8]
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	462f      	mov	r7, r5
 8009608:	930a      	str	r3, [sp, #40]	@ 0x28
 800960a:	4605      	mov	r5, r0
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	4621      	mov	r1, r4
 8009610:	3b01      	subs	r3, #1
 8009612:	4648      	mov	r0, r9
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	f7ff fa98 	bl	8008b4a <quorem>
 800961a:	4639      	mov	r1, r7
 800961c:	9002      	str	r0, [sp, #8]
 800961e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009622:	4648      	mov	r0, r9
 8009624:	f000 fc5a 	bl	8009edc <__mcmp>
 8009628:	462a      	mov	r2, r5
 800962a:	9008      	str	r0, [sp, #32]
 800962c:	4621      	mov	r1, r4
 800962e:	4658      	mov	r0, fp
 8009630:	f000 fc70 	bl	8009f14 <__mdiff>
 8009634:	68c2      	ldr	r2, [r0, #12]
 8009636:	4606      	mov	r6, r0
 8009638:	bb02      	cbnz	r2, 800967c <_dtoa_r+0xa1c>
 800963a:	4601      	mov	r1, r0
 800963c:	4648      	mov	r0, r9
 800963e:	f000 fc4d 	bl	8009edc <__mcmp>
 8009642:	4602      	mov	r2, r0
 8009644:	4631      	mov	r1, r6
 8009646:	4658      	mov	r0, fp
 8009648:	920e      	str	r2, [sp, #56]	@ 0x38
 800964a:	f000 fa0d 	bl	8009a68 <_Bfree>
 800964e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009650:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009652:	9e07      	ldr	r6, [sp, #28]
 8009654:	ea43 0102 	orr.w	r1, r3, r2
 8009658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800965a:	4319      	orrs	r1, r3
 800965c:	d110      	bne.n	8009680 <_dtoa_r+0xa20>
 800965e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009662:	d029      	beq.n	80096b8 <_dtoa_r+0xa58>
 8009664:	9b08      	ldr	r3, [sp, #32]
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd02      	ble.n	8009670 <_dtoa_r+0xa10>
 800966a:	9b02      	ldr	r3, [sp, #8]
 800966c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	f883 8000 	strb.w	r8, [r3]
 8009676:	e63f      	b.n	80092f8 <_dtoa_r+0x698>
 8009678:	4628      	mov	r0, r5
 800967a:	e7bb      	b.n	80095f4 <_dtoa_r+0x994>
 800967c:	2201      	movs	r2, #1
 800967e:	e7e1      	b.n	8009644 <_dtoa_r+0x9e4>
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	2b00      	cmp	r3, #0
 8009684:	db04      	blt.n	8009690 <_dtoa_r+0xa30>
 8009686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009688:	430b      	orrs	r3, r1
 800968a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800968c:	430b      	orrs	r3, r1
 800968e:	d120      	bne.n	80096d2 <_dtoa_r+0xa72>
 8009690:	2a00      	cmp	r2, #0
 8009692:	dded      	ble.n	8009670 <_dtoa_r+0xa10>
 8009694:	4649      	mov	r1, r9
 8009696:	2201      	movs	r2, #1
 8009698:	4658      	mov	r0, fp
 800969a:	f000 fbb3 	bl	8009e04 <__lshift>
 800969e:	4621      	mov	r1, r4
 80096a0:	4681      	mov	r9, r0
 80096a2:	f000 fc1b 	bl	8009edc <__mcmp>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	dc03      	bgt.n	80096b2 <_dtoa_r+0xa52>
 80096aa:	d1e1      	bne.n	8009670 <_dtoa_r+0xa10>
 80096ac:	f018 0f01 	tst.w	r8, #1
 80096b0:	d0de      	beq.n	8009670 <_dtoa_r+0xa10>
 80096b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096b6:	d1d8      	bne.n	800966a <_dtoa_r+0xa0a>
 80096b8:	9a00      	ldr	r2, [sp, #0]
 80096ba:	2339      	movs	r3, #57	@ 0x39
 80096bc:	7013      	strb	r3, [r2, #0]
 80096be:	4633      	mov	r3, r6
 80096c0:	461e      	mov	r6, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096c8:	2a39      	cmp	r2, #57	@ 0x39
 80096ca:	d052      	beq.n	8009772 <_dtoa_r+0xb12>
 80096cc:	3201      	adds	r2, #1
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e612      	b.n	80092f8 <_dtoa_r+0x698>
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	dd07      	ble.n	80096e6 <_dtoa_r+0xa86>
 80096d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096da:	d0ed      	beq.n	80096b8 <_dtoa_r+0xa58>
 80096dc:	9a00      	ldr	r2, [sp, #0]
 80096de:	f108 0301 	add.w	r3, r8, #1
 80096e2:	7013      	strb	r3, [r2, #0]
 80096e4:	e608      	b.n	80092f8 <_dtoa_r+0x698>
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	9a07      	ldr	r2, [sp, #28]
 80096ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80096ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d028      	beq.n	8009746 <_dtoa_r+0xae6>
 80096f4:	4649      	mov	r1, r9
 80096f6:	2300      	movs	r3, #0
 80096f8:	220a      	movs	r2, #10
 80096fa:	4658      	mov	r0, fp
 80096fc:	f000 f9d6 	bl	8009aac <__multadd>
 8009700:	42af      	cmp	r7, r5
 8009702:	4681      	mov	r9, r0
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	f04f 020a 	mov.w	r2, #10
 800970c:	4639      	mov	r1, r7
 800970e:	4658      	mov	r0, fp
 8009710:	d107      	bne.n	8009722 <_dtoa_r+0xac2>
 8009712:	f000 f9cb 	bl	8009aac <__multadd>
 8009716:	4607      	mov	r7, r0
 8009718:	4605      	mov	r5, r0
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	3301      	adds	r3, #1
 800971e:	9307      	str	r3, [sp, #28]
 8009720:	e774      	b.n	800960c <_dtoa_r+0x9ac>
 8009722:	f000 f9c3 	bl	8009aac <__multadd>
 8009726:	4629      	mov	r1, r5
 8009728:	4607      	mov	r7, r0
 800972a:	2300      	movs	r3, #0
 800972c:	220a      	movs	r2, #10
 800972e:	4658      	mov	r0, fp
 8009730:	f000 f9bc 	bl	8009aac <__multadd>
 8009734:	4605      	mov	r5, r0
 8009736:	e7f0      	b.n	800971a <_dtoa_r+0xaba>
 8009738:	9b00      	ldr	r3, [sp, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfcc      	ite	gt
 800973e:	461e      	movgt	r6, r3
 8009740:	2601      	movle	r6, #1
 8009742:	4456      	add	r6, sl
 8009744:	2700      	movs	r7, #0
 8009746:	4649      	mov	r1, r9
 8009748:	2201      	movs	r2, #1
 800974a:	4658      	mov	r0, fp
 800974c:	f000 fb5a 	bl	8009e04 <__lshift>
 8009750:	4621      	mov	r1, r4
 8009752:	4681      	mov	r9, r0
 8009754:	f000 fbc2 	bl	8009edc <__mcmp>
 8009758:	2800      	cmp	r0, #0
 800975a:	dcb0      	bgt.n	80096be <_dtoa_r+0xa5e>
 800975c:	d102      	bne.n	8009764 <_dtoa_r+0xb04>
 800975e:	f018 0f01 	tst.w	r8, #1
 8009762:	d1ac      	bne.n	80096be <_dtoa_r+0xa5e>
 8009764:	4633      	mov	r3, r6
 8009766:	461e      	mov	r6, r3
 8009768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800976c:	2a30      	cmp	r2, #48	@ 0x30
 800976e:	d0fa      	beq.n	8009766 <_dtoa_r+0xb06>
 8009770:	e5c2      	b.n	80092f8 <_dtoa_r+0x698>
 8009772:	459a      	cmp	sl, r3
 8009774:	d1a4      	bne.n	80096c0 <_dtoa_r+0xa60>
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	3301      	adds	r3, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	2331      	movs	r3, #49	@ 0x31
 800977e:	f88a 3000 	strb.w	r3, [sl]
 8009782:	e5b9      	b.n	80092f8 <_dtoa_r+0x698>
 8009784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009786:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80097e4 <_dtoa_r+0xb84>
 800978a:	b11b      	cbz	r3, 8009794 <_dtoa_r+0xb34>
 800978c:	f10a 0308 	add.w	r3, sl, #8
 8009790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	4650      	mov	r0, sl
 8009796:	b019      	add	sp, #100	@ 0x64
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979e:	2b01      	cmp	r3, #1
 80097a0:	f77f ae37 	ble.w	8009412 <_dtoa_r+0x7b2>
 80097a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80097a8:	2001      	movs	r0, #1
 80097aa:	e655      	b.n	8009458 <_dtoa_r+0x7f8>
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f77f aed6 	ble.w	8009560 <_dtoa_r+0x900>
 80097b4:	4656      	mov	r6, sl
 80097b6:	4621      	mov	r1, r4
 80097b8:	4648      	mov	r0, r9
 80097ba:	f7ff f9c6 	bl	8008b4a <quorem>
 80097be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80097c2:	f806 8b01 	strb.w	r8, [r6], #1
 80097c6:	9b00      	ldr	r3, [sp, #0]
 80097c8:	eba6 020a 	sub.w	r2, r6, sl
 80097cc:	4293      	cmp	r3, r2
 80097ce:	ddb3      	ble.n	8009738 <_dtoa_r+0xad8>
 80097d0:	4649      	mov	r1, r9
 80097d2:	2300      	movs	r3, #0
 80097d4:	220a      	movs	r2, #10
 80097d6:	4658      	mov	r0, fp
 80097d8:	f000 f968 	bl	8009aac <__multadd>
 80097dc:	4681      	mov	r9, r0
 80097de:	e7ea      	b.n	80097b6 <_dtoa_r+0xb56>
 80097e0:	0800ac20 	.word	0x0800ac20
 80097e4:	0800aba4 	.word	0x0800aba4

080097e8 <_free_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4605      	mov	r5, r0
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d041      	beq.n	8009874 <_free_r+0x8c>
 80097f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f4:	1f0c      	subs	r4, r1, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfb8      	it	lt
 80097fa:	18e4      	addlt	r4, r4, r3
 80097fc:	f000 f8e8 	bl	80099d0 <__malloc_lock>
 8009800:	4a1d      	ldr	r2, [pc, #116]	@ (8009878 <_free_r+0x90>)
 8009802:	6813      	ldr	r3, [r2, #0]
 8009804:	b933      	cbnz	r3, 8009814 <_free_r+0x2c>
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	6014      	str	r4, [r2, #0]
 800980a:	4628      	mov	r0, r5
 800980c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009810:	f000 b8e4 	b.w	80099dc <__malloc_unlock>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d908      	bls.n	800982a <_free_r+0x42>
 8009818:	6820      	ldr	r0, [r4, #0]
 800981a:	1821      	adds	r1, r4, r0
 800981c:	428b      	cmp	r3, r1
 800981e:	bf01      	itttt	eq
 8009820:	6819      	ldreq	r1, [r3, #0]
 8009822:	685b      	ldreq	r3, [r3, #4]
 8009824:	1809      	addeq	r1, r1, r0
 8009826:	6021      	streq	r1, [r4, #0]
 8009828:	e7ed      	b.n	8009806 <_free_r+0x1e>
 800982a:	461a      	mov	r2, r3
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	b10b      	cbz	r3, 8009834 <_free_r+0x4c>
 8009830:	42a3      	cmp	r3, r4
 8009832:	d9fa      	bls.n	800982a <_free_r+0x42>
 8009834:	6811      	ldr	r1, [r2, #0]
 8009836:	1850      	adds	r0, r2, r1
 8009838:	42a0      	cmp	r0, r4
 800983a:	d10b      	bne.n	8009854 <_free_r+0x6c>
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	4401      	add	r1, r0
 8009840:	1850      	adds	r0, r2, r1
 8009842:	4283      	cmp	r3, r0
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	d1e0      	bne.n	800980a <_free_r+0x22>
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	6053      	str	r3, [r2, #4]
 800984e:	4408      	add	r0, r1
 8009850:	6010      	str	r0, [r2, #0]
 8009852:	e7da      	b.n	800980a <_free_r+0x22>
 8009854:	d902      	bls.n	800985c <_free_r+0x74>
 8009856:	230c      	movs	r3, #12
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	e7d6      	b.n	800980a <_free_r+0x22>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	1821      	adds	r1, r4, r0
 8009860:	428b      	cmp	r3, r1
 8009862:	bf04      	itt	eq
 8009864:	6819      	ldreq	r1, [r3, #0]
 8009866:	685b      	ldreq	r3, [r3, #4]
 8009868:	6063      	str	r3, [r4, #4]
 800986a:	bf04      	itt	eq
 800986c:	1809      	addeq	r1, r1, r0
 800986e:	6021      	streq	r1, [r4, #0]
 8009870:	6054      	str	r4, [r2, #4]
 8009872:	e7ca      	b.n	800980a <_free_r+0x22>
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	200049cc 	.word	0x200049cc

0800987c <malloc>:
 800987c:	4b02      	ldr	r3, [pc, #8]	@ (8009888 <malloc+0xc>)
 800987e:	4601      	mov	r1, r0
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	f000 b825 	b.w	80098d0 <_malloc_r>
 8009886:	bf00      	nop
 8009888:	20000018 	.word	0x20000018

0800988c <sbrk_aligned>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	4e0f      	ldr	r6, [pc, #60]	@ (80098cc <sbrk_aligned+0x40>)
 8009890:	460c      	mov	r4, r1
 8009892:	6831      	ldr	r1, [r6, #0]
 8009894:	4605      	mov	r5, r0
 8009896:	b911      	cbnz	r1, 800989e <sbrk_aligned+0x12>
 8009898:	f000 feca 	bl	800a630 <_sbrk_r>
 800989c:	6030      	str	r0, [r6, #0]
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 fec5 	bl	800a630 <_sbrk_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	d103      	bne.n	80098b2 <sbrk_aligned+0x26>
 80098aa:	f04f 34ff 	mov.w	r4, #4294967295
 80098ae:	4620      	mov	r0, r4
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d0f8      	beq.n	80098ae <sbrk_aligned+0x22>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 feb6 	bl	800a630 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d1f2      	bne.n	80098ae <sbrk_aligned+0x22>
 80098c8:	e7ef      	b.n	80098aa <sbrk_aligned+0x1e>
 80098ca:	bf00      	nop
 80098cc:	200049c8 	.word	0x200049c8

080098d0 <_malloc_r>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	1ccd      	adds	r5, r1, #3
 80098d6:	f025 0503 	bic.w	r5, r5, #3
 80098da:	3508      	adds	r5, #8
 80098dc:	2d0c      	cmp	r5, #12
 80098de:	bf38      	it	cc
 80098e0:	250c      	movcc	r5, #12
 80098e2:	2d00      	cmp	r5, #0
 80098e4:	4606      	mov	r6, r0
 80098e6:	db01      	blt.n	80098ec <_malloc_r+0x1c>
 80098e8:	42a9      	cmp	r1, r5
 80098ea:	d904      	bls.n	80098f6 <_malloc_r+0x26>
 80098ec:	230c      	movs	r3, #12
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	2000      	movs	r0, #0
 80098f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099cc <_malloc_r+0xfc>
 80098fa:	f000 f869 	bl	80099d0 <__malloc_lock>
 80098fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009902:	461c      	mov	r4, r3
 8009904:	bb44      	cbnz	r4, 8009958 <_malloc_r+0x88>
 8009906:	4629      	mov	r1, r5
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff ffbf 	bl	800988c <sbrk_aligned>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	4604      	mov	r4, r0
 8009912:	d158      	bne.n	80099c6 <_malloc_r+0xf6>
 8009914:	f8d8 4000 	ldr.w	r4, [r8]
 8009918:	4627      	mov	r7, r4
 800991a:	2f00      	cmp	r7, #0
 800991c:	d143      	bne.n	80099a6 <_malloc_r+0xd6>
 800991e:	2c00      	cmp	r4, #0
 8009920:	d04b      	beq.n	80099ba <_malloc_r+0xea>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	4639      	mov	r1, r7
 8009926:	4630      	mov	r0, r6
 8009928:	eb04 0903 	add.w	r9, r4, r3
 800992c:	f000 fe80 	bl	800a630 <_sbrk_r>
 8009930:	4581      	cmp	r9, r0
 8009932:	d142      	bne.n	80099ba <_malloc_r+0xea>
 8009934:	6821      	ldr	r1, [r4, #0]
 8009936:	1a6d      	subs	r5, r5, r1
 8009938:	4629      	mov	r1, r5
 800993a:	4630      	mov	r0, r6
 800993c:	f7ff ffa6 	bl	800988c <sbrk_aligned>
 8009940:	3001      	adds	r0, #1
 8009942:	d03a      	beq.n	80099ba <_malloc_r+0xea>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	442b      	add	r3, r5
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	f8d8 3000 	ldr.w	r3, [r8]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	bb62      	cbnz	r2, 80099ac <_malloc_r+0xdc>
 8009952:	f8c8 7000 	str.w	r7, [r8]
 8009956:	e00f      	b.n	8009978 <_malloc_r+0xa8>
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	1b52      	subs	r2, r2, r5
 800995c:	d420      	bmi.n	80099a0 <_malloc_r+0xd0>
 800995e:	2a0b      	cmp	r2, #11
 8009960:	d917      	bls.n	8009992 <_malloc_r+0xc2>
 8009962:	1961      	adds	r1, r4, r5
 8009964:	42a3      	cmp	r3, r4
 8009966:	6025      	str	r5, [r4, #0]
 8009968:	bf18      	it	ne
 800996a:	6059      	strne	r1, [r3, #4]
 800996c:	6863      	ldr	r3, [r4, #4]
 800996e:	bf08      	it	eq
 8009970:	f8c8 1000 	streq.w	r1, [r8]
 8009974:	5162      	str	r2, [r4, r5]
 8009976:	604b      	str	r3, [r1, #4]
 8009978:	4630      	mov	r0, r6
 800997a:	f000 f82f 	bl	80099dc <__malloc_unlock>
 800997e:	f104 000b 	add.w	r0, r4, #11
 8009982:	1d23      	adds	r3, r4, #4
 8009984:	f020 0007 	bic.w	r0, r0, #7
 8009988:	1ac2      	subs	r2, r0, r3
 800998a:	bf1c      	itt	ne
 800998c:	1a1b      	subne	r3, r3, r0
 800998e:	50a3      	strne	r3, [r4, r2]
 8009990:	e7af      	b.n	80098f2 <_malloc_r+0x22>
 8009992:	6862      	ldr	r2, [r4, #4]
 8009994:	42a3      	cmp	r3, r4
 8009996:	bf0c      	ite	eq
 8009998:	f8c8 2000 	streq.w	r2, [r8]
 800999c:	605a      	strne	r2, [r3, #4]
 800999e:	e7eb      	b.n	8009978 <_malloc_r+0xa8>
 80099a0:	4623      	mov	r3, r4
 80099a2:	6864      	ldr	r4, [r4, #4]
 80099a4:	e7ae      	b.n	8009904 <_malloc_r+0x34>
 80099a6:	463c      	mov	r4, r7
 80099a8:	687f      	ldr	r7, [r7, #4]
 80099aa:	e7b6      	b.n	800991a <_malloc_r+0x4a>
 80099ac:	461a      	mov	r2, r3
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	d1fb      	bne.n	80099ac <_malloc_r+0xdc>
 80099b4:	2300      	movs	r3, #0
 80099b6:	6053      	str	r3, [r2, #4]
 80099b8:	e7de      	b.n	8009978 <_malloc_r+0xa8>
 80099ba:	230c      	movs	r3, #12
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	4630      	mov	r0, r6
 80099c0:	f000 f80c 	bl	80099dc <__malloc_unlock>
 80099c4:	e794      	b.n	80098f0 <_malloc_r+0x20>
 80099c6:	6005      	str	r5, [r0, #0]
 80099c8:	e7d6      	b.n	8009978 <_malloc_r+0xa8>
 80099ca:	bf00      	nop
 80099cc:	200049cc 	.word	0x200049cc

080099d0 <__malloc_lock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	@ (80099d8 <__malloc_lock+0x8>)
 80099d2:	f7ff b8b8 	b.w	8008b46 <__retarget_lock_acquire_recursive>
 80099d6:	bf00      	nop
 80099d8:	200049c4 	.word	0x200049c4

080099dc <__malloc_unlock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	@ (80099e4 <__malloc_unlock+0x8>)
 80099de:	f7ff b8b3 	b.w	8008b48 <__retarget_lock_release_recursive>
 80099e2:	bf00      	nop
 80099e4:	200049c4 	.word	0x200049c4

080099e8 <_Balloc>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	69c6      	ldr	r6, [r0, #28]
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	b976      	cbnz	r6, 8009a10 <_Balloc+0x28>
 80099f2:	2010      	movs	r0, #16
 80099f4:	f7ff ff42 	bl	800987c <malloc>
 80099f8:	4602      	mov	r2, r0
 80099fa:	61e0      	str	r0, [r4, #28]
 80099fc:	b920      	cbnz	r0, 8009a08 <_Balloc+0x20>
 80099fe:	4b18      	ldr	r3, [pc, #96]	@ (8009a60 <_Balloc+0x78>)
 8009a00:	4818      	ldr	r0, [pc, #96]	@ (8009a64 <_Balloc+0x7c>)
 8009a02:	216b      	movs	r1, #107	@ 0x6b
 8009a04:	f000 fe32 	bl	800a66c <__assert_func>
 8009a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a0c:	6006      	str	r6, [r0, #0]
 8009a0e:	60c6      	str	r6, [r0, #12]
 8009a10:	69e6      	ldr	r6, [r4, #28]
 8009a12:	68f3      	ldr	r3, [r6, #12]
 8009a14:	b183      	cbz	r3, 8009a38 <_Balloc+0x50>
 8009a16:	69e3      	ldr	r3, [r4, #28]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a1e:	b9b8      	cbnz	r0, 8009a50 <_Balloc+0x68>
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f605 	lsl.w	r6, r1, r5
 8009a26:	1d72      	adds	r2, r6, #5
 8009a28:	0092      	lsls	r2, r2, #2
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 fe3c 	bl	800a6a8 <_calloc_r>
 8009a30:	b160      	cbz	r0, 8009a4c <_Balloc+0x64>
 8009a32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a36:	e00e      	b.n	8009a56 <_Balloc+0x6e>
 8009a38:	2221      	movs	r2, #33	@ 0x21
 8009a3a:	2104      	movs	r1, #4
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fe33 	bl	800a6a8 <_calloc_r>
 8009a42:	69e3      	ldr	r3, [r4, #28]
 8009a44:	60f0      	str	r0, [r6, #12]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e4      	bne.n	8009a16 <_Balloc+0x2e>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	6802      	ldr	r2, [r0, #0]
 8009a52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a56:	2300      	movs	r3, #0
 8009a58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a5c:	e7f7      	b.n	8009a4e <_Balloc+0x66>
 8009a5e:	bf00      	nop
 8009a60:	0800abb1 	.word	0x0800abb1
 8009a64:	0800ac31 	.word	0x0800ac31

08009a68 <_Bfree>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	69c6      	ldr	r6, [r0, #28]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b976      	cbnz	r6, 8009a90 <_Bfree+0x28>
 8009a72:	2010      	movs	r0, #16
 8009a74:	f7ff ff02 	bl	800987c <malloc>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	61e8      	str	r0, [r5, #28]
 8009a7c:	b920      	cbnz	r0, 8009a88 <_Bfree+0x20>
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <_Bfree+0x3c>)
 8009a80:	4809      	ldr	r0, [pc, #36]	@ (8009aa8 <_Bfree+0x40>)
 8009a82:	218f      	movs	r1, #143	@ 0x8f
 8009a84:	f000 fdf2 	bl	800a66c <__assert_func>
 8009a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a8c:	6006      	str	r6, [r0, #0]
 8009a8e:	60c6      	str	r6, [r0, #12]
 8009a90:	b13c      	cbz	r4, 8009aa2 <_Bfree+0x3a>
 8009a92:	69eb      	ldr	r3, [r5, #28]
 8009a94:	6862      	ldr	r2, [r4, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a9c:	6021      	str	r1, [r4, #0]
 8009a9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	0800abb1 	.word	0x0800abb1
 8009aa8:	0800ac31 	.word	0x0800ac31

08009aac <__multadd>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	690d      	ldr	r5, [r1, #16]
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	461e      	mov	r6, r3
 8009ab8:	f101 0c14 	add.w	ip, r1, #20
 8009abc:	2000      	movs	r0, #0
 8009abe:	f8dc 3000 	ldr.w	r3, [ip]
 8009ac2:	b299      	uxth	r1, r3
 8009ac4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac8:	0c1e      	lsrs	r6, r3, #16
 8009aca:	0c0b      	lsrs	r3, r1, #16
 8009acc:	fb02 3306 	mla	r3, r2, r6, r3
 8009ad0:	b289      	uxth	r1, r1
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad8:	4285      	cmp	r5, r0
 8009ada:	f84c 1b04 	str.w	r1, [ip], #4
 8009ade:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ae2:	dcec      	bgt.n	8009abe <__multadd+0x12>
 8009ae4:	b30e      	cbz	r6, 8009b2a <__multadd+0x7e>
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dc19      	bgt.n	8009b20 <__multadd+0x74>
 8009aec:	6861      	ldr	r1, [r4, #4]
 8009aee:	4638      	mov	r0, r7
 8009af0:	3101      	adds	r1, #1
 8009af2:	f7ff ff79 	bl	80099e8 <_Balloc>
 8009af6:	4680      	mov	r8, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <__multadd+0x5a>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b0c      	ldr	r3, [pc, #48]	@ (8009b30 <__multadd+0x84>)
 8009afe:	480d      	ldr	r0, [pc, #52]	@ (8009b34 <__multadd+0x88>)
 8009b00:	21ba      	movs	r1, #186	@ 0xba
 8009b02:	f000 fdb3 	bl	800a66c <__assert_func>
 8009b06:	6922      	ldr	r2, [r4, #16]
 8009b08:	3202      	adds	r2, #2
 8009b0a:	f104 010c 	add.w	r1, r4, #12
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	300c      	adds	r0, #12
 8009b12:	f000 fd9d 	bl	800a650 <memcpy>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ffa5 	bl	8009a68 <_Bfree>
 8009b1e:	4644      	mov	r4, r8
 8009b20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b24:	3501      	adds	r5, #1
 8009b26:	615e      	str	r6, [r3, #20]
 8009b28:	6125      	str	r5, [r4, #16]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b30:	0800ac20 	.word	0x0800ac20
 8009b34:	0800ac31 	.word	0x0800ac31

08009b38 <__hi0bits>:
 8009b38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	bf36      	itet	cc
 8009b40:	0403      	lslcc	r3, r0, #16
 8009b42:	2000      	movcs	r0, #0
 8009b44:	2010      	movcc	r0, #16
 8009b46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b4a:	bf3c      	itt	cc
 8009b4c:	021b      	lslcc	r3, r3, #8
 8009b4e:	3008      	addcc	r0, #8
 8009b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b54:	bf3c      	itt	cc
 8009b56:	011b      	lslcc	r3, r3, #4
 8009b58:	3004      	addcc	r0, #4
 8009b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b5e:	bf3c      	itt	cc
 8009b60:	009b      	lslcc	r3, r3, #2
 8009b62:	3002      	addcc	r0, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	db05      	blt.n	8009b74 <__hi0bits+0x3c>
 8009b68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b6c:	f100 0001 	add.w	r0, r0, #1
 8009b70:	bf08      	it	eq
 8009b72:	2020      	moveq	r0, #32
 8009b74:	4770      	bx	lr

08009b76 <__lo0bits>:
 8009b76:	6803      	ldr	r3, [r0, #0]
 8009b78:	4602      	mov	r2, r0
 8009b7a:	f013 0007 	ands.w	r0, r3, #7
 8009b7e:	d00b      	beq.n	8009b98 <__lo0bits+0x22>
 8009b80:	07d9      	lsls	r1, r3, #31
 8009b82:	d421      	bmi.n	8009bc8 <__lo0bits+0x52>
 8009b84:	0798      	lsls	r0, r3, #30
 8009b86:	bf49      	itett	mi
 8009b88:	085b      	lsrmi	r3, r3, #1
 8009b8a:	089b      	lsrpl	r3, r3, #2
 8009b8c:	2001      	movmi	r0, #1
 8009b8e:	6013      	strmi	r3, [r2, #0]
 8009b90:	bf5c      	itt	pl
 8009b92:	6013      	strpl	r3, [r2, #0]
 8009b94:	2002      	movpl	r0, #2
 8009b96:	4770      	bx	lr
 8009b98:	b299      	uxth	r1, r3
 8009b9a:	b909      	cbnz	r1, 8009ba0 <__lo0bits+0x2a>
 8009b9c:	0c1b      	lsrs	r3, r3, #16
 8009b9e:	2010      	movs	r0, #16
 8009ba0:	b2d9      	uxtb	r1, r3
 8009ba2:	b909      	cbnz	r1, 8009ba8 <__lo0bits+0x32>
 8009ba4:	3008      	adds	r0, #8
 8009ba6:	0a1b      	lsrs	r3, r3, #8
 8009ba8:	0719      	lsls	r1, r3, #28
 8009baa:	bf04      	itt	eq
 8009bac:	091b      	lsreq	r3, r3, #4
 8009bae:	3004      	addeq	r0, #4
 8009bb0:	0799      	lsls	r1, r3, #30
 8009bb2:	bf04      	itt	eq
 8009bb4:	089b      	lsreq	r3, r3, #2
 8009bb6:	3002      	addeq	r0, #2
 8009bb8:	07d9      	lsls	r1, r3, #31
 8009bba:	d403      	bmi.n	8009bc4 <__lo0bits+0x4e>
 8009bbc:	085b      	lsrs	r3, r3, #1
 8009bbe:	f100 0001 	add.w	r0, r0, #1
 8009bc2:	d003      	beq.n	8009bcc <__lo0bits+0x56>
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	4770      	bx	lr
 8009bc8:	2000      	movs	r0, #0
 8009bca:	4770      	bx	lr
 8009bcc:	2020      	movs	r0, #32
 8009bce:	4770      	bx	lr

08009bd0 <__i2b>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	f7ff ff07 	bl	80099e8 <_Balloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__i2b+0x1a>
 8009bde:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <__i2b+0x24>)
 8009be0:	4805      	ldr	r0, [pc, #20]	@ (8009bf8 <__i2b+0x28>)
 8009be2:	f240 1145 	movw	r1, #325	@ 0x145
 8009be6:	f000 fd41 	bl	800a66c <__assert_func>
 8009bea:	2301      	movs	r3, #1
 8009bec:	6144      	str	r4, [r0, #20]
 8009bee:	6103      	str	r3, [r0, #16]
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800ac20 	.word	0x0800ac20
 8009bf8:	0800ac31 	.word	0x0800ac31

08009bfc <__multiply>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	4614      	mov	r4, r2
 8009c02:	690a      	ldr	r2, [r1, #16]
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	bfa8      	it	ge
 8009c0a:	4623      	movge	r3, r4
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	bfa4      	itt	ge
 8009c10:	460c      	movge	r4, r1
 8009c12:	461f      	movge	r7, r3
 8009c14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c1c:	68a3      	ldr	r3, [r4, #8]
 8009c1e:	6861      	ldr	r1, [r4, #4]
 8009c20:	eb0a 0609 	add.w	r6, sl, r9
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	b085      	sub	sp, #20
 8009c28:	bfb8      	it	lt
 8009c2a:	3101      	addlt	r1, #1
 8009c2c:	f7ff fedc 	bl	80099e8 <_Balloc>
 8009c30:	b930      	cbnz	r0, 8009c40 <__multiply+0x44>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b44      	ldr	r3, [pc, #272]	@ (8009d48 <__multiply+0x14c>)
 8009c36:	4845      	ldr	r0, [pc, #276]	@ (8009d4c <__multiply+0x150>)
 8009c38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c3c:	f000 fd16 	bl	800a66c <__assert_func>
 8009c40:	f100 0514 	add.w	r5, r0, #20
 8009c44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c48:	462b      	mov	r3, r5
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4543      	cmp	r3, r8
 8009c4e:	d321      	bcc.n	8009c94 <__multiply+0x98>
 8009c50:	f107 0114 	add.w	r1, r7, #20
 8009c54:	f104 0214 	add.w	r2, r4, #20
 8009c58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009c5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	1b13      	subs	r3, r2, r4
 8009c64:	3b15      	subs	r3, #21
 8009c66:	f023 0303 	bic.w	r3, r3, #3
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	f104 0715 	add.w	r7, r4, #21
 8009c70:	42ba      	cmp	r2, r7
 8009c72:	bf38      	it	cc
 8009c74:	2304      	movcc	r3, #4
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	9103      	str	r1, [sp, #12]
 8009c7c:	428b      	cmp	r3, r1
 8009c7e:	d80c      	bhi.n	8009c9a <__multiply+0x9e>
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	dd03      	ble.n	8009c8c <__multiply+0x90>
 8009c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d05b      	beq.n	8009d44 <__multiply+0x148>
 8009c8c:	6106      	str	r6, [r0, #16]
 8009c8e:	b005      	add	sp, #20
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	f843 2b04 	str.w	r2, [r3], #4
 8009c98:	e7d8      	b.n	8009c4c <__multiply+0x50>
 8009c9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c9e:	f1ba 0f00 	cmp.w	sl, #0
 8009ca2:	d024      	beq.n	8009cee <__multiply+0xf2>
 8009ca4:	f104 0e14 	add.w	lr, r4, #20
 8009ca8:	46a9      	mov	r9, r5
 8009caa:	f04f 0c00 	mov.w	ip, #0
 8009cae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8009cb6:	fa1f fb87 	uxth.w	fp, r7
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009cc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009cc4:	f8d9 7000 	ldr.w	r7, [r9]
 8009cc8:	4463      	add	r3, ip
 8009cca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009cce:	fb0a c70b 	mla	r7, sl, fp, ip
 8009cd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009cdc:	4572      	cmp	r2, lr
 8009cde:	f849 3b04 	str.w	r3, [r9], #4
 8009ce2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ce6:	d8e2      	bhi.n	8009cae <__multiply+0xb2>
 8009ce8:	9b01      	ldr	r3, [sp, #4]
 8009cea:	f845 c003 	str.w	ip, [r5, r3]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009cf4:	3104      	adds	r1, #4
 8009cf6:	f1b9 0f00 	cmp.w	r9, #0
 8009cfa:	d021      	beq.n	8009d40 <__multiply+0x144>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	f104 0c14 	add.w	ip, r4, #20
 8009d02:	46ae      	mov	lr, r5
 8009d04:	f04f 0a00 	mov.w	sl, #0
 8009d08:	f8bc b000 	ldrh.w	fp, [ip]
 8009d0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d10:	fb09 770b 	mla	r7, r9, fp, r7
 8009d14:	4457      	add	r7, sl
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d1c:	f84e 3b04 	str.w	r3, [lr], #4
 8009d20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d28:	f8be 3000 	ldrh.w	r3, [lr]
 8009d2c:	fb09 330a 	mla	r3, r9, sl, r3
 8009d30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d34:	4562      	cmp	r2, ip
 8009d36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d3a:	d8e5      	bhi.n	8009d08 <__multiply+0x10c>
 8009d3c:	9f01      	ldr	r7, [sp, #4]
 8009d3e:	51eb      	str	r3, [r5, r7]
 8009d40:	3504      	adds	r5, #4
 8009d42:	e799      	b.n	8009c78 <__multiply+0x7c>
 8009d44:	3e01      	subs	r6, #1
 8009d46:	e79b      	b.n	8009c80 <__multiply+0x84>
 8009d48:	0800ac20 	.word	0x0800ac20
 8009d4c:	0800ac31 	.word	0x0800ac31

08009d50 <__pow5mult>:
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	4615      	mov	r5, r2
 8009d56:	f012 0203 	ands.w	r2, r2, #3
 8009d5a:	4607      	mov	r7, r0
 8009d5c:	460e      	mov	r6, r1
 8009d5e:	d007      	beq.n	8009d70 <__pow5mult+0x20>
 8009d60:	4c25      	ldr	r4, [pc, #148]	@ (8009df8 <__pow5mult+0xa8>)
 8009d62:	3a01      	subs	r2, #1
 8009d64:	2300      	movs	r3, #0
 8009d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d6a:	f7ff fe9f 	bl	8009aac <__multadd>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	10ad      	asrs	r5, r5, #2
 8009d72:	d03d      	beq.n	8009df0 <__pow5mult+0xa0>
 8009d74:	69fc      	ldr	r4, [r7, #28]
 8009d76:	b97c      	cbnz	r4, 8009d98 <__pow5mult+0x48>
 8009d78:	2010      	movs	r0, #16
 8009d7a:	f7ff fd7f 	bl	800987c <malloc>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	61f8      	str	r0, [r7, #28]
 8009d82:	b928      	cbnz	r0, 8009d90 <__pow5mult+0x40>
 8009d84:	4b1d      	ldr	r3, [pc, #116]	@ (8009dfc <__pow5mult+0xac>)
 8009d86:	481e      	ldr	r0, [pc, #120]	@ (8009e00 <__pow5mult+0xb0>)
 8009d88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d8c:	f000 fc6e 	bl	800a66c <__assert_func>
 8009d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d94:	6004      	str	r4, [r0, #0]
 8009d96:	60c4      	str	r4, [r0, #12]
 8009d98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009da0:	b94c      	cbnz	r4, 8009db6 <__pow5mult+0x66>
 8009da2:	f240 2171 	movw	r1, #625	@ 0x271
 8009da6:	4638      	mov	r0, r7
 8009da8:	f7ff ff12 	bl	8009bd0 <__i2b>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009db2:	4604      	mov	r4, r0
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	f04f 0900 	mov.w	r9, #0
 8009dba:	07eb      	lsls	r3, r5, #31
 8009dbc:	d50a      	bpl.n	8009dd4 <__pow5mult+0x84>
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f7ff ff1a 	bl	8009bfc <__multiply>
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4680      	mov	r8, r0
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7ff fe4b 	bl	8009a68 <_Bfree>
 8009dd2:	4646      	mov	r6, r8
 8009dd4:	106d      	asrs	r5, r5, #1
 8009dd6:	d00b      	beq.n	8009df0 <__pow5mult+0xa0>
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	b938      	cbnz	r0, 8009dec <__pow5mult+0x9c>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4621      	mov	r1, r4
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ff0b 	bl	8009bfc <__multiply>
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	f8c0 9000 	str.w	r9, [r0]
 8009dec:	4604      	mov	r4, r0
 8009dee:	e7e4      	b.n	8009dba <__pow5mult+0x6a>
 8009df0:	4630      	mov	r0, r6
 8009df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df6:	bf00      	nop
 8009df8:	0800ac8c 	.word	0x0800ac8c
 8009dfc:	0800abb1 	.word	0x0800abb1
 8009e00:	0800ac31 	.word	0x0800ac31

08009e04 <__lshift>:
 8009e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	6849      	ldr	r1, [r1, #4]
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	4607      	mov	r7, r0
 8009e16:	4691      	mov	r9, r2
 8009e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e1c:	f108 0601 	add.w	r6, r8, #1
 8009e20:	42b3      	cmp	r3, r6
 8009e22:	db0b      	blt.n	8009e3c <__lshift+0x38>
 8009e24:	4638      	mov	r0, r7
 8009e26:	f7ff fddf 	bl	80099e8 <_Balloc>
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	b948      	cbnz	r0, 8009e42 <__lshift+0x3e>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4b28      	ldr	r3, [pc, #160]	@ (8009ed4 <__lshift+0xd0>)
 8009e32:	4829      	ldr	r0, [pc, #164]	@ (8009ed8 <__lshift+0xd4>)
 8009e34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e38:	f000 fc18 	bl	800a66c <__assert_func>
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	e7ee      	b.n	8009e20 <__lshift+0x1c>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f100 0114 	add.w	r1, r0, #20
 8009e48:	f100 0210 	add.w	r2, r0, #16
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4553      	cmp	r3, sl
 8009e50:	db33      	blt.n	8009eba <__lshift+0xb6>
 8009e52:	6920      	ldr	r0, [r4, #16]
 8009e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e58:	f104 0314 	add.w	r3, r4, #20
 8009e5c:	f019 091f 	ands.w	r9, r9, #31
 8009e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e68:	d02b      	beq.n	8009ec2 <__lshift+0xbe>
 8009e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e6e:	468a      	mov	sl, r1
 8009e70:	2200      	movs	r2, #0
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	fa00 f009 	lsl.w	r0, r0, r9
 8009e78:	4310      	orrs	r0, r2
 8009e7a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e82:	459c      	cmp	ip, r3
 8009e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e88:	d8f3      	bhi.n	8009e72 <__lshift+0x6e>
 8009e8a:	ebac 0304 	sub.w	r3, ip, r4
 8009e8e:	3b15      	subs	r3, #21
 8009e90:	f023 0303 	bic.w	r3, r3, #3
 8009e94:	3304      	adds	r3, #4
 8009e96:	f104 0015 	add.w	r0, r4, #21
 8009e9a:	4584      	cmp	ip, r0
 8009e9c:	bf38      	it	cc
 8009e9e:	2304      	movcc	r3, #4
 8009ea0:	50ca      	str	r2, [r1, r3]
 8009ea2:	b10a      	cbz	r2, 8009ea8 <__lshift+0xa4>
 8009ea4:	f108 0602 	add.w	r6, r8, #2
 8009ea8:	3e01      	subs	r6, #1
 8009eaa:	4638      	mov	r0, r7
 8009eac:	612e      	str	r6, [r5, #16]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f7ff fdda 	bl	8009a68 <_Bfree>
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	e7c5      	b.n	8009e4e <__lshift+0x4a>
 8009ec2:	3904      	subs	r1, #4
 8009ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ecc:	459c      	cmp	ip, r3
 8009ece:	d8f9      	bhi.n	8009ec4 <__lshift+0xc0>
 8009ed0:	e7ea      	b.n	8009ea8 <__lshift+0xa4>
 8009ed2:	bf00      	nop
 8009ed4:	0800ac20 	.word	0x0800ac20
 8009ed8:	0800ac31 	.word	0x0800ac31

08009edc <__mcmp>:
 8009edc:	690a      	ldr	r2, [r1, #16]
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6900      	ldr	r0, [r0, #16]
 8009ee2:	1a80      	subs	r0, r0, r2
 8009ee4:	b530      	push	{r4, r5, lr}
 8009ee6:	d10e      	bne.n	8009f06 <__mcmp+0x2a>
 8009ee8:	3314      	adds	r3, #20
 8009eea:	3114      	adds	r1, #20
 8009eec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ef0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009efc:	4295      	cmp	r5, r2
 8009efe:	d003      	beq.n	8009f08 <__mcmp+0x2c>
 8009f00:	d205      	bcs.n	8009f0e <__mcmp+0x32>
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295
 8009f06:	bd30      	pop	{r4, r5, pc}
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	d3f3      	bcc.n	8009ef4 <__mcmp+0x18>
 8009f0c:	e7fb      	b.n	8009f06 <__mcmp+0x2a>
 8009f0e:	2001      	movs	r0, #1
 8009f10:	e7f9      	b.n	8009f06 <__mcmp+0x2a>
	...

08009f14 <__mdiff>:
 8009f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	4689      	mov	r9, r1
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4648      	mov	r0, r9
 8009f20:	4614      	mov	r4, r2
 8009f22:	f7ff ffdb 	bl	8009edc <__mcmp>
 8009f26:	1e05      	subs	r5, r0, #0
 8009f28:	d112      	bne.n	8009f50 <__mdiff+0x3c>
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7ff fd5b 	bl	80099e8 <_Balloc>
 8009f32:	4602      	mov	r2, r0
 8009f34:	b928      	cbnz	r0, 8009f42 <__mdiff+0x2e>
 8009f36:	4b3f      	ldr	r3, [pc, #252]	@ (800a034 <__mdiff+0x120>)
 8009f38:	f240 2137 	movw	r1, #567	@ 0x237
 8009f3c:	483e      	ldr	r0, [pc, #248]	@ (800a038 <__mdiff+0x124>)
 8009f3e:	f000 fb95 	bl	800a66c <__assert_func>
 8009f42:	2301      	movs	r3, #1
 8009f44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f48:	4610      	mov	r0, r2
 8009f4a:	b003      	add	sp, #12
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	bfbc      	itt	lt
 8009f52:	464b      	movlt	r3, r9
 8009f54:	46a1      	movlt	r9, r4
 8009f56:	4630      	mov	r0, r6
 8009f58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f5c:	bfba      	itte	lt
 8009f5e:	461c      	movlt	r4, r3
 8009f60:	2501      	movlt	r5, #1
 8009f62:	2500      	movge	r5, #0
 8009f64:	f7ff fd40 	bl	80099e8 <_Balloc>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	b918      	cbnz	r0, 8009f74 <__mdiff+0x60>
 8009f6c:	4b31      	ldr	r3, [pc, #196]	@ (800a034 <__mdiff+0x120>)
 8009f6e:	f240 2145 	movw	r1, #581	@ 0x245
 8009f72:	e7e3      	b.n	8009f3c <__mdiff+0x28>
 8009f74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f78:	6926      	ldr	r6, [r4, #16]
 8009f7a:	60c5      	str	r5, [r0, #12]
 8009f7c:	f109 0310 	add.w	r3, r9, #16
 8009f80:	f109 0514 	add.w	r5, r9, #20
 8009f84:	f104 0e14 	add.w	lr, r4, #20
 8009f88:	f100 0b14 	add.w	fp, r0, #20
 8009f8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	46d9      	mov	r9, fp
 8009f98:	f04f 0c00 	mov.w	ip, #0
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fa2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	fa1f f38a 	uxth.w	r3, sl
 8009fac:	4619      	mov	r1, r3
 8009fae:	b283      	uxth	r3, r0
 8009fb0:	1acb      	subs	r3, r1, r3
 8009fb2:	0c00      	lsrs	r0, r0, #16
 8009fb4:	4463      	add	r3, ip
 8009fb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009fba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009fc4:	4576      	cmp	r6, lr
 8009fc6:	f849 3b04 	str.w	r3, [r9], #4
 8009fca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fce:	d8e5      	bhi.n	8009f9c <__mdiff+0x88>
 8009fd0:	1b33      	subs	r3, r6, r4
 8009fd2:	3b15      	subs	r3, #21
 8009fd4:	f023 0303 	bic.w	r3, r3, #3
 8009fd8:	3415      	adds	r4, #21
 8009fda:	3304      	adds	r3, #4
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	bf38      	it	cc
 8009fe0:	2304      	movcc	r3, #4
 8009fe2:	441d      	add	r5, r3
 8009fe4:	445b      	add	r3, fp
 8009fe6:	461e      	mov	r6, r3
 8009fe8:	462c      	mov	r4, r5
 8009fea:	4544      	cmp	r4, r8
 8009fec:	d30e      	bcc.n	800a00c <__mdiff+0xf8>
 8009fee:	f108 0103 	add.w	r1, r8, #3
 8009ff2:	1b49      	subs	r1, r1, r5
 8009ff4:	f021 0103 	bic.w	r1, r1, #3
 8009ff8:	3d03      	subs	r5, #3
 8009ffa:	45a8      	cmp	r8, r5
 8009ffc:	bf38      	it	cc
 8009ffe:	2100      	movcc	r1, #0
 800a000:	440b      	add	r3, r1
 800a002:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a006:	b191      	cbz	r1, 800a02e <__mdiff+0x11a>
 800a008:	6117      	str	r7, [r2, #16]
 800a00a:	e79d      	b.n	8009f48 <__mdiff+0x34>
 800a00c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a010:	46e6      	mov	lr, ip
 800a012:	0c08      	lsrs	r0, r1, #16
 800a014:	fa1c fc81 	uxtah	ip, ip, r1
 800a018:	4471      	add	r1, lr
 800a01a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a01e:	b289      	uxth	r1, r1
 800a020:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a024:	f846 1b04 	str.w	r1, [r6], #4
 800a028:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a02c:	e7dd      	b.n	8009fea <__mdiff+0xd6>
 800a02e:	3f01      	subs	r7, #1
 800a030:	e7e7      	b.n	800a002 <__mdiff+0xee>
 800a032:	bf00      	nop
 800a034:	0800ac20 	.word	0x0800ac20
 800a038:	0800ac31 	.word	0x0800ac31

0800a03c <__d2b>:
 800a03c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a040:	460f      	mov	r7, r1
 800a042:	2101      	movs	r1, #1
 800a044:	ec59 8b10 	vmov	r8, r9, d0
 800a048:	4616      	mov	r6, r2
 800a04a:	f7ff fccd 	bl	80099e8 <_Balloc>
 800a04e:	4604      	mov	r4, r0
 800a050:	b930      	cbnz	r0, 800a060 <__d2b+0x24>
 800a052:	4602      	mov	r2, r0
 800a054:	4b23      	ldr	r3, [pc, #140]	@ (800a0e4 <__d2b+0xa8>)
 800a056:	4824      	ldr	r0, [pc, #144]	@ (800a0e8 <__d2b+0xac>)
 800a058:	f240 310f 	movw	r1, #783	@ 0x30f
 800a05c:	f000 fb06 	bl	800a66c <__assert_func>
 800a060:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a068:	b10d      	cbz	r5, 800a06e <__d2b+0x32>
 800a06a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	f1b8 0300 	subs.w	r3, r8, #0
 800a074:	d023      	beq.n	800a0be <__d2b+0x82>
 800a076:	4668      	mov	r0, sp
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	f7ff fd7c 	bl	8009b76 <__lo0bits>
 800a07e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a082:	b1d0      	cbz	r0, 800a0ba <__d2b+0x7e>
 800a084:	f1c0 0320 	rsb	r3, r0, #32
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	430b      	orrs	r3, r1
 800a08e:	40c2      	lsrs	r2, r0
 800a090:	6163      	str	r3, [r4, #20]
 800a092:	9201      	str	r2, [sp, #4]
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	61a3      	str	r3, [r4, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bf0c      	ite	eq
 800a09c:	2201      	moveq	r2, #1
 800a09e:	2202      	movne	r2, #2
 800a0a0:	6122      	str	r2, [r4, #16]
 800a0a2:	b1a5      	cbz	r5, 800a0ce <__d2b+0x92>
 800a0a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0a8:	4405      	add	r5, r0
 800a0aa:	603d      	str	r5, [r7, #0]
 800a0ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0b0:	6030      	str	r0, [r6, #0]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	b003      	add	sp, #12
 800a0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	6161      	str	r1, [r4, #20]
 800a0bc:	e7ea      	b.n	800a094 <__d2b+0x58>
 800a0be:	a801      	add	r0, sp, #4
 800a0c0:	f7ff fd59 	bl	8009b76 <__lo0bits>
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	3020      	adds	r0, #32
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	e7e8      	b.n	800a0a0 <__d2b+0x64>
 800a0ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0d6:	6038      	str	r0, [r7, #0]
 800a0d8:	6918      	ldr	r0, [r3, #16]
 800a0da:	f7ff fd2d 	bl	8009b38 <__hi0bits>
 800a0de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0e2:	e7e5      	b.n	800a0b0 <__d2b+0x74>
 800a0e4:	0800ac20 	.word	0x0800ac20
 800a0e8:	0800ac31 	.word	0x0800ac31

0800a0ec <__ssputs_r>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	688e      	ldr	r6, [r1, #8]
 800a0f2:	461f      	mov	r7, r3
 800a0f4:	42be      	cmp	r6, r7
 800a0f6:	680b      	ldr	r3, [r1, #0]
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	4690      	mov	r8, r2
 800a0fe:	d82d      	bhi.n	800a15c <__ssputs_r+0x70>
 800a100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a108:	d026      	beq.n	800a158 <__ssputs_r+0x6c>
 800a10a:	6965      	ldr	r5, [r4, #20]
 800a10c:	6909      	ldr	r1, [r1, #16]
 800a10e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a112:	eba3 0901 	sub.w	r9, r3, r1
 800a116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a11a:	1c7b      	adds	r3, r7, #1
 800a11c:	444b      	add	r3, r9
 800a11e:	106d      	asrs	r5, r5, #1
 800a120:	429d      	cmp	r5, r3
 800a122:	bf38      	it	cc
 800a124:	461d      	movcc	r5, r3
 800a126:	0553      	lsls	r3, r2, #21
 800a128:	d527      	bpl.n	800a17a <__ssputs_r+0x8e>
 800a12a:	4629      	mov	r1, r5
 800a12c:	f7ff fbd0 	bl	80098d0 <_malloc_r>
 800a130:	4606      	mov	r6, r0
 800a132:	b360      	cbz	r0, 800a18e <__ssputs_r+0xa2>
 800a134:	6921      	ldr	r1, [r4, #16]
 800a136:	464a      	mov	r2, r9
 800a138:	f000 fa8a 	bl	800a650 <memcpy>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	6126      	str	r6, [r4, #16]
 800a14a:	6165      	str	r5, [r4, #20]
 800a14c:	444e      	add	r6, r9
 800a14e:	eba5 0509 	sub.w	r5, r5, r9
 800a152:	6026      	str	r6, [r4, #0]
 800a154:	60a5      	str	r5, [r4, #8]
 800a156:	463e      	mov	r6, r7
 800a158:	42be      	cmp	r6, r7
 800a15a:	d900      	bls.n	800a15e <__ssputs_r+0x72>
 800a15c:	463e      	mov	r6, r7
 800a15e:	6820      	ldr	r0, [r4, #0]
 800a160:	4632      	mov	r2, r6
 800a162:	4641      	mov	r1, r8
 800a164:	f000 fa28 	bl	800a5b8 <memmove>
 800a168:	68a3      	ldr	r3, [r4, #8]
 800a16a:	1b9b      	subs	r3, r3, r6
 800a16c:	60a3      	str	r3, [r4, #8]
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	4433      	add	r3, r6
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	2000      	movs	r0, #0
 800a176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a17a:	462a      	mov	r2, r5
 800a17c:	f000 faba 	bl	800a6f4 <_realloc_r>
 800a180:	4606      	mov	r6, r0
 800a182:	2800      	cmp	r0, #0
 800a184:	d1e0      	bne.n	800a148 <__ssputs_r+0x5c>
 800a186:	6921      	ldr	r1, [r4, #16]
 800a188:	4650      	mov	r0, sl
 800a18a:	f7ff fb2d 	bl	80097e8 <_free_r>
 800a18e:	230c      	movs	r3, #12
 800a190:	f8ca 3000 	str.w	r3, [sl]
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	e7e9      	b.n	800a176 <__ssputs_r+0x8a>
	...

0800a1a4 <_svfiprintf_r>:
 800a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	4698      	mov	r8, r3
 800a1aa:	898b      	ldrh	r3, [r1, #12]
 800a1ac:	061b      	lsls	r3, r3, #24
 800a1ae:	b09d      	sub	sp, #116	@ 0x74
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	4614      	mov	r4, r2
 800a1b6:	d510      	bpl.n	800a1da <_svfiprintf_r+0x36>
 800a1b8:	690b      	ldr	r3, [r1, #16]
 800a1ba:	b973      	cbnz	r3, 800a1da <_svfiprintf_r+0x36>
 800a1bc:	2140      	movs	r1, #64	@ 0x40
 800a1be:	f7ff fb87 	bl	80098d0 <_malloc_r>
 800a1c2:	6028      	str	r0, [r5, #0]
 800a1c4:	6128      	str	r0, [r5, #16]
 800a1c6:	b930      	cbnz	r0, 800a1d6 <_svfiprintf_r+0x32>
 800a1c8:	230c      	movs	r3, #12
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	b01d      	add	sp, #116	@ 0x74
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d6:	2340      	movs	r3, #64	@ 0x40
 800a1d8:	616b      	str	r3, [r5, #20]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1de:	2320      	movs	r3, #32
 800a1e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e8:	2330      	movs	r3, #48	@ 0x30
 800a1ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a388 <_svfiprintf_r+0x1e4>
 800a1ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1f2:	f04f 0901 	mov.w	r9, #1
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fe:	b10a      	cbz	r2, 800a204 <_svfiprintf_r+0x60>
 800a200:	2a25      	cmp	r2, #37	@ 0x25
 800a202:	d1f9      	bne.n	800a1f8 <_svfiprintf_r+0x54>
 800a204:	ebba 0b04 	subs.w	fp, sl, r4
 800a208:	d00b      	beq.n	800a222 <_svfiprintf_r+0x7e>
 800a20a:	465b      	mov	r3, fp
 800a20c:	4622      	mov	r2, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff ff6b 	bl	800a0ec <__ssputs_r>
 800a216:	3001      	adds	r0, #1
 800a218:	f000 80a7 	beq.w	800a36a <_svfiprintf_r+0x1c6>
 800a21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a21e:	445a      	add	r2, fp
 800a220:	9209      	str	r2, [sp, #36]	@ 0x24
 800a222:	f89a 3000 	ldrb.w	r3, [sl]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 809f 	beq.w	800a36a <_svfiprintf_r+0x1c6>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a236:	f10a 0a01 	add.w	sl, sl, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a242:	931a      	str	r3, [sp, #104]	@ 0x68
 800a244:	4654      	mov	r4, sl
 800a246:	2205      	movs	r2, #5
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	484e      	ldr	r0, [pc, #312]	@ (800a388 <_svfiprintf_r+0x1e4>)
 800a24e:	f7f5 ffd7 	bl	8000200 <memchr>
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	b9d8      	cbnz	r0, 800a28e <_svfiprintf_r+0xea>
 800a256:	06d0      	lsls	r0, r2, #27
 800a258:	bf44      	itt	mi
 800a25a:	2320      	movmi	r3, #32
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a260:	0711      	lsls	r1, r2, #28
 800a262:	bf44      	itt	mi
 800a264:	232b      	movmi	r3, #43	@ 0x2b
 800a266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a26a:	f89a 3000 	ldrb.w	r3, [sl]
 800a26e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a270:	d015      	beq.n	800a29e <_svfiprintf_r+0xfa>
 800a272:	9a07      	ldr	r2, [sp, #28]
 800a274:	4654      	mov	r4, sl
 800a276:	2000      	movs	r0, #0
 800a278:	f04f 0c0a 	mov.w	ip, #10
 800a27c:	4621      	mov	r1, r4
 800a27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a282:	3b30      	subs	r3, #48	@ 0x30
 800a284:	2b09      	cmp	r3, #9
 800a286:	d94b      	bls.n	800a320 <_svfiprintf_r+0x17c>
 800a288:	b1b0      	cbz	r0, 800a2b8 <_svfiprintf_r+0x114>
 800a28a:	9207      	str	r2, [sp, #28]
 800a28c:	e014      	b.n	800a2b8 <_svfiprintf_r+0x114>
 800a28e:	eba0 0308 	sub.w	r3, r0, r8
 800a292:	fa09 f303 	lsl.w	r3, r9, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	46a2      	mov	sl, r4
 800a29c:	e7d2      	b.n	800a244 <_svfiprintf_r+0xa0>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	1d19      	adds	r1, r3, #4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	9103      	str	r1, [sp, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfbb      	ittet	lt
 800a2aa:	425b      	neglt	r3, r3
 800a2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b0:	9307      	strge	r3, [sp, #28]
 800a2b2:	9307      	strlt	r3, [sp, #28]
 800a2b4:	bfb8      	it	lt
 800a2b6:	9204      	strlt	r2, [sp, #16]
 800a2b8:	7823      	ldrb	r3, [r4, #0]
 800a2ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2bc:	d10a      	bne.n	800a2d4 <_svfiprintf_r+0x130>
 800a2be:	7863      	ldrb	r3, [r4, #1]
 800a2c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2c2:	d132      	bne.n	800a32a <_svfiprintf_r+0x186>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	9203      	str	r2, [sp, #12]
 800a2cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2d0:	3402      	adds	r4, #2
 800a2d2:	9305      	str	r3, [sp, #20]
 800a2d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a398 <_svfiprintf_r+0x1f4>
 800a2d8:	7821      	ldrb	r1, [r4, #0]
 800a2da:	2203      	movs	r2, #3
 800a2dc:	4650      	mov	r0, sl
 800a2de:	f7f5 ff8f 	bl	8000200 <memchr>
 800a2e2:	b138      	cbz	r0, 800a2f4 <_svfiprintf_r+0x150>
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	eba0 000a 	sub.w	r0, r0, sl
 800a2ea:	2240      	movs	r2, #64	@ 0x40
 800a2ec:	4082      	lsls	r2, r0
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	3401      	adds	r4, #1
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f8:	4824      	ldr	r0, [pc, #144]	@ (800a38c <_svfiprintf_r+0x1e8>)
 800a2fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2fe:	2206      	movs	r2, #6
 800a300:	f7f5 ff7e 	bl	8000200 <memchr>
 800a304:	2800      	cmp	r0, #0
 800a306:	d036      	beq.n	800a376 <_svfiprintf_r+0x1d2>
 800a308:	4b21      	ldr	r3, [pc, #132]	@ (800a390 <_svfiprintf_r+0x1ec>)
 800a30a:	bb1b      	cbnz	r3, 800a354 <_svfiprintf_r+0x1b0>
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	3307      	adds	r3, #7
 800a310:	f023 0307 	bic.w	r3, r3, #7
 800a314:	3308      	adds	r3, #8
 800a316:	9303      	str	r3, [sp, #12]
 800a318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31a:	4433      	add	r3, r6
 800a31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a31e:	e76a      	b.n	800a1f6 <_svfiprintf_r+0x52>
 800a320:	fb0c 3202 	mla	r2, ip, r2, r3
 800a324:	460c      	mov	r4, r1
 800a326:	2001      	movs	r0, #1
 800a328:	e7a8      	b.n	800a27c <_svfiprintf_r+0xd8>
 800a32a:	2300      	movs	r3, #0
 800a32c:	3401      	adds	r4, #1
 800a32e:	9305      	str	r3, [sp, #20]
 800a330:	4619      	mov	r1, r3
 800a332:	f04f 0c0a 	mov.w	ip, #10
 800a336:	4620      	mov	r0, r4
 800a338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a33c:	3a30      	subs	r2, #48	@ 0x30
 800a33e:	2a09      	cmp	r2, #9
 800a340:	d903      	bls.n	800a34a <_svfiprintf_r+0x1a6>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0c6      	beq.n	800a2d4 <_svfiprintf_r+0x130>
 800a346:	9105      	str	r1, [sp, #20]
 800a348:	e7c4      	b.n	800a2d4 <_svfiprintf_r+0x130>
 800a34a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a34e:	4604      	mov	r4, r0
 800a350:	2301      	movs	r3, #1
 800a352:	e7f0      	b.n	800a336 <_svfiprintf_r+0x192>
 800a354:	ab03      	add	r3, sp, #12
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	462a      	mov	r2, r5
 800a35a:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <_svfiprintf_r+0x1f0>)
 800a35c:	a904      	add	r1, sp, #16
 800a35e:	4638      	mov	r0, r7
 800a360:	f7fd fe02 	bl	8007f68 <_printf_float>
 800a364:	1c42      	adds	r2, r0, #1
 800a366:	4606      	mov	r6, r0
 800a368:	d1d6      	bne.n	800a318 <_svfiprintf_r+0x174>
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	065b      	lsls	r3, r3, #25
 800a36e:	f53f af2d 	bmi.w	800a1cc <_svfiprintf_r+0x28>
 800a372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a374:	e72c      	b.n	800a1d0 <_svfiprintf_r+0x2c>
 800a376:	ab03      	add	r3, sp, #12
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	462a      	mov	r2, r5
 800a37c:	4b05      	ldr	r3, [pc, #20]	@ (800a394 <_svfiprintf_r+0x1f0>)
 800a37e:	a904      	add	r1, sp, #16
 800a380:	4638      	mov	r0, r7
 800a382:	f7fe f889 	bl	8008498 <_printf_i>
 800a386:	e7ed      	b.n	800a364 <_svfiprintf_r+0x1c0>
 800a388:	0800ad88 	.word	0x0800ad88
 800a38c:	0800ad92 	.word	0x0800ad92
 800a390:	08007f69 	.word	0x08007f69
 800a394:	0800a0ed 	.word	0x0800a0ed
 800a398:	0800ad8e 	.word	0x0800ad8e

0800a39c <__sflush_r>:
 800a39c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a4:	0716      	lsls	r6, r2, #28
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d454      	bmi.n	800a456 <__sflush_r+0xba>
 800a3ac:	684b      	ldr	r3, [r1, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dc02      	bgt.n	800a3b8 <__sflush_r+0x1c>
 800a3b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd48      	ble.n	800a44a <__sflush_r+0xae>
 800a3b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d045      	beq.n	800a44a <__sflush_r+0xae>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3c4:	682f      	ldr	r7, [r5, #0]
 800a3c6:	6a21      	ldr	r1, [r4, #32]
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	d030      	beq.n	800a42e <__sflush_r+0x92>
 800a3cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	0759      	lsls	r1, r3, #29
 800a3d2:	d505      	bpl.n	800a3e0 <__sflush_r+0x44>
 800a3d4:	6863      	ldr	r3, [r4, #4]
 800a3d6:	1ad2      	subs	r2, r2, r3
 800a3d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3da:	b10b      	cbz	r3, 800a3e0 <__sflush_r+0x44>
 800a3dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3e4:	6a21      	ldr	r1, [r4, #32]
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b0      	blx	r6
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	d106      	bne.n	800a3fe <__sflush_r+0x62>
 800a3f0:	6829      	ldr	r1, [r5, #0]
 800a3f2:	291d      	cmp	r1, #29
 800a3f4:	d82b      	bhi.n	800a44e <__sflush_r+0xb2>
 800a3f6:	4a2a      	ldr	r2, [pc, #168]	@ (800a4a0 <__sflush_r+0x104>)
 800a3f8:	410a      	asrs	r2, r1
 800a3fa:	07d6      	lsls	r6, r2, #31
 800a3fc:	d427      	bmi.n	800a44e <__sflush_r+0xb2>
 800a3fe:	2200      	movs	r2, #0
 800a400:	6062      	str	r2, [r4, #4]
 800a402:	04d9      	lsls	r1, r3, #19
 800a404:	6922      	ldr	r2, [r4, #16]
 800a406:	6022      	str	r2, [r4, #0]
 800a408:	d504      	bpl.n	800a414 <__sflush_r+0x78>
 800a40a:	1c42      	adds	r2, r0, #1
 800a40c:	d101      	bne.n	800a412 <__sflush_r+0x76>
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	b903      	cbnz	r3, 800a414 <__sflush_r+0x78>
 800a412:	6560      	str	r0, [r4, #84]	@ 0x54
 800a414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a416:	602f      	str	r7, [r5, #0]
 800a418:	b1b9      	cbz	r1, 800a44a <__sflush_r+0xae>
 800a41a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a41e:	4299      	cmp	r1, r3
 800a420:	d002      	beq.n	800a428 <__sflush_r+0x8c>
 800a422:	4628      	mov	r0, r5
 800a424:	f7ff f9e0 	bl	80097e8 <_free_r>
 800a428:	2300      	movs	r3, #0
 800a42a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a42c:	e00d      	b.n	800a44a <__sflush_r+0xae>
 800a42e:	2301      	movs	r3, #1
 800a430:	4628      	mov	r0, r5
 800a432:	47b0      	blx	r6
 800a434:	4602      	mov	r2, r0
 800a436:	1c50      	adds	r0, r2, #1
 800a438:	d1c9      	bne.n	800a3ce <__sflush_r+0x32>
 800a43a:	682b      	ldr	r3, [r5, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0c6      	beq.n	800a3ce <__sflush_r+0x32>
 800a440:	2b1d      	cmp	r3, #29
 800a442:	d001      	beq.n	800a448 <__sflush_r+0xac>
 800a444:	2b16      	cmp	r3, #22
 800a446:	d11e      	bne.n	800a486 <__sflush_r+0xea>
 800a448:	602f      	str	r7, [r5, #0]
 800a44a:	2000      	movs	r0, #0
 800a44c:	e022      	b.n	800a494 <__sflush_r+0xf8>
 800a44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a452:	b21b      	sxth	r3, r3
 800a454:	e01b      	b.n	800a48e <__sflush_r+0xf2>
 800a456:	690f      	ldr	r7, [r1, #16]
 800a458:	2f00      	cmp	r7, #0
 800a45a:	d0f6      	beq.n	800a44a <__sflush_r+0xae>
 800a45c:	0793      	lsls	r3, r2, #30
 800a45e:	680e      	ldr	r6, [r1, #0]
 800a460:	bf08      	it	eq
 800a462:	694b      	ldreq	r3, [r1, #20]
 800a464:	600f      	str	r7, [r1, #0]
 800a466:	bf18      	it	ne
 800a468:	2300      	movne	r3, #0
 800a46a:	eba6 0807 	sub.w	r8, r6, r7
 800a46e:	608b      	str	r3, [r1, #8]
 800a470:	f1b8 0f00 	cmp.w	r8, #0
 800a474:	dde9      	ble.n	800a44a <__sflush_r+0xae>
 800a476:	6a21      	ldr	r1, [r4, #32]
 800a478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a47a:	4643      	mov	r3, r8
 800a47c:	463a      	mov	r2, r7
 800a47e:	4628      	mov	r0, r5
 800a480:	47b0      	blx	r6
 800a482:	2800      	cmp	r0, #0
 800a484:	dc08      	bgt.n	800a498 <__sflush_r+0xfc>
 800a486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a498:	4407      	add	r7, r0
 800a49a:	eba8 0800 	sub.w	r8, r8, r0
 800a49e:	e7e7      	b.n	800a470 <__sflush_r+0xd4>
 800a4a0:	dfbffffe 	.word	0xdfbffffe

0800a4a4 <_fflush_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	690b      	ldr	r3, [r1, #16]
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	b913      	cbnz	r3, 800a4b4 <_fflush_r+0x10>
 800a4ae:	2500      	movs	r5, #0
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	b118      	cbz	r0, 800a4be <_fflush_r+0x1a>
 800a4b6:	6a03      	ldr	r3, [r0, #32]
 800a4b8:	b90b      	cbnz	r3, 800a4be <_fflush_r+0x1a>
 800a4ba:	f7fe f999 	bl	80087f0 <__sinit>
 800a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0f3      	beq.n	800a4ae <_fflush_r+0xa>
 800a4c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4c8:	07d0      	lsls	r0, r2, #31
 800a4ca:	d404      	bmi.n	800a4d6 <_fflush_r+0x32>
 800a4cc:	0599      	lsls	r1, r3, #22
 800a4ce:	d402      	bmi.n	800a4d6 <_fflush_r+0x32>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4d2:	f7fe fb38 	bl	8008b46 <__retarget_lock_acquire_recursive>
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	4621      	mov	r1, r4
 800a4da:	f7ff ff5f 	bl	800a39c <__sflush_r>
 800a4de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4e0:	07da      	lsls	r2, r3, #31
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	d4e4      	bmi.n	800a4b0 <_fflush_r+0xc>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	059b      	lsls	r3, r3, #22
 800a4ea:	d4e1      	bmi.n	800a4b0 <_fflush_r+0xc>
 800a4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ee:	f7fe fb2b 	bl	8008b48 <__retarget_lock_release_recursive>
 800a4f2:	e7dd      	b.n	800a4b0 <_fflush_r+0xc>

0800a4f4 <__swhatbuf_r>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	b096      	sub	sp, #88	@ 0x58
 800a500:	4615      	mov	r5, r2
 800a502:	461e      	mov	r6, r3
 800a504:	da0d      	bge.n	800a522 <__swhatbuf_r+0x2e>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a50c:	f04f 0100 	mov.w	r1, #0
 800a510:	bf14      	ite	ne
 800a512:	2340      	movne	r3, #64	@ 0x40
 800a514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a518:	2000      	movs	r0, #0
 800a51a:	6031      	str	r1, [r6, #0]
 800a51c:	602b      	str	r3, [r5, #0]
 800a51e:	b016      	add	sp, #88	@ 0x58
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	466a      	mov	r2, sp
 800a524:	f000 f862 	bl	800a5ec <_fstat_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	dbec      	blt.n	800a506 <__swhatbuf_r+0x12>
 800a52c:	9901      	ldr	r1, [sp, #4]
 800a52e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a536:	4259      	negs	r1, r3
 800a538:	4159      	adcs	r1, r3
 800a53a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a53e:	e7eb      	b.n	800a518 <__swhatbuf_r+0x24>

0800a540 <__smakebuf_r>:
 800a540:	898b      	ldrh	r3, [r1, #12]
 800a542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a544:	079d      	lsls	r5, r3, #30
 800a546:	4606      	mov	r6, r0
 800a548:	460c      	mov	r4, r1
 800a54a:	d507      	bpl.n	800a55c <__smakebuf_r+0x1c>
 800a54c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	6123      	str	r3, [r4, #16]
 800a554:	2301      	movs	r3, #1
 800a556:	6163      	str	r3, [r4, #20]
 800a558:	b003      	add	sp, #12
 800a55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55c:	ab01      	add	r3, sp, #4
 800a55e:	466a      	mov	r2, sp
 800a560:	f7ff ffc8 	bl	800a4f4 <__swhatbuf_r>
 800a564:	9f00      	ldr	r7, [sp, #0]
 800a566:	4605      	mov	r5, r0
 800a568:	4639      	mov	r1, r7
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff f9b0 	bl	80098d0 <_malloc_r>
 800a570:	b948      	cbnz	r0, 800a586 <__smakebuf_r+0x46>
 800a572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a576:	059a      	lsls	r2, r3, #22
 800a578:	d4ee      	bmi.n	800a558 <__smakebuf_r+0x18>
 800a57a:	f023 0303 	bic.w	r3, r3, #3
 800a57e:	f043 0302 	orr.w	r3, r3, #2
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	e7e2      	b.n	800a54c <__smakebuf_r+0xc>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	6020      	str	r0, [r4, #0]
 800a58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a58e:	81a3      	strh	r3, [r4, #12]
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a596:	b15b      	cbz	r3, 800a5b0 <__smakebuf_r+0x70>
 800a598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f837 	bl	800a610 <_isatty_r>
 800a5a2:	b128      	cbz	r0, 800a5b0 <__smakebuf_r+0x70>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	431d      	orrs	r5, r3
 800a5b4:	81a5      	strh	r5, [r4, #12]
 800a5b6:	e7cf      	b.n	800a558 <__smakebuf_r+0x18>

0800a5b8 <memmove>:
 800a5b8:	4288      	cmp	r0, r1
 800a5ba:	b510      	push	{r4, lr}
 800a5bc:	eb01 0402 	add.w	r4, r1, r2
 800a5c0:	d902      	bls.n	800a5c8 <memmove+0x10>
 800a5c2:	4284      	cmp	r4, r0
 800a5c4:	4623      	mov	r3, r4
 800a5c6:	d807      	bhi.n	800a5d8 <memmove+0x20>
 800a5c8:	1e43      	subs	r3, r0, #1
 800a5ca:	42a1      	cmp	r1, r4
 800a5cc:	d008      	beq.n	800a5e0 <memmove+0x28>
 800a5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5d6:	e7f8      	b.n	800a5ca <memmove+0x12>
 800a5d8:	4402      	add	r2, r0
 800a5da:	4601      	mov	r1, r0
 800a5dc:	428a      	cmp	r2, r1
 800a5de:	d100      	bne.n	800a5e2 <memmove+0x2a>
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ea:	e7f7      	b.n	800a5dc <memmove+0x24>

0800a5ec <_fstat_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	@ (800a60c <_fstat_r+0x20>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	f7f7 fd7d 	bl	80020f8 <_fstat>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d102      	bne.n	800a608 <_fstat_r+0x1c>
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	b103      	cbz	r3, 800a608 <_fstat_r+0x1c>
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	200049c0 	.word	0x200049c0

0800a610 <_isatty_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d06      	ldr	r5, [pc, #24]	@ (800a62c <_isatty_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f7 fd7c 	bl	8002118 <_isatty>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_isatty_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_isatty_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	200049c0 	.word	0x200049c0

0800a630 <_sbrk_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	@ (800a64c <_sbrk_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f7 fd84 	bl	8002148 <_sbrk>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_sbrk_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_sbrk_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	200049c0 	.word	0x200049c0

0800a650 <memcpy>:
 800a650:	440a      	add	r2, r1
 800a652:	4291      	cmp	r1, r2
 800a654:	f100 33ff 	add.w	r3, r0, #4294967295
 800a658:	d100      	bne.n	800a65c <memcpy+0xc>
 800a65a:	4770      	bx	lr
 800a65c:	b510      	push	{r4, lr}
 800a65e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a662:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a666:	4291      	cmp	r1, r2
 800a668:	d1f9      	bne.n	800a65e <memcpy+0xe>
 800a66a:	bd10      	pop	{r4, pc}

0800a66c <__assert_func>:
 800a66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a66e:	4614      	mov	r4, r2
 800a670:	461a      	mov	r2, r3
 800a672:	4b09      	ldr	r3, [pc, #36]	@ (800a698 <__assert_func+0x2c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4605      	mov	r5, r0
 800a678:	68d8      	ldr	r0, [r3, #12]
 800a67a:	b954      	cbnz	r4, 800a692 <__assert_func+0x26>
 800a67c:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <__assert_func+0x30>)
 800a67e:	461c      	mov	r4, r3
 800a680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a684:	9100      	str	r1, [sp, #0]
 800a686:	462b      	mov	r3, r5
 800a688:	4905      	ldr	r1, [pc, #20]	@ (800a6a0 <__assert_func+0x34>)
 800a68a:	f000 f86f 	bl	800a76c <fiprintf>
 800a68e:	f000 f87f 	bl	800a790 <abort>
 800a692:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <__assert_func+0x38>)
 800a694:	e7f4      	b.n	800a680 <__assert_func+0x14>
 800a696:	bf00      	nop
 800a698:	20000018 	.word	0x20000018
 800a69c:	0800adde 	.word	0x0800adde
 800a6a0:	0800adb0 	.word	0x0800adb0
 800a6a4:	0800ada3 	.word	0x0800ada3

0800a6a8 <_calloc_r>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	fba1 5402 	umull	r5, r4, r1, r2
 800a6ae:	b93c      	cbnz	r4, 800a6c0 <_calloc_r+0x18>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	f7ff f90d 	bl	80098d0 <_malloc_r>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	b928      	cbnz	r0, 800a6c6 <_calloc_r+0x1e>
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	4630      	mov	r0, r6
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	220c      	movs	r2, #12
 800a6c2:	6002      	str	r2, [r0, #0]
 800a6c4:	e7f9      	b.n	800a6ba <_calloc_r+0x12>
 800a6c6:	462a      	mov	r2, r5
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f7fe f9bf 	bl	8008a4c <memset>
 800a6ce:	e7f5      	b.n	800a6bc <_calloc_r+0x14>

0800a6d0 <__ascii_mbtowc>:
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	b901      	cbnz	r1, 800a6d6 <__ascii_mbtowc+0x6>
 800a6d4:	a901      	add	r1, sp, #4
 800a6d6:	b142      	cbz	r2, 800a6ea <__ascii_mbtowc+0x1a>
 800a6d8:	b14b      	cbz	r3, 800a6ee <__ascii_mbtowc+0x1e>
 800a6da:	7813      	ldrb	r3, [r2, #0]
 800a6dc:	600b      	str	r3, [r1, #0]
 800a6de:	7812      	ldrb	r2, [r2, #0]
 800a6e0:	1e10      	subs	r0, r2, #0
 800a6e2:	bf18      	it	ne
 800a6e4:	2001      	movne	r0, #1
 800a6e6:	b002      	add	sp, #8
 800a6e8:	4770      	bx	lr
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	e7fb      	b.n	800a6e6 <__ascii_mbtowc+0x16>
 800a6ee:	f06f 0001 	mvn.w	r0, #1
 800a6f2:	e7f8      	b.n	800a6e6 <__ascii_mbtowc+0x16>

0800a6f4 <_realloc_r>:
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	b921      	cbnz	r1, 800a70a <_realloc_r+0x16>
 800a700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a704:	4611      	mov	r1, r2
 800a706:	f7ff b8e3 	b.w	80098d0 <_malloc_r>
 800a70a:	b92a      	cbnz	r2, 800a718 <_realloc_r+0x24>
 800a70c:	f7ff f86c 	bl	80097e8 <_free_r>
 800a710:	2400      	movs	r4, #0
 800a712:	4620      	mov	r0, r4
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	f000 f841 	bl	800a79e <_malloc_usable_size_r>
 800a71c:	4285      	cmp	r5, r0
 800a71e:	4606      	mov	r6, r0
 800a720:	d802      	bhi.n	800a728 <_realloc_r+0x34>
 800a722:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a726:	d8f4      	bhi.n	800a712 <_realloc_r+0x1e>
 800a728:	4629      	mov	r1, r5
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7ff f8d0 	bl	80098d0 <_malloc_r>
 800a730:	4607      	mov	r7, r0
 800a732:	2800      	cmp	r0, #0
 800a734:	d0ec      	beq.n	800a710 <_realloc_r+0x1c>
 800a736:	42b5      	cmp	r5, r6
 800a738:	462a      	mov	r2, r5
 800a73a:	4621      	mov	r1, r4
 800a73c:	bf28      	it	cs
 800a73e:	4632      	movcs	r2, r6
 800a740:	f7ff ff86 	bl	800a650 <memcpy>
 800a744:	4621      	mov	r1, r4
 800a746:	4640      	mov	r0, r8
 800a748:	f7ff f84e 	bl	80097e8 <_free_r>
 800a74c:	463c      	mov	r4, r7
 800a74e:	e7e0      	b.n	800a712 <_realloc_r+0x1e>

0800a750 <__ascii_wctomb>:
 800a750:	4603      	mov	r3, r0
 800a752:	4608      	mov	r0, r1
 800a754:	b141      	cbz	r1, 800a768 <__ascii_wctomb+0x18>
 800a756:	2aff      	cmp	r2, #255	@ 0xff
 800a758:	d904      	bls.n	800a764 <__ascii_wctomb+0x14>
 800a75a:	228a      	movs	r2, #138	@ 0x8a
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	f04f 30ff 	mov.w	r0, #4294967295
 800a762:	4770      	bx	lr
 800a764:	700a      	strb	r2, [r1, #0]
 800a766:	2001      	movs	r0, #1
 800a768:	4770      	bx	lr
	...

0800a76c <fiprintf>:
 800a76c:	b40e      	push	{r1, r2, r3}
 800a76e:	b503      	push	{r0, r1, lr}
 800a770:	4601      	mov	r1, r0
 800a772:	ab03      	add	r3, sp, #12
 800a774:	4805      	ldr	r0, [pc, #20]	@ (800a78c <fiprintf+0x20>)
 800a776:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77a:	6800      	ldr	r0, [r0, #0]
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	f000 f83f 	bl	800a800 <_vfiprintf_r>
 800a782:	b002      	add	sp, #8
 800a784:	f85d eb04 	ldr.w	lr, [sp], #4
 800a788:	b003      	add	sp, #12
 800a78a:	4770      	bx	lr
 800a78c:	20000018 	.word	0x20000018

0800a790 <abort>:
 800a790:	b508      	push	{r3, lr}
 800a792:	2006      	movs	r0, #6
 800a794:	f000 f974 	bl	800aa80 <raise>
 800a798:	2001      	movs	r0, #1
 800a79a:	f7f7 fc5d 	bl	8002058 <_exit>

0800a79e <_malloc_usable_size_r>:
 800a79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a2:	1f18      	subs	r0, r3, #4
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfbc      	itt	lt
 800a7a8:	580b      	ldrlt	r3, [r1, r0]
 800a7aa:	18c0      	addlt	r0, r0, r3
 800a7ac:	4770      	bx	lr

0800a7ae <__sfputc_r>:
 800a7ae:	6893      	ldr	r3, [r2, #8]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	b410      	push	{r4}
 800a7b6:	6093      	str	r3, [r2, #8]
 800a7b8:	da08      	bge.n	800a7cc <__sfputc_r+0x1e>
 800a7ba:	6994      	ldr	r4, [r2, #24]
 800a7bc:	42a3      	cmp	r3, r4
 800a7be:	db01      	blt.n	800a7c4 <__sfputc_r+0x16>
 800a7c0:	290a      	cmp	r1, #10
 800a7c2:	d103      	bne.n	800a7cc <__sfputc_r+0x1e>
 800a7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7c8:	f7fe b8ab 	b.w	8008922 <__swbuf_r>
 800a7cc:	6813      	ldr	r3, [r2, #0]
 800a7ce:	1c58      	adds	r0, r3, #1
 800a7d0:	6010      	str	r0, [r2, #0]
 800a7d2:	7019      	strb	r1, [r3, #0]
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <__sfputs_r>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	18d5      	adds	r5, r2, r3
 800a7e6:	42ac      	cmp	r4, r5
 800a7e8:	d101      	bne.n	800a7ee <__sfputs_r+0x12>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e007      	b.n	800a7fe <__sfputs_r+0x22>
 800a7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff ffda 	bl	800a7ae <__sfputc_r>
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d1f3      	bne.n	800a7e6 <__sfputs_r+0xa>
 800a7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a800 <_vfiprintf_r>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	460d      	mov	r5, r1
 800a806:	b09d      	sub	sp, #116	@ 0x74
 800a808:	4614      	mov	r4, r2
 800a80a:	4698      	mov	r8, r3
 800a80c:	4606      	mov	r6, r0
 800a80e:	b118      	cbz	r0, 800a818 <_vfiprintf_r+0x18>
 800a810:	6a03      	ldr	r3, [r0, #32]
 800a812:	b90b      	cbnz	r3, 800a818 <_vfiprintf_r+0x18>
 800a814:	f7fd ffec 	bl	80087f0 <__sinit>
 800a818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a81a:	07d9      	lsls	r1, r3, #31
 800a81c:	d405      	bmi.n	800a82a <_vfiprintf_r+0x2a>
 800a81e:	89ab      	ldrh	r3, [r5, #12]
 800a820:	059a      	lsls	r2, r3, #22
 800a822:	d402      	bmi.n	800a82a <_vfiprintf_r+0x2a>
 800a824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a826:	f7fe f98e 	bl	8008b46 <__retarget_lock_acquire_recursive>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	071b      	lsls	r3, r3, #28
 800a82e:	d501      	bpl.n	800a834 <_vfiprintf_r+0x34>
 800a830:	692b      	ldr	r3, [r5, #16]
 800a832:	b99b      	cbnz	r3, 800a85c <_vfiprintf_r+0x5c>
 800a834:	4629      	mov	r1, r5
 800a836:	4630      	mov	r0, r6
 800a838:	f7fe f8b2 	bl	80089a0 <__swsetup_r>
 800a83c:	b170      	cbz	r0, 800a85c <_vfiprintf_r+0x5c>
 800a83e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a840:	07dc      	lsls	r4, r3, #31
 800a842:	d504      	bpl.n	800a84e <_vfiprintf_r+0x4e>
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	b01d      	add	sp, #116	@ 0x74
 800a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84e:	89ab      	ldrh	r3, [r5, #12]
 800a850:	0598      	lsls	r0, r3, #22
 800a852:	d4f7      	bmi.n	800a844 <_vfiprintf_r+0x44>
 800a854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a856:	f7fe f977 	bl	8008b48 <__retarget_lock_release_recursive>
 800a85a:	e7f3      	b.n	800a844 <_vfiprintf_r+0x44>
 800a85c:	2300      	movs	r3, #0
 800a85e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a860:	2320      	movs	r3, #32
 800a862:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a866:	f8cd 800c 	str.w	r8, [sp, #12]
 800a86a:	2330      	movs	r3, #48	@ 0x30
 800a86c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa1c <_vfiprintf_r+0x21c>
 800a870:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a874:	f04f 0901 	mov.w	r9, #1
 800a878:	4623      	mov	r3, r4
 800a87a:	469a      	mov	sl, r3
 800a87c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a880:	b10a      	cbz	r2, 800a886 <_vfiprintf_r+0x86>
 800a882:	2a25      	cmp	r2, #37	@ 0x25
 800a884:	d1f9      	bne.n	800a87a <_vfiprintf_r+0x7a>
 800a886:	ebba 0b04 	subs.w	fp, sl, r4
 800a88a:	d00b      	beq.n	800a8a4 <_vfiprintf_r+0xa4>
 800a88c:	465b      	mov	r3, fp
 800a88e:	4622      	mov	r2, r4
 800a890:	4629      	mov	r1, r5
 800a892:	4630      	mov	r0, r6
 800a894:	f7ff ffa2 	bl	800a7dc <__sfputs_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	f000 80a7 	beq.w	800a9ec <_vfiprintf_r+0x1ec>
 800a89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8a0:	445a      	add	r2, fp
 800a8a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 809f 	beq.w	800a9ec <_vfiprintf_r+0x1ec>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b8:	f10a 0a01 	add.w	sl, sl, #1
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	9307      	str	r3, [sp, #28]
 800a8c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8c6:	4654      	mov	r4, sl
 800a8c8:	2205      	movs	r2, #5
 800a8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ce:	4853      	ldr	r0, [pc, #332]	@ (800aa1c <_vfiprintf_r+0x21c>)
 800a8d0:	f7f5 fc96 	bl	8000200 <memchr>
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	b9d8      	cbnz	r0, 800a910 <_vfiprintf_r+0x110>
 800a8d8:	06d1      	lsls	r1, r2, #27
 800a8da:	bf44      	itt	mi
 800a8dc:	2320      	movmi	r3, #32
 800a8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8e2:	0713      	lsls	r3, r2, #28
 800a8e4:	bf44      	itt	mi
 800a8e6:	232b      	movmi	r3, #43	@ 0x2b
 800a8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8f2:	d015      	beq.n	800a920 <_vfiprintf_r+0x120>
 800a8f4:	9a07      	ldr	r2, [sp, #28]
 800a8f6:	4654      	mov	r4, sl
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4621      	mov	r1, r4
 800a900:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a904:	3b30      	subs	r3, #48	@ 0x30
 800a906:	2b09      	cmp	r3, #9
 800a908:	d94b      	bls.n	800a9a2 <_vfiprintf_r+0x1a2>
 800a90a:	b1b0      	cbz	r0, 800a93a <_vfiprintf_r+0x13a>
 800a90c:	9207      	str	r2, [sp, #28]
 800a90e:	e014      	b.n	800a93a <_vfiprintf_r+0x13a>
 800a910:	eba0 0308 	sub.w	r3, r0, r8
 800a914:	fa09 f303 	lsl.w	r3, r9, r3
 800a918:	4313      	orrs	r3, r2
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	46a2      	mov	sl, r4
 800a91e:	e7d2      	b.n	800a8c6 <_vfiprintf_r+0xc6>
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	1d19      	adds	r1, r3, #4
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	9103      	str	r1, [sp, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfbb      	ittet	lt
 800a92c:	425b      	neglt	r3, r3
 800a92e:	f042 0202 	orrlt.w	r2, r2, #2
 800a932:	9307      	strge	r3, [sp, #28]
 800a934:	9307      	strlt	r3, [sp, #28]
 800a936:	bfb8      	it	lt
 800a938:	9204      	strlt	r2, [sp, #16]
 800a93a:	7823      	ldrb	r3, [r4, #0]
 800a93c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a93e:	d10a      	bne.n	800a956 <_vfiprintf_r+0x156>
 800a940:	7863      	ldrb	r3, [r4, #1]
 800a942:	2b2a      	cmp	r3, #42	@ 0x2a
 800a944:	d132      	bne.n	800a9ac <_vfiprintf_r+0x1ac>
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	1d1a      	adds	r2, r3, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	9203      	str	r2, [sp, #12]
 800a94e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a952:	3402      	adds	r4, #2
 800a954:	9305      	str	r3, [sp, #20]
 800a956:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa2c <_vfiprintf_r+0x22c>
 800a95a:	7821      	ldrb	r1, [r4, #0]
 800a95c:	2203      	movs	r2, #3
 800a95e:	4650      	mov	r0, sl
 800a960:	f7f5 fc4e 	bl	8000200 <memchr>
 800a964:	b138      	cbz	r0, 800a976 <_vfiprintf_r+0x176>
 800a966:	9b04      	ldr	r3, [sp, #16]
 800a968:	eba0 000a 	sub.w	r0, r0, sl
 800a96c:	2240      	movs	r2, #64	@ 0x40
 800a96e:	4082      	lsls	r2, r0
 800a970:	4313      	orrs	r3, r2
 800a972:	3401      	adds	r4, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97a:	4829      	ldr	r0, [pc, #164]	@ (800aa20 <_vfiprintf_r+0x220>)
 800a97c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a980:	2206      	movs	r2, #6
 800a982:	f7f5 fc3d 	bl	8000200 <memchr>
 800a986:	2800      	cmp	r0, #0
 800a988:	d03f      	beq.n	800aa0a <_vfiprintf_r+0x20a>
 800a98a:	4b26      	ldr	r3, [pc, #152]	@ (800aa24 <_vfiprintf_r+0x224>)
 800a98c:	bb1b      	cbnz	r3, 800a9d6 <_vfiprintf_r+0x1d6>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	3307      	adds	r3, #7
 800a992:	f023 0307 	bic.w	r3, r3, #7
 800a996:	3308      	adds	r3, #8
 800a998:	9303      	str	r3, [sp, #12]
 800a99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99c:	443b      	add	r3, r7
 800a99e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a0:	e76a      	b.n	800a878 <_vfiprintf_r+0x78>
 800a9a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	e7a8      	b.n	800a8fe <_vfiprintf_r+0xfe>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	3401      	adds	r4, #1
 800a9b0:	9305      	str	r3, [sp, #20]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	f04f 0c0a 	mov.w	ip, #10
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9be:	3a30      	subs	r2, #48	@ 0x30
 800a9c0:	2a09      	cmp	r2, #9
 800a9c2:	d903      	bls.n	800a9cc <_vfiprintf_r+0x1cc>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0c6      	beq.n	800a956 <_vfiprintf_r+0x156>
 800a9c8:	9105      	str	r1, [sp, #20]
 800a9ca:	e7c4      	b.n	800a956 <_vfiprintf_r+0x156>
 800a9cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e7f0      	b.n	800a9b8 <_vfiprintf_r+0x1b8>
 800a9d6:	ab03      	add	r3, sp, #12
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	462a      	mov	r2, r5
 800a9dc:	4b12      	ldr	r3, [pc, #72]	@ (800aa28 <_vfiprintf_r+0x228>)
 800a9de:	a904      	add	r1, sp, #16
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f7fd fac1 	bl	8007f68 <_printf_float>
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	1c78      	adds	r0, r7, #1
 800a9ea:	d1d6      	bne.n	800a99a <_vfiprintf_r+0x19a>
 800a9ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x1fe>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	059a      	lsls	r2, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x1fe>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fa:	f7fe f8a5 	bl	8008b48 <__retarget_lock_release_recursive>
 800a9fe:	89ab      	ldrh	r3, [r5, #12]
 800aa00:	065b      	lsls	r3, r3, #25
 800aa02:	f53f af1f 	bmi.w	800a844 <_vfiprintf_r+0x44>
 800aa06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa08:	e71e      	b.n	800a848 <_vfiprintf_r+0x48>
 800aa0a:	ab03      	add	r3, sp, #12
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	462a      	mov	r2, r5
 800aa10:	4b05      	ldr	r3, [pc, #20]	@ (800aa28 <_vfiprintf_r+0x228>)
 800aa12:	a904      	add	r1, sp, #16
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7fd fd3f 	bl	8008498 <_printf_i>
 800aa1a:	e7e4      	b.n	800a9e6 <_vfiprintf_r+0x1e6>
 800aa1c:	0800ad88 	.word	0x0800ad88
 800aa20:	0800ad92 	.word	0x0800ad92
 800aa24:	08007f69 	.word	0x08007f69
 800aa28:	0800a7dd 	.word	0x0800a7dd
 800aa2c:	0800ad8e 	.word	0x0800ad8e

0800aa30 <_raise_r>:
 800aa30:	291f      	cmp	r1, #31
 800aa32:	b538      	push	{r3, r4, r5, lr}
 800aa34:	4605      	mov	r5, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	d904      	bls.n	800aa44 <_raise_r+0x14>
 800aa3a:	2316      	movs	r3, #22
 800aa3c:	6003      	str	r3, [r0, #0]
 800aa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa46:	b112      	cbz	r2, 800aa4e <_raise_r+0x1e>
 800aa48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa4c:	b94b      	cbnz	r3, 800aa62 <_raise_r+0x32>
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f830 	bl	800aab4 <_getpid_r>
 800aa54:	4622      	mov	r2, r4
 800aa56:	4601      	mov	r1, r0
 800aa58:	4628      	mov	r0, r5
 800aa5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa5e:	f000 b817 	b.w	800aa90 <_kill_r>
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d00a      	beq.n	800aa7c <_raise_r+0x4c>
 800aa66:	1c59      	adds	r1, r3, #1
 800aa68:	d103      	bne.n	800aa72 <_raise_r+0x42>
 800aa6a:	2316      	movs	r3, #22
 800aa6c:	6003      	str	r3, [r0, #0]
 800aa6e:	2001      	movs	r0, #1
 800aa70:	e7e7      	b.n	800aa42 <_raise_r+0x12>
 800aa72:	2100      	movs	r1, #0
 800aa74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4798      	blx	r3
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e7e0      	b.n	800aa42 <_raise_r+0x12>

0800aa80 <raise>:
 800aa80:	4b02      	ldr	r3, [pc, #8]	@ (800aa8c <raise+0xc>)
 800aa82:	4601      	mov	r1, r0
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	f7ff bfd3 	b.w	800aa30 <_raise_r>
 800aa8a:	bf00      	nop
 800aa8c:	20000018 	.word	0x20000018

0800aa90 <_kill_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d07      	ldr	r5, [pc, #28]	@ (800aab0 <_kill_r+0x20>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	f7f7 facb 	bl	8002038 <_kill>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	d102      	bne.n	800aaac <_kill_r+0x1c>
 800aaa6:	682b      	ldr	r3, [r5, #0]
 800aaa8:	b103      	cbz	r3, 800aaac <_kill_r+0x1c>
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	bd38      	pop	{r3, r4, r5, pc}
 800aaae:	bf00      	nop
 800aab0:	200049c0 	.word	0x200049c0

0800aab4 <_getpid_r>:
 800aab4:	f7f7 bab8 	b.w	8002028 <_getpid>

0800aab8 <_init>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr

0800aac4 <_fini>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr
